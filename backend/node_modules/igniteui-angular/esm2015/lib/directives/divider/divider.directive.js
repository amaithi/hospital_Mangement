import { __decorate } from "tslib";
import { Directive, HostBinding, NgModule, Input } from '@angular/core';
export var IgxDividerType;
(function (IgxDividerType) {
    IgxDividerType["SOLID"] = "solid";
    IgxDividerType["DASHED"] = "dashed";
})(IgxDividerType || (IgxDividerType = {}));
let NEXT_ID = 0;
let IgxDividerDirective = class IgxDividerDirective {
    constructor() {
        /**
         * Sets/gets the `id` of the divider.
         * If not set, `id` will have value `"igx-divider-0"`;
         * ```html
         * <igx-divider id="my-divider"></igx-divider>
         * ```
         * ```typescript
         * let dividerId =  this.divider.id;
         * ```
         */
        this.id = `igx-divider-${NEXT_ID++}`;
        /**
         * An @Input property that sets the value of the `inset` attribute.
         * If not provided it will be set to `'0'`.
         * ```html
         * <igx-divider inset="16px"></igx-divider>
         * ```
         */
        this._inset = '0';
        /**
         * An @Input property that sets the value of `role` attribute.
         * If not the default value of `separator` will be used.
         */
        this.role = 'separator';
        /**
         * Sets the type of the divider. The default value
         * is `default`. The divider can also be `dashed`;
         * ```html
         * <igx-divider type="dashed"></igx-divider>
         * ```
         */
        this.type = IgxDividerType.SOLID;
        /**
         * An @Input that sets the `middle` attribute of the divider.
         * If set to `true` and an `inset` value has been provided,
         * the divider will start shrinking from both ends.
         * ```html
         * <igx-divider [middle]="true"></igx-divider>
         * ```
         */
        this.middle = false;
        /**
         * An @Input that sets the vertical attribute of the divider.
         * ```html
         * <igx-divider [vertical]="true"></igx-divider>
         * ```
         */
        this.vertical = false;
    }
    get isDashed() {
        return this.type === IgxDividerType.DASHED;
    }
    /**
     * A getter that returns `true` if the type of the divider is `default`;
     * ```typescript
     * const isDefault = this.divider.isDefault;
     * ```
     */
    get isSolid() {
        return this.type === IgxDividerType.SOLID;
    }
    /**
     * Sets the inset of the divider from the side(s).
     * If the divider attribute `middle` is set to `true`,
     * it will inset the divider on both sides.
     * ```typescript
     * this.divider.inset = '32px';
     * ```
     */
    set inset(value) {
        this._inset = value;
    }
    /**
     * Gets the current divider inset in terms of
     * margin representation as applied to the divider.
     * ```typescript
     * const inset = this.divider.inset;
     * ```
     */
    get inset() {
        const baseMargin = '0';
        if (this.middle) {
            if (this.vertical) {
                return `${this._inset} ${baseMargin}`;
            }
            return `${baseMargin} ${this._inset}`;
        }
        else {
            if (this.vertical) {
                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;
            }
            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;
        }
    }
};
__decorate([
    HostBinding('attr.id'),
    Input()
], IgxDividerDirective.prototype, "id", void 0);
__decorate([
    Input('inset')
], IgxDividerDirective.prototype, "_inset", void 0);
__decorate([
    HostBinding('attr.role'),
    Input()
], IgxDividerDirective.prototype, "role", void 0);
__decorate([
    HostBinding('class.igx-divider'),
    Input()
], IgxDividerDirective.prototype, "type", void 0);
__decorate([
    HostBinding('class.igx-divider--dashed')
], IgxDividerDirective.prototype, "isDashed", null);
__decorate([
    HostBinding('class.igx-divider--inset'),
    Input()
], IgxDividerDirective.prototype, "middle", void 0);
__decorate([
    HostBinding('class.igx-divider--vertical'),
    Input()
], IgxDividerDirective.prototype, "vertical", void 0);
__decorate([
    HostBinding('style.margin')
], IgxDividerDirective.prototype, "inset", null);
IgxDividerDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: 'igx-divider'
    })
], IgxDividerDirective);
export { IgxDividerDirective };
let IgxDividerModule = class IgxDividerModule {
};
IgxDividerModule = __decorate([
    NgModule({
        declarations: [IgxDividerDirective],
        exports: [IgxDividerDirective]
    })
], IgxDividerModule);
export { IgxDividerModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGl2aWRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZGl2aWRlci9kaXZpZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RSxNQUFNLENBQU4sSUFBWSxjQUdYO0FBSEQsV0FBWSxjQUFjO0lBQ3RCLGlDQUFlLENBQUE7SUFDZixtQ0FBaUIsQ0FBQTtBQUNyQixDQUFDLEVBSFcsY0FBYyxLQUFkLGNBQWMsUUFHekI7QUFFRCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFNaEIsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFBaEM7UUFDSTs7Ozs7Ozs7O1dBU0c7UUFHSSxPQUFFLEdBQUcsZUFBZSxPQUFPLEVBQUUsRUFBRSxDQUFDO1FBR3ZDOzs7Ozs7V0FNRztRQUVLLFdBQU0sR0FBRyxHQUFHLENBQUM7UUFFckI7OztXQUdHO1FBR0ksU0FBSSxHQUFHLFdBQVcsQ0FBQztRQUUxQjs7Ozs7O1dBTUc7UUFHSSxTQUFJLEdBQTRCLGNBQWMsQ0FBQyxLQUFLLENBQUM7UUFPNUQ7Ozs7Ozs7V0FPRztRQUdJLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFZdEI7Ozs7O1dBS0c7UUFHSSxhQUFRLEdBQUcsS0FBSyxDQUFDO0lBcUM1QixDQUFDO0lBdkVHLElBQUksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsTUFBTSxDQUFDO0lBQy9DLENBQUM7SUFjRDs7Ozs7T0FLRztJQUNILElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsS0FBSyxDQUFDO0lBQzlDLENBQUM7SUFZRDs7Ozs7OztPQU9HO0lBRUgsSUFBSSxLQUFLLENBQUMsS0FBYTtRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBSSxLQUFLO1FBQ0wsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDO1FBRXZCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDZixPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxVQUFVLEVBQUUsQ0FBQzthQUN6QztZQUNELE9BQU8sR0FBRyxVQUFVLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3pDO2FBQU07WUFDSCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2YsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksVUFBVSxNQUFNLFVBQVUsRUFBRSxDQUFDO2FBQ3pEO1lBQ0QsT0FBTyxHQUFHLFVBQVUsTUFBTSxVQUFVLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3pEO0lBQ0wsQ0FBQztDQUNKLENBQUE7QUF4R0c7SUFGQyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQ3RCLEtBQUssRUFBRTsrQ0FDK0I7QUFXdkM7SUFEQyxLQUFLLENBQUMsT0FBTyxDQUFDO21EQUNNO0FBUXJCO0lBRkMsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUN4QixLQUFLLEVBQUU7aURBQ2tCO0FBVzFCO0lBRkMsV0FBVyxDQUFDLG1CQUFtQixDQUFDO0lBQ2hDLEtBQUssRUFBRTtpREFDb0Q7QUFHNUQ7SUFEQyxXQUFXLENBQUMsMkJBQTJCLENBQUM7bURBR3hDO0FBWUQ7SUFGQyxXQUFXLENBQUMsMEJBQTBCLENBQUM7SUFDdkMsS0FBSyxFQUFFO21EQUNjO0FBb0J0QjtJQUZDLFdBQVcsQ0FBQyw2QkFBNkIsQ0FBQztJQUMxQyxLQUFLLEVBQUU7cURBQ2dCO0FBV3hCO0lBREMsV0FBVyxDQUFDLGNBQWMsQ0FBQztnREFHM0I7QUE3RlEsbUJBQW1CO0lBSi9CLFNBQVMsQ0FBQztRQUNQLDhDQUE4QztRQUM5QyxRQUFRLEVBQUUsYUFBYTtLQUMxQixDQUFDO0dBQ1csbUJBQW1CLENBcUgvQjtTQXJIWSxtQkFBbUI7QUEySGhDLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0NBQUksQ0FBQTtBQUFwQixnQkFBZ0I7SUFKNUIsUUFBUSxDQUFDO1FBQ04sWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUM7UUFDbkMsT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUM7S0FDakMsQ0FBQztHQUNXLGdCQUFnQixDQUFJO1NBQXBCLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIE5nTW9kdWxlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgZW51bSBJZ3hEaXZpZGVyVHlwZSB7XG4gICAgU09MSUQgPSAnc29saWQnLFxuICAgIERBU0hFRCA9ICdkYXNoZWQnXG59XG5cbmxldCBORVhUX0lEID0gMDtcblxuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnaWd4LWRpdmlkZXInXG59KVxuZXhwb3J0IGNsYXNzIElneERpdmlkZXJEaXJlY3RpdmUge1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgYGlkYCBvZiB0aGUgZGl2aWRlci5cbiAgICAgKiBJZiBub3Qgc2V0LCBgaWRgIHdpbGwgaGF2ZSB2YWx1ZSBgXCJpZ3gtZGl2aWRlci0wXCJgO1xuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRpdmlkZXIgaWQ9XCJteS1kaXZpZGVyXCI+PC9pZ3gtZGl2aWRlcj5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGRpdmlkZXJJZCA9ICB0aGlzLmRpdmlkZXIuaWQ7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmlkJylcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpZCA9IGBpZ3gtZGl2aWRlci0ke05FWFRfSUQrK31gO1xuXG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYGluc2V0YCBhdHRyaWJ1dGUuXG4gICAgICogSWYgbm90IHByb3ZpZGVkIGl0IHdpbGwgYmUgc2V0IHRvIGAnMCdgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRpdmlkZXIgaW5zZXQ9XCIxNnB4XCI+PC9pZ3gtZGl2aWRlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoJ2luc2V0JylcbiAgICBwcml2YXRlIF9pbnNldCA9ICcwJztcblxuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHZhbHVlIG9mIGByb2xlYCBhdHRyaWJ1dGUuXG4gICAgICogSWYgbm90IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGBzZXBhcmF0b3JgIHdpbGwgYmUgdXNlZC5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcm9sZSA9ICdzZXBhcmF0b3InO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdHlwZSBvZiB0aGUgZGl2aWRlci4gVGhlIGRlZmF1bHQgdmFsdWVcbiAgICAgKiBpcyBgZGVmYXVsdGAuIFRoZSBkaXZpZGVyIGNhbiBhbHNvIGJlIGBkYXNoZWRgO1xuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRpdmlkZXIgdHlwZT1cImRhc2hlZFwiPjwvaWd4LWRpdmlkZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZGl2aWRlcicpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdHlwZTogSWd4RGl2aWRlclR5cGUgfCBzdHJpbmcgPSBJZ3hEaXZpZGVyVHlwZS5TT0xJRDtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWRpdmlkZXItLWRhc2hlZCcpXG4gICAgZ2V0IGlzRGFzaGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBJZ3hEaXZpZGVyVHlwZS5EQVNIRUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHRoYXQgc2V0cyB0aGUgYG1pZGRsZWAgYXR0cmlidXRlIG9mIHRoZSBkaXZpZGVyLlxuICAgICAqIElmIHNldCB0byBgdHJ1ZWAgYW5kIGFuIGBpbnNldGAgdmFsdWUgaGFzIGJlZW4gcHJvdmlkZWQsXG4gICAgICogdGhlIGRpdmlkZXIgd2lsbCBzdGFydCBzaHJpbmtpbmcgZnJvbSBib3RoIGVuZHMuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZGl2aWRlciBbbWlkZGxlXT1cInRydWVcIj48L2lneC1kaXZpZGVyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWRpdmlkZXItLWluc2V0JylcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBtaWRkbGUgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEEgZ2V0dGVyIHRoYXQgcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHR5cGUgb2YgdGhlIGRpdmlkZXIgaXMgYGRlZmF1bHRgO1xuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBpc0RlZmF1bHQgPSB0aGlzLmRpdmlkZXIuaXNEZWZhdWx0O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBpc1NvbGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBJZ3hEaXZpZGVyVHlwZS5TT0xJRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgdGhhdCBzZXRzIHRoZSB2ZXJ0aWNhbCBhdHRyaWJ1dGUgb2YgdGhlIGRpdmlkZXIuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZGl2aWRlciBbdmVydGljYWxdPVwidHJ1ZVwiPjwvaWd4LWRpdmlkZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZGl2aWRlci0tdmVydGljYWwnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHZlcnRpY2FsID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbnNldCBvZiB0aGUgZGl2aWRlciBmcm9tIHRoZSBzaWRlKHMpLlxuICAgICAqIElmIHRoZSBkaXZpZGVyIGF0dHJpYnV0ZSBgbWlkZGxlYCBpcyBzZXQgdG8gYHRydWVgLFxuICAgICAqIGl0IHdpbGwgaW5zZXQgdGhlIGRpdmlkZXIgb24gYm90aCBzaWRlcy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5kaXZpZGVyLmluc2V0ID0gJzMycHgnO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnc3R5bGUubWFyZ2luJylcbiAgICBzZXQgaW5zZXQodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9pbnNldCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgZGl2aWRlciBpbnNldCBpbiB0ZXJtcyBvZlxuICAgICAqIG1hcmdpbiByZXByZXNlbnRhdGlvbiBhcyBhcHBsaWVkIHRvIHRoZSBkaXZpZGVyLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBpbnNldCA9IHRoaXMuZGl2aWRlci5pbnNldDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgaW5zZXQoKSB7XG4gICAgICAgIGNvbnN0IGJhc2VNYXJnaW4gPSAnMCc7XG5cbiAgICAgICAgaWYgKHRoaXMubWlkZGxlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLl9pbnNldH0gJHtiYXNlTWFyZ2lufWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1hcmdpbn0gJHt0aGlzLl9pbnNldH1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5faW5zZXR9ICR7YmFzZU1hcmdpbn0gMCAke2Jhc2VNYXJnaW59YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWFyZ2lufSAwICR7YmFzZU1hcmdpbn0gJHt0aGlzLl9pbnNldH1gO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW0lneERpdmlkZXJEaXJlY3RpdmVdLFxuICAgIGV4cG9ydHM6IFtJZ3hEaXZpZGVyRGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hEaXZpZGVyTW9kdWxlIHsgfVxuIl19