import { __decorate } from "tslib";
import { Directive, HostBinding, Input, NgModule } from '@angular/core';
let IgxLayoutDirective = class IgxLayoutDirective {
    constructor() {
        /**
         * Sets the default flow direction of the container's children.
         *
         * Defaults to `rows`.
         *
         * ```html
         *  <div
         *   igxLayout
         *   igxLayoutDir="row">
         *    <div igxFlex>1</div>
         *    <div igxFlex>2</div>
         *    <div igxFlex>3</div>
         *  </div>
         * ```
         */
        this.dir = 'row';
        /**
         * Defines the direction flex children are placed in the flex container.
         *
         * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutReverse="true">
         *    <div igxFlex>1</div>
         *    <div igxFlex>2</div>
         *    <div igxFlex>3</div>
         * </div>
         * ```
         */
        this.reverse = false;
        /**
         * By default the immediate children will all try to fit onto one line.
         *
         * The default value `nowrap` sets this behavior.
         *
         * Other accepted values are `wrap` and `wrap-reverse`.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutDir="row"
         *   igxLayoutWrap="wrap">
         *    <div igxFlex igxFlexGrow="0">1</div>
         *    <div igxFlex igxFlexGrow="0">2</div>
         *    <div igxFlex igxFlexGrow="0">3</div>
         * </div>
         * ```
         */
        this.wrap = 'nowrap';
        /**
         * Defines the alignment along the main axis.
         *
         * Defaults to `flex-start` which packs the children toward the start line.
         *
         * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutDir="column"
         *   igxLayoutJustify="space-between">
         *    <div>1</div>
         *    <div>2</div>
         *    <div>3</div>
         * </div>
         * ```
         */
        this.justify = 'flex-start';
        /**
         * Defines the default behavior for how children are laid out along the corss axis of the current line.
         *
         * Defaults to `flex-start`.
         *
         * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutDir="column"
         *   igxLayoutItemAlign="start">
         *    <div igxFlex igxFlexGrow="0">1</div>
         *    <div igxFlex igxFlexGrow="0">2</div>
         *    <div igxFlex igxFlexGrow="0">3</div>
         * </div>
         * ```
         */
        this.itemAlign = 'stretch';
        /**
         * @hidden
         */
        this.display = 'flex';
    }
    /**
     * @hidden
     */
    get flexwrap() { return this.wrap; }
    /**
     * @hidden
     */
    get justifycontent() { return this.justify; }
    /**
     * @hidden
     */
    get align() { return this.itemAlign; }
    /**
     * @hidden
     */
    get direction() {
        if (this.reverse) {
            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';
        }
        return (this.dir === 'row') ? 'row' : 'column';
    }
};
__decorate([
    Input('igxLayoutDir')
], IgxLayoutDirective.prototype, "dir", void 0);
__decorate([
    Input('igxLayoutReverse')
], IgxLayoutDirective.prototype, "reverse", void 0);
__decorate([
    Input('igxLayoutWrap')
], IgxLayoutDirective.prototype, "wrap", void 0);
__decorate([
    Input('igxLayoutJustify')
], IgxLayoutDirective.prototype, "justify", void 0);
__decorate([
    Input('igxLayoutItemAlign')
], IgxLayoutDirective.prototype, "itemAlign", void 0);
__decorate([
    HostBinding('style.display')
], IgxLayoutDirective.prototype, "display", void 0);
__decorate([
    HostBinding('style.flex-wrap')
], IgxLayoutDirective.prototype, "flexwrap", null);
__decorate([
    HostBinding('style.justify-content')
], IgxLayoutDirective.prototype, "justifycontent", null);
__decorate([
    HostBinding('style.align-items')
], IgxLayoutDirective.prototype, "align", null);
__decorate([
    HostBinding('style.flex-direction')
], IgxLayoutDirective.prototype, "direction", null);
IgxLayoutDirective = __decorate([
    Directive({
        selector: '[igxLayout]'
    })
], IgxLayoutDirective);
export { IgxLayoutDirective };
let IgxFlexDirective = class IgxFlexDirective {
    constructor() {
        /**
         * Applies the `grow` attribute to an element that uses the directive.
         *
         * Default value is `1`.
         *
         * ```html
         * <div>
         *    <div igxFlex igxFlexGrow="0">Content1</div>
         *    <div igxFlex igxFlexGrow="1">Content2</div>
         *    <div igxFlex igxFlexGrow="0">Content3</div>
         * </div>
         * ```
         */
        this.grow = 1;
        /**
         * Applies the `shrink` attribute to an element that uses the directive.
         *
         * Default value is `1`.
         *
         * ```html
         * <div>
         *    <div igxFlex igxFlexShrink="1">Content1</div>
         *    <div igxFlex igxFlexShrink="0">Content2</div>
         *    <div igxFlex igxFlexShrink="1">Content3</div>
         * </div>
         * ```
         */
        this.shrink = 1;
        /**
         * Applies the directive to an element.
         *
         * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.
         *
         * ```html
         * <div igxFlex>Content</div>
         * ```
         */
        this.flex = '';
        /**
         * Applies the `order` attribute to an element that uses the directive.
         *
         * Default value is `0`.
         *
         * ```html
         * <div>
         *    <div igxFlex igxFlexOrder="1">Content1</div>
         *    <div igxFlex igxFlexOrder="0">Content2</div>
         *    <div igxFlex igxFlexOrder="2">Content3</div>
         * </div>
         * ```
         */
        this.order = 0;
        /**
         * Applies the `flex-basis` attribute to an element that uses the directive.
         *
         * Default value is `auto`.
         *
         * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.
         *
         * ```html
         * <div igxFlex igxFlexBasis="fit-content">Content</div>
         * ```
         */
        this.basis = 'auto';
    }
    /**
     * @hidden
     */
    get style() {
        if (this.flex) {
            return `${this.flex}`;
        }
        return `${this.grow} ${this.shrink} ${this.basis}`;
    }
    /**
     * @hidden
     */
    get itemorder() {
        return this.order || 0;
    }
};
__decorate([
    Input('igxFlexGrow')
], IgxFlexDirective.prototype, "grow", void 0);
__decorate([
    Input('igxFlexShrink')
], IgxFlexDirective.prototype, "shrink", void 0);
__decorate([
    Input('igxFlex')
], IgxFlexDirective.prototype, "flex", void 0);
__decorate([
    Input('igxFlexOrder')
], IgxFlexDirective.prototype, "order", void 0);
__decorate([
    Input('igxFlexBasis')
], IgxFlexDirective.prototype, "basis", void 0);
__decorate([
    HostBinding('style.flex')
], IgxFlexDirective.prototype, "style", null);
__decorate([
    HostBinding('style.order')
], IgxFlexDirective.prototype, "itemorder", null);
IgxFlexDirective = __decorate([
    Directive({
        selector: '[igxFlex]'
    })
], IgxFlexDirective);
export { IgxFlexDirective };
/**
 * @hidden
 */
let IgxLayoutModule = class IgxLayoutModule {
};
IgxLayoutModule = __decorate([
    NgModule({
        declarations: [IgxFlexDirective, IgxLayoutDirective],
        exports: [IgxFlexDirective, IgxLayoutDirective]
    })
], IgxLayoutModule);
export { IgxLayoutModule };
//# sourceMappingURL=data:application/json;base64,