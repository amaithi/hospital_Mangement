import { __decorate } from "tslib";
import { Component, Input, TemplateRef, HostBinding, ElementRef } from '@angular/core';
import { SliderHandle } from '../slider.common';
let IgxThumbLabelComponent = class IgxThumbLabelComponent {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
    get thumbFromClass() {
        return this.type === SliderHandle.FROM;
    }
    get thumbToClass() {
        return this.type === SliderHandle.TO;
    }
    get thumbFromActiveClass() {
        return this.type === SliderHandle.FROM && this.active;
    }
    get thumbToActiveClass() {
        return this.type === SliderHandle.TO && this.active;
    }
    get nativeElement() {
        return this._elementRef.nativeElement;
    }
    get active() {
        return this._active;
    }
    set active(val) {
        if (this.continuous || this.deactiveState) {
            this._active = false;
        }
        else {
            this._active = val;
        }
    }
};
IgxThumbLabelComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input()
], IgxThumbLabelComponent.prototype, "value", void 0);
__decorate([
    Input()
], IgxThumbLabelComponent.prototype, "templateRef", void 0);
__decorate([
    Input()
], IgxThumbLabelComponent.prototype, "context", void 0);
__decorate([
    Input()
], IgxThumbLabelComponent.prototype, "type", void 0);
__decorate([
    Input()
], IgxThumbLabelComponent.prototype, "continuous", void 0);
__decorate([
    Input()
], IgxThumbLabelComponent.prototype, "deactiveState", void 0);
__decorate([
    HostBinding('class.igx-slider__label-from')
], IgxThumbLabelComponent.prototype, "thumbFromClass", null);
__decorate([
    HostBinding('class.igx-slider__label-to')
], IgxThumbLabelComponent.prototype, "thumbToClass", null);
__decorate([
    HostBinding('class.igx-slider__label-from--active')
], IgxThumbLabelComponent.prototype, "thumbFromActiveClass", null);
__decorate([
    HostBinding('class.igx-slider__label-to--active')
], IgxThumbLabelComponent.prototype, "thumbToActiveClass", null);
IgxThumbLabelComponent = __decorate([
    Component({
        selector: 'igx-thumb-label',
        template: "<div class=\"label\">\n    <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : thumbFromDefaultTemplate; context: context\"></ng-container>\n</div>\n\n<ng-template #thumbFromDefaultTemplate>\n    {{ value }}\n</ng-template>\n"
    })
], IgxThumbLabelComponent);
export { IgxThumbLabelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWItbGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zbGlkZXIvbGFiZWwvdGh1bWItbGFiZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFNaEQsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUF5Qy9CLFlBQW9CLFdBQXVCO1FBQXZCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO0lBQUksQ0FBQztJQW5CaEQsSUFBVyxjQUFjO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsSUFBSSxDQUFDO0lBQzNDLENBQUM7SUFHRCxJQUFXLFlBQVk7UUFDbkIsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUdELElBQVcsb0JBQW9CO1FBQzNCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDMUQsQ0FBQztJQUdELElBQVcsa0JBQWtCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDeEQsQ0FBQztJQUlELElBQVcsYUFBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFXLE1BQU07UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsTUFBTSxDQUFDLEdBQVk7UUFDMUIsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7U0FDeEI7YUFBTTtZQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztDQUNKLENBQUE7O1lBakJvQyxVQUFVOztBQXJDM0M7SUFEQyxLQUFLLEVBQUU7cURBQ2E7QUFHckI7SUFEQyxLQUFLLEVBQUU7MkRBQzZCO0FBR3JDO0lBREMsS0FBSyxFQUFFO3VEQUNZO0FBR3BCO0lBREMsS0FBSyxFQUFFO29EQUNrQjtBQUcxQjtJQURDLEtBQUssRUFBRTswREFDbUI7QUFHM0I7SUFEQyxLQUFLLEVBQUU7NkRBQ3NCO0FBRzlCO0lBREMsV0FBVyxDQUFDLDhCQUE4QixDQUFDOzREQUczQztBQUdEO0lBREMsV0FBVyxDQUFDLDRCQUE0QixDQUFDOzBEQUd6QztBQUdEO0lBREMsV0FBVyxDQUFDLHNDQUFzQyxDQUFDO2tFQUduRDtBQUdEO0lBREMsV0FBVyxDQUFDLG9DQUFvQyxDQUFDO2dFQUdqRDtBQXZDUSxzQkFBc0I7SUFKbEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQix1UEFBeUM7S0FDNUMsQ0FBQztHQUNXLHNCQUFzQixDQTBEbEM7U0ExRFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYsIEhvc3RCaW5kaW5nLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTbGlkZXJIYW5kbGUgfSBmcm9tICcuLi9zbGlkZXIuY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtdGh1bWItbGFiZWwnLFxuICAgIHRlbXBsYXRlVXJsOiAndGh1bWItbGFiZWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElneFRodW1iTGFiZWxDb21wb25lbnQge1xuICAgIHByaXZhdGUgX2FjdGl2ZTogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHZhbHVlOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbnRleHQ6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHR5cGU6IFNsaWRlckhhbmRsZTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbnRpbnVvdXM6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBkZWFjdGl2ZVN0YXRlOiBib29sZWFuO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGVyX19sYWJlbC1mcm9tJylcbiAgICBwdWJsaWMgZ2V0IHRodW1iRnJvbUNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBTbGlkZXJIYW5kbGUuRlJPTTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX2xhYmVsLXRvJylcbiAgICBwdWJsaWMgZ2V0IHRodW1iVG9DbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gU2xpZGVySGFuZGxlLlRPO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXNsaWRlcl9fbGFiZWwtZnJvbS0tYWN0aXZlJylcbiAgICBwdWJsaWMgZ2V0IHRodW1iRnJvbUFjdGl2ZUNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBTbGlkZXJIYW5kbGUuRlJPTSAmJiB0aGlzLmFjdGl2ZTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX2xhYmVsLXRvLS1hY3RpdmUnKVxuICAgIHB1YmxpYyBnZXQgdGh1bWJUb0FjdGl2ZUNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBTbGlkZXJIYW5kbGUuVE8gJiYgdGhpcy5hY3RpdmU7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cbiAgICBwdWJsaWMgZ2V0IG5hdGl2ZUVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBhY3RpdmUodmFsOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRpbnVvdXMgfHwgdGhpcy5kZWFjdGl2ZVN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==