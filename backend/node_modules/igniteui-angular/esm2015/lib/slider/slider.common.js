import { __decorate } from "tslib";
import { Directive } from '@angular/core';
/**
 * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
let IgxThumbFromTemplateDirective = class IgxThumbFromTemplateDirective {
};
IgxThumbFromTemplateDirective = __decorate([
    Directive({
        selector: '[igxSliderThumbFrom]'
    })
], IgxThumbFromTemplateDirective);
export { IgxThumbFromTemplateDirective };
/**
 * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
let IgxThumbToTemplateDirective = class IgxThumbToTemplateDirective {
};
IgxThumbToTemplateDirective = __decorate([
    Directive({
        selector: '[igxSliderThumbTo]'
    })
], IgxThumbToTemplateDirective);
export { IgxThumbToTemplateDirective };
/**
 * Template directive that allows you to set a custom template, represeting primary/secondary tick labels of the {@link IgxSliderComponent}
 *
 * @context {@link IgxTicksComponent.context}
 */
let IgxTickLabelTemplateDirective = class IgxTickLabelTemplateDirective {
};
IgxTickLabelTemplateDirective = __decorate([
    Directive({
        selector: '[igxSliderTickLabel]'
    })
], IgxTickLabelTemplateDirective);
export { IgxTickLabelTemplateDirective };
export var IgxSliderType;
(function (IgxSliderType) {
    /**
     * Slider with single thumb.
     */
    IgxSliderType[IgxSliderType["SLIDER"] = 0] = "SLIDER";
    /**
     *  Range slider with multiple thumbs, that can mark the range.
     */
    IgxSliderType[IgxSliderType["RANGE"] = 1] = "RANGE";
})(IgxSliderType || (IgxSliderType = {}));
export var SliderHandle;
(function (SliderHandle) {
    SliderHandle[SliderHandle["FROM"] = 0] = "FROM";
    SliderHandle[SliderHandle["TO"] = 1] = "TO";
})(SliderHandle || (SliderHandle = {}));
/**
 * Slider Tick labels Orientation
 */
export var TickLabelsOrientation;
(function (TickLabelsOrientation) {
    TickLabelsOrientation[TickLabelsOrientation["Horizontal"] = 0] = "Horizontal";
    TickLabelsOrientation[TickLabelsOrientation["TopToBottom"] = 1] = "TopToBottom";
    TickLabelsOrientation[TickLabelsOrientation["BottomToTop"] = 2] = "BottomToTop";
})(TickLabelsOrientation || (TickLabelsOrientation = {}));
/**
 * Slider Ticks orientation
 */
export var TicksOrientation;
(function (TicksOrientation) {
    TicksOrientation[TicksOrientation["Top"] = 0] = "Top";
    TicksOrientation[TicksOrientation["Bottom"] = 1] = "Bottom";
    TicksOrientation[TicksOrientation["Mirror"] = 2] = "Mirror";
})(TicksOrientation || (TicksOrientation = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvc2xpZGVyL3NsaWRlci5jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHMUM7Ozs7Ozs7Ozs7R0FVRztBQUlILElBQWEsNkJBQTZCLEdBQTFDLE1BQWEsNkJBQTZCO0NBQUcsQ0FBQTtBQUFoQyw2QkFBNkI7SUFIekMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLHNCQUFzQjtLQUNuQyxDQUFDO0dBQ1csNkJBQTZCLENBQUc7U0FBaEMsNkJBQTZCO0FBRTFDOzs7Ozs7Ozs7O0dBVUc7QUFJSCxJQUFhLDJCQUEyQixHQUF4QyxNQUFhLDJCQUEyQjtDQUFHLENBQUE7QUFBOUIsMkJBQTJCO0lBSHZDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxvQkFBb0I7S0FDakMsQ0FBQztHQUNXLDJCQUEyQixDQUFHO1NBQTlCLDJCQUEyQjtBQUV4Qzs7OztHQUlHO0FBSUgsSUFBYSw2QkFBNkIsR0FBMUMsTUFBYSw2QkFBNkI7Q0FBRyxDQUFBO0FBQWhDLDZCQUE2QjtJQUh6QyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsc0JBQXNCO0tBQ25DLENBQUM7R0FDVyw2QkFBNkIsQ0FBRztTQUFoQyw2QkFBNkI7QUFZMUMsTUFBTSxDQUFOLElBQVksYUFTWDtBQVRELFdBQVksYUFBYTtJQUNyQjs7T0FFRztJQUNILHFEQUFNLENBQUE7SUFDTjs7T0FFRztJQUNILG1EQUFLLENBQUE7QUFDVCxDQUFDLEVBVFcsYUFBYSxLQUFiLGFBQWEsUUFTeEI7QUFFRCxNQUFNLENBQU4sSUFBWSxZQUdYO0FBSEQsV0FBWSxZQUFZO0lBQ3BCLCtDQUFJLENBQUE7SUFDSiwyQ0FBRSxDQUFBO0FBQ04sQ0FBQyxFQUhXLFlBQVksS0FBWixZQUFZLFFBR3ZCO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxxQkFJWDtBQUpELFdBQVkscUJBQXFCO0lBQzdCLDZFQUFVLENBQUE7SUFDViwrRUFBVyxDQUFBO0lBQ1gsK0VBQVcsQ0FBQTtBQUNmLENBQUMsRUFKVyxxQkFBcUIsS0FBckIscUJBQXFCLFFBSWhDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxnQkFJWDtBQUpELFdBQVksZ0JBQWdCO0lBQ3hCLHFEQUFHLENBQUE7SUFDSCwyREFBTSxDQUFBO0lBQ04sMkRBQU0sQ0FBQTtBQUNWLENBQUMsRUFKVyxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBSTNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuXG4vKipcbiAqIFRlbXBsYXRlIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyB5b3UgdG8gc2V0IGEgY3VzdG9tIHRlbXBsYXRlIHJlcHJlc2VudGluZyB0aGUgbG93ZXIgbGFiZWwgdmFsdWUgb2YgdGhlIHtAbGluayBJZ3hTbGlkZXJDb21wb25lbnR9XG4gKlxuICogYGBgaHRtbFxuICogPGlneC1zbGlkZXI+XG4gKiAgPG5nLXRlbXBsYXRlIGlneFNsaWRlclRodW1iRnJvbSBsZXQtdmFsdWUgbGV0LWxhYmVscz57e3ZhbHVlfX08L25nLXRlbXBsYXRlPlxuICogPC9pZ3gtc2xpZGVyPlxuICogYGBgXG4gKlxuICogQGNvbnRleHQge0BsaW5rIElneFNsaWRlckNvbXBvbmVudC5jb250ZXh0fVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hTbGlkZXJUaHVtYkZyb21dJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hUaHVtYkZyb21UZW1wbGF0ZURpcmVjdGl2ZSB7fVxuXG4vKipcbiAqIFRlbXBsYXRlIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyB5b3UgdG8gc2V0IGEgY3VzdG9tIHRlbXBsYXRlIHJlcHJlc2VudGluZyB0aGUgdXBwZXIgbGFiZWwgdmFsdWUgb2YgdGhlIHtAbGluayBJZ3hTbGlkZXJDb21wb25lbnR9XG4gKlxuICogYGBgaHRtbFxuICogPGlneC1zbGlkZXI+XG4gKiAgPG5nLXRlbXBsYXRlIGlneFNsaWRlclRodW1iVG8gbGV0LXZhbHVlIGxldC1sYWJlbHM+e3t2YWx1ZX19PC9uZy10ZW1wbGF0ZT5cbiAqIDwvaWd4LXNsaWRlcj5cbiAqIGBgYFxuICpcbiAqIEBjb250ZXh0IHtAbGluayBJZ3hTbGlkZXJDb21wb25lbnQuY29udGV4dH1cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4U2xpZGVyVGh1bWJUb10nXG59KVxuZXhwb3J0IGNsYXNzIElneFRodW1iVG9UZW1wbGF0ZURpcmVjdGl2ZSB7fVxuXG4vKipcbiAqIFRlbXBsYXRlIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyB5b3UgdG8gc2V0IGEgY3VzdG9tIHRlbXBsYXRlLCByZXByZXNldGluZyBwcmltYXJ5L3NlY29uZGFyeSB0aWNrIGxhYmVscyBvZiB0aGUge0BsaW5rIElneFNsaWRlckNvbXBvbmVudH1cbiAqXG4gKiBAY29udGV4dCB7QGxpbmsgSWd4VGlja3NDb21wb25lbnQuY29udGV4dH1cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4U2xpZGVyVGlja0xhYmVsXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4VGlja0xhYmVsVGVtcGxhdGVEaXJlY3RpdmUge31cblxuZXhwb3J0IGludGVyZmFjZSBJUmFuZ2VTbGlkZXJWYWx1ZSB7XG4gICAgbG93ZXI6IG51bWJlcjtcbiAgICB1cHBlcjogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTbGlkZXJWYWx1ZUNoYW5nZUV2ZW50QXJncyB7XG4gICAgb2xkVmFsdWU6IG51bWJlciB8IElSYW5nZVNsaWRlclZhbHVlO1xuICAgIHZhbHVlOiBudW1iZXIgfCBJUmFuZ2VTbGlkZXJWYWx1ZTtcbn1cblxuZXhwb3J0IGVudW0gSWd4U2xpZGVyVHlwZSB7XG4gICAgLyoqXG4gICAgICogU2xpZGVyIHdpdGggc2luZ2xlIHRodW1iLlxuICAgICAqL1xuICAgIFNMSURFUixcbiAgICAvKipcbiAgICAgKiAgUmFuZ2Ugc2xpZGVyIHdpdGggbXVsdGlwbGUgdGh1bWJzLCB0aGF0IGNhbiBtYXJrIHRoZSByYW5nZS5cbiAgICAgKi9cbiAgICBSQU5HRVxufVxuXG5leHBvcnQgZW51bSBTbGlkZXJIYW5kbGUge1xuICAgIEZST00sXG4gICAgVE9cbn1cblxuLyoqXG4gKiBTbGlkZXIgVGljayBsYWJlbHMgT3JpZW50YXRpb25cbiAqL1xuZXhwb3J0IGVudW0gVGlja0xhYmVsc09yaWVudGF0aW9uIHtcbiAgICBIb3Jpem9udGFsLFxuICAgIFRvcFRvQm90dG9tLFxuICAgIEJvdHRvbVRvVG9wXG59XG5cbi8qKlxuICogU2xpZGVyIFRpY2tzIG9yaWVudGF0aW9uXG4gKi9cbmV4cG9ydCBlbnVtIFRpY2tzT3JpZW50YXRpb24ge1xuICAgIFRvcCxcbiAgICBCb3R0b20sXG4gICAgTWlycm9yXG59XG4iXX0=