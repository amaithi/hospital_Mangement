import { __decorate, __param } from "tslib";
import { InjectionToken, Input, Output, EventEmitter, Directive, NgModule, Optional, Inject } from '@angular/core';
/**
 * Defines the posible values of the components' display density.
 */
export var DisplayDensity;
(function (DisplayDensity) {
    DisplayDensity["comfortable"] = "comfortable";
    DisplayDensity["cosy"] = "cosy";
    DisplayDensity["compact"] = "compact";
})(DisplayDensity || (DisplayDensity = {}));
/**
 * Defines the DisplayDensity DI token.
 */
export const DisplayDensityToken = new InjectionToken('DisplayDensity');
/**
 * Base class containing all logic required for implementing DisplayDensity.
 */
let DisplayDensityBase = 
// tslint:disable-next-line: directive-class-suffix
class DisplayDensityBase {
    constructor(displayDensityOptions) {
        this.displayDensityOptions = displayDensityOptions;
        this.onDensityChanged = new EventEmitter();
        this.oldDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };
        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);
    }
    /**
     * Returns the theme of the component.
     * The default theme is `comfortable`.
     * Available options are `comfortable`, `cosy`, `compact`.
     * ```typescript
     * let componentTheme = this.component.displayDensity;
     * ```
     */
    get displayDensity() {
        return this._displayDensity ||
            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);
    }
    /**
     * Sets the theme of the component.
     */
    set displayDensity(val) {
        const currentDisplayDensity = this._displayDensity;
        this._displayDensity = val;
        if (currentDisplayDensity !== this._displayDensity) {
            const densityChangedArgs = {
                oldDensity: currentDisplayDensity,
                newDensity: this._displayDensity
            };
            this.onDensityChanged.emit(densityChangedArgs);
        }
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.initialDensity = this._displayDensity;
    }
    ngDoCheck() {
        if (!this._displayDensity && this.displayDensityOptions &&
            this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {
            const densityChangedArgs = {
                oldDensity: this.oldDisplayDensityOptions.displayDensity,
                newDensity: this.displayDensityOptions.displayDensity
            };
            this.onDensityChanged.emit(densityChangedArgs);
            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);
        }
    }
    /**
     * Given a style class of a component/element returns the modified version of it based
     * on the current display density.
     */
    getComponentDensityClass(baseStyleClass) {
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                return `${baseStyleClass}--${DisplayDensity.cosy}`;
            case DisplayDensity.compact:
                return `${baseStyleClass}--${DisplayDensity.compact}`;
            default:
                return baseStyleClass;
        }
    }
};
DisplayDensityBase.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
__decorate([
    Input()
], DisplayDensityBase.prototype, "displayDensity", null);
__decorate([
    Output()
], DisplayDensityBase.prototype, "onDensityChanged", void 0);
DisplayDensityBase = __decorate([
    Directive({
        selector: '[igxDisplayDensityBase]'
    })
    // tslint:disable-next-line: directive-class-suffix
    ,
    __param(0, Optional()), __param(0, Inject(DisplayDensityToken))
], DisplayDensityBase);
export { DisplayDensityBase };
let IgxDisplayDensityModule = class IgxDisplayDensityModule {
};
IgxDisplayDensityModule = __decorate([
    NgModule({
        declarations: [
            DisplayDensityBase
        ],
        exports: [
            DisplayDensityBase
        ]
    })
], IgxDisplayDensityModule);
export { IgxDisplayDensityModule };
//# sourceMappingURL=data:application/json;base64,