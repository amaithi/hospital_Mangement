import { __decorate } from "tslib";
import { AfterContentInit, Component, ContentChild, ElementRef, HostBinding, Input, TemplateRef, } from '@angular/core';
import { IgxTabItemTemplateDirective } from './tabs.directives';
import { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';
let IgxTabsGroupComponent = class IgxTabsGroupComponent extends IgxTabsGroupBase {
    constructor(_tabs, _element) {
        super();
        this._tabs = _tabs;
        this._element = _element;
        /**
         * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.
         * ```html
         * <igx-tabs-group label="Tab 2  Lorem ipsum dolor sit" icon="home" [disabled]="true">
         * ```
         */
        this.disabled = false;
        this._isSelected = false;
        /**
         * @hidden
         */
        this.role = 'tabpanel';
        /**
         * @hidden
         */
        this.styleClass = true;
    }
    /**
     * Sets/gets whether a tab group is selected.
     * ```typescript
     * this.tabGroup.isSelected = true;
     * ```
     * ```typescript
     * let isSelected = this.tabGroup.isSelected;
     * ```
     * @memberof IgxTabsGroupComponent
     */
    get isSelected() {
        return this._isSelected;
    }
    set isSelected(newValue) {
        if (!this.disabled && this.isSelected !== newValue) {
            this._tabs.performSelectionChange(newValue ? this.relatedTab : null);
        }
    }
    /**
     * Returns the native element of the tabs-group component
     * ```typescript
     *  const mytabsGroupElement: HTMLElement = tabsGroup.nativeElement;
     * ```
     */
    get nativeElement() {
        return this._element.nativeElement;
    }
    /**
     * An accessor that returns the `IgxTabItemComponent` component.
     * ```typescript
     * @ViewChild("MyTabsGroup")
     * public tab: IgxTabsGroupComponent;
     * ngAfterViewInIt(){
     *    let tabComponent = this.tab.relatedTab;
     * }
     * ```
     */
    get relatedTab() {
        if (this._tabs.tabs) {
            return this._tabs.tabs.toArray()[this.index];
        }
    }
    /**
     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.
     * ```typescript
     * @ViewChild("MyTabsGroup")
     * public tab: IgxTabsGroupComponent;
     * ngAfterViewInIt(){
     *    let tabIndex = this.tab.index;
     * }
     * ```
     */
    get index() {
        if (this._tabs.groups) {
            return this._tabs.groups.toArray().indexOf(this);
        }
        return -1;
    }
    /**
     * @hidden
     */
    get customTabTemplate() {
        return this._tabTemplate;
    }
    /**
     * @hidden
     */
    set customTabTemplate(template) {
        this._tabTemplate = template;
    }
    /**
     * @hidden
     */
    ngAfterContentInit() {
        if (this.tabTemplate) {
            this._tabTemplate = this.tabTemplate.template;
        }
    }
    /**
     * A method that sets the focus on a tab.
     * @memberof {@link IgxTabsGroupComponent}
     * ```typescript
     *  @ViewChild("MyChild")
     * public tab : IgxTabsGroupComponent;
     * ngAfterViewInit(){
     *     this.tab.select();
     * }
     * ```
     */
    select() {
        if (!this.disabled && !this.isSelected) {
            this._tabs.performSelectionChange(this.relatedTab);
        }
    }
    /**
     * @hidden
     */
    setSelectedInternal(newValue) {
        this._isSelected = newValue;
    }
};
IgxTabsGroupComponent.ctorParameters = () => [
    { type: IgxTabsBase },
    { type: ElementRef }
];
__decorate([
    Input()
], IgxTabsGroupComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], IgxTabsGroupComponent.prototype, "icon", void 0);
__decorate([
    Input()
], IgxTabsGroupComponent.prototype, "label", void 0);
__decorate([
    ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })
], IgxTabsGroupComponent.prototype, "tabTemplate", void 0);
__decorate([
    HostBinding('attr.role')
], IgxTabsGroupComponent.prototype, "role", void 0);
__decorate([
    HostBinding('class.igx-tabs__group')
], IgxTabsGroupComponent.prototype, "styleClass", void 0);
IgxTabsGroupComponent = __decorate([
    Component({
        selector: 'igx-tabs-group',
        template: "<ng-content *ngIf=\"isSelected\"></ng-content>\n"
    })
], IgxTabsGroupComponent);
export { IgxTabsGroupComponent };
//# sourceMappingURL=data:application/json;base64,