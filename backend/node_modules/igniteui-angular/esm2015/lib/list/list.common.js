import { __decorate, __param } from "tslib";
import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
/** @hidden */
let IgxListBaseDirective = class IgxListBaseDirective extends DisplayDensityBase {
    constructor(_displayDensityOptions) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
    }
};
IgxListBaseDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
IgxListBaseDirective = __decorate([
    Directive({
        selector: '[igxListBase]'
    }),
    __param(0, Optional()), __param(0, Inject(DisplayDensityToken))
], IgxListBaseDirective);
export { IgxListBaseDirective };
export var IgxListPanState;
(function (IgxListPanState) {
    IgxListPanState[IgxListPanState["NONE"] = 0] = "NONE";
    IgxListPanState[IgxListPanState["LEFT"] = 1] = "LEFT";
    IgxListPanState[IgxListPanState["RIGHT"] = 2] = "RIGHT";
})(IgxListPanState || (IgxListPanState = {}));
let IgxEmptyListTemplateDirective = class IgxEmptyListTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxEmptyListTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxEmptyListTemplateDirective = __decorate([
    Directive({
        selector: '[igxEmptyList]'
    })
], IgxEmptyListTemplateDirective);
export { IgxEmptyListTemplateDirective };
let IgxDataLoadingTemplateDirective = class IgxDataLoadingTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxDataLoadingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxDataLoadingTemplateDirective = __decorate([
    Directive({
        selector: '[igxDataLoading]'
    })
], IgxDataLoadingTemplateDirective);
export { IgxDataLoadingTemplateDirective };
let IgxListItemLeftPanningTemplateDirective = class IgxListItemLeftPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxListItemLeftPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxListItemLeftPanningTemplateDirective = __decorate([
    Directive({
        selector: '[igxListItemLeftPanning]'
    })
], IgxListItemLeftPanningTemplateDirective);
export { IgxListItemLeftPanningTemplateDirective };
let IgxListItemRightPanningTemplateDirective = class IgxListItemRightPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxListItemRightPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxListItemRightPanningTemplateDirective = __decorate([
    Directive({
        selector: '[igxListItemRightPanning]'
    })
], IgxListItemRightPanningTemplateDirective);
export { IgxListItemRightPanningTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21tb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2xpc3QvbGlzdC5jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsa0JBQWtCLEVBQTBCLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNbEcsY0FBYztBQUlkLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQXFCLFNBQVEsa0JBQWtCO0lBWXhELFlBQStELHNCQUE4QztRQUN6RyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUQ2QiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO0lBRTdHLENBQUM7Q0FDSixDQUFBOzs0Q0FIZ0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7O0FBWjFDLG9CQUFvQjtJQUhoQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsZUFBZTtLQUM1QixDQUFDO0lBYWUsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7R0FaM0Msb0JBQW9CLENBZWhDO1NBZlksb0JBQW9CO0FBaUJqQyxNQUFNLENBQU4sSUFBWSxlQUFxQztBQUFqRCxXQUFZLGVBQWU7SUFBRyxxREFBSSxDQUFBO0lBQUUscURBQUksQ0FBQTtJQUFFLHVEQUFLLENBQUE7QUFBQyxDQUFDLEVBQXJDLGVBQWUsS0FBZixlQUFlLFFBQXNCO0FBS2pELElBQWEsNkJBQTZCLEdBQTFDLE1BQWEsNkJBQTZCO0lBQ3RDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQztDQUNyRCxDQUFBOztZQURnQyxXQUFXOztBQUQvQiw2QkFBNkI7SUFIekMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGdCQUFnQjtLQUM3QixDQUFDO0dBQ1csNkJBQTZCLENBRXpDO1NBRlksNkJBQTZCO0FBTzFDLElBQWEsK0JBQStCLEdBQTVDLE1BQWEsK0JBQStCO0lBQ3hDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQztDQUNyRCxDQUFBOztZQURnQyxXQUFXOztBQUQvQiwrQkFBK0I7SUFIM0MsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGtCQUFrQjtLQUMvQixDQUFDO0dBQ1csK0JBQStCLENBRTNDO1NBRlksK0JBQStCO0FBTzVDLElBQWEsdUNBQXVDLEdBQXBELE1BQWEsdUNBQXVDO0lBQ2hELFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQztDQUNyRCxDQUFBOztZQURnQyxXQUFXOztBQUQvQix1Q0FBdUM7SUFIbkQsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLDBCQUEwQjtLQUN2QyxDQUFDO0dBQ1csdUNBQXVDLENBRW5EO1NBRlksdUNBQXVDO0FBT3BELElBQWEsd0NBQXdDLEdBQXJELE1BQWEsd0NBQXdDO0lBQ2pELFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQztDQUNyRCxDQUFBOztZQURnQyxXQUFXOztBQUQvQix3Q0FBd0M7SUFIcEQsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLDJCQUEyQjtLQUN4QyxDQUFDO0dBQ1csd0NBQXdDLENBRXBEO1NBRlksd0NBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiwgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpc3BsYXlEZW5zaXR5QmFzZSwgSURpc3BsYXlEZW5zaXR5T3B0aW9ucywgRGlzcGxheURlbnNpdHlUb2tlbiB9IGZyb20gJy4uL2NvcmUvZGVuc2l0eSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxpc3RDaGlsZCB7XG4gICAgaW5kZXg6IG51bWJlcjtcbn1cblxuLyoqIEBoaWRkZW4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneExpc3RCYXNlXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TGlzdEJhc2VEaXJlY3RpdmUgZXh0ZW5kcyBEaXNwbGF5RGVuc2l0eUJhc2Uge1xuICAgIG9uSXRlbUNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGFsbG93TGVmdFBhbm5pbmc6IGJvb2xlYW47XG4gICAgYWxsb3dSaWdodFBhbm5pbmc6IGJvb2xlYW47XG4gICAgcGFuRW5kVHJpZ2dlcmluZ1RocmVzaG9sZDogbnVtYmVyO1xuICAgIG9uTGVmdFBhbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25SaWdodFBhbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25QYW5TdGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2hpbGRyZW46IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIGxpc3RJdGVtTGVmdFBhbm5pbmdUZW1wbGF0ZTogSWd4TGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlO1xuICAgIGxpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGU6IElneExpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KERpc3BsYXlEZW5zaXR5VG9rZW4pIHByb3RlY3RlZCBfZGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKF9kaXNwbGF5RGVuc2l0eU9wdGlvbnMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGVudW0gSWd4TGlzdFBhblN0YXRlIHsgTk9ORSwgTEVGVCwgUklHSFQgfVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hFbXB0eUxpc3RdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hFbXB0eUxpc3RUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RGF0YUxvYWRpbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hEYXRhTG9hZGluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0SXRlbUxlZnRQYW5uaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0SXRlbVJpZ2h0UGFubmluZ10nXG59KVxuZXhwb3J0IGNsYXNzIElneExpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG4iXX0=