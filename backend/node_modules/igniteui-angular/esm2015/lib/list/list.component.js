var IgxListComponent_1;
import { __decorate, __param } from "tslib";
import { CommonModule } from '@angular/common';
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, Input, NgModule, Output, QueryList, TemplateRef, ViewChild, Optional, Inject, Directive } from '@angular/core';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxListItemComponent } from './list-item.component';
import { IgxListBaseDirective, IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective, IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective } from './list.common';
import { DisplayDensityToken, DisplayDensity } from '../core/density';
let NEXT_ID = 0;
/**
 * igxListThumbnail is container for the List media
 * Use it to wrap anything you want to be used as a thumbnail.
 */
let IgxListThumbnailDirective = class IgxListThumbnailDirective {
};
IgxListThumbnailDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[igxListThumbnail]'
    })
], IgxListThumbnailDirective);
export { IgxListThumbnailDirective };
/**
 * igxListAction is container for the List action
 * Use it to wrap anything you want to be used as a list action: icon, checkbox...
 */
let IgxListActionDirective = class IgxListActionDirective {
};
IgxListActionDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[igxListAction]'
    })
], IgxListActionDirective);
export { IgxListActionDirective };
/**
 * igxListLine is container for the List text content
 * Use it to wrap anything you want to be used as a plane text.
 */
let IgxListLineDirective = class IgxListLineDirective {
};
IgxListLineDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[igxListLine]'
    })
], IgxListLineDirective);
export { IgxListLineDirective };
/**
 * igxListLineTitle is a directive that add class to the target element
 * Use it to make anything to look like list Title.
 */
let IgxListLineTitleDirective = class IgxListLineTitleDirective {
    constructor() {
        this.cssClass = 'igx-list__item-line-title';
    }
};
__decorate([
    HostBinding('class.igx-list__item-line-title')
], IgxListLineTitleDirective.prototype, "cssClass", void 0);
IgxListLineTitleDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[igxListLineTitle]'
    })
], IgxListLineTitleDirective);
export { IgxListLineTitleDirective };
/**
 * igxListLineSubTitle is a directive that add class to the target element
 * Use it to make anything to look like list Subtitle.
 */
let IgxListLineSubTitleDirective = class IgxListLineSubTitleDirective {
    constructor() {
        this.cssClass = 'igx-list__item-line-subtitle';
    }
};
__decorate([
    HostBinding('class.igx-list__item-line-subtitle')
], IgxListLineSubTitleDirective.prototype, "cssClass", void 0);
IgxListLineSubTitleDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[igxListLineSubTitle]'
    })
], IgxListLineSubTitleDirective);
export { IgxListLineSubTitleDirective };
/**
 * Displays a collection of data items in a templatable list format
 *
 * @igxModule IgxListModule
 *
 * @igxTheme igx-list-theme
 *
 * @igxKeywords list, data
 *
 * @igxGroup Grids & Lists
 *
 * @remarks
 * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering
 * of list items. Each list item is completely templatable and will support any valid HTML or Angular component.
 *
 * @example
 * ```html
 * <igx-list>
 *   <igx-list-item isHeader="true">Contacts</igx-list-item>
 *   <igx-list-item *ngFor="let contact of contacts">
 *     <span class="name">{{ contact.name }}</span>
 *     <span class="phone">{{ contact.phone }}</span>
 *   </igx-list-item>
 * </igx-list>
 * ```
 */
let IgxListComponent = IgxListComponent_1 = class IgxListComponent extends IgxListBaseDirective {
    constructor(element, _displayDensityOptions) {
        super(_displayDensityOptions);
        this.element = element;
        this._displayDensityOptions = _displayDensityOptions;
        /**
         * Provides a threshold after which the item's panning will be completed automatically.
         *
         * @remarks
         * By default this property is set to 0.5 which is 50% of the list item's width.
         *
         * @example
         * ```html
         * <igx-list [panEndTriggeringThreshold]="0.8"></igx-list>
         * ```
         */
        this.panEndTriggeringThreshold = 0.5;
        /**
         * Sets/gets the `id` of the list.
         *
         * @remarks
         * If not set, the `id` of the first list component will be `"igx-list-0"`.
         *
         * @example
         * ```html
         * <igx-list id="my-first-list"></igx-list>
         * ```
         * ```typescript
         * let listId = this.list.id;
         * ```
         */
        this.id = `igx-list-${NEXT_ID++}`;
        /**
         * Sets/gets whether the left panning of an item is allowed.
         *
         * @remarks
         * Default value is `false`.
         *
         * @example
         * ```html
         * <igx-list [allowLeftPanning]="true"></igx-list>
         * ```
         * ```typescript
         * let isLeftPanningAllowed = this.list.allowLeftPanning;
         * ```
         */
        this.allowLeftPanning = false;
        /**
         * Sets/gets whether the right panning of an item is allowed.
         *
         * @remarks
         * Default value is `false`.
         *
         * @example
         * ```html
         * <igx-list [allowRightPanning]="true"></igx-list>
         * ```
         * ```typescript
         * let isRightPanningAllowed = this.list.allowRightPanning;
         * ```
         */
        this.allowRightPanning = false;
        /**
         * Sets/gets whether the list is currently loading data.
         *
         * @remarks
         * Set it to display the dataLoadingTemplate while data is being retrieved.
         * Default value is `false`.
         *
         * @example
         * ```html
         *  <igx-list [isLoading]="true"></igx-list>
         * ```
         * ```typescript
         * let isLoading = this.list.isLoading;
         * ```
         */
        this.isLoading = false;
        /**
         * Event emitted when a left pan gesture is executed on a list item.
         *
         * @remarks
         * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
         *
         * @example
         * ```html
         * <igx-list [allowLeftPanning]="true" (onLeftPan)="onLeftPan($event)"></igx-list>
         * ```
         */
        this.onLeftPan = new EventEmitter();
        /**
         * Event emitted when a right pan gesture is executed on a list item.
         *
         * @remarks
         * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
         *
         * @example
         * ```html
         * <igx-list [allowRightPanning]="true" (onRightPan)="onRightPan($event)"></igx-list>
         * ```
         */
        this.onRightPan = new EventEmitter();
        /**
         *
         * Event emitted when a pan gesture is executed on a list item.
         *
         * @remarks
         * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.
         *
         * @example
         * ```html
         * <igx-list (onPanStateChange)="onPanStateChange($event)"></igx-list>
         * ```
         */
        this.onPanStateChange = new EventEmitter();
        /**
         * Event emitted when a list item is clicked.
         *
         * @remarks
         * Provides references to the `IgxListItemComponent` and `Event` as event arguments.
         *
         * @example
         * ```html
         * <igx-list (onItemClicked)="onItemClicked($event)"></igx-list>
         * ```
         */
        this.onItemClicked = new EventEmitter();
    }
    /**
     * @hidden
     * @internal
     */
    get sortedChildren() {
        if (this.children !== undefined) {
            return this.children.toArray()
                .sort((a, b) => {
                return a.index - b.index;
            });
        }
        return null;
    }
    /**
     * Gets the `role` attribute value.
     *
     * @example
     * ```typescript
     * let listRole =  this.list.role;
     * ```
     */
    get role() {
        return 'list';
    }
    /**
     * Gets a boolean indicating if the list is empty.
     *
     * @example
     * ```typescript
     * let isEmpty =  this.list.isListEmpty;
     * ```
     */
    get isListEmpty() {
        return !this.children || this.children.length === 0;
    }
    /**
     * @hidden
     * @internal
     */
    get cssClass() {
        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;
    }
    /**
     * @hidden
     * @internal
     */
    get cssClassCompact() {
        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;
    }
    /**
     * @hidden
     * @internal
     */
    get cssClassCosy() {
        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;
    }
    /**
     * Gets the list `items` excluding the header ones.
     *
     * @example
     * ```typescript
     * let listItems: IgxListItemComponent[] = this.list.items;
     * ```
     */
    get items() {
        const items = [];
        if (this.children !== undefined) {
            for (const child of this.sortedChildren) {
                if (!child.isHeader) {
                    items.push(child);
                }
            }
        }
        return items;
    }
    /**
     * Gets the header list `items`.
     *
     * @example
     * ```typescript
     * let listHeaders: IgxListItemComponent[] =  this.list.headers;
     * ```
     */
    get headers() {
        const headers = [];
        if (this.children !== undefined) {
            for (const child of this.children.toArray()) {
                if (child.isHeader) {
                    headers.push(child);
                }
            }
        }
        return headers;
    }
    /**
     * Gets the `context` object of the template binding.
     *
     * @remark
     * Gets the `context` object which represents the `template context` binding into the `list container`
     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.
     *
     * @example
     * ```typescript
     * let listComponent =  this.list.context;
     * ```
     */
    get context() {
        return {
            $implicit: this
        };
    }
    /**
     * Gets a `TemplateRef` to the currently used template.
     *
     * @example
     * ```typescript
     * let listTemplate = this.list.template;
     * ```
     */
    get template() {
        if (this.isLoading) {
            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;
        }
        else {
            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;
        }
    }
};
IgxListComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
__decorate([
    ContentChildren(forwardRef(() => IgxListItemComponent), { descendants: true })
], IgxListComponent.prototype, "children", void 0);
__decorate([
    ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })
], IgxListComponent.prototype, "emptyListTemplate", void 0);
__decorate([
    ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })
], IgxListComponent.prototype, "dataLoadingTemplate", void 0);
__decorate([
    ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })
], IgxListComponent.prototype, "listItemLeftPanningTemplate", void 0);
__decorate([
    ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })
], IgxListComponent.prototype, "listItemRightPanningTemplate", void 0);
__decorate([
    Input()
], IgxListComponent.prototype, "panEndTriggeringThreshold", void 0);
__decorate([
    ViewChild('defaultEmptyList', { read: TemplateRef, static: true })
], IgxListComponent.prototype, "defaultEmptyListTemplate", void 0);
__decorate([
    ViewChild('defaultDataLoading', { read: TemplateRef, static: true })
], IgxListComponent.prototype, "defaultDataLoadingTemplate", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], IgxListComponent.prototype, "id", void 0);
__decorate([
    Input()
], IgxListComponent.prototype, "allowLeftPanning", void 0);
__decorate([
    Input()
], IgxListComponent.prototype, "allowRightPanning", void 0);
__decorate([
    Input()
], IgxListComponent.prototype, "isLoading", void 0);
__decorate([
    Output()
], IgxListComponent.prototype, "onLeftPan", void 0);
__decorate([
    Output()
], IgxListComponent.prototype, "onRightPan", void 0);
__decorate([
    Output()
], IgxListComponent.prototype, "onPanStateChange", void 0);
__decorate([
    Output()
], IgxListComponent.prototype, "onItemClicked", void 0);
__decorate([
    HostBinding('attr.role')
], IgxListComponent.prototype, "role", null);
__decorate([
    HostBinding('class.igx-list-empty')
], IgxListComponent.prototype, "isListEmpty", null);
__decorate([
    HostBinding('class.igx-list')
], IgxListComponent.prototype, "cssClass", null);
__decorate([
    HostBinding('class.igx-list--compact')
], IgxListComponent.prototype, "cssClassCompact", null);
__decorate([
    HostBinding('class.igx-list--cosy')
], IgxListComponent.prototype, "cssClassCosy", null);
IgxListComponent = IgxListComponent_1 = __decorate([
    Component({
        selector: 'igx-list',
        template: "<ng-content></ng-content>\n\n<ng-template #defaultEmptyList>\n    <article class=\"message\">\n        There are no items in the list.\n    </article>\n</ng-template>\n\n<ng-template #defaultDataLoading>\n    <article class=\"message\">\n        Loading data from the server...\n    </article>\n</ng-template>\n\n<ng-container *ngIf=\"!children || children.length === 0 || isLoading\">\n    <ng-container *ngTemplateOutlet=\"template; context: context\">\n    </ng-container>\n</ng-container>\n",
        providers: [{ provide: IgxListBaseDirective, useExisting: IgxListComponent_1 }]
    }),
    __param(1, Optional()), __param(1, Inject(DisplayDensityToken))
], IgxListComponent);
export { IgxListComponent };
/**
 * @hidden
 */
let IgxListModule = class IgxListModule {
};
IgxListModule = __decorate([
    NgModule({
        declarations: [
            IgxListBaseDirective,
            IgxListComponent,
            IgxListItemComponent,
            IgxListThumbnailDirective,
            IgxListActionDirective,
            IgxListLineDirective,
            IgxListLineTitleDirective,
            IgxListLineSubTitleDirective,
            IgxDataLoadingTemplateDirective,
            IgxEmptyListTemplateDirective,
            IgxListItemLeftPanningTemplateDirective,
            IgxListItemRightPanningTemplateDirective
        ],
        exports: [
            IgxListComponent,
            IgxListItemComponent,
            IgxListThumbnailDirective,
            IgxListActionDirective,
            IgxListLineDirective,
            IgxListLineTitleDirective,
            IgxListLineSubTitleDirective,
            IgxDataLoadingTemplateDirective,
            IgxEmptyListTemplateDirective,
            IgxListItemLeftPanningTemplateDirective,
            IgxListItemRightPanningTemplateDirective
        ],
        imports: [
            CommonModule,
            IgxRippleModule
        ]
    })
], IgxListModule);
export { IgxListModule };
//# sourceMappingURL=data:application/json;base64,