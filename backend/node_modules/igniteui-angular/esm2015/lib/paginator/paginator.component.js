import { __decorate, __param } from "tslib";
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Component, Input, Output, NgModule, Optional, Inject, EventEmitter, HostBinding } from '@angular/core';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';
import { IgxSelectModule } from '../select/public_api';
import { IgxIconModule } from '../icon/public_api';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxInputGroupModule } from '../input-group/public_api';
import { DeprecateProperty } from '../core/deprecateDecorators';
let IgxPaginatorComponent = class IgxPaginatorComponent extends DisplayDensityBase {
    constructor(_displayDensityOptions) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
        this._resourceStrings = CurrentResourceStrings.PaginatorResStrings;
        this._page = 0;
        this.defaultSelectValues = [5, 10, 15, 25, 50, 100, 500];
        this._perPage = 15;
        /**
         * An @Input property that sets if the pager in the paginator should be enabled.
         * ```html
         * <igx-paginator [pagerEnabled]="true"></igx-paginator>
         * ```
         * @memberof IgxPaginatorComponent
         */
        this.pagerEnabled = true;
        /**
         * An @Input property that sets if the pager in the paginator should be hidden.
         * ```html
         * <igx-paginator [pagerHidden]="true"></igx-paginator>
         * ```
         * @memberof IgxPaginatorComponent
         */
        this.pagerHidden = false;
        /**
         * An @Input property that sets if the dropdown in the paginator should be enabled.
         * ```html
         * <igx-paginator [dropdownEnabled]="true"></igx-paginator>
         * ```
         * @memberof IgxPaginatorComponent
         */
        this.dropdownEnabled = true;
        /**
         * An @Input property that sets if the dropdown in the paginator should be hidden.
         * ```html
         * <igx-paginator [dropdownHidden]="true"></igx-paginator>
         * ```
         * @memberof IgxPaginatorComponent
         */
        this.dropdownHidden = false;
        /**
         * @deprecated Use 'resourceStrings' instead.
         * An @Input property, sets number of label of the select.
         * The default is 'Items per page' localized string.
         * ```html
         * <igx-paginator label="My custom label"></igx-paginator>
         * ```
         * @memberof IgxPaginatorComponent
         */
        this.selectLabel = CurrentResourceStrings.PaginatorResStrings.igx_paginator_label;
        /**
         * @deprecated Use 'resourceStrings' instead.
         * An @Input property, sets a preposition between the current page and total pages.
         * The default is 'of' localized string.
         * @memberof IgxPaginatorComponent
         */
        this.prepositionPage = CurrentResourceStrings.PaginatorResStrings.igx_paginator_pager_text;
        /**
         * Emitted when `perPage` property value of the paginator is changed.
         * @example
         * ```html
         * <igx-paginator (perPageChange)="onPerPageChange($event)"></igx-paginator>
         * ```
         * ```typescript
         * public onPerPageChange(perPage: number) {
         *   this.perPage = perPage;
         * }
         * ```
         */
        this.perPageChange = new EventEmitter();
        /**
         * Emitted after the current page is changed.
         * @example
         * ```html
         * <igx-paginator (pageChange)="onPageChange($event)"></igx-paginator>
         * ```
         * ```typescript
         * public onPageChange(page: number) {
         *   this.currentPage = page;
         * }
         * ```
         */
        this.pageChange = new EventEmitter();
    }
    /**
     * Sets the class of the IgxPaginatorComponent based
     * on the provided displayDensity.
     */
    get classCosy() {
        return this.displayDensity === DisplayDensity.cosy;
    }
    get classCompact() {
        return this.displayDensity === DisplayDensity.compact;
    }
    get classComfortable() {
        return this.displayDensity === DisplayDensity.comfortable;
    }
    /**
     * An @Input property, sets current page of the `IgxPaginatorComponent`.
     * The default is 0.
     * ```typescript
     * let page = this.paginator.page;
     * ```
     * @memberof IgxPaginatorComponent
     */
    get page() {
        return this._page;
    }
    set page(value) {
        this._page = value;
        this.pageChange.emit(this._page);
    }
    /**
     * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.
     * The default is 15.
     * ```typescript
     * let itemsPerPage = this.paginator.perPage;
     * ```
     * @memberof IgxPaginatorComponent
     */
    get perPage() {
        return this._perPage;
    }
    set perPage(value) {
        this._perPage = Number(value);
        this.perPageChange.emit(this._perPage);
        this._selectOptions = this.sortUniqueOptions(this.defaultSelectValues, this._perPage);
        this.totalPages = Math.ceil(this.totalRecords / this._perPage);
        if (this.totalPages !== 0 && this.page >= this.totalPages) {
            this.page = this.totalPages - 1;
        }
    }
    /**
     * An @Input property that sets the total records.
     * ```typescript
     * let totalRecords = this.paginator.totalRecords;
     * ```
     * @memberof IgxPaginatorComponent
     */
    get totalRecords() {
        return this._totalRecords;
    }
    set totalRecords(value) {
        this._totalRecords = value;
        this.totalPages = Math.ceil(this.totalRecords / this.perPage);
    }
    /**
     * An @Input property that sets custom options in the select of the paginator
     * ```typescript
     * let options = this.paginator.selectOptions;
     * ```
     * @memberof IgxPaginatorComponent
     */
    get selectOptions() {
        return this._selectOptions;
    }
    set selectOptions(value) {
        this._selectOptions = this.sortUniqueOptions(value, this._perPage);
        this.defaultSelectValues = [...value];
    }
    /**
     * An accessor that sets the resource strings.
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * An accessor that returns the resource strings.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    /**
     * Returns if the current page is the last page.
     * ```typescript
     * const lastPage = this.paginator.isLastPage;
     * ```
     */
    get isLastPage() {
        return this.page + 1 >= this.totalPages;
    }
    /**
     * Returns if the current page is the first page.
     * ```typescript
     * const lastPage = this.paginator.isFirstPage;
     * ```
     */
    get isFirstPage() {
        return this.page === 0;
    }
    /**
     * Returns if the first pager buttons should be disabled
     */
    get isFirstPageDisabled() {
        return this.isFirstPage || !this.pagerEnabled;
    }
    /**
     * Returns if the last pager buttons should be disabled
     */
    get isLastPageDisabled() {
        return this.isLastPage || !this.pagerEnabled;
    }
    sortUniqueOptions(values, newOption) {
        return Array.from(new Set([...values, newOption])).sort((a, b) => a - b);
    }
    /**
     * Sets DisplayDensity for the <select> inside the paginator
     * @hidden
     */
    paginatorSelectDisplayDensity() {
        if (this.displayDensity === DisplayDensity.comfortable) {
            return DisplayDensity.cosy;
        }
        return DisplayDensity.compact;
    }
    /**
     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.
     * ```typescript
     * this.paginator.nextPage();
     * ```
     * @memberof IgxPaginatorComponent
     */
    nextPage() {
        if (!this.isLastPage) {
            this.page += 1;
        }
    }
    /**
     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.
     * ```typescript
     * this.paginator.previousPage();
     * ```
     * @memberof IgxPaginatorComponent
     */
    previousPage() {
        if (!this.isFirstPage) {
            this.page -= 1;
        }
    }
    /**
     * Goes to the desired page index.
     * ```typescript
     * this.paginator.paginate(1);
     * ```
     * @param val
     * @memberof IgxPaginatorComponent
     */
    paginate(val) {
        if (val < 0 || val > this.totalPages - 1) {
            return;
        }
        this.page = val;
    }
};
IgxPaginatorComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
__decorate([
    HostBinding('class.igx-paginator--cosy')
], IgxPaginatorComponent.prototype, "classCosy", null);
__decorate([
    HostBinding('class.igx-paginator--compact')
], IgxPaginatorComponent.prototype, "classCompact", null);
__decorate([
    HostBinding('class.igx-paginator')
], IgxPaginatorComponent.prototype, "classComfortable", null);
__decorate([
    Input()
], IgxPaginatorComponent.prototype, "page", null);
__decorate([
    Input()
], IgxPaginatorComponent.prototype, "perPage", null);
__decorate([
    Input()
], IgxPaginatorComponent.prototype, "totalRecords", null);
__decorate([
    Input()
], IgxPaginatorComponent.prototype, "selectOptions", null);
__decorate([
    Input()
], IgxPaginatorComponent.prototype, "pagerEnabled", void 0);
__decorate([
    Input()
], IgxPaginatorComponent.prototype, "pagerHidden", void 0);
__decorate([
    Input()
], IgxPaginatorComponent.prototype, "dropdownEnabled", void 0);
__decorate([
    Input()
], IgxPaginatorComponent.prototype, "dropdownHidden", void 0);
__decorate([
    Input()
], IgxPaginatorComponent.prototype, "resourceStrings", null);
__decorate([
    DeprecateProperty(`'selectLabel' property is deprecated. Use 'resourceStrings' instead.`),
    Input()
], IgxPaginatorComponent.prototype, "selectLabel", void 0);
__decorate([
    DeprecateProperty(`'prepositionPage' property is deprecated. Use 'resourceStrings' instead.`),
    Input()
], IgxPaginatorComponent.prototype, "prepositionPage", void 0);
__decorate([
    Output()
], IgxPaginatorComponent.prototype, "perPageChange", void 0);
__decorate([
    Output()
], IgxPaginatorComponent.prototype, "pageChange", void 0);
IgxPaginatorComponent = __decorate([
    Component({
        selector: 'igx-paginator',
        template: "<div class=\"igx-paginator__select\" [hidden]=\"dropdownHidden\">\n    <label class=\"igx-paginator__label\">{{ resourceStrings.igx_paginator_label }}</label>\n    <div class=\"igx-paginator__select-input\">\n        <igx-select [(ngModel)]=\"perPage\" [displayDensity]=\"paginatorSelectDisplayDensity()\" type=\"border\"\n            [disabled]=\"!dropdownEnabled\">\n            <label igxLabel [hidden]=\"true\">{{ resourceStrings.igx_paginator_label }}</label>\n            <igx-select-item [value]=\"val\" *ngFor=\"let val of selectOptions\">\n                {{val}}\n            </igx-select-item>\n        </igx-select>\n    </div>\n</div>\n<div class=\"igx-paginator__pager\" [hidden]=\"pagerHidden\" role=\"navigation\">\n    <button [title]=\"resourceStrings.igx_paginator_first_page_button_text\" [disabled]=\"isFirstPageDisabled\" [attr.aria-disabled]=\"isFirstPageDisabled\" (click)=\"paginate(0)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">first_page</igx-icon>\n    </button>\n    <button [title]=\"resourceStrings.igx_paginator_previous_page_button_text\" [disabled]=\"isFirstPageDisabled\" [attr.aria-disabled]=\"isFirstPageDisabled\" (click)=\"previousPage()\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">chevron_left</igx-icon>\n    </button>\n    <div class='igx-paginator__pager-text' aria-current=\"page\">\n        <span>{{ page + 1 }}</span>\n        <span>&nbsp;{{ resourceStrings.igx_paginator_pager_text }}&nbsp;</span>\n        <span>{{ totalPages }}</span>\n    </div>\n    <button [title]=\"resourceStrings.igx_paginator_next_page_button_text\" [disabled]=\"isLastPageDisabled\" [attr.aria-disabled]=\"isLastPageDisabled\" (click)=\"nextPage()\" igxRipple igxRippleCentered=\"true\" igxButton=\"icon\">\n        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n    </button>\n    <button [title]=\"resourceStrings.igx_paginator_last_page_button_text\" [disabled]=\"isLastPageDisabled\" [attr.aria-disabled]=\"isLastPageDisabled\" (click)=\"paginate(totalPages - 1)\" igxButton=\"icon\" igxRipple\n        igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">last_page</igx-icon>\n    </button>\n</div>\n"
    }),
    __param(0, Optional()), __param(0, Inject(DisplayDensityToken))
], IgxPaginatorComponent);
export { IgxPaginatorComponent };
let IgxPaginatorModule = class IgxPaginatorModule {
};
IgxPaginatorModule = __decorate([
    NgModule({
        declarations: [IgxPaginatorComponent],
        exports: [IgxPaginatorComponent],
        imports: [CommonModule, IgxSelectModule, FormsModule, IgxIconModule, IgxButtonModule, IgxRippleModule, IgxInputGroupModule]
    })
], IgxPaginatorModule);
export { IgxPaginatorModule };
//# sourceMappingURL=data:application/json;base64,