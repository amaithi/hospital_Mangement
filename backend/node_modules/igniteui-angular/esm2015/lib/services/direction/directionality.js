import { __decorate, __param } from "tslib";
import { Injectable, Inject, InjectionToken, inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * Injection token is used to inject the document into Directionality
 * which factory could be faked for testing purposes.
 *
 * We can't provide and mock the DOCUMENT token from platform-browser because configureTestingModule
 * allows override of the default providers, directive, pipes, modules of the test injector
 * which causes errors.
 *
 * @hidden
 */
export const DIR_DOCUMENT = new InjectionToken('dir-doc', {
    providedIn: 'root',
    factory: DIR_DOCUMENT_FACTORY
});
/**
 * @hidden
 */
export function DIR_DOCUMENT_FACTORY() {
    return inject(DOCUMENT);
}
/**
 * @hidden
 *
 * Bidirectional service that extracts the value of the direction attribute on the body or html elements.
 *
 * The dir attribute over the body element takes precedence.
 */
let IgxDirectionality = class IgxDirectionality {
    constructor(document) {
        this._document = document;
        const bodyDir = this._document.body ? this._document.body.dir : null;
        const htmlDir = this._document.documentElement ? this._document.documentElement.dir : null;
        const extractedDir = bodyDir || htmlDir;
        this._dir = (extractedDir === 'ltr' || extractedDir === 'rtl') ? extractedDir : 'ltr';
    }
    get value() {
        return this._dir;
    }
    get document() {
        return this._document;
    }
    get rtl() {
        return this._dir === 'rtl';
    }
};
IgxDirectionality.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DIR_DOCUMENT,] }] }
];
IgxDirectionality.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxDirectionality_Factory() { return new IgxDirectionality(i0.ɵɵinject(DIR_DOCUMENT)); }, token: IgxDirectionality, providedIn: "root" });
IgxDirectionality = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(0, Inject(DIR_DOCUMENT))
], IgxDirectionality);
export { IgxDirectionality };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uYWxpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2RpcmVjdGlvbi9kaXJlY3Rpb25hbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBTzNDOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBVyxTQUFTLEVBQUU7SUFDaEUsVUFBVSxFQUFFLE1BQU07SUFDbEIsT0FBTyxFQUFFLG9CQUFvQjtDQUNoQyxDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNILE1BQU0sVUFBVSxvQkFBb0I7SUFDaEMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUlILElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBZ0IxQixZQUFrQyxRQUFRO1FBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQWEsUUFBUSxDQUFDO1FBQ3BDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNyRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDM0YsTUFBTSxZQUFZLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsWUFBWSxLQUFLLEtBQUssSUFBSSxZQUFZLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzFGLENBQUM7SUFsQkQsSUFBVyxLQUFLO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQVcsR0FBRztRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUM7SUFDL0IsQ0FBQztDQVNKLENBQUE7OzRDQVBnQixNQUFNLFNBQUMsWUFBWTs7O0FBaEJ2QixpQkFBaUI7SUFIN0IsVUFBVSxDQUFDO1FBQ1IsVUFBVSxFQUFFLE1BQU07S0FDckIsQ0FBQztJQWlCZSxXQUFBLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtHQWhCeEIsaUJBQWlCLENBdUI3QjtTQXZCWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIEluamVjdGlvblRva2VuLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCB0eXBlIERpcmVjdGlvbiA9ICdsdHInIHwgJ3J0bCc7XG5cbi8qKlxuICogSW5qZWN0aW9uIHRva2VuIGlzIHVzZWQgdG8gaW5qZWN0IHRoZSBkb2N1bWVudCBpbnRvIERpcmVjdGlvbmFsaXR5XG4gKiB3aGljaCBmYWN0b3J5IGNvdWxkIGJlIGZha2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICpcbiAqIFdlIGNhbid0IHByb3ZpZGUgYW5kIG1vY2sgdGhlIERPQ1VNRU5UIHRva2VuIGZyb20gcGxhdGZvcm0tYnJvd3NlciBiZWNhdXNlIGNvbmZpZ3VyZVRlc3RpbmdNb2R1bGVcbiAqIGFsbG93cyBvdmVycmlkZSBvZiB0aGUgZGVmYXVsdCBwcm92aWRlcnMsIGRpcmVjdGl2ZSwgcGlwZXMsIG1vZHVsZXMgb2YgdGhlIHRlc3QgaW5qZWN0b3JcbiAqIHdoaWNoIGNhdXNlcyBlcnJvcnMuXG4gKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY29uc3QgRElSX0RPQ1VNRU5UID0gbmV3IEluamVjdGlvblRva2VuPERvY3VtZW50PignZGlyLWRvYycsIHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG4gICAgZmFjdG9yeTogRElSX0RPQ1VNRU5UX0ZBQ1RPUllcbn0pO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIERJUl9ET0NVTUVOVF9GQUNUT1JZKCk6IERvY3VtZW50IHtcbiAgICByZXR1cm4gaW5qZWN0KERPQ1VNRU5UKTtcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKlxuICogQmlkaXJlY3Rpb25hbCBzZXJ2aWNlIHRoYXQgZXh0cmFjdHMgdGhlIHZhbHVlIG9mIHRoZSBkaXJlY3Rpb24gYXR0cmlidXRlIG9uIHRoZSBib2R5IG9yIGh0bWwgZWxlbWVudHMuXG4gKlxuICogVGhlIGRpciBhdHRyaWJ1dGUgb3ZlciB0aGUgYm9keSBlbGVtZW50IHRha2VzIHByZWNlZGVuY2UuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RGlyZWN0aW9uYWxpdHkge1xuICAgIHByaXZhdGUgX2RpcjogRGlyZWN0aW9uO1xuICAgIHByaXZhdGUgX2RvY3VtZW50OiBEb2N1bWVudDtcblxuICAgIHB1YmxpYyBnZXQgdmFsdWUoKTogRGlyZWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RpcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRvY3VtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBydGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXIgPT09ICdydGwnO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoRElSX0RPQ1VNRU5UKSBkb2N1bWVudCkge1xuICAgICAgICB0aGlzLl9kb2N1bWVudCA9IDxEb2N1bWVudD5kb2N1bWVudDtcbiAgICAgICAgY29uc3QgYm9keURpciA9IHRoaXMuX2RvY3VtZW50LmJvZHkgPyB0aGlzLl9kb2N1bWVudC5ib2R5LmRpciA6IG51bGw7XG4gICAgICAgIGNvbnN0IGh0bWxEaXIgPSB0aGlzLl9kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyB0aGlzLl9kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGlyIDogbnVsbDtcbiAgICAgICAgY29uc3QgZXh0cmFjdGVkRGlyID0gYm9keURpciB8fCBodG1sRGlyO1xuICAgICAgICB0aGlzLl9kaXIgPSAoZXh0cmFjdGVkRGlyID09PSAnbHRyJyB8fCBleHRyYWN0ZWREaXIgPT09ICdydGwnKSA/IGV4dHJhY3RlZERpciA6ICdsdHInO1xuICAgIH1cbn1cbiJdfQ==