import { __decorate } from "tslib";
import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';
let IgxNavDrawerItemDirective = class IgxNavDrawerItemDirective {
    constructor() {
        /**
         * @hidden
         */
        this.active = false;
        /**
         * @hidden
         */
        this.isHeader = false;
        /**
         * @hidden
         */
        this.activeClass = 'igx-nav-drawer__item--active';
    }
    /**
     * @hidden
     */
    get defaultCSS() {
        return !this.active && !this.isHeader;
    }
    /**
     * @hidden
     */
    get currentCSS() {
        return this.active && !this.isHeader;
    }
    /**
     * @hidden
     */
    get headerCSS() {
        return this.isHeader;
    }
};
__decorate([
    Input('active')
], IgxNavDrawerItemDirective.prototype, "active", void 0);
__decorate([
    Input('isHeader')
], IgxNavDrawerItemDirective.prototype, "isHeader", void 0);
__decorate([
    HostBinding('class.igx-nav-drawer__item')
], IgxNavDrawerItemDirective.prototype, "defaultCSS", null);
__decorate([
    HostBinding('class.igx-nav-drawer__item--active')
], IgxNavDrawerItemDirective.prototype, "currentCSS", null);
__decorate([
    HostBinding('class.igx-nav-drawer__item--header')
], IgxNavDrawerItemDirective.prototype, "headerCSS", null);
IgxNavDrawerItemDirective = __decorate([
    Directive({
        selector: '[igxDrawerItem]',
        exportAs: 'igxDrawerItem'
    })
], IgxNavDrawerItemDirective);
export { IgxNavDrawerItemDirective };
let IgxNavDrawerTemplateDirective = class IgxNavDrawerTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxNavDrawerTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxNavDrawerTemplateDirective = __decorate([
    Directive({
        selector: '[igxDrawer]'
    })
], IgxNavDrawerTemplateDirective);
export { IgxNavDrawerTemplateDirective };
let IgxNavDrawerMiniTemplateDirective = class IgxNavDrawerMiniTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxNavDrawerMiniTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxNavDrawerMiniTemplateDirective = __decorate([
    Directive({
        selector: '[igxDrawerMini]'
    })
], IgxNavDrawerMiniTemplateDirective);
export { IgxNavDrawerMiniTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi1kcmF3ZXIuZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvbmF2aWdhdGlvbi1kcmF3ZXIvbmF2aWdhdGlvbi1kcmF3ZXIuZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU0zRSxJQUFhLHlCQUF5QixHQUF0QyxNQUFhLHlCQUF5QjtJQUF0QztRQUVJOztXQUVHO1FBQ3FCLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFFdkM7O1dBRUc7UUFDdUIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUUzQzs7V0FFRztRQUNhLGdCQUFXLEdBQUcsOEJBQThCLENBQUM7SUF5QmpFLENBQUM7SUF2Qkc7O09BRUc7SUFFSCxJQUFJLFVBQVU7UUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBRUgsSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7O09BRUc7SUFFSCxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztDQUNKLENBQUE7QUFuQ29CO0lBQWhCLEtBQUssQ0FBQyxRQUFRLENBQUM7eURBQXVCO0FBS3BCO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7MkRBQXlCO0FBVzNDO0lBREMsV0FBVyxDQUFDLDRCQUE0QixDQUFDOzJEQUd6QztBQU1EO0lBREMsV0FBVyxDQUFDLG9DQUFvQyxDQUFDOzJEQUdqRDtBQU1EO0lBREMsV0FBVyxDQUFDLG9DQUFvQyxDQUFDOzBEQUdqRDtBQXZDUSx5QkFBeUI7SUFKckMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQixRQUFRLEVBQUUsZUFBZTtLQUM1QixDQUFDO0dBQ1cseUJBQXlCLENBd0NyQztTQXhDWSx5QkFBeUI7QUE2Q3RDLElBQWEsNkJBQTZCLEdBQTFDLE1BQWEsNkJBQTZCO0lBRXRDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQzVDLENBQUM7Q0FDTCxDQUFBOztZQUZnQyxXQUFXOztBQUYvQiw2QkFBNkI7SUFIekMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGFBQWE7S0FDMUIsQ0FBQztHQUNXLDZCQUE2QixDQUl6QztTQUpZLDZCQUE2QjtBQVMxQyxJQUFhLGlDQUFpQyxHQUE5QyxNQUFhLGlDQUFpQztJQUUxQyxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUM1QyxDQUFDO0NBQ0wsQ0FBQTs7WUFGZ0MsV0FBVzs7QUFGL0IsaUNBQWlDO0lBSDdDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxpQkFBaUI7S0FDOUIsQ0FBQztHQUNXLGlDQUFpQyxDQUk3QztTQUpZLGlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hEcmF3ZXJJdGVtXScsXG4gICAgZXhwb3J0QXM6ICdpZ3hEcmF3ZXJJdGVtJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hOYXZEcmF3ZXJJdGVtRGlyZWN0aXZlIHtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASW5wdXQoJ2FjdGl2ZScpIHB1YmxpYyBhY3RpdmUgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASW5wdXQoJ2lzSGVhZGVyJykgcHVibGljIGlzSGVhZGVyID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGFjdGl2ZUNsYXNzID0gJ2lneC1uYXYtZHJhd2VyX19pdGVtLS1hY3RpdmUnO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LW5hdi1kcmF3ZXJfX2l0ZW0nKVxuICAgIGdldCBkZWZhdWx0Q1NTKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuYWN0aXZlICYmICF0aGlzLmlzSGVhZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1uYXYtZHJhd2VyX19pdGVtLS1hY3RpdmUnKVxuICAgIGdldCBjdXJyZW50Q1NTKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmUgJiYgIXRoaXMuaXNIZWFkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LW5hdi1kcmF3ZXJfX2l0ZW0tLWhlYWRlcicpXG4gICAgZ2V0IGhlYWRlckNTUygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNIZWFkZXI7XG4gICAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hEcmF3ZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hOYXZEcmF3ZXJUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hEcmF3ZXJNaW5pXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TmF2RHJhd2VyTWluaVRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pikge1xuICAgICB9XG59XG4iXX0=