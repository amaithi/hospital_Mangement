import { __decorate, __param } from "tslib";
import { Component, ChangeDetectorRef, ElementRef, HostBinding, HostListener, Input, Host, EventEmitter, Output, ContentChild, Inject } from '@angular/core';
import { IgxExpansionPanelIconDirective } from './expansion-panel.directives';
import { IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';
/**
 * @hidden
 */
export var ICON_POSITION;
(function (ICON_POSITION) {
    ICON_POSITION["LEFT"] = "left";
    ICON_POSITION["NONE"] = "none";
    ICON_POSITION["RIGHT"] = "right";
})(ICON_POSITION || (ICON_POSITION = {}));
let IgxExpansionPanelHeaderComponent = class IgxExpansionPanelHeaderComponent {
    constructor(panel, cdr, elementRef) {
        this.panel = panel;
        this.cdr = cdr;
        this.elementRef = elementRef;
        // properties section
        this._iconTemplate = false;
        /**
         * Sets/gets the `id` of the expansion panel header.
         * ```typescript
         * let panelHeaderId =  this.panel.header.id;
         * ```
         * @memberof IgxExpansionPanelComponent
         */
        this.id = '';
        /**
         * Gets/sets the `aria-level` attribute of the header
         * Get
         * ```typescript
         *  const currentAriaLevel = this.panel.header.lv;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.lv = '5';
         * ```
         * ```html
         *  <igx-expansion-panel-header [lv]="myCustomLevel"></igx-expansion-panel-header>
         * ```
         */
        this.lv = '3';
        /**
         * Gets/sets the `role` attribute of the header
         * Get
         * ```typescript
         *  const currentRole = this.panel.header.role;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.role = '5';
         * ```
         * ```html
         *  <igx-expansion-panel-header [role]="'custom'"></igx-expansion-panel-header>
         * ```
         */
        this.role = 'heading';
        /**
         * Gets/sets the position of the expansion-panel-header expand/collapse icon
         * Accepts `left`, `right` or `none`
         * ```typescript
         *  const currentIconPosition = this.panel.header.iconPosition;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.iconPosition = 'left';
         * ```
         * ```html
         *  <igx-expansion-panel-header [iconPosition]="'right'"></igx-expansion-panel-header>
         * ```
         */
        this.iconPosition = ICON_POSITION.LEFT;
        /**
         * Emitted whenever a user interacts with the header host
         * ```typescript
         *  handleInteraction(event: IExpansionPanelEventArgs) {
         *  ...
         * }
         * ```
         * ```html
         *  <igx-expansion-panel-header (onInteraction)="handleInteraction($event)">
         *      ...
         *  </igx-expansion-panel-header>
         * ```
         */
        this.onInteraction = new EventEmitter();
        /**
         * @hidden
         */
        this.cssClass = 'igx-expansion-panel__header';
        /**
         * Gets/sets the whether the header is disabled
         * When disabled, the header will not handle user events and will stop their propagation
         *
         * ```typescript
         *  const isDisabled = this.panel.header.disabled;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.disabled = true;
         * ```
         * ```html
         *  <igx-expansion-panel-header [disabled]="true">
         *     ...
         *  </igx-expansion-panel-header>
         * ```
         */
        this.disabled = false;
        this.id = `${this.panel.id}-header`;
    }
    /**
     * @hidden
     */
    set iconTemplate(val) {
        this._iconTemplate = val;
    }
    /**
     * @hidden
     */
    get iconTemplate() {
        return this._iconTemplate;
    }
    /**
     * @hidden
     */
    get controls() {
        return this.panel.id;
    }
    /**
     * @hidden
     */
    get isExpanded() {
        return !this.panel.collapsed;
    }
    /**
     * @hidden
     */
    onAction(evt) {
        if (this.disabled) {
            evt.stopPropagation();
            return;
        }
        this.onInteraction.emit({ event: evt, panel: this.panel });
        this.panel.toggle(evt);
        evt.preventDefault();
    }
    /** @hidden @internal */
    openPanel(event) {
        if (event.altKey) {
            this.panel.expand(event);
            this.onInteraction.emit({ event: event, panel: this.panel });
        }
    }
    /** @hidden @internal */
    closePanel(event) {
        if (event.altKey) {
            this.panel.collapse(event);
            this.onInteraction.emit({ event: event, panel: this.panel });
        }
    }
    /**
     * @hidden
     */
    get iconPositionClass() {
        switch (this.iconPosition) {
            case (ICON_POSITION.LEFT):
                return `igx-expansion-panel__header-icon--start`;
            case (ICON_POSITION.RIGHT):
                return `igx-expansion-panel__header-icon--end`;
            case (ICON_POSITION.NONE):
                return `igx-expansion-panel__header-icon--none`;
            default:
                return '';
        }
    }
};
IgxExpansionPanelHeaderComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Host }, { type: Inject, args: [IGX_EXPANSION_PANEL_COMPONENT,] }] },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
__decorate([
    ContentChild(IgxExpansionPanelIconDirective)
], IgxExpansionPanelHeaderComponent.prototype, "iconTemplate", null);
__decorate([
    HostBinding('attr.aria-level'),
    Input()
], IgxExpansionPanelHeaderComponent.prototype, "lv", void 0);
__decorate([
    HostBinding('attr.role'),
    Input()
], IgxExpansionPanelHeaderComponent.prototype, "role", void 0);
__decorate([
    Input()
], IgxExpansionPanelHeaderComponent.prototype, "iconPosition", void 0);
__decorate([
    Output()
], IgxExpansionPanelHeaderComponent.prototype, "onInteraction", void 0);
__decorate([
    HostBinding('class.igx-expansion-panel__header')
], IgxExpansionPanelHeaderComponent.prototype, "cssClass", void 0);
__decorate([
    HostBinding('class.igx-expansion-panel__header--expanded')
], IgxExpansionPanelHeaderComponent.prototype, "isExpanded", null);
__decorate([
    Input(),
    HostBinding('class.igx-expansion-panel--disabled')
], IgxExpansionPanelHeaderComponent.prototype, "disabled", void 0);
__decorate([
    HostListener('keydown.Enter', ['$event']),
    HostListener('keydown.Space', ['$event']),
    HostListener('keydown.Spacebar', ['$event']),
    HostListener('click', ['$event'])
], IgxExpansionPanelHeaderComponent.prototype, "onAction", null);
__decorate([
    HostListener('keydown.Alt.ArrowDown', ['$event'])
], IgxExpansionPanelHeaderComponent.prototype, "openPanel", null);
__decorate([
    HostListener('keydown.Alt.ArrowUp', ['$event'])
], IgxExpansionPanelHeaderComponent.prototype, "closePanel", null);
IgxExpansionPanelHeaderComponent = __decorate([
    Component({
        selector: 'igx-expansion-panel-header',
        template: "<div class=\"igx-expansion-panel__header-inner\" tabindex=\"0\" role=\"button\" [attr.id]=\"id\"\n[attr.aria-disabled]=\"disabled\" [attr.aria-expanded]=\"isExpanded\" [attr.aria-controls]=\"controls\">\n    <div class=\"igx-expansion-panel__title-wrapper\">\n        <ng-content select=\"igx-expansion-panel-title\"></ng-content>\n        <ng-content select=\"igx-expansion-panel-description\"></ng-content>\n    </div>\n    <ng-content></ng-content>\n    <div [class]=\"iconPositionClass\">\n        <ng-content *ngIf=\"iconTemplate\" select=\"igx-expansion-panel-icon\"></ng-content>\n        <igx-icon *ngIf=\"!iconTemplate\" fontSet=\"material\">\n            {{panel.collapsed? 'expand_more':'expand_less'}}\n        </igx-icon>\n    </div>\n</div>\n"
    }),
    __param(0, Host()), __param(0, Inject(IGX_EXPANSION_PANEL_COMPONENT))
], IgxExpansionPanelHeaderComponent);
export { IgxExpansionPanelHeaderComponent };
//# sourceMappingURL=data:application/json;base64,