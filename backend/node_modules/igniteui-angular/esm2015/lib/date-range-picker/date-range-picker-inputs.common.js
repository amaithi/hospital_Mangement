var IgxDateRangeInputsBaseComponent_1, IgxDateRangeStartComponent_1, IgxDateRangeEndComponent_1;
import { __decorate } from "tslib";
import { Component, ContentChild, Pipe, Output, EventEmitter, HostListener, Directive } from '@angular/core';
import { formatDate } from '@angular/common';
import { NgControl } from '@angular/forms';
import { IgxInputDirective } from '../input-group/public_api';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxInputGroupBase } from '../input-group/input-group.common';
import { IgxDateTimeEditorDirective } from '../directives/date-time-editor/public_api';
/** @hidden @internal */
let DateRangePickerFormatPipe = class DateRangePickerFormatPipe {
    transform(values, inputFormat, locale) {
        if (!values) {
            return '';
        }
        const { start, end } = values;
        // TODO: move default locale from IgxDateTimeEditorDirective to its commons file/use displayFormat
        const startDate = inputFormat ? formatDate(start, inputFormat, locale || 'en') : start === null || start === void 0 ? void 0 : start.toLocaleDateString();
        const endDate = inputFormat ? formatDate(end, inputFormat, locale || 'en') : end === null || end === void 0 ? void 0 : end.toLocaleDateString();
        let formatted;
        if (start) {
            formatted = `${startDate} - `;
            if (end) {
                formatted += endDate;
            }
        }
        // TODO: no need to set format twice
        return formatted ? formatted : '';
    }
};
DateRangePickerFormatPipe = __decorate([
    Pipe({ name: 'dateRange' })
], DateRangePickerFormatPipe);
export { DateRangePickerFormatPipe };
/** @hidden @internal */
let IgxDateRangeInputsBaseComponent = IgxDateRangeInputsBaseComponent_1 = class IgxDateRangeInputsBaseComponent extends IgxInputGroupComponent {
    /** @hidden @internal */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /** @hidden @internal */
    setFocus() {
        this.input.focus();
    }
    /** @hidden @internal */
    updateInputValue(value) {
        if (this.ngControl) {
            this.ngControl.control.setValue(value);
        }
        else {
            this.dateTimeEditor.value = value;
        }
    }
    /** @hidden @internal */
    updateInputValidity(state) {
        this.inputDirective.valid = state;
    }
};
__decorate([
    ContentChild(NgControl)
], IgxDateRangeInputsBaseComponent.prototype, "ngControl", void 0);
__decorate([
    ContentChild(IgxDateTimeEditorDirective)
], IgxDateRangeInputsBaseComponent.prototype, "dateTimeEditor", void 0);
__decorate([
    ContentChild(IgxInputDirective)
], IgxDateRangeInputsBaseComponent.prototype, "inputDirective", void 0);
IgxDateRangeInputsBaseComponent = IgxDateRangeInputsBaseComponent_1 = __decorate([
    Component({
        template: ``,
        selector: `igx-date-range-base`,
        providers: [{ provide: IgxInputGroupBase, useExisting: IgxDateRangeInputsBaseComponent_1 }]
    })
], IgxDateRangeInputsBaseComponent);
export { IgxDateRangeInputsBaseComponent };
/**
 * Templates the default icon in the `IgxDateRangePicker`.
 *
 * @igxModule IgxDateRangePickerModule
 *
 * @igxKeyWords date range icon, date picker icon
 *
 * @igxGroup scheduling
 *
 * @example
 * ```html
 * <igx-date-range-picker>
 *   <igx-picker-toggle igxSuffix>
 *      <igx-icon>calendar_view_day</igx-icon>
 *   </igx-picker-toggle>
 * </igx-date-range-picker>
 * ```
 */
let IgxPickerToggleComponent = class IgxPickerToggleComponent {
    constructor() {
        this.clicked = new EventEmitter();
    }
    onClick(event) {
        // do not focus input on click
        event.stopPropagation();
        this.clicked.emit();
    }
};
__decorate([
    Output()
], IgxPickerToggleComponent.prototype, "clicked", void 0);
__decorate([
    HostListener('click', ['$event'])
], IgxPickerToggleComponent.prototype, "onClick", null);
IgxPickerToggleComponent = __decorate([
    Component({
        template: `<ng-content></ng-content>`,
        selector: 'igx-picker-toggle'
    })
], IgxPickerToggleComponent);
export { IgxPickerToggleComponent };
/**
 * Defines the start input for a date range picker
 *
 * @igxModule IgxDateRangePickerModule
 *
 * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme
 *
 * @igxKeywords date, range, date range, date picker
 *
 * @igxGroup scheduling
 *
 * @remarks
 * When templating, start input has to be templated separately
 *
 * @example
 * ```html
 * <igx-date-range-picker mode="dropdown">
 *      <igx-date-range-start>
 *          <input igxInput igxDateTimeEditor type="text">
 *      </igx-date-range-start>
 *      ...
 * </igx-date-range-picker>
 * ```
 */
let IgxDateRangeStartComponent = IgxDateRangeStartComponent_1 = class IgxDateRangeStartComponent extends IgxDateRangeInputsBaseComponent {
};
IgxDateRangeStartComponent = IgxDateRangeStartComponent_1 = __decorate([
    Component({
        selector: 'igx-date-range-start',
        template: "<div class=\"igx-input-group__wrapper\" *ngIf=\"isTypeBox; else bundle\">\n    <ng-container *ngTemplateOutlet=\"bundle\"></ng-container>\n</div>\n\n<div class=\"igx-input-group__hint\">\n    <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n</div>\n\n<ng-template #label>\n    <ng-content select=\"[igxLabel]\"></ng-content>\n</ng-template>\n\n<ng-template #input>\n    <ng-content select=\"[igxInput]\"></ng-content>\n</ng-template>\n\n<ng-template #inputBundle>\n    <ng-container *ngIf=\"!isNotMaterial\">\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n</ng-template>\n\n<ng-template #bundle>\n    <ng-container *ngIf=\"isNotMaterial\">\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n    </ng-container>\n\n    <div class=\"igx-input-group__bundle\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n\n        <div *ngIf=\"!isTypeBootstrap; else inputBundle\" class=\"igx-input-group__bundle-main\">\n\n            <ng-container *ngIf=\"!isNotMaterial\">\n                <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n            </ng-container>\n\n            <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n        </div>\n\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </div>\n    <div class=\"igx-input-group__border\" *ngIf=\"hasBorder\"></div>\n</ng-template>\n",
        providers: [
            { provide: IgxInputGroupBase, useExisting: IgxDateRangeStartComponent_1 },
            { provide: IgxDateRangeInputsBaseComponent, useExisting: IgxDateRangeStartComponent_1 }
        ]
    })
], IgxDateRangeStartComponent);
export { IgxDateRangeStartComponent };
/**
 * Defines the end input for a date range picker
 *
 * @igxModule IgxDateRangeModule
 *
 * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme
 *
 * @igxKeywords date, range, date range, date picker
 *
 * @igxGroup scheduling
 *
 * @remarks
 * When templating, end input has to be template separately
 *
 * @example
 * ```html
 * <igx-date-range-picker mode="dropdown">
 *      <igx-date-range-end>
 *          <input igxInput igxDateTimeEditor type="text">
 *      </igx-date-range-end>
 *      ...
 * </igx-date-range-picker>
 * ```
 */
let IgxDateRangeEndComponent = IgxDateRangeEndComponent_1 = class IgxDateRangeEndComponent extends IgxDateRangeInputsBaseComponent {
};
IgxDateRangeEndComponent = IgxDateRangeEndComponent_1 = __decorate([
    Component({
        selector: 'igx-date-range-end',
        template: "<div class=\"igx-input-group__wrapper\" *ngIf=\"isTypeBox; else bundle\">\n    <ng-container *ngTemplateOutlet=\"bundle\"></ng-container>\n</div>\n\n<div class=\"igx-input-group__hint\">\n    <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n</div>\n\n<ng-template #label>\n    <ng-content select=\"[igxLabel]\"></ng-content>\n</ng-template>\n\n<ng-template #input>\n    <ng-content select=\"[igxInput]\"></ng-content>\n</ng-template>\n\n<ng-template #inputBundle>\n    <ng-container *ngIf=\"!isNotMaterial\">\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n</ng-template>\n\n<ng-template #bundle>\n    <ng-container *ngIf=\"isNotMaterial\">\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n    </ng-container>\n\n    <div class=\"igx-input-group__bundle\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n\n        <div *ngIf=\"!isTypeBootstrap; else inputBundle\" class=\"igx-input-group__bundle-main\">\n\n            <ng-container *ngIf=\"!isNotMaterial\">\n                <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n            </ng-container>\n\n            <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n        </div>\n\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </div>\n    <div class=\"igx-input-group__border\" *ngIf=\"hasBorder\"></div>\n</ng-template>\n",
        providers: [
            { provide: IgxInputGroupBase, useExisting: IgxDateRangeEndComponent_1 },
            { provide: IgxDateRangeInputsBaseComponent, useExisting: IgxDateRangeEndComponent_1 }
        ]
    })
], IgxDateRangeEndComponent);
export { IgxDateRangeEndComponent };
let IgxDateRangeSeparatorDirective = class IgxDateRangeSeparatorDirective {
};
IgxDateRangeSeparatorDirective = __decorate([
    Directive({
        selector: '[igxDateRangeSeparator]'
    })
], IgxDateRangeSeparatorDirective);
export { IgxDateRangeSeparatorDirective };
//# sourceMappingURL=data:application/json;base64,