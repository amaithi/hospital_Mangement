import { __decorate, __param } from "tslib";
import { Pipe, Inject, LOCALE_ID } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray } from '../../core/utils';
import { DatePipe, DecimalPipe } from '@angular/common';
/**
 * @hidden
 * @internal
 */
let IgxGridCellStyleClassesPipe = class IgxGridCellStyleClassesPipe {
    transform(cssClasses, value, data, field, index) {
        if (!cssClasses) {
            return '';
        }
        const result = [];
        for (const cssClass of Object.keys(cssClasses)) {
            const callbackOrValue = cssClasses[cssClass];
            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field, value, index) : callbackOrValue;
            if (apply) {
                result.push(cssClass);
            }
        }
        return result.join(' ');
    }
};
IgxGridCellStyleClassesPipe = __decorate([
    Pipe({
        name: 'igxCellStyleClasses'
    })
], IgxGridCellStyleClassesPipe);
export { IgxGridCellStyleClassesPipe };
/**
 * @hidden
 * @internal
 */
let IgxGridCellStylesPipe = class IgxGridCellStylesPipe {
    transform(styles, value, data, field, index) {
        const css = {};
        if (!styles) {
            return css;
        }
        for (const prop of Object.keys(styles)) {
            const res = styles[prop];
            css[prop] = typeof res === 'function' ? res(data, field, value, index) : res;
        }
        return css;
    }
};
IgxGridCellStylesPipe = __decorate([
    Pipe({
        name: 'igxCellStyles'
    })
], IgxGridCellStylesPipe);
export { IgxGridCellStylesPipe };
/**
 * @hidden
 * @internal
 */
let IgxGridNotGroupedPipe = class IgxGridNotGroupedPipe {
    transform(value) {
        return value.filter(item => !item.columnGroup);
    }
};
IgxGridNotGroupedPipe = __decorate([
    Pipe({
        name: 'igxNotGrouped'
    })
], IgxGridNotGroupedPipe);
export { IgxGridNotGroupedPipe };
/**
 * @hidden
 * @internal
 */
let IgxGridTopLevelColumns = class IgxGridTopLevelColumns {
    transform(value) {
        return value.filter(item => item.level === 0);
    }
};
IgxGridTopLevelColumns = __decorate([
    Pipe({
        name: 'igxTopLevel'
    })
], IgxGridTopLevelColumns);
export { IgxGridTopLevelColumns };
/**
 * @hidden
 * @internal
 */
let IgxGridFilterConditionPipe = class IgxGridFilterConditionPipe {
    transform(value) {
        return value.split(/(?=[A-Z])/).join(' ');
    }
};
IgxGridFilterConditionPipe = __decorate([
    Pipe({
        name: 'filterCondition',
        pure: true
    })
], IgxGridFilterConditionPipe);
export { IgxGridFilterConditionPipe };
/**
 * @hidden
 * @internal
 */
let IgxGridTransactionPipe = class IgxGridTransactionPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, id, pipeTrigger) {
        const grid = this.gridAPI.grid;
        if (grid.transactions.enabled) {
            const result = DataUtil.mergeTransactions(cloneArray(collection), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            return result;
        }
        return collection;
    }
};
IgxGridTransactionPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
IgxGridTransactionPipe = __decorate([
    Pipe({
        name: 'gridTransaction',
        pure: true
    })
], IgxGridTransactionPipe);
export { IgxGridTransactionPipe };
/**
 * @hidden
 * @internal
 */
let IgxGridPaginatorOptionsPipe = class IgxGridPaginatorOptionsPipe {
    transform(values) {
        return Array.from(new Set([...values])).sort((a, b) => a - b);
    }
};
IgxGridPaginatorOptionsPipe = __decorate([
    Pipe({
        name: 'paginatorOptions',
        pure: true,
    })
], IgxGridPaginatorOptionsPipe);
export { IgxGridPaginatorOptionsPipe };
/**
 * @hidden
 * @internal
 */
let IgxHasVisibleColumnsPipe = class IgxHasVisibleColumnsPipe {
    transform(values, hasVisibleColumns) {
        if (!(values && values.length)) {
            return values;
        }
        return hasVisibleColumns ? values : [];
    }
};
IgxHasVisibleColumnsPipe = __decorate([
    Pipe({
        name: 'visibleColumns',
        pure: true
    })
], IgxHasVisibleColumnsPipe);
export { IgxHasVisibleColumnsPipe };
/**
 * @hidden
 * @internal
 */
let IgxDatePipeComponent = class IgxDatePipeComponent extends DatePipe {
    constructor(locale) {
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        super(locale);
        this.DEFAULT_DATE_FORMAT = 'mediumDate';
    }
    transform(value, locale) {
        if (value && value instanceof Date) {
            if (locale) {
                return super.transform(value, this.DEFAULT_DATE_FORMAT, undefined, locale);
            }
            else {
                return super.transform(value);
            }
        }
        else {
            return value;
        }
    }
};
IgxDatePipeComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
IgxDatePipeComponent = __decorate([
    Pipe({
        name: 'igxdate'
    }),
    __param(0, Inject(LOCALE_ID))
], IgxDatePipeComponent);
export { IgxDatePipeComponent };
/**
 * @hidden
 * @internal
 */
let IgxDecimalPipeComponent = class IgxDecimalPipeComponent extends DecimalPipe {
    constructor(locale) {
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        super(locale);
    }
    transform(value, locale) {
        if (value && typeof value === 'number') {
            if (locale) {
                return super.transform(value, undefined, locale);
            }
            else {
                return super.transform(value);
            }
        }
        else {
            return value;
        }
    }
};
IgxDecimalPipeComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
IgxDecimalPipeComponent = __decorate([
    Pipe({
        name: 'igxdecimal'
    }),
    __param(0, Inject(LOCALE_ID))
], IgxDecimalPipeComponent);
export { IgxDecimalPipeComponent };
/**
 * @hidden
 */
let IgxGridRowPinningPipe = class IgxGridRowPinningPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, id, isPinned = false, pipeTrigger) {
        const grid = this.gridAPI.grid;
        if (grid.hasPinnedRecords && isPinned) {
            const result = collection.filter(rec => grid.isRecordPinned(rec));
            result.sort((rec1, rec2) => grid.getInitialPinnedIndex(rec1) - grid.getInitialPinnedIndex(rec2));
            return result;
        }
        grid.unpinnedRecords = collection;
        if (!grid.hasPinnedRecords) {
            grid.pinnedRecords = [];
            return isPinned ? [] : collection;
        }
        return collection.map((rec) => {
            return grid.isRecordPinned(rec) ? { recordRef: rec, ghostRecord: true } : rec;
        });
    }
};
IgxGridRowPinningPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
IgxGridRowPinningPipe = __decorate([
    Pipe({
        name: 'gridRowPinning',
        pure: true
    })
], IgxGridRowPinningPipe);
export { IgxGridRowPinningPipe };
//# sourceMappingURL=data:application/json;base64,