import { __decorate } from "tslib";
import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { IgxGridModule } from '../grid/grid.module';
import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';
import { IgxHierarchicalRowComponent } from './hierarchical-row.component';
import { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';
import { IgxRowIslandComponent } from './row-island.component';
import { IgxChildGridRowComponent } from './child-grid-row.component';
import { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';
import { IgxGridComponent } from '../grid/grid.component';
import { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';
/**
 * @hidden
 */
let IgxHierarchicalGridModule = class IgxHierarchicalGridModule {
};
IgxHierarchicalGridModule = __decorate([
    NgModule({
        declarations: [
            IgxHierarchicalGridBaseDirective,
            IgxHierarchicalGridComponent,
            IgxHierarchicalRowComponent,
            IgxRowIslandComponent,
            IgxChildGridRowComponent,
            IgxHierarchicalGridCellComponent,
            IgxGridHierarchicalPipe,
            IgxGridHierarchicalPagingPipe
        ],
        exports: [
            IgxGridModule,
            IgxHierarchicalGridComponent,
            IgxHierarchicalRowComponent,
            IgxHierarchicalGridCellComponent,
            IgxRowIslandComponent,
            IgxChildGridRowComponent
        ],
        imports: [
            IgxGridModule,
        ],
        entryComponents: [
            IgxGridComponent
        ],
        schemas: [CUSTOM_ELEMENTS_SCHEMA]
    })
], IgxHierarchicalGridModule);
export { IgxHierarchicalGridModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLWdyaWQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9oaWVyYXJjaGljYWwtZ3JpZC9oaWVyYXJjaGljYWwtZ3JpZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzdFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzNFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ25HLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQy9ELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRXRGOztHQUVHO0FBNEJILElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0NBQ3JDLENBQUE7QUFEWSx5QkFBeUI7SUEzQnJDLFFBQVEsQ0FBQztRQUNSLFlBQVksRUFBRTtZQUNaLGdDQUFnQztZQUNoQyw0QkFBNEI7WUFDNUIsMkJBQTJCO1lBQzNCLHFCQUFxQjtZQUNyQix3QkFBd0I7WUFDeEIsZ0NBQWdDO1lBQ2hDLHVCQUF1QjtZQUN2Qiw2QkFBNkI7U0FDOUI7UUFDRCxPQUFPLEVBQUU7WUFDUCxhQUFhO1lBQ2IsNEJBQTRCO1lBQzVCLDJCQUEyQjtZQUMzQixnQ0FBZ0M7WUFDaEMscUJBQXFCO1lBQ3JCLHdCQUF3QjtTQUN6QjtRQUNELE9BQU8sRUFBRTtZQUNQLGFBQWE7U0FDZDtRQUNELGVBQWUsRUFBRTtZQUNmLGdCQUFnQjtTQUNqQjtRQUNELE9BQU8sRUFBRSxDQUFDLHNCQUFzQixDQUFDO0tBQ2xDLENBQUM7R0FDVyx5QkFBeUIsQ0FDckM7U0FEWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgQ1VTVE9NX0VMRU1FTlRTX1NDSEVNQSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4R3JpZE1vZHVsZSB9IGZyb20gJy4uL2dyaWQvZ3JpZC5tb2R1bGUnO1xuaW1wb3J0IHsgSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudCB9IGZyb20gJy4vaGllcmFyY2hpY2FsLWdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IElneEhpZXJhcmNoaWNhbFJvd0NvbXBvbmVudCB9IGZyb20gJy4vaGllcmFyY2hpY2FsLXJvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4R3JpZEhpZXJhcmNoaWNhbFBpcGUsIElneEdyaWRIaWVyYXJjaGljYWxQYWdpbmdQaXBlIH0gZnJvbSAnLi9oaWVyYXJjaGljYWwtZ3JpZC5waXBlcyc7XG5pbXBvcnQgeyBJZ3hSb3dJc2xhbmRDb21wb25lbnQgfSBmcm9tICcuL3Jvdy1pc2xhbmQuY29tcG9uZW50JztcbmltcG9ydCB7IElneENoaWxkR3JpZFJvd0NvbXBvbmVudCB9IGZyb20gJy4vY2hpbGQtZ3JpZC1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IElneEhpZXJhcmNoaWNhbEdyaWRDZWxsQ29tcG9uZW50IH0gZnJvbSAnLi9oaWVyYXJjaGljYWwtY2VsbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4R3JpZENvbXBvbmVudCB9IGZyb20gJy4uL2dyaWQvZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4SGllcmFyY2hpY2FsR3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2hpZXJhcmNoaWNhbC1ncmlkLWJhc2UuZGlyZWN0aXZlJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIElneEhpZXJhcmNoaWNhbEdyaWRCYXNlRGlyZWN0aXZlLFxuICAgIElneEhpZXJhcmNoaWNhbEdyaWRDb21wb25lbnQsXG4gICAgSWd4SGllcmFyY2hpY2FsUm93Q29tcG9uZW50LFxuICAgIElneFJvd0lzbGFuZENvbXBvbmVudCxcbiAgICBJZ3hDaGlsZEdyaWRSb3dDb21wb25lbnQsXG4gICAgSWd4SGllcmFyY2hpY2FsR3JpZENlbGxDb21wb25lbnQsXG4gICAgSWd4R3JpZEhpZXJhcmNoaWNhbFBpcGUsXG4gICAgSWd4R3JpZEhpZXJhcmNoaWNhbFBhZ2luZ1BpcGVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIElneEdyaWRNb2R1bGUsXG4gICAgSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudCxcbiAgICBJZ3hIaWVyYXJjaGljYWxSb3dDb21wb25lbnQsXG4gICAgSWd4SGllcmFyY2hpY2FsR3JpZENlbGxDb21wb25lbnQsXG4gICAgSWd4Um93SXNsYW5kQ29tcG9uZW50LFxuICAgIElneENoaWxkR3JpZFJvd0NvbXBvbmVudFxuICBdLFxuICBpbXBvcnRzOiBbXG4gICAgSWd4R3JpZE1vZHVsZSxcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgSWd4R3JpZENvbXBvbmVudFxuICBdLFxuICBzY2hlbWFzOiBbQ1VTVE9NX0VMRU1FTlRTX1NDSEVNQV1cbn0pXG5leHBvcnQgY2xhc3MgSWd4SGllcmFyY2hpY2FsR3JpZE1vZHVsZSB7XG59XG4iXX0=