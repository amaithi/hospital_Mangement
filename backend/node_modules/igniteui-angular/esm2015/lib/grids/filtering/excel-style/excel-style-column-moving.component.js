import { __decorate } from "tslib";
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { IgxColumnGroupComponent } from '../../columns/column-group.component';
/**
 * @hidden
 */
let IgxExcelStyleColumnMovingComponent = class IgxExcelStyleColumnMovingComponent {
    constructor() { }
    get visibleColumns() {
        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));
    }
    get canNotMoveLeft() {
        return this.column.visibleIndex === 0 ||
            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||
            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && !this.isColumnPinnable) ||
            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));
    }
    get canNotMoveRight() {
        return this.column.visibleIndex === this.visibleColumns.length - 1 ||
            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));
    }
    onMoveButtonClicked(moveDirection) {
        let targetColumn;
        if (this.column.pinned) {
            if (this.column.isLastPinned && moveDirection === 1 && this.grid.isPinningToStart) {
                targetColumn = this.grid.unpinnedColumns[0];
                moveDirection = 0;
            }
            else if (this.column.isFirstPinned && moveDirection === 0 && !this.grid.isPinningToStart) {
                targetColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1];
                moveDirection = 1;
            }
            else {
                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);
            }
        }
        else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0 &&
            this.grid.isPinningToStart) {
            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];
            if (targetColumn.parent) {
                targetColumn = targetColumn.topLevelParent;
            }
            moveDirection = 1;
        }
        else if (this.grid.unpinnedColumns.indexOf(this.column) === this.grid.unpinnedColumns.length - 1 &&
            moveDirection === 1 && !this.grid.isPinningToStart) {
            targetColumn = this.grid.pinnedColumns[0];
            moveDirection = 0;
        }
        else {
            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);
        }
        this.grid.moveColumn(this.column, targetColumn, moveDirection);
    }
    findColumn(moveDirection, columns) {
        let index = columns.indexOf(this.column);
        if (moveDirection === 0) {
            while (index > 0) {
                index--;
                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {
                    return columns[index];
                }
            }
        }
        else {
            while (index < columns.length - 1) {
                index++;
                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {
                    return columns[index];
                }
            }
        }
    }
};
__decorate([
    Input()
], IgxExcelStyleColumnMovingComponent.prototype, "column", void 0);
__decorate([
    Input()
], IgxExcelStyleColumnMovingComponent.prototype, "grid", void 0);
__decorate([
    Input()
], IgxExcelStyleColumnMovingComponent.prototype, "displayDensity", void 0);
__decorate([
    Input()
], IgxExcelStyleColumnMovingComponent.prototype, "isColumnPinnable", void 0);
IgxExcelStyleColumnMovingComponent = __decorate([
    Component({
        changeDetection: ChangeDetectionStrategy.OnPush,
        preserveWhitespaces: false,
        selector: 'igx-excel-style-column-moving',
        template: "<header>\n    {{ grid.resourceStrings.igx_grid_excel_filter_moving_header }}\n</header>\n<section class=\"igx-excel-filter__move-buttons\">\n    <button [displayDensity]=\"displayDensity\"\n        igxButton\n        [disabled]=\"canNotMoveLeft\"\n        (click)=\"onMoveButtonClicked(0)\">\n        <igx-icon>arrow_back</igx-icon>\n        <span>\n            {{ displayDensity==='compact'?\n            grid.resourceStrings.igx_grid_excel_filter_moving_left_short:\n            grid.resourceStrings.igx_grid_excel_filter_moving_left }}\n        </span>\n    </button>\n    <button [displayDensity]=\"displayDensity\"\n        igxButton\n        [disabled]=\"canNotMoveRight\"\n        (click)=\"onMoveButtonClicked(1)\">\n        <span>\n            {{ displayDensity==='compact'?\n            grid.resourceStrings.igx_grid_excel_filter_moving_right_short:\n            grid.resourceStrings.igx_grid_excel_filter_moving_right }}\n        </span>\n        <igx-icon>arrow_forwards</igx-icon>\n    </button>\n</section>\n"
    })
], IgxExcelStyleColumnMovingComponent);
export { IgxExcelStyleColumnMovingComponent };
//# sourceMappingURL=data:application/json;base64,