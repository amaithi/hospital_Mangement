import { __decorate } from "tslib";
import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';
import { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';
import { SortingDirection } from '../../data-operations/sorting-expression.interface';
import { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';
/**
 * @hidden
 */
let IgxGroupByRowTemplateDirective = class IgxGroupByRowTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxGroupByRowTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxGroupByRowTemplateDirective = __decorate([
    Directive({
        selector: '[igxGroupByRow]'
    })
], IgxGroupByRowTemplateDirective);
export { IgxGroupByRowTemplateDirective };
/**
 * @hidden
 */
let IgxGridDetailTemplateDirective = class IgxGridDetailTemplateDirective {
};
IgxGridDetailTemplateDirective = __decorate([
    Directive({
        selector: '[igxGridDetail]'
    })
], IgxGridDetailTemplateDirective);
export { IgxGridDetailTemplateDirective };
/**
 * @hidden
 */
let IgxRowExpandedIndicatorDirective = class IgxRowExpandedIndicatorDirective {
};
IgxRowExpandedIndicatorDirective = __decorate([
    Directive({
        selector: '[igxRowExpandedIndicator]'
    })
], IgxRowExpandedIndicatorDirective);
export { IgxRowExpandedIndicatorDirective };
/**
 * @hidden
 */
let IgxRowCollapsedIndicatorDirective = class IgxRowCollapsedIndicatorDirective {
};
IgxRowCollapsedIndicatorDirective = __decorate([
    Directive({
        selector: '[igxRowCollapsedIndicator]'
    })
], IgxRowCollapsedIndicatorDirective);
export { IgxRowCollapsedIndicatorDirective };
/**
 * @hidden
 */
let IgxHeaderExpandIndicatorDirective = class IgxHeaderExpandIndicatorDirective {
};
IgxHeaderExpandIndicatorDirective = __decorate([
    Directive({
        selector: '[igxHeaderExpandedIndicator]'
    })
], IgxHeaderExpandIndicatorDirective);
export { IgxHeaderExpandIndicatorDirective };
/**
 * @hidden
 */
let IgxHeaderCollapseIndicatorDirective = class IgxHeaderCollapseIndicatorDirective {
};
IgxHeaderCollapseIndicatorDirective = __decorate([
    Directive({
        selector: '[igxHeaderCollapsedIndicator]'
    })
], IgxHeaderCollapseIndicatorDirective);
export { IgxHeaderCollapseIndicatorDirective };
/**
 * @hidden
 */
let IgxGroupAreaDropDirective = class IgxGroupAreaDropDirective extends IgxDropDirective {
    constructor(elementRef, renderer, zone) {
        super(elementRef, renderer, zone);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        this.hovered = false;
    }
    onDragEnter(event) {
        const drag = event.detail.owner;
        const column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        const grid = column.grid;
        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;
        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
            drag.icon.innerText = 'group_work';
            this.hovered = true;
        }
        else {
            drag.icon.innerText = 'block';
            this.hovered = false;
        }
    }
    onDragLeave(event) {
        const drag = event.detail.owner;
        const column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        event.detail.owner.icon.innerText = 'block';
        this.hovered = false;
    }
    onDragDrop(event) {
        const drag = event.detail.owner;
        if (drag instanceof IgxColumnMovingDragDirective) {
            const column = drag.column;
            if (!this.columnBelongsToGrid(column)) {
                return;
            }
            const grid = column.grid;
            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;
            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,
                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });
            }
        }
    }
    closestParentByAttr(elem, attr) {
        return elem.hasAttribute(attr) ?
            elem :
            this.closestParentByAttr(elem.parentElement, attr);
    }
    columnBelongsToGrid(column) {
        const elem = this.elementRef.nativeElement;
        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');
        if (!column) {
            return false;
        }
        else {
            const grid = column.grid;
            if (!grid || grid.id !== closestGridID) {
                return false;
            }
            return true;
        }
    }
};
IgxGroupAreaDropDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
__decorate([
    HostBinding('class.igx-drop-area--hover')
], IgxGroupAreaDropDirective.prototype, "hovered", void 0);
IgxGroupAreaDropDirective = __decorate([
    Directive({
        selector: '[igxGroupAreaDrop]'
    })
], IgxGroupAreaDropDirective);
export { IgxGroupAreaDropDirective };
//# sourceMappingURL=data:application/json;base64,