import { __decorate } from "tslib";
import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { IgxGroupAreaDropDirective, IgxGroupByRowTemplateDirective, IgxRowExpandedIndicatorDirective, IgxRowCollapsedIndicatorDirective, IgxHeaderExpandIndicatorDirective, IgxHeaderCollapseIndicatorDirective, IgxGridDetailTemplateDirective } from './grid.directives';
import { IgxGridComponent } from './grid.component';
import { IgxGridPagingPipe, IgxGridGroupingPipe, IgxGridSortingPipe, IgxGridFilteringPipe } from './grid.pipes';
import { IgxGridGroupByRowComponent } from './groupby-row.component';
import { IgxGridRowComponent } from './grid-row.component';
import { IgxGridCommonModule } from '../grid-common.module';
import { IgxGridSummaryPipe } from './grid.summary.pipe';
import { IgxGridDetailsPipe } from './grid.details.pipe';
import { IgxGridExpandableCellComponent } from './expandable-cell.component';
/**
 * @hidden
 */
let IgxGridModule = class IgxGridModule {
};
IgxGridModule = __decorate([
    NgModule({
        declarations: [
            IgxGridComponent,
            IgxGridRowComponent,
            IgxGridGroupByRowComponent,
            IgxGroupByRowTemplateDirective,
            IgxGridDetailTemplateDirective,
            IgxRowExpandedIndicatorDirective,
            IgxRowCollapsedIndicatorDirective,
            IgxHeaderExpandIndicatorDirective,
            IgxHeaderCollapseIndicatorDirective,
            IgxGroupAreaDropDirective,
            IgxGridGroupingPipe,
            IgxGridPagingPipe,
            IgxGridSortingPipe,
            IgxGridFilteringPipe,
            IgxGridSummaryPipe,
            IgxGridDetailsPipe,
            IgxGridExpandableCellComponent
        ],
        exports: [
            IgxGridComponent,
            IgxGridExpandableCellComponent,
            IgxGridGroupByRowComponent,
            IgxGridRowComponent,
            IgxGroupByRowTemplateDirective,
            IgxGridDetailTemplateDirective,
            IgxRowExpandedIndicatorDirective,
            IgxRowCollapsedIndicatorDirective,
            IgxHeaderExpandIndicatorDirective,
            IgxHeaderCollapseIndicatorDirective,
            IgxGroupAreaDropDirective,
            IgxGridGroupingPipe,
            IgxGridPagingPipe,
            IgxGridSortingPipe,
            IgxGridFilteringPipe,
            IgxGridSummaryPipe,
            IgxGridDetailsPipe,
            IgxGridCommonModule
        ],
        imports: [
            IgxGridCommonModule,
        ],
        schemas: [CUSTOM_ELEMENTS_SCHEMA]
    })
], IgxGridModule);
export { IgxGridModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2dyaWQvZ3JpZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakUsT0FBTyxFQUNILHlCQUF5QixFQUN6Qiw4QkFBOEIsRUFDOUIsZ0NBQWdDLEVBQ2hDLGlDQUFpQyxFQUNqQyxpQ0FBaUMsRUFDakMsbUNBQW1DLEVBQ25DLDhCQUE4QixFQUNqQyxNQUFNLG1CQUFtQixDQUFDO0FBQzNCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFDSCxpQkFBaUIsRUFDakIsbUJBQW1CLEVBQ25CLGtCQUFrQixFQUNsQixvQkFBb0IsRUFDdkIsTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDekQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDekQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0U7O0dBRUc7QUE4Q0gsSUFBYSxhQUFhLEdBQTFCLE1BQWEsYUFBYTtDQUFHLENBQUE7QUFBaEIsYUFBYTtJQTdDekIsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFO1lBQ1osZ0JBQWdCO1lBQ2hCLG1CQUFtQjtZQUNuQiwwQkFBMEI7WUFDMUIsOEJBQThCO1lBQzlCLDhCQUE4QjtZQUM5QixnQ0FBZ0M7WUFDaEMsaUNBQWlDO1lBQ2pDLGlDQUFpQztZQUNqQyxtQ0FBbUM7WUFDbkMseUJBQXlCO1lBQ3pCLG1CQUFtQjtZQUNuQixpQkFBaUI7WUFDakIsa0JBQWtCO1lBQ2xCLG9CQUFvQjtZQUNwQixrQkFBa0I7WUFDbEIsa0JBQWtCO1lBQ2xCLDhCQUE4QjtTQUMvQjtRQUNELE9BQU8sRUFBRTtZQUNQLGdCQUFnQjtZQUNoQiw4QkFBOEI7WUFDOUIsMEJBQTBCO1lBQzFCLG1CQUFtQjtZQUNuQiw4QkFBOEI7WUFDOUIsOEJBQThCO1lBQzlCLGdDQUFnQztZQUNoQyxpQ0FBaUM7WUFDakMsaUNBQWlDO1lBQ2pDLG1DQUFtQztZQUNuQyx5QkFBeUI7WUFDekIsbUJBQW1CO1lBQ25CLGlCQUFpQjtZQUNqQixrQkFBa0I7WUFDbEIsb0JBQW9CO1lBQ3BCLGtCQUFrQjtZQUNsQixrQkFBa0I7WUFDbEIsbUJBQW1CO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsbUJBQW1CO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUM7S0FDbEMsQ0FBQztHQUNXLGFBQWEsQ0FBRztTQUFoQixhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIENVU1RPTV9FTEVNRU5UU19TQ0hFTUEgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgSWd4R3JvdXBBcmVhRHJvcERpcmVjdGl2ZSxcbiAgICBJZ3hHcm91cEJ5Um93VGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgSWd4Um93RXhwYW5kZWRJbmRpY2F0b3JEaXJlY3RpdmUsXG4gICAgSWd4Um93Q29sbGFwc2VkSW5kaWNhdG9yRGlyZWN0aXZlLFxuICAgIElneEhlYWRlckV4cGFuZEluZGljYXRvckRpcmVjdGl2ZSxcbiAgICBJZ3hIZWFkZXJDb2xsYXBzZUluZGljYXRvckRpcmVjdGl2ZSxcbiAgICBJZ3hHcmlkRGV0YWlsVGVtcGxhdGVEaXJlY3RpdmVcbn0gZnJvbSAnLi9ncmlkLmRpcmVjdGl2ZXMnO1xuaW1wb3J0IHsgSWd4R3JpZENvbXBvbmVudCB9IGZyb20gJy4vZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHtcbiAgICBJZ3hHcmlkUGFnaW5nUGlwZSxcbiAgICBJZ3hHcmlkR3JvdXBpbmdQaXBlLFxuICAgIElneEdyaWRTb3J0aW5nUGlwZSxcbiAgICBJZ3hHcmlkRmlsdGVyaW5nUGlwZVxufSBmcm9tICcuL2dyaWQucGlwZXMnO1xuaW1wb3J0IHsgSWd4R3JpZEdyb3VwQnlSb3dDb21wb25lbnQgfSBmcm9tICcuL2dyb3VwYnktcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hHcmlkUm93Q29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLXJvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4R3JpZENvbW1vbk1vZHVsZSB9IGZyb20gJy4uL2dyaWQtY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBJZ3hHcmlkU3VtbWFyeVBpcGUgfSBmcm9tICcuL2dyaWQuc3VtbWFyeS5waXBlJztcbmltcG9ydCB7IElneEdyaWREZXRhaWxzUGlwZSB9IGZyb20gJy4vZ3JpZC5kZXRhaWxzLnBpcGUnO1xuaW1wb3J0IHsgSWd4R3JpZEV4cGFuZGFibGVDZWxsQ29tcG9uZW50IH0gZnJvbSAnLi9leHBhbmRhYmxlLWNlbGwuY29tcG9uZW50Jztcbi8qKlxuICogQGhpZGRlblxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBJZ3hHcmlkQ29tcG9uZW50LFxuICAgIElneEdyaWRSb3dDb21wb25lbnQsXG4gICAgSWd4R3JpZEdyb3VwQnlSb3dDb21wb25lbnQsXG4gICAgSWd4R3JvdXBCeVJvd1RlbXBsYXRlRGlyZWN0aXZlLFxuICAgIElneEdyaWREZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBJZ3hSb3dFeHBhbmRlZEluZGljYXRvckRpcmVjdGl2ZSxcbiAgICBJZ3hSb3dDb2xsYXBzZWRJbmRpY2F0b3JEaXJlY3RpdmUsXG4gICAgSWd4SGVhZGVyRXhwYW5kSW5kaWNhdG9yRGlyZWN0aXZlLFxuICAgIElneEhlYWRlckNvbGxhcHNlSW5kaWNhdG9yRGlyZWN0aXZlLFxuICAgIElneEdyb3VwQXJlYURyb3BEaXJlY3RpdmUsXG4gICAgSWd4R3JpZEdyb3VwaW5nUGlwZSxcbiAgICBJZ3hHcmlkUGFnaW5nUGlwZSxcbiAgICBJZ3hHcmlkU29ydGluZ1BpcGUsXG4gICAgSWd4R3JpZEZpbHRlcmluZ1BpcGUsXG4gICAgSWd4R3JpZFN1bW1hcnlQaXBlLFxuICAgIElneEdyaWREZXRhaWxzUGlwZSxcbiAgICBJZ3hHcmlkRXhwYW5kYWJsZUNlbGxDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIElneEdyaWRDb21wb25lbnQsXG4gICAgSWd4R3JpZEV4cGFuZGFibGVDZWxsQ29tcG9uZW50LFxuICAgIElneEdyaWRHcm91cEJ5Um93Q29tcG9uZW50LFxuICAgIElneEdyaWRSb3dDb21wb25lbnQsXG4gICAgSWd4R3JvdXBCeVJvd1RlbXBsYXRlRGlyZWN0aXZlLFxuICAgIElneEdyaWREZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBJZ3hSb3dFeHBhbmRlZEluZGljYXRvckRpcmVjdGl2ZSxcbiAgICBJZ3hSb3dDb2xsYXBzZWRJbmRpY2F0b3JEaXJlY3RpdmUsXG4gICAgSWd4SGVhZGVyRXhwYW5kSW5kaWNhdG9yRGlyZWN0aXZlLFxuICAgIElneEhlYWRlckNvbGxhcHNlSW5kaWNhdG9yRGlyZWN0aXZlLFxuICAgIElneEdyb3VwQXJlYURyb3BEaXJlY3RpdmUsXG4gICAgSWd4R3JpZEdyb3VwaW5nUGlwZSxcbiAgICBJZ3hHcmlkUGFnaW5nUGlwZSxcbiAgICBJZ3hHcmlkU29ydGluZ1BpcGUsXG4gICAgSWd4R3JpZEZpbHRlcmluZ1BpcGUsXG4gICAgSWd4R3JpZFN1bW1hcnlQaXBlLFxuICAgIElneEdyaWREZXRhaWxzUGlwZSxcbiAgICBJZ3hHcmlkQ29tbW9uTW9kdWxlXG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgICBJZ3hHcmlkQ29tbW9uTW9kdWxlLFxuICBdLFxuICBzY2hlbWFzOiBbQ1VTVE9NX0VMRU1FTlRTX1NDSEVNQV1cbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZE1vZHVsZSB7fVxuIl19