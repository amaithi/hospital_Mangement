import { __decorate } from "tslib";
import { Directive, TemplateRef } from '@angular/core';
let IgxFilterCellTemplateDirective = class IgxFilterCellTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxFilterCellTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxFilterCellTemplateDirective = __decorate([
    Directive({
        selector: '[igxFilterCellTemplate]'
    })
], IgxFilterCellTemplateDirective);
export { IgxFilterCellTemplateDirective };
let IgxCellTemplateDirective = class IgxCellTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxCellTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxCellTemplateDirective = __decorate([
    Directive({
        selector: '[igxCell]'
    })
], IgxCellTemplateDirective);
export { IgxCellTemplateDirective };
let IgxCellHeaderTemplateDirective = class IgxCellHeaderTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxCellHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxCellHeaderTemplateDirective = __decorate([
    Directive({
        selector: '[igxHeader]'
    })
], IgxCellHeaderTemplateDirective);
export { IgxCellHeaderTemplateDirective };
/**
 * @hidden
 */
let IgxCellFooterTemplateDirective = class IgxCellFooterTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxCellFooterTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxCellFooterTemplateDirective = __decorate([
    Directive({
        selector: '[igxFooter]'
    })
], IgxCellFooterTemplateDirective);
export { IgxCellFooterTemplateDirective };
let IgxCellEditorTemplateDirective = class IgxCellEditorTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxCellEditorTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxCellEditorTemplateDirective = __decorate([
    Directive({
        selector: '[igxCellEditor]'
    })
], IgxCellEditorTemplateDirective);
export { IgxCellEditorTemplateDirective };
let IgxCollapsibleIndicatorTemplateDirective = class IgxCollapsibleIndicatorTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxCollapsibleIndicatorTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxCollapsibleIndicatorTemplateDirective = __decorate([
    Directive({
        selector: '[igxCollapsibleIndicator]'
    })
], IgxCollapsibleIndicatorTemplateDirective);
export { IgxCollapsibleIndicatorTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZ3JpZHMvY29sdW1ucy90ZW1wbGF0ZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU12RCxJQUFhLDhCQUE4QixHQUEzQyxNQUFhLDhCQUE4QjtJQUN2QyxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFHLENBQUM7Q0FDcEQsQ0FBQTs7WUFEZ0MsV0FBVzs7QUFEL0IsOEJBQThCO0lBSDFDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSx5QkFBeUI7S0FDdEMsQ0FBQztHQUNXLDhCQUE4QixDQUUxQztTQUZZLDhCQUE4QjtBQU8zQyxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF3QjtJQUVqQyxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7Q0FDckQsQ0FBQTs7WUFEZ0MsV0FBVzs7QUFGL0Isd0JBQXdCO0lBSHBDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxXQUFXO0tBQ3hCLENBQUM7R0FDVyx3QkFBd0IsQ0FHcEM7U0FIWSx3QkFBd0I7QUFRckMsSUFBYSw4QkFBOEIsR0FBM0MsTUFBYSw4QkFBOEI7SUFFdkMsWUFBbUIsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFBSSxDQUFDO0NBRXJELENBQUE7O1lBRmdDLFdBQVc7O0FBRi9CLDhCQUE4QjtJQUgxQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsYUFBYTtLQUMxQixDQUFDO0dBQ1csOEJBQThCLENBSTFDO1NBSlksOEJBQThCO0FBSzNDOztHQUVHO0FBSUgsSUFBYSw4QkFBOEIsR0FBM0MsTUFBYSw4QkFBOEI7SUFFdkMsWUFBbUIsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFBSSxDQUFDO0NBQ3JELENBQUE7O1lBRGdDLFdBQVc7O0FBRi9CLDhCQUE4QjtJQUgxQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsYUFBYTtLQUMxQixDQUFDO0dBQ1csOEJBQThCLENBRzFDO1NBSFksOEJBQThCO0FBUTNDLElBQWEsOEJBQThCLEdBQTNDLE1BQWEsOEJBQThCO0lBRXZDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQztDQUNyRCxDQUFBOztZQURnQyxXQUFXOztBQUYvQiw4QkFBOEI7SUFIMUMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGlCQUFpQjtLQUM5QixDQUFDO0dBQ1csOEJBQThCLENBRzFDO1NBSFksOEJBQThCO0FBUTNDLElBQWEsd0NBQXdDLEdBQXJELE1BQWEsd0NBQXdDO0lBRWpELFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQztDQUNyRCxDQUFBOztZQURnQyxXQUFXOztBQUYvQix3Q0FBd0M7SUFIcEQsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLDJCQUEyQjtLQUN4QyxDQUFDO0dBQ1csd0NBQXdDLENBR3BEO1NBSFksd0NBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEZpbHRlckNlbGxUZW1wbGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIElneEZpbHRlckNlbGxUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hDZWxsXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2VsbFRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEhlYWRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIElneENlbGxIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxuXG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Rm9vdGVyXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2VsbEZvb3RlclRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneENlbGxFZGl0b3JdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDZWxsRWRpdG9yVGVtcGxhdGVEaXJlY3RpdmUge1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q29sbGFwc2libGVJbmRpY2F0b3JdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDb2xsYXBzaWJsZUluZGljYXRvclRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG4iXX0=