import { __decorate } from "tslib";
import { Component, ChangeDetectorRef } from '@angular/core';
import { ColumnChooserBaseDirective } from '../column-chooser-base';
import { IgxColumnPinningItemDirective } from './pinning.directive';
let IgxColumnPinningComponent = class IgxColumnPinningComponent extends ColumnChooserBaseDirective {
    constructor(cdr) {
        super(cdr);
        this.cdr = cdr;
    }
    /**
     * @hidden
     */
    createColumnItem(container, column) {
        if (column.level !== 0 || column.disablePinning) {
            return null;
        }
        const item = new IgxColumnPinningItemDirective();
        item.container = container;
        item.column = column;
        return item;
    }
    /**
     * @hidden
     */
    checkboxValueChange(event, columnItem) {
        if (event.checked && !columnItem.pinnable) {
            event.checkbox.checked = false;
            return false;
        }
        columnItem.value = !columnItem.value;
    }
    /**
     * @hidden @internal
     */
    get pinnableColumns() {
        return this.columnItems.filter((col) => !col.pinningDisabled);
    }
};
IgxColumnPinningComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
IgxColumnPinningComponent = __decorate([
    Component({
        preserveWhitespaces: false,
        selector: 'igx-column-pinning',
        template: "\n<div class=\"igx-column-hiding__header\">\n    <h4 class=\"igx-column-hiding__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-hiding__header-input\" *ngIf=\"!disableFilter\">\n        <input igxInput\n            type=\"text\"\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-hiding__columns\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox igxColumnPinningItem\n        *ngFor=\"let columnItem of pinnableColumns\"\n        class=\"igx-column-hiding__columns-item\"\n        (change)=\"checkboxValueChange($event, columnItem)\"\n        [checked]=\"columnItem.value\">\n        {{ columnItem.name }}\n    </igx-checkbox>\n</div>\n"
    })
], IgxColumnPinningComponent);
export { IgxColumnPinningComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXBpbm5pbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9waW5uaW5nL2NvbHVtbi1waW5uaW5nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVNwRSxJQUFhLHlCQUF5QixHQUF0QyxNQUFhLHlCQUEwQixTQUFRLDBCQUEwQjtJQUVyRSxZQUFtQixHQUFzQjtRQUNyQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFESSxRQUFHLEdBQUgsR0FBRyxDQUFtQjtJQUV6QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxnQkFBZ0IsQ0FBQyxTQUFjLEVBQUUsTUFBVztRQUN4QyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUU7WUFDN0MsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE1BQU0sSUFBSSxHQUFHLElBQUksNkJBQTZCLEVBQUUsQ0FBQztRQUNqRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsVUFBeUM7UUFDdkUsSUFBSSxLQUFLLENBQUMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRTtZQUN2QyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDL0IsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFDRCxVQUFVLENBQUMsS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztJQUN6QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLGVBQWU7UUFDdEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbEUsQ0FBQztDQUNKLENBQUE7O1lBbEMyQixpQkFBaUI7O0FBRmhDLHlCQUF5QjtJQUxyQyxTQUFTLENBQUM7UUFDUCxtQkFBbUIsRUFBRSxLQUFLO1FBQzFCLFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsbzFCQUE4QztLQUNqRCxDQUFDO0dBQ1cseUJBQXlCLENBb0NyQztTQXBDWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbHVtbkNob29zZXJCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi4vY29sdW1uLWNob29zZXItYmFzZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5QaW5uaW5nSXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vcGlubmluZy5kaXJlY3RpdmUnO1xuXG5cblxuQENvbXBvbmVudCh7XG4gICAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gICAgc2VsZWN0b3I6ICdpZ3gtY29sdW1uLXBpbm5pbmcnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb2x1bW4tcGlubmluZy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q29sdW1uUGlubmluZ0NvbXBvbmVudCBleHRlbmRzIENvbHVtbkNob29zZXJCYXNlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgICAgIHN1cGVyKGNkcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNyZWF0ZUNvbHVtbkl0ZW0oY29udGFpbmVyOiBhbnksIGNvbHVtbjogYW55KSB7XG4gICAgICAgIGlmIChjb2x1bW4ubGV2ZWwgIT09IDAgfHwgY29sdW1uLmRpc2FibGVQaW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtID0gbmV3IElneENvbHVtblBpbm5pbmdJdGVtRGlyZWN0aXZlKCk7XG4gICAgICAgIGl0ZW0uY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICBpdGVtLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBjaGVja2JveFZhbHVlQ2hhbmdlKGV2ZW50LCBjb2x1bW5JdGVtOiBJZ3hDb2x1bW5QaW5uaW5nSXRlbURpcmVjdGl2ZSkge1xuICAgICAgICBpZiAoZXZlbnQuY2hlY2tlZCAmJiAhY29sdW1uSXRlbS5waW5uYWJsZSkge1xuICAgICAgICAgICAgZXZlbnQuY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbHVtbkl0ZW0udmFsdWUgPSAhY29sdW1uSXRlbS52YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcGlubmFibGVDb2x1bW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5JdGVtcy5maWx0ZXIoKGNvbCkgPT4gIWNvbC5waW5uaW5nRGlzYWJsZWQpO1xuICAgIH1cbn1cblxuIl19