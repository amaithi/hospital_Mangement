import { __decorate } from "tslib";
import { Component, Input, HostListener, ElementRef, HostBinding, Output, EventEmitter, OnInit, OnDestroy, TemplateRef } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { SliderHandle } from '../slider.common';
import { Subject } from 'rxjs';
import { IgxDirectionality } from '../../services/direction/directionality';
/**
 * @hidden
 */
var IgxSliderThumbComponent = /** @class */ (function () {
    function IgxSliderThumbComponent(_elementRef, _dir) {
        this._elementRef = _elementRef;
        this._dir = _dir;
        this._isActive = false;
        this._isPressed = false;
        this._destroy$ = new Subject();
        this.isActive = false;
        this.onThumbValueChange = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onHoverChange = new EventEmitter();
        this.tabindex = 0;
        this.zIndex = 0;
    }
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbPositionX", {
        get: function () {
            var thumbBounderies = this.nativeElement.getBoundingClientRect();
            var thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;
            return thumbBounderies.left + thumbCenter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbFromClass", {
        get: function () {
            return this.type === SliderHandle.FROM;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbToClass", {
        get: function () {
            return this.type === SliderHandle.TO;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbFromActiveClass", {
        get: function () {
            return this.type === SliderHandle.FROM && this._isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbToActiveClass", {
        get: function () {
            return this.type === SliderHandle.TO && this._isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbPressedClass", {
        get: function () {
            return this.isActive && this._isPressed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "nativeElement", {
        get: function () {
            return this._elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "destroy", {
        get: function () {
            return this._destroy$;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxSliderThumbComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.onPan
            .pipe(takeUntil(this._destroy$))
            .subscribe(function (mouseX) {
            return _this.updateThumbValue(mouseX);
        });
    };
    /**
     * @hidden
     */
    IgxSliderThumbComponent.prototype.ngOnDestroy = function () {
        this._destroy$.next(true);
        this._destroy$.complete();
    };
    IgxSliderThumbComponent.prototype.onPinterEnter = function () {
        this.onHoverChange.emit(true);
    };
    IgxSliderThumbComponent.prototype.onPointerLeave = function () {
        this.onHoverChange.emit(false);
    };
    IgxSliderThumbComponent.prototype.onKeyDown = function (event) {
        if (this.disabled) {
            return;
        }
        var increment = 0;
        if (event.key.endsWith('Left')) {
            increment = this.step * -1;
        }
        else if (event.key.endsWith('Right')) {
            increment = this.step;
        }
        else {
            return;
        }
        this.onChange.emit();
        this.onThumbValueChange.emit(increment);
    };
    IgxSliderThumbComponent.prototype.onBlur = function () {
        this.isActive = false;
        this.zIndex = 0;
    };
    IgxSliderThumbComponent.prototype.onFocusListener = function () {
        this.isActive = true;
        this.zIndex = 1;
    };
    /**
     * Show thumb label and ripple.
     */
    IgxSliderThumbComponent.prototype.showThumbIndicators = function () {
        this.toggleThumbIndicators(true);
    };
    /**
     * Hide thumb label and ripple.
     */
    IgxSliderThumbComponent.prototype.hideThumbIndicators = function () {
        this.toggleThumbIndicators(false);
    };
    IgxSliderThumbComponent.prototype.updateThumbValue = function (mouseX) {
        var updateValue = this.calculateTrackUpdate(mouseX);
        if (this.isActive && updateValue !== 0) {
            this.onThumbValueChange.emit(updateValue);
        }
    };
    IgxSliderThumbComponent.prototype.calculateTrackUpdate = function (mouseX) {
        var scaleX = this._dir.rtl ? this.thumbPositionX - mouseX : mouseX - this.thumbPositionX;
        var stepDistanceCenter = this.stepDistance / 2;
        // If the thumb scale range (slider update) is less th√†n a half step,
        // the position stays the same.
        var scaleXPositive = Math.abs(scaleX);
        if (scaleXPositive < stepDistanceCenter) {
            return 0;
        }
        return this.stepToProceed(scaleX, this.stepDistance);
    };
    IgxSliderThumbComponent.prototype.stepToProceed = function (scaleX, stepDist) {
        return Math.round(scaleX / stepDist) * this.step;
    };
    IgxSliderThumbComponent.prototype.toggleThumbIndicators = function (visible) {
        this._isPressed = visible;
        if (this.continuous || this.deactiveState) {
            this._isActive = false;
        }
        else {
            this._isActive = visible;
        }
    };
    IgxSliderThumbComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IgxDirectionality }
    ]; };
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "continuous", void 0);
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "thumbLabelVisibilityDuration", void 0);
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "onPan", void 0);
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "stepDistance", void 0);
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "step", void 0);
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "templateRef", void 0);
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "context", void 0);
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "type", void 0);
    __decorate([
        Input()
    ], IgxSliderThumbComponent.prototype, "deactiveState", void 0);
    __decorate([
        Output()
    ], IgxSliderThumbComponent.prototype, "onThumbValueChange", void 0);
    __decorate([
        Output()
    ], IgxSliderThumbComponent.prototype, "onChange", void 0);
    __decorate([
        Output()
    ], IgxSliderThumbComponent.prototype, "onHoverChange", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxSliderThumbComponent.prototype, "tabindex", void 0);
    __decorate([
        HostBinding('attr.z-index')
    ], IgxSliderThumbComponent.prototype, "zIndex", void 0);
    __decorate([
        HostBinding('class.igx-slider__thumb-from')
    ], IgxSliderThumbComponent.prototype, "thumbFromClass", null);
    __decorate([
        HostBinding('class.igx-slider__thumb-to')
    ], IgxSliderThumbComponent.prototype, "thumbToClass", null);
    __decorate([
        HostBinding('class.igx-slider__thumb-from--active')
    ], IgxSliderThumbComponent.prototype, "thumbFromActiveClass", null);
    __decorate([
        HostBinding('class.igx-slider__thumb-to--active')
    ], IgxSliderThumbComponent.prototype, "thumbToActiveClass", null);
    __decorate([
        HostBinding('class.igx-slider__thumb--pressed')
    ], IgxSliderThumbComponent.prototype, "thumbPressedClass", null);
    __decorate([
        HostListener('pointerenter')
    ], IgxSliderThumbComponent.prototype, "onPinterEnter", null);
    __decorate([
        HostListener('pointerleave')
    ], IgxSliderThumbComponent.prototype, "onPointerLeave", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], IgxSliderThumbComponent.prototype, "onKeyDown", null);
    __decorate([
        HostListener('blur')
    ], IgxSliderThumbComponent.prototype, "onBlur", null);
    __decorate([
        HostListener('focus')
    ], IgxSliderThumbComponent.prototype, "onFocusListener", null);
    IgxSliderThumbComponent = __decorate([
        Component({
            selector: 'igx-thumb',
            template: "<div class=\"dot\"></div>\n"
        })
    ], IgxSliderThumbComponent);
    return IgxSliderThumbComponent;
}());
export { IgxSliderThumbComponent };
//# sourceMappingURL=data:application/json;base64,