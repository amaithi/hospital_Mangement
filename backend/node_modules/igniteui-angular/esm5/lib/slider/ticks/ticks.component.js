import { __decorate } from "tslib";
import { Component, Input, HostBinding } from '@angular/core';
import { TicksOrientation, TickLabelsOrientation } from '../slider.common';
/**
 * @hidden
 */
var IgxTicksComponent = /** @class */ (function () {
    function IgxTicksComponent() {
        /**
         * @hidden
         */
        this.ticksClass = true;
    }
    Object.defineProperty(IgxTicksComponent.prototype, "ticksTopClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.ticksOrientation === TicksOrientation.Top;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTicksComponent.prototype, "hasPrimaryClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.primaryTicks > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTicksComponent.prototype, "labelsTopToBottomClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.tickLabelsOrientation === TickLabelsOrientation.TopToBottom;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTicksComponent.prototype, "labelsBottomToTopClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.tickLabelsOrientation === TickLabelsOrientation.BottomToTop;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the template context corresponding to
     * {@link IgxTickLabelTemplateDirective}
     *
     * ```typescript
     * return {
     *  $implicit //returns the value per each tick label.
     *  isPrimery //returns if the tick is primary.
     *  labels // returns the {@link labels} collection.
     *  index // returns the index per each tick of the whole sequence.
     * }
     * ```
     *
     * @param idx the index per each tick label.
     */
    IgxTicksComponent.prototype.context = function (idx) {
        return {
            $implicit: this.tickLabel(idx),
            isPrimary: this.isPrimary(idx),
            labels: this.labels,
            index: idx
        };
    };
    Object.defineProperty(IgxTicksComponent.prototype, "ticksLength", {
        /**
         * @hidden
         */
        get: function () {
            return this.primaryTicks > 0 ?
                ((this.primaryTicks - 1) * this.secondaryTicks) + this.primaryTicks :
                this.secondaryTicks > 0 ? this.secondaryTicks : 0;
        },
        enumerable: true,
        configurable: true
    });
    IgxTicksComponent.prototype.hiddenTickLabels = function (idx) {
        return this.isPrimary(idx) ? this.primaryTickLabels : this.secondaryTickLabels;
    };
    /**
     * @hidden
     */
    IgxTicksComponent.prototype.isPrimary = function (idx) {
        return this.primaryTicks <= 0 ? false :
            idx % (this.secondaryTicks + 1) === 0;
    };
    /**
     * @hidden
     */
    IgxTicksComponent.prototype.tickLabel = function (idx) {
        if (this.labelsViewEnabled) {
            return this.labels[idx];
        }
        var labelStep = (Math.max(this.minValue, this.maxValue) - Math.min(this.minValue, this.maxValue)) / (this.ticksLength - 1);
        var labelVal = labelStep * idx;
        return (this.minValue + labelVal).toFixed(2);
    };
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "primaryTicks", void 0);
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "secondaryTicks", void 0);
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "primaryTickLabels", void 0);
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "secondaryTickLabels", void 0);
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "ticksOrientation", void 0);
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "tickLabelsOrientation", void 0);
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "maxValue", void 0);
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "minValue", void 0);
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "labelsViewEnabled", void 0);
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "labels", void 0);
    __decorate([
        Input()
    ], IgxTicksComponent.prototype, "tickLabelTemplateRef", void 0);
    __decorate([
        HostBinding('class.igx-slider__ticks')
    ], IgxTicksComponent.prototype, "ticksClass", void 0);
    __decorate([
        HostBinding('class.igx-slider__ticks--top')
    ], IgxTicksComponent.prototype, "ticksTopClass", null);
    __decorate([
        HostBinding('class.igx-slider__ticks--tall')
    ], IgxTicksComponent.prototype, "hasPrimaryClass", null);
    __decorate([
        HostBinding('class.igx-slider__tick-labels--top-bottom')
    ], IgxTicksComponent.prototype, "labelsTopToBottomClass", null);
    __decorate([
        HostBinding('class.igx-slider__tick-labels--bottom-top')
    ], IgxTicksComponent.prototype, "labelsBottomToTopClass", null);
    IgxTicksComponent = __decorate([
        Component({
            selector: 'igx-ticks',
            template: "<div class=\"igx-slider__ticks-group\" *ngFor=\"let n of [].constructor(ticksLength); let idx=index\" [ngClass]=\"{ 'igx-slider__ticks-group--tall': isPrimary(idx)}\">\n    <div class=\"igx-slider__ticks-tick\">\n        <span class=\"igx-slider__ticks-label\" [ngClass]=\"{ 'igx-slider__tick-label--hidden': !hiddenTickLabels(idx)}\">\n            <ng-container *ngTemplateOutlet=\"tickLabelTemplateRef ? tickLabelTemplateRef : tickLabelDefaultTemplate; context: context(idx)\"></ng-container>\n        </span>\n    </div>\n</div>\n\n<ng-template #tickLabelDefaultTemplate let-value>\n    {{ value }}\n</ng-template>\n"
        })
    ], IgxTicksComponent);
    return IgxTicksComponent;
}());
export { IgxTicksComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlja3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zbGlkZXIvdGlja3MvdGlja3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBZSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFM0U7O0dBRUc7QUFLSDtJQUFBO1FBa0NJOztXQUVHO1FBRUksZUFBVSxHQUFHLElBQUksQ0FBQztJQTRGN0IsQ0FBQztJQXRGRyxzQkFBVyw0Q0FBYTtRQUp4Qjs7V0FFRzthQUVIO1lBQ0ksT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEtBQUssZ0JBQWdCLENBQUMsR0FBRyxDQUFDO1FBQzFELENBQUM7OztPQUFBO0lBTUQsc0JBQVcsOENBQWU7UUFKMUI7O1dBRUc7YUFFSDtZQUNJLE9BQU8sSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7SUFNRCxzQkFBVyxxREFBc0I7UUFKakM7O1dBRUc7YUFFSDtZQUNJLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixLQUFLLHFCQUFxQixDQUFDLFdBQVcsQ0FBQztRQUM1RSxDQUFDOzs7T0FBQTtJQU1ELHNCQUFXLHFEQUFzQjtRQUpqQzs7V0FFRzthQUVIO1lBQ0ksT0FBTyxJQUFJLENBQUMscUJBQXFCLEtBQUsscUJBQXFCLENBQUMsV0FBVyxDQUFDO1FBQzVFLENBQUM7OztPQUFBO0lBRUQ7Ozs7Ozs7Ozs7Ozs7O09BY0c7SUFDSSxtQ0FBTyxHQUFkLFVBQWUsR0FBVztRQUN0QixPQUFPO1lBQ0gsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1lBQzlCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcs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dCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZiwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRpY2tzT3JpZW50YXRpb24sIFRpY2tMYWJlbHNPcmllbnRhdGlvbiB9IGZyb20gJy4uL3NsaWRlci5jb21tb24nO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtdGlja3MnLFxuICAgIHRlbXBsYXRlVXJsOiAndGlja3MuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hUaWNrc0NvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcHJpbWFyeVRpY2tzOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBzZWNvbmRhcnlUaWNrczogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcHJpbWFyeVRpY2tMYWJlbHM6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBzZWNvbmRhcnlUaWNrTGFiZWxzOiBib29sZWFuO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdGlja3NPcmllbnRhdGlvbjogVGlja3NPcmllbnRhdGlvbjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHRpY2tMYWJlbHNPcmllbnRhdGlvbjogVGlja0xhYmVsc09yaWVudGF0aW9uO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbWF4VmFsdWU6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIG1pblZhbHVlOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBsYWJlbHNWaWV3RW5hYmxlZDogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGxhYmVsczogQXJyYXk8bnVtYmVyIHwgc3RyaW5nIHwgYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQ+O1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdGlja0xhYmVsVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGVyX190aWNrcycpXG4gICAgcHVibGljIHRpY2tzQ2xhc3MgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXNsaWRlcl9fdGlja3MtLXRvcCcpXG4gICAgcHVibGljIGdldCB0aWNrc1RvcENsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aWNrc09yaWVudGF0aW9uID09PSBUaWNrc09yaWVudGF0aW9uLlRvcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGVyX190aWNrcy0tdGFsbCcpXG4gICAgcHVibGljIGdldCBoYXNQcmltYXJ5Q2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaW1hcnlUaWNrcyA+IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXNsaWRlcl9fdGljay1sYWJlbHMtLXRvcC1ib3R0b20nKVxuICAgIHB1YmxpYyBnZXQgbGFiZWxzVG9wVG9Cb3R0b21DbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlja0xhYmVsc09yaWVudGF0aW9uID09PSBUaWNrTGFiZWxzT3JpZW50YXRpb24uVG9wVG9Cb3R0b207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXNsaWRlcl9fdGljay1sYWJlbHMtLWJvdHRvbS10b3AnKVxuICAgIHB1YmxpYyBnZXQgbGFiZWxzQm90dG9tVG9Ub3BDbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlja0xhYmVsc09yaWVudGF0aW9uID09PSBUaWNrTGFiZWxzT3JpZW50YXRpb24uQm90dG9tVG9Ub3A7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdGVtcGxhdGUgY29udGV4dCBjb3JyZXNwb25kaW5nIHRvXG4gICAgICoge0BsaW5rIElneFRpY2tMYWJlbFRlbXBsYXRlRGlyZWN0aXZlfVxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHJldHVybiB7XG4gICAgICogICRpbXBsaWNpdCAvL3JldHVybnMgdGhlIHZhbHVlIHBlciBlYWNoIHRpY2sgbGFiZWwuXG4gICAgICogIGlzUHJpbWVyeSAvL3JldHVybnMgaWYgdGhlIHRpY2sgaXMgcHJpbWFyeS5cbiAgICAgKiAgbGFiZWxzIC8vIHJldHVybnMgdGhlIHtAbGluayBsYWJlbHN9IGNvbGxlY3Rpb24uXG4gICAgICogIGluZGV4IC8vIHJldHVybnMgdGhlIGluZGV4IHBlciBlYWNoIHRpY2sgb2YgdGhlIHdob2xlIHNlcXVlbmNlLlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZHggdGhlIGluZGV4IHBlciBlYWNoIHRpY2sgbGFiZWwuXG4gICAgICovXG4gICAgcHVibGljIGNvbnRleHQoaWR4OiBudW1iZXIpOiBhbnkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJGltcGxpY2l0OiB0aGlzLnRpY2tMYWJlbChpZHgpLFxuICAgICAgICAgICAgaXNQcmltYXJ5OiB0aGlzLmlzUHJpbWFyeShpZHgpLFxuICAgICAgICAgICAgbGFiZWxzOiB0aGlzLmxhYmVscyxcbiAgICAgICAgICAgIGluZGV4OiBpZHhcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGdldCB0aWNrc0xlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeVRpY2tzID4gMCA/XG4gICAgICAgICAgICAgICAgKCh0aGlzLnByaW1hcnlUaWNrcyAtIDEpICogdGhpcy5zZWNvbmRhcnlUaWNrcykgKyB0aGlzLnByaW1hcnlUaWNrcyA6XG4gICAgICAgICAgICAgICAgdGhpcy5zZWNvbmRhcnlUaWNrcyA+IDAgPyB0aGlzLnNlY29uZGFyeVRpY2tzIDogMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZGVuVGlja0xhYmVscyhpZHg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ByaW1hcnkoaWR4KSA/IHRoaXMucHJpbWFyeVRpY2tMYWJlbHMgOiB0aGlzLnNlY29uZGFyeVRpY2tMYWJlbHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBpc1ByaW1hcnkoaWR4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeVRpY2tzIDw9IDAgPyBmYWxzZSA6XG4gICAgICAgICAgICBpZHggJSAodGhpcy5zZWNvbmRhcnlUaWNrcyArIDEpID09PSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgdGlja0xhYmVsKGlkeDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmxhYmVsc1ZpZXdFbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYWJlbHNbaWR4XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxhYmVsU3RlcCA9IChNYXRoLm1heCh0aGlzLm1pblZhbHVlLCB0aGlzLm1heFZhbHVlKSAtIE1hdGgubWluKHRoaXMubWluVmFsdWUsIHRoaXMubWF4VmFsdWUpKSAvICh0aGlzLnRpY2tzTGVuZ3RoIC0gMSk7XG4gICAgICAgIGNvbnN0IGxhYmVsVmFsID0gbGFiZWxTdGVwICogaWR4O1xuXG4gICAgICAgIHJldHVybiAodGhpcy5taW5WYWx1ZSArIGxhYmVsVmFsKS50b0ZpeGVkKDIpO1xuICAgIH1cbn1cbiJdfQ==