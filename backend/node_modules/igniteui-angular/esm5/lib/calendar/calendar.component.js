import { __assign, __decorate, __extends } from "tslib";
import { transition, trigger, useAnimation } from '@angular/animations';
import { Component, ContentChild, forwardRef, HostBinding, HostListener, Input, ViewChild, ViewChildren } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';
import { IgxCalendarHeaderTemplateDirective, IgxCalendarSubheaderTemplateDirective } from './calendar.directives';
import { monthRange } from './calendar';
import { CalendarView, IgxMonthPickerBaseDirective } from './month-picker-base';
import { IgxMonthsViewComponent } from './months-view/months-view.component';
import { IgxYearsViewComponent } from './years-view/years-view.component';
import { IgxDaysViewComponent } from './days-view/days-view.component';
import { interval } from 'rxjs';
import { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';
import { ScrollMonth } from './calendar-base';
var NEXT_ID = 0;
/**
 * Calendar provides a way to display date information.
 *
 * @igxModule IgxCalendarModule
 *
 * @igxTheme igx-calendar-theme, igx-icon-theme
 *
 * @igxKeywords calendar, datepicker, schedule, date
 *
 * @igxGroup Scheduling
 *
 * @remarks
 * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple
 * or range selection.
 *
 * @example:
 * ```html
 * <igx-calendar selection="range"></igx-calendar>
 * ```
 */
var IgxCalendarComponent = /** @class */ (function (_super) {
    __extends(IgxCalendarComponent, _super);
    function IgxCalendarComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Sets/gets the `id` of the calendar.
         *
         * @remarks
         * If not set, the `id` will have value `"igx-calendar-0"`.
         *
         * @example
         * ```html
         * <igx-calendar id="my-first-calendar"></igx-calendar>
         * ```
         * @memberof IgxCalendarComponent
         */
        _this.id = "igx-calendar-" + NEXT_ID++;
        /**
         * Sets/gets whether the calendar has header.
         * Default value is `true`.
         *
         * @example
         * ```html
         * <igx-calendar [hasHeader]="false"></igx-calendar>
         * ```
         */
        _this.hasHeader = true;
        /**
         * Sets/gets whether the calendar header will be in vertical position.
         * Default value is `false`.
         *
         * @example
         * ```html
         * <igx-calendar [vertical] = "true"></igx-calendar>
         * ```
         */
        _this.vertical = false;
        /**
         * Apply the different states for the transitions of animateChange
         * @hidden
         * @internal
         */
        _this.animationAction = '';
        /**
         * Denote if the calendar view was changed with the keyboard
         *
         * @hidden
         * @internal
         */
        _this.isKeydownTrigger = false;
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         * @internal
         */
        _this.tabindex = 0;
        /**
         * The default aria role attribute for the component.
         *
         * @hidden
         * @internal
         */
        _this.role = 'grid';
        /**
         * The default aria lebelled by attribute for the component.
         *
         * @hidden
         * @internal
         */
        _this.ariaLabelledBy = 'calendar';
        /**
         * The default css class applied to the component.
         *
         * @hidden
         * @internal
         */
        _this.styleClass = true;
        /**
         * @hidden
         * @internal
         */
        _this._monthsViewNumber = 1;
        /**
         * Continious navigation through the previous months
         * @hidden
         * @internal
         */
        _this.startPrevMonthScroll = function (isKeydownTrigger) {
            if (isKeydownTrigger === void 0) { isKeydownTrigger = false; }
            _this.startMonthScroll$.next();
            _this.monthScrollDirection = ScrollMonth.PREV;
            _this.previousMonth(isKeydownTrigger);
        };
        /**
         * Continious navigation through the next months
         * @hidden
         * @internal
         */
        _this.startNextMonthScroll = function (isKeydownTrigger) {
            if (isKeydownTrigger === void 0) { isKeydownTrigger = false; }
            _this.startMonthScroll$.next();
            _this.monthScrollDirection = ScrollMonth.NEXT;
            _this.nextMonth(isKeydownTrigger);
        };
        /**
         * Stop continuous navigation
         * @hidden
         * @internal
         */
        _this.stopMonthScroll = function (event) {
            event.stopPropagation();
            // generally the scrolling is built on the calendar component
            // and all start/stop scrolling methods are called on the calendar
            // if we change below lines to call stopMonthScroll$ on the calendar instead of on the views,
            // strange bug is introduced --> after changing number of months, continuous scrolling on mouse click does not happen
            _this.daysView.stopMonthScroll$.next(true);
            _this.daysView.stopMonthScroll$.complete();
            if (_this.monthScrollDirection === ScrollMonth.PREV) {
                _this.prevMonthBtn.nativeElement.focus();
            }
            else if (_this.monthScrollDirection === ScrollMonth.NEXT) {
                _this.nextMonthBtn.nativeElement.focus();
            }
            _this.monthScrollDirection = ScrollMonth.NONE;
        };
        return _this;
    }
    IgxCalendarComponent_1 = IgxCalendarComponent;
    Object.defineProperty(IgxCalendarComponent.prototype, "monthsViewNumber", {
        /**
         * Sets/gets the number of month views displayed.
         * Default value is `1`.
         *
         * @example
         * ```html
         * <igx-calendar [monthsViewNumber]="2"></igx-calendar>
         * ```
         */
        get: function () {
            return this._monthsViewNumber;
        },
        set: function (val) {
            if (val < 1) {
                return;
            }
            this._monthsViewNumber = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "styleVerticalClass", {
        /**
         * The default css class applied to the component.
         *
         * @hidden
         * @internal
         */
        get: function () {
            return this.vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "isYearView", {
        /**
         * Denote if the year view is active.
         * @hidden
         * @internal
         */
        get: function () {
            return this.activeView === CalendarView.YEAR;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "headerTemplate", {
        /**
         * Gets the header template.
         *
         * @example
         * ```typescript
         * let headerTemplate =  this.calendar.headerTeamplate;
         * ```
         * @memberof IgxCalendarComponent
         */
        get: function () {
            if (this.headerTemplateDirective) {
                return this.headerTemplateDirective.template;
            }
            return null;
        },
        /**
         * Sets the header template.
         *
         * @example
         * ```html
         * <igx-calendar headerTemplateDirective = "igxCalendarHeader"></igx-calendar>
         * ```
         * @memberof IgxCalendarComponent
         */
        set: function (directive) {
            this.headerTemplateDirective = directive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "subheaderTemplate", {
        /**
         * Gets the subheader template.
         *
         * @example
         * ```typescript
         * let subheaderTemplate = this.calendar.subheaderTemplate;
         * ```
         */
        get: function () {
            if (this.subheaderTemplateDirective) {
                return this.subheaderTemplateDirective.template;
            }
            return null;
        },
        /**
         * Sets the subheader template.
         *
         * @example
         * ```html
         * <igx-calendar subheaderTemplate = "igxCalendarSubheader"></igx-calendar>
         * ```
         * @memberof IgxCalendarComponent
         */
        set: function (directive) {
            this.subheaderTemplateDirective = directive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "headerContext", {
        /**
         * Gets the context for the template marked with the `igxCalendarHeader` directive.
         *
         * @example
         * ```typescript
         * let headerContext =  this.calendar.headerContext;
         * ```
         */
        get: function () {
            var date = this.headerDate;
            return this.generateContext(date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "context", {
        /**
         * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`
         * or `igxCalendarSubHeaderYear` directive.
         *
         * @example
         * ```typescript
         * let context =  this.calendar.context;
         * ```
         */
        get: function () {
            var date = this.viewDate;
            return this.generateContext(date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "headerDate", {
        /**
         * Date displayed in header
         *
         * @hidden
         * @internal
         */
        get: function () {
            return this.selectedDates ? this.selectedDates : new Date();
        },
        enumerable: true,
        configurable: true
    });
    IgxCalendarComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.setSiblingMonths(this.monthViews);
        this._monthViewsChanges$ = this.monthViews.changes.subscribe(function (c) {
            _this.setSiblingMonths(c);
        });
        this.startMonthScroll$.pipe(takeUntil(this.stopMonthScroll$), switchMap(function () { return _this.scrollMonth$.pipe(skipLast(1), debounce(function () { return interval(300); }), takeUntil(_this.stopMonthScroll$)); })).subscribe(function () {
            switch (_this.monthScrollDirection) {
                case ScrollMonth.PREV:
                    _this.previousMonth();
                    break;
                case ScrollMonth.NEXT:
                    _this.nextMonth();
                    break;
                case ScrollMonth.NONE:
                default:
                    break;
            }
        });
    };
    /**
     * Returns the locale representation of the month in the month view if enabled,
     * otherwise returns the default `Date.getMonth()` value.
     *
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.formattedMonth = function (value) {
        if (this.formatViews.month) {
            return this.formatterMonth.format(value);
        }
        return "" + value.getMonth();
    };
    /**
     * Change to previous month
     *
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.previousMonth = function (isKeydownTrigger) {
        if (isKeydownTrigger === void 0) { isKeydownTrigger = false; }
        this.viewDate = this.calendarModel.getPrevMonth(this.viewDate);
        this.animationAction = ScrollMonth.PREV;
        this.isKeydownTrigger = isKeydownTrigger;
    };
    /**
     * Change to next month
     *
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.nextMonth = function (isKeydownTrigger) {
        if (isKeydownTrigger === void 0) { isKeydownTrigger = false; }
        this.viewDate = this.calendarModel.getNextMonth(this.viewDate);
        this.animationAction = ScrollMonth.NEXT;
        this.isKeydownTrigger = isKeydownTrigger;
    };
    /**
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.onActiveViewDecade = function (args, activeViewIdx) {
        var _this = this;
        _super.prototype.activeViewDecade.call(this, activeViewIdx);
        requestAnimationFrame(function () {
            if (_this.dacadeView) {
                _this.dacadeView.date = args;
                _this.dacadeView.el.nativeElement.focus();
            }
        });
    };
    /**
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.onActiveViewDecadeKB = function (event, args, activeViewIdx) {
        var _this = this;
        _super.prototype.activeViewDecadeKB.call(this, event, activeViewIdx);
        requestAnimationFrame(function () {
            if (_this.dacadeView) {
                _this.dacadeView.date = args;
                _this.dacadeView.el.nativeElement.focus();
            }
        });
    };
    /**
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.getFormattedDate = function () {
        var date = this.headerDate;
        return {
            monthday: this.formatterMonthday.format(date),
            weekday: this.formatterWeekday.format(date),
        };
    };
    /**
     * Handles invoked on date selection
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.childClicked = function (instance) {
        if (instance.isPrevMonth) {
            this.previousMonth();
        }
        if (instance.isNextMonth) {
            this.nextMonth();
        }
        this.selectDateFromClient(instance.date);
        if (this.selection === 'multi') {
            this.deselectDateInMonthViews(instance.date);
        }
        this.onSelection.emit(this.selectedDates);
    };
    /**
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.viewChanging = function (args) {
        var _this = this;
        this.animationAction = args.monthAction;
        this.isKeydownTrigger = true;
        this.nextDate = args.nextDate;
        this.callback = function (next) {
            var day = _this.daysView.dates.find(function (item) { return item.date.date.getTime() === next.getTime(); });
            if (day) {
                _this.daysView.daysNavService.focusNextDate(day.nativeElement, args.key, true);
            }
        };
        this.viewDate = this.nextDate;
    };
    /**
     * @hidden
     * @intenal
     */
    IgxCalendarComponent.prototype.changeMonth = function (event) {
        var _this = this;
        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);
        this.activeView = CalendarView.DEFAULT;
        requestAnimationFrame(function () {
            var elem = _this.monthsBtns.find(function (e, idx) { return idx === _this.activeViewIdx; });
            if (elem) {
                elem.nativeElement.focus();
            }
        });
    };
    /**
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.onActiveViewYear = function (args, activeViewIdx, event) {
        var _this = this;
        this.activeView = CalendarView.YEAR;
        this.activeViewIdx = activeViewIdx;
        requestAnimationFrame(function () {
            _this.monthsView.date = args;
            _this.focusMonth(event.target);
        });
    };
    IgxCalendarComponent.prototype.focusMonth = function (target) {
        var month = this.monthsView.monthsRef.find(function (e) {
            return e.index === parseInt(target.parentElement.attributes['data-month'].value, 10);
        });
        if (month) {
            month.nativeElement.focus();
        }
    };
    /**
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.onActiveViewYearKB = function (args, event, activeViewIdx) {
        if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
            event.preventDefault();
            this.onActiveViewYear(args, activeViewIdx, event);
        }
    };
    /**
     * Deselects date(s) (based on the selection type).
     *
     * @example
     * ```typescript
     *  this.calendar.deselectDate(new Date(`2018-06-12`));
     * ````
     */
    IgxCalendarComponent.prototype.deselectDate = function (value) {
        var _this = this;
        _super.prototype.deselectDate.call(this, value);
        this.monthViews.forEach(function (view) {
            view.selectedDates = _this.selectedDates;
            view.rangeStarted = false;
        });
        this._onChangeCallback(this.selectedDates);
    };
    /**
     * Helper method that does deselection for all month views when selection is "multi"
     * If not called, selection in other month views stays
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.deselectDateInMonthViews = function (value) {
        this.monthViews.forEach(function (m) {
            m.deselectMultipleInMonth(value);
        });
    };
    /**
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.getViewDate = function (i) {
        var date = this.calendarModel.timedelta(this.viewDate, 'month', i);
        return date;
    };
    /**
     * Getter for the context object inside the calendar templates.
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.getContext = function (i) {
        var date = this.getViewDate(i);
        return this.generateContext(date, i);
    };
    /**
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.animationDone = function (event) {
        if (this.monthScrollDirection !== ScrollMonth.NONE) {
            this.scrollMonth$.next();
        }
        if (this.activeView !== CalendarView.DEFAULT) {
            return;
        }
        var monthView = this.daysView;
        var date = monthView.dates.find(function (d) { return d.selected; });
        while (!date && monthView.nextMonthView) {
            monthView = monthView.nextMonthView;
            date = monthView.dates.find(function (d) { return d.selected; });
        }
        if (date && date.isFocusable && !this.isKeydownTrigger) {
            setTimeout(function () {
                date.nativeElement.focus();
            }, parseInt(slideInRight.options.params.duration, 10));
        }
        else if (this.callback && (event.toState === ScrollMonth.NEXT || event.toState === ScrollMonth.PREV)) {
            this.callback(this.nextDate);
        }
        this.animationAction = ScrollMonth.NONE;
    };
    /**
     * Keyboard navigation of the calendar
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.onKeydownPageDown = function (event) {
        var _this = this;
        event.preventDefault();
        if (this.activeView !== CalendarView.DEFAULT) {
            return;
        }
        var isPageDown = event.key === 'PageDown';
        var step = isPageDown ? 1 : -1;
        var monthView = this.daysView;
        var activeDate;
        while (!activeDate && monthView) {
            activeDate = monthView.dates.find(function (date) { return date.nativeElement === document.activeElement; });
            monthView = monthView.nextMonthView;
        }
        if (activeDate) {
            this.nextDate = new Date(activeDate.date.date);
            var year = this.nextDate.getFullYear();
            var month = this.nextDate.getMonth() + step;
            if (isPageDown) {
                if (month > 11) {
                    month = 0;
                    year += step;
                }
            }
            else {
                if (month < 0) {
                    month = 11;
                    year += step;
                }
            }
            var range = monthRange(this.nextDate.getFullYear(), month);
            var day = this.nextDate.getDate();
            if (day > range[1]) {
                day = range[1];
            }
            this.nextDate.setDate(day);
            this.nextDate.setMonth(month);
            this.nextDate.setFullYear(year);
            this.callback = function (next) {
                monthView = _this.daysView;
                var dayItem;
                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {
                    dayItem = monthView.dates.find(function (d) { return d.date.date.getTime() === next.getTime(); });
                    monthView = monthView.nextMonthView;
                }
                if (dayItem && dayItem.isFocusable) {
                    dayItem.nativeElement.focus();
                }
            };
        }
        if (isPageDown) {
            this.nextMonth(true);
        }
        else {
            this.previousMonth(true);
        }
    };
    /**
     * Keyboard navigation of the calendar
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.onKeydownShiftPageUp = function (event) {
        var _this = this;
        event.preventDefault();
        if (this.activeView !== CalendarView.DEFAULT) {
            return;
        }
        var isPageDown = event.key === 'PageDown';
        var step = isPageDown ? 1 : -1;
        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', step);
        this.animationAction = isPageDown ? ScrollMonth.NEXT : ScrollMonth.PREV;
        this.isKeydownTrigger = true;
        var monthView = this.daysView;
        var activeDate;
        while (!activeDate && monthView) {
            activeDate = monthView.dates.find(function (date) { return date.nativeElement === document.activeElement; });
            monthView = monthView.nextMonthView;
        }
        if (activeDate) {
            this.nextDate = new Date(activeDate.date.date);
            var year = this.nextDate.getFullYear() + step;
            var range = monthRange(year, this.nextDate.getMonth());
            var day = this.nextDate.getDate();
            if (day > range[1]) {
                day = range[1];
            }
            this.nextDate.setDate(day);
            this.nextDate.setFullYear(year);
            this.callback = function (next) {
                monthView = _this.daysView;
                var dayItem;
                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {
                    dayItem = monthView.dates.find(function (d) { return d.date.date.getTime() === next.getTime(); });
                    monthView = monthView.nextMonthView;
                }
                if (dayItem && dayItem.isFocusable) {
                    dayItem.nativeElement.focus();
                }
            };
        }
    };
    /**
     * Keyboard navigation of the calendar
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.onKeydownHome = function (event) {
        if (this.daysView) {
            this.daysView.onKeydownHome(event);
        }
    };
    /**
     * Keyboard navigation of the calendar
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.onKeydownEnd = function (event) {
        if (this.daysView) {
            this.daysView.onKeydownEnd(event);
        }
    };
    /**
     * Stop continuous navigation on mouseup event
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.onMouseUp = function (event) {
        if (this.monthScrollDirection !== ScrollMonth.NONE) {
            this.stopMonthScroll(event);
        }
    };
    /**
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.ngOnDestroy = function () {
        if (this._monthViewsChanges$) {
            this._monthViewsChanges$.unsubscribe();
        }
    };
    /**
     * Helper method building and returning the context object inside
     * the calendar templates.
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.generateContext = function (value, i) {
        var _this = this;
        var formatObject = __assign({ index: i, monthView: function () { return _this.onActiveViewYear(value, i); }, yearView: function () { return _this.onActiveViewDecade(value, i); } }, this.calendarModel.formatToParts(value, this.locale, this.formatOptions, ['era', 'year', 'month', 'day', 'weekday']));
        return { $implicit: formatObject };
    };
    /**
     * Helper method that sets references for prev/next months for each month in the view
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.setSiblingMonths = function (monthViews) {
        var _this = this;
        monthViews.forEach(function (item, index) {
            var prevMonthView = _this.getMonthView(index - 1);
            var nextMonthView = _this.getMonthView(index + 1);
            item.nextMonthView = nextMonthView;
            item.prevMonthView = prevMonthView;
        });
    };
    /**
     * Helper method returning previous/next day views
     * @hidden
     * @internal
     */
    IgxCalendarComponent.prototype.getMonthView = function (index) {
        if (index === -1 || index === this.monthViews.length) {
            return null;
        }
        else {
            return this.monthViews.toArray()[index];
        }
    };
    var IgxCalendarComponent_1;
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxCalendarComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxCalendarComponent.prototype, "hasHeader", void 0);
    __decorate([
        Input()
    ], IgxCalendarComponent.prototype, "vertical", void 0);
    __decorate([
        Input()
    ], IgxCalendarComponent.prototype, "monthsViewNumber", null);
    __decorate([
        Input()
    ], IgxCalendarComponent.prototype, "animationAction", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxCalendarComponent.prototype, "tabindex", void 0);
    __decorate([
        HostBinding('attr.role')
    ], IgxCalendarComponent.prototype, "role", void 0);
    __decorate([
        HostBinding('attr.aria-labelledby')
    ], IgxCalendarComponent.prototype, "ariaLabelledBy", void 0);
    __decorate([
        HostBinding('class.igx-calendar--vertical')
    ], IgxCalendarComponent.prototype, "styleVerticalClass", null);
    __decorate([
        HostBinding('class.igx-calendar')
    ], IgxCalendarComponent.prototype, "styleClass", void 0);
    __decorate([
        ViewChild('months', { read: IgxMonthsViewComponent })
    ], IgxCalendarComponent.prototype, "monthsView", void 0);
    __decorate([
        ViewChildren('monthsBtn')
    ], IgxCalendarComponent.prototype, "monthsBtns", void 0);
    __decorate([
        ViewChild('decade', { read: IgxYearsViewComponent })
    ], IgxCalendarComponent.prototype, "dacadeView", void 0);
    __decorate([
        ViewChild('days', { read: IgxDaysViewComponent })
    ], IgxCalendarComponent.prototype, "daysView", void 0);
    __decorate([
        ViewChildren('days', { read: IgxDaysViewComponent })
    ], IgxCalendarComponent.prototype, "monthViews", void 0);
    __decorate([
        ViewChild('prevMonthBtn')
    ], IgxCalendarComponent.prototype, "prevMonthBtn", void 0);
    __decorate([
        ViewChild('nextMonthBtn')
    ], IgxCalendarComponent.prototype, "nextMonthBtn", void 0);
    __decorate([
        ContentChild(forwardRef(function () { return IgxCalendarHeaderTemplateDirective; }), { read: IgxCalendarHeaderTemplateDirective, static: true })
    ], IgxCalendarComponent.prototype, "headerTemplateDirective", void 0);
    __decorate([
        ContentChild(forwardRef(function () { return IgxCalendarSubheaderTemplateDirective; }), { read: IgxCalendarSubheaderTemplateDirective, static: true })
    ], IgxCalendarComponent.prototype, "subheaderTemplateDirective", void 0);
    __decorate([
        HostListener('keydown.pagedown', ['$event']),
        HostListener('keydown.pageup', ['$event'])
    ], IgxCalendarComponent.prototype, "onKeydownPageDown", null);
    __decorate([
        HostListener('keydown.shift.pageup', ['$event']),
        HostListener('keydown.shift.pagedown', ['$event'])
    ], IgxCalendarComponent.prototype, "onKeydownShiftPageUp", null);
    __decorate([
        HostListener('keydown.home', ['$event'])
    ], IgxCalendarComponent.prototype, "onKeydownHome", null);
    __decorate([
        HostListener('keydown.end', ['$event'])
    ], IgxCalendarComponent.prototype, "onKeydownEnd", null);
    __decorate([
        HostListener('document:mouseup', ['$event'])
    ], IgxCalendarComponent.prototype, "onMouseUp", null);
    IgxCalendarComponent = IgxCalendarComponent_1 = __decorate([
        Component({
            providers: [
                {
                    multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: IgxCalendarComponent_1
                }
            ],
            animations: [
                trigger('animateView', [
                    transition('void => 0', useAnimation(fadeIn)),
                    transition('void => *', useAnimation(scaleInCenter, {
                        params: {
                            duration: '.2s',
                            fromScale: .9
                        }
                    }))
                ]),
                trigger('animateChange', [
                    transition('* => prev', useAnimation(slideInLeft, {
                        params: {
                            fromPosition: 'translateX(-30%)'
                        }
                    })),
                    transition('* => next', useAnimation(slideInRight, {
                        params: {
                            fromPosition: 'translateX(30%)'
                        }
                    }))
                ])
            ],
            selector: 'igx-calendar',
            template: "<ng-template let-result #defaultHeader>\n    <span>{{ getFormattedDate().weekday }},&nbsp;</span>\n    <span>{{ getFormattedDate().monthday }}</span>\n</ng-template>\n\n<ng-template let-result #defaultMonth let-obj>\n    <span tabindex=\"0\" #monthsBtn (keydown)=\"onActiveViewYearKB(getViewDate(obj.index), $event, obj.index)\" (click)=\"onActiveViewYear(getViewDate(obj.index), obj.index, $event)\"\n        class=\"igx-calendar-picker__date\">\n        {{ formattedMonth(getViewDate(obj.index)) }}\n    </span>\n    <span tabindex=\"0\" #yearsBtn (keydown)=\"onActiveViewDecadeKB($event, getViewDate(obj.index), obj.index)\" (click)=\"onActiveViewDecade(getViewDate(obj.index), obj.index)\"\n        class=\"igx-calendar-picker__date\">\n        {{ formattedYear(getViewDate(obj.index)) }}\n    </span>\n</ng-template>\n\n<div *ngIf=\"selection === 'single' && hasHeader\" class=\"igx-calendar__header\">\n    <h5 class=\"igx-calendar__header-year\">{{ formattedYear(headerDate) }}</h5>\n    <h2 class=\"igx-calendar__header-date\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate ? headerTemplate : defaultHeader; context: headerContext\">\n        </ng-container>\n    </h2>\n</div>\n\n<div *ngIf=\"isDefaultView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\" (swiperight)=\"previousMonth()\"\n    (swipeleft)=\"nextMonth()\">\n    <div class=\"igx-calendar-picker\">\n        <div tabindex=\"0\" class=\"igx-calendar-picker__prev\" #prevMonthBtn\n            igxCalendarScrollMonth [startScroll]=\"startPrevMonthScroll\" [stopScroll]=\"stopMonthScroll\"  [ngStyle]=\"{\n                    'min-width.%': 100/(monthsViewNumber*7)\n                }\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_left</igx-icon>\n        </div>\n        <div class=\"igx-calendar-picker__dates\" *ngFor=\"let view of monthsViewNumber | IgxMonthViewSlots; index as i;\" [style.width.%]=\"100/monthsViewNumber\" [attr.data-month]=\"i | IgxGetViewDate:viewDate:false\">\n            <ng-container *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultMonth; context: getContext(i)\">\n            </ng-container>\n        </div>\n        <div tabindex=\"0\" class=\"igx-calendar-picker__next\" #nextMonthBtn\n            igxCalendarScrollMonth [startScroll]=\"startNextMonthScroll\" [stopScroll]=\"stopMonthScroll\" [ngStyle]=\"{\n                    'min-width.%': 100/(monthsViewNumber*7)\n                }\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_right</igx-icon>\n        </div>\n    </div>\n\n    <div style=\"display: flex\"\n        [@animateChange]=\"animationAction\"\n        (@animateChange.done)=\"animationDone($event)\">\n        <igx-days-view *ngFor=\"let view of monthsViewNumber | IgxMonthViewSlots; index as i;\" [changeDaysView]=\"true\" #days\n                [selection]=\"selection\"\n                [locale]=\"locale\"\n                [value]=\"value\"\n                [viewDate]=\"i | IgxGetViewDate:viewDate\"\n                [weekStart]=\"weekStart\"\n                [formatOptions]=\"formatOptions\"\n                [formatViews]=\"formatViews\"\n                [disabledDates]=\"disabledDates\"\n                [specialDates]=\"specialDates\"\n                [hideOutsideDays]=\"hideOutsideDays\"\n                (onViewChanging)=\"viewChanging($event)\"\n                (onDateSelection)=\"childClicked($event)\">\n        </igx-days-view>\n    </div>\n</div>\n\n<igx-months-view *ngIf=\"isYearView\" [@animateView]=\"activeView\" #months\n                 [date]=\"viewDate\"\n                 [locale]=\"locale\"\n                 [formatView]=\"formatViews.month\"\n                 [monthFormat]=\"formatOptions.month\"\n                 (onSelection)=\"changeMonth($event)\">\n</igx-months-view>\n\n<igx-years-view *ngIf=\"isDecadeView\" [@animateView]=\"activeView\" #decade\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.year\"\n                [yearFormat]=\"formatOptions.year\"\n                (onSelection)=\"changeYear($event)\">\n</igx-years-view>\n"
        })
    ], IgxCalendarComponent);
    return IgxCalendarComponent;
}(IgxMonthPickerBaseDirective));
export { IgxCalendarComponent };
//# sourceMappingURL=data:application/json;base64,