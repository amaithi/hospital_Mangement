import { __decorate } from "tslib";
import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ViewChildren, QueryList, ElementRef } from '@angular/core';
import { Calendar } from '../calendar';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxCalendarMonthDirective } from '../calendar.directives';
var NEXT_ID = 0;
var IgxMonthsViewComponent = /** @class */ (function () {
    function IgxMonthsViewComponent(el) {
        this.el = el;
        /**
         * Sets/gets the `id` of the months view.
         * If not set, the `id` will have value `"igx-months-view-0"`.
         * ```html
         * <igx-months-view id="my-months-view"></igx-months-view>
         * ```
         * ```typescript
         * let monthsViewId =  this.monthsView.id;
         * ```
         * @memberof IgxMonthsViewComponent
         */
        this.id = "igx-months-view-" + NEXT_ID++;
        /**
         * Gets/sets the selected date of the months view.
         * By default it is the current date.
         * ```html
         * <igx-months-view [date]="myDate"></igx-months-view>
         * ```
         * ```typescript
         * let date =  this.monthsView.date;
         * ```
         * @memberof IgxMonthsViewComponent
         */
        this.date = new Date();
        /**
         * Gets/sets whether the view should be rendered
         * according to the locale and monthFormat, if any.
         */
        this.formatView = true;
        /**
         * Emits an event when a selection is made in the months view.
         * Provides reference the `date` property in the `IgxMonthsViewComponent`.
         * ```html
         * <igx-months-view (onSelection)="onSelection($event)"></igx-months-view>
         * ```
         * @memberof IgxMonthsViewComponent
         */
        this.onSelection = new EventEmitter();
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this._locale = 'en';
        /**
         * @hidden
         */
        this._monthFormat = 'short';
        /**
         * @hidden
         */
        this._onTouchedCallback = function () { };
        /**
         * @hidden
         */
        this._onChangeCallback = function () { };
        this.initMonthFormatter();
        this._calendarModel = new Calendar();
    }
    IgxMonthsViewComponent_1 = IgxMonthsViewComponent;
    Object.defineProperty(IgxMonthsViewComponent.prototype, "monthFormat", {
        /**
         * Gets the month format option of the months view.
         * ```typescript
         * let monthFormat = this.monthsView.monthFormat.
         * ```
         */
        get: function () {
            return this._monthFormat;
        },
        /**
         * Sets the month format option of the months view.
         * ```html
         * <igx-months-view> [monthFormat] = "short'"</igx-months-view>
         * ```
         * @memberof IgxMonthsViewComponent
         */
        set: function (value) {
            this._monthFormat = value;
            this.initMonthFormatter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMonthsViewComponent.prototype, "locale", {
        /**
         * Gets the `locale` of the months view.
         * Default value is `"en"`.
         * ```typescript
         * let locale =  this.monthsView.locale;
         * ```
         * @memberof IgxMonthsViewComponent
         */
        get: function () {
            return this._locale;
        },
        /**
         * Sets the `locale` of the months view.
         * Expects a valid BCP 47 language tag.
         * Default value is `"en"`.
         * ```html
         * <igx-months-view [locale]="de"></igx-months-view>
         * ```
         * @memberof IgxMonthsViewComponent
         */
        set: function (value) {
            this._locale = value;
            this.initMonthFormatter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMonthsViewComponent.prototype, "months", {
        /**
         * Returns an array of date objects which are then used to
         * properly render the month names.
         *
         * Used in the template of the component
         *
         * @hidden
         */
        get: function () {
            var start = new Date(this.date.getFullYear(), 0, 1);
            var result = [];
            for (var i = 0; i < 12; i++) {
                result.push(start);
                start = this._calendarModel.timedelta(start, 'month', 1);
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the locale representation of the month in the months view.
     *
     * @hidden
     */
    IgxMonthsViewComponent.prototype.formattedMonth = function (value) {
        if (this.formatView) {
            return this._formatterMonth.format(value);
        }
        return "" + value.getMonth();
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.selectMonth = function (event) {
        this.onSelection.emit(event);
        this.date = event;
        this._onChangeCallback(this.date);
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.registerOnChange = function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.registerOnTouched = function (fn) {
        this._onTouchedCallback = fn;
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.writeValue = function (value) {
        if (value) {
            this.date = value;
        }
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.monthTracker = function (index, item) {
        return item.getMonth() + "}";
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.initMonthFormatter = function () {
        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.onKeydownArrowUp = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var node = this.monthsRef.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        var months = this.monthsRef.toArray();
        var nodeRect = node.nativeElement.getBoundingClientRect();
        for (var index = months.indexOf(node) - 1; index >= 0; index--) {
            var nextNodeRect = months[index].nativeElement.getBoundingClientRect();
            var tolerance = 6;
            if (nodeRect.top !== nextNodeRect.top && (nextNodeRect.left - nodeRect.left) < tolerance) {
                months[index].nativeElement.focus();
                break;
            }
        }
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.onKeydownArrowDown = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var node = this.monthsRef.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        var months = this.monthsRef.toArray();
        var nodeRect = node.nativeElement.getBoundingClientRect();
        for (var index = months.indexOf(node) + 1; index < months.length; index++) {
            var nextNodeRect = months[index].nativeElement.getBoundingClientRect();
            var tolerance = 6;
            if (nextNodeRect.top !== nodeRect.top && (nodeRect.left - nextNodeRect.left) < tolerance) {
                months[index].nativeElement.focus();
                break;
            }
        }
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.onKeydownArrowRight = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var node = this.monthsRef.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        var months = this.monthsRef.toArray();
        if (months.indexOf(node) + 1 < months.length) {
            var month = months[months.indexOf(node) + 1];
            month.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.onKeydownArrowLeft = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var node = this.monthsRef.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        var months = this.monthsRef.toArray();
        if (months.indexOf(node) - 1 >= 0) {
            var month = months[months.indexOf(node) - 1];
            month.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.onKeydownHome = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var month = this.monthsRef.toArray()[0];
        month.nativeElement.focus();
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.onKeydownEnd = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var months = this.monthsRef.toArray();
        var month = months[months.length - 1];
        month.nativeElement.focus();
    };
    /**
     * @hidden
     */
    IgxMonthsViewComponent.prototype.onKeydownEnter = function (event) {
        var value = this.monthsRef.find(function (date) { return date.nativeElement === event.target; }).value;
        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());
        this.onSelection.emit(this.date);
        this._onChangeCallback(this.date);
    };
    var IgxMonthsViewComponent_1;
    IgxMonthsViewComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxMonthsViewComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxMonthsViewComponent.prototype, "date", void 0);
    __decorate([
        Input()
    ], IgxMonthsViewComponent.prototype, "monthFormat", null);
    __decorate([
        Input()
    ], IgxMonthsViewComponent.prototype, "locale", null);
    __decorate([
        Input()
    ], IgxMonthsViewComponent.prototype, "formatView", void 0);
    __decorate([
        Output()
    ], IgxMonthsViewComponent.prototype, "onSelection", void 0);
    __decorate([
        HostBinding('class.igx-calendar')
    ], IgxMonthsViewComponent.prototype, "styleClass", void 0);
    __decorate([
        ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })
    ], IgxMonthsViewComponent.prototype, "monthsRef", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxMonthsViewComponent.prototype, "tabindex", void 0);
    __decorate([
        HostListener('keydown.arrowup', ['$event'])
    ], IgxMonthsViewComponent.prototype, "onKeydownArrowUp", null);
    __decorate([
        HostListener('keydown.arrowdown', ['$event'])
    ], IgxMonthsViewComponent.prototype, "onKeydownArrowDown", null);
    __decorate([
        HostListener('keydown.arrowright', ['$event'])
    ], IgxMonthsViewComponent.prototype, "onKeydownArrowRight", null);
    __decorate([
        HostListener('keydown.arrowleft', ['$event'])
    ], IgxMonthsViewComponent.prototype, "onKeydownArrowLeft", null);
    __decorate([
        HostListener('keydown.home', ['$event'])
    ], IgxMonthsViewComponent.prototype, "onKeydownHome", null);
    __decorate([
        HostListener('keydown.end', ['$event'])
    ], IgxMonthsViewComponent.prototype, "onKeydownEnd", null);
    __decorate([
        HostListener('keydown.enter', ['$event'])
    ], IgxMonthsViewComponent.prototype, "onKeydownEnter", null);
    IgxMonthsViewComponent = IgxMonthsViewComponent_1 = __decorate([
        Component({
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent_1, multi: true }],
            selector: 'igx-months-view',
            template: "<div class=\"igx-calendar__body\">\n    <div class=\"igx-calendar__body-row--wrap\">\n        <div [igxCalendarMonth]=\"month\" [date]=\"date\" (onMonthSelection)=\"selectMonth($event)\" [index]=\"i\" *ngFor=\"let month of months; index as i; trackBy: monthTracker\">\n            {{ formattedMonth(month) | titlecase }}\n        </div>\n    </div>\n</div>\n\n"
        })
    ], IgxMonthsViewComponent);
    return IgxMonthsViewComponent;
}());
export { IgxMonthsViewComponent };
//# sourceMappingURL=data:application/json;base64,