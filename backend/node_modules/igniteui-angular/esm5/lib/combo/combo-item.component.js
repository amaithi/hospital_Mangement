import { __decorate, __extends, __param } from "tslib";
import { Component, ElementRef, HostBinding, Inject, Input, DoCheck } from '@angular/core';
import { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';
import { IGX_DROPDOWN_BASE, Navigate } from '../drop-down/drop-down.common';
import { IgxComboAPIService } from './combo.api';
import { IgxSelectionAPIService } from '../core/selection';
/** @hidden */
var IgxComboItemComponent = /** @class */ (function (_super) {
    __extends(IgxComboItemComponent, _super);
    function IgxComboItemComponent(comboAPI, dropDown, elementRef, selection) {
        var _this = _super.call(this, dropDown, elementRef, null, selection) || this;
        _this.comboAPI = comboAPI;
        _this.dropDown = dropDown;
        _this.elementRef = elementRef;
        _this.selection = selection;
        /**
         * Gets the height of a list item
         * @hidden
         */
        _this.itemHeight = '';
        return _this;
    }
    Object.defineProperty(IgxComboItemComponent.prototype, "itemID", {
        /**
         * @hidden
         */
        get: function () {
            var valueKey = this.comboAPI.valueKey;
            return valueKey !== null ? this.value[valueKey] : this.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboItemComponent.prototype, "comboID", {
        /**
         * @hidden
         */
        get: function () {
            return this.comboAPI.comboID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboItemComponent.prototype, "disableTransitions", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            return this.comboAPI.disableTransitions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboItemComponent.prototype, "selected", {
        /**
         * @hidden
         */
        get: function () {
            return this.comboAPI.is_item_selected(this.itemID);
        },
        set: function (value) {
            if (this.isHeader) {
                return;
            }
            this._selected = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxComboItemComponent.prototype.isVisible = function (direction) {
        var rect = this.element.nativeElement.getBoundingClientRect();
        var parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();
        if (direction === Navigate.Down) {
            return rect.y + rect.height <= parentDiv.y + parentDiv.height;
        }
        return rect.y >= parentDiv.y;
    };
    /**
     * @inheritdoc
     */
    IgxComboItemComponent.prototype.clicked = function (event) {
        this.comboAPI.disableTransitions = false;
        if (!this.isSelectable) {
            return;
        }
        this.dropDown.navigateItem(this.index);
        this.comboAPI.set_selected_item(this.itemID, event);
    };
    /**
     * @hidden
     * @internal
     * The event that is prevented is the click on the checkbox label element.
     * That is the only visible element that a user can interact with.
     * The click propagates to the host and the preventDefault is to stop it from
     * switching focus to the input it's base on.
     * The toggle happens in an internal handler in the drop-down on the next task queue cycle.
     */
    IgxComboItemComponent.prototype.disableCheck = function (event) {
        event.preventDefault();
    };
    IgxComboItemComponent.prototype.ngDoCheck = function () {
    };
    IgxComboItemComponent.ctorParameters = function () { return [
        { type: IgxComboAPIService },
        { type: undefined, decorators: [{ type: Inject, args: [IGX_DROPDOWN_BASE,] }] },
        { type: ElementRef },
        { type: IgxSelectionAPIService, decorators: [{ type: Inject, args: [IgxSelectionAPIService,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('style.height.px')
    ], IgxComboItemComponent.prototype, "itemHeight", void 0);
    IgxComboItemComponent = __decorate([
        Component({
            selector: 'igx-combo-item',
            template: "<ng-container *ngIf=\"!isHeader\">\n    <igx-checkbox [checked]=\"selected\" disableRipple=\"true\" [disableTransitions]=\"disableTransitions\" [tabindex]=\"-1\" (click)=\"disableCheck($event)\" class=\"igx-combo__checkbox\"></igx-checkbox>\n</ng-container>\n<ng-content></ng-content>\n"
        }),
        __param(1, Inject(IGX_DROPDOWN_BASE)),
        __param(3, Inject(IgxSelectionAPIService))
    ], IgxComboItemComponent);
    return IgxComboItemComponent;
}(IgxDropDownItemComponent));
export { IgxComboItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm8taXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2NvbWJvL2NvbWJvLWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFDTCxPQUFPLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDakYsT0FBTyxFQUFFLGlCQUFpQixFQUFpQixRQUFRLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFM0QsY0FBYztBQUtkO0lBQTJDLHlDQUF3QjtJQWlDL0QsK0JBQ2MsUUFBNEIsRUFDRCxRQUF1QixFQUNsRCxVQUFzQixFQUNVLFNBQWlDO1FBSi9FLFlBTUksa0JBQU0sUUFBUSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLFNBQy9DO1FBTmEsY0FBUSxHQUFSLFFBQVEsQ0FBb0I7UUFDRCxjQUFRLEdBQVIsUUFBUSxDQUFlO1FBQ2xELGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ1UsZUFBUyxHQUFULFNBQVMsQ0FBd0I7UUFuQy9FOzs7V0FHRztRQUdJLGdCQUFVLEdBQUcsRUFBRSxDQUFDOztJQWdDdkIsQ0FBQztJQTNCRCxzQkFBVyx5Q0FBTTtRQUhqQjs7V0FFRzthQUNIO1lBQ0ksSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDeEMsT0FBTyxRQUFRLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2pFLENBQUM7OztPQUFBO0lBS0Qsc0JBQVcsMENBQU87UUFIbEI7O1dBRUc7YUFDSDtZQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7SUFNRCxzQkFBVyxxREFBa0I7UUFKN0I7OztXQUdHO2FBQ0g7WUFDSSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUM7UUFDNUMsQ0FBQzs7O09BQUE7SUFjRCxzQkFBSSwyQ0FBUTtRQUhaOztXQUVHO2FBQ0g7WUFDSSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELENBQUM7YUFFRCxVQUFhLEtBQWM7WUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNmLE9BQU87YUFDVjtZQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQzNCLENBQUM7OztPQVBBO0lBU0Q7O09BRUc7SUFDSCx5Q0FBUyxHQUFULFVBQVUsU0FBbUI7UUFDekIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNoRSxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDakcsSUFBSSxTQUFTLEtBQUssUUFBUSxDQUFDLElBQUksRUFBRTtZQUM3QixPQUFPLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7U0FDakU7UUFDRCxPQUFPLElBQUksQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCx1Q0FBTyxHQUFQLFVBQVEsS0FBSztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsNENBQVksR0FBWixVQUFhLEtBQWlCO1FBQzFCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQseUNBQVMsR0FBVDtJQUNBLENBQUM7O2dCQTFEdUIsa0JBQWtCO2dEQUNyQyxNQUFNLFNBQUMsaUJBQWlCO2dCQUNILFVBQVU7Z0JBQ3FCLHNCQUFzQix1QkFBMUUsTUFBTSxTQUFDLHNCQUFzQjs7SUE3QmxDO1FBRkMsS0FBSyxFQUFFO1FBQ1AsV0FBVyxDQUFDLGlCQUFpQixDQUFDOzZEQUNSO0lBUmQscUJBQXFCO1FBSmpDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsMFNBQXdDO1NBQzNDLENBQUM7UUFvQ08sV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUV6QixXQUFBLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO09BckMxQixxQkFBcUIsQ0E2RmpDO0lBQUQsNEJBQUM7Q0FBQSxBQTdGRCxDQUEyQyx3QkFBd0IsR0E2RmxFO1NBN0ZZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIERvQ2hlY2tcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hEcm9wRG93bkl0ZW1Db21wb25lbnQgfSBmcm9tICcuLi9kcm9wLWRvd24vZHJvcC1kb3duLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IElHWF9EUk9QRE9XTl9CQVNFLCBJRHJvcERvd25CYXNlLCBOYXZpZ2F0ZSB9IGZyb20gJy4uL2Ryb3AtZG93bi9kcm9wLWRvd24uY29tbW9uJztcbmltcG9ydCB7IElneENvbWJvQVBJU2VydmljZSB9IGZyb20gJy4vY29tYm8uYXBpJztcbmltcG9ydCB7IElneFNlbGVjdGlvbkFQSVNlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlbGVjdGlvbic7XG5cbi8qKiBAaGlkZGVuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC1jb21iby1pdGVtJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2NvbWJvLWl0ZW0uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElneENvbWJvSXRlbUNvbXBvbmVudCBleHRlbmRzIElneERyb3BEb3duSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIERvQ2hlY2sge1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGVpZ2h0IG9mIGEgbGlzdCBpdGVtXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5oZWlnaHQucHgnKVxuICAgIHB1YmxpYyBpdGVtSGVpZ2h0ID0gJyc7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGdldCBpdGVtSUQoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlS2V5ID0gdGhpcy5jb21ib0FQSS52YWx1ZUtleTtcbiAgICAgICAgcmV0dXJuIHZhbHVlS2V5ICE9PSBudWxsID8gdGhpcy52YWx1ZVt2YWx1ZUtleV0gOiB0aGlzLnZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGNvbWJvSUQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJvQVBJLmNvbWJvSUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZGlzYWJsZVRyYW5zaXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21ib0FQSS5kaXNhYmxlVHJhbnNpdGlvbnM7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByb3RlY3RlZCBjb21ib0FQSTogSWd4Q29tYm9BUElTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KElHWF9EUk9QRE9XTl9CQVNFKSBwcm90ZWN0ZWQgZHJvcERvd246IElEcm9wRG93bkJhc2UsXG4gICAgICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBASW5qZWN0KElneFNlbGVjdGlvbkFQSVNlcnZpY2UpIHByb3RlY3RlZCBzZWxlY3Rpb246IElneFNlbGVjdGlvbkFQSVNlcnZpY2VcbiAgICApIHtcbiAgICAgICAgc3VwZXIoZHJvcERvd24sIGVsZW1lbnRSZWYsIG51bGwsIHNlbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBzZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tYm9BUEkuaXNfaXRlbV9zZWxlY3RlZCh0aGlzLml0ZW1JRCk7XG4gICAgfVxuXG4gICAgc2V0IHNlbGVjdGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLmlzSGVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaXNWaXNpYmxlKGRpcmVjdGlvbjogTmF2aWdhdGUpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBwYXJlbnREaXYgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IE5hdmlnYXRlLkRvd24pIHtcbiAgICAgICAgICAgIHJldHVybiByZWN0LnkgKyByZWN0LmhlaWdodCA8PSBwYXJlbnREaXYueSArIHBhcmVudERpdi5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlY3QueSA+PSBwYXJlbnREaXYueTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIGNsaWNrZWQoZXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb21ib0FQSS5kaXNhYmxlVHJhbnNpdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgaWYgKCF0aGlzLmlzU2VsZWN0YWJsZSkgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5kcm9wRG93bi5uYXZpZ2F0ZUl0ZW0odGhpcy5pbmRleCk7XG4gICAgICAgIHRoaXMuY29tYm9BUEkuc2V0X3NlbGVjdGVkX2l0ZW0odGhpcy5pdGVtSUQsIGV2ZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICogVGhlIGV2ZW50IHRoYXQgaXMgcHJldmVudGVkIGlzIHRoZSBjbGljayBvbiB0aGUgY2hlY2tib3ggbGFiZWwgZWxlbWVudC5cbiAgICAgKiBUaGF0IGlzIHRoZSBvbmx5IHZpc2libGUgZWxlbWVudCB0aGF0IGEgdXNlciBjYW4gaW50ZXJhY3Qgd2l0aC5cbiAgICAgKiBUaGUgY2xpY2sgcHJvcGFnYXRlcyB0byB0aGUgaG9zdCBhbmQgdGhlIHByZXZlbnREZWZhdWx0IGlzIHRvIHN0b3AgaXQgZnJvbVxuICAgICAqIHN3aXRjaGluZyBmb2N1cyB0byB0aGUgaW5wdXQgaXQncyBiYXNlIG9uLlxuICAgICAqIFRoZSB0b2dnbGUgaGFwcGVucyBpbiBhbiBpbnRlcm5hbCBoYW5kbGVyIGluIHRoZSBkcm9wLWRvd24gb24gdGhlIG5leHQgdGFzayBxdWV1ZSBjeWNsZS5cbiAgICAgKi9cbiAgICBkaXNhYmxlQ2hlY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBuZ0RvQ2hlY2soKSB7XG4gICAgfVxufVxuIl19