import { __decorate, __read, __spread } from "tslib";
import { Injectable } from '@angular/core';
/**
 * Common service to be injected between components where those implementing common
 * ToggleView interface can register and toggle directives can call their methods.
 * TODO: Track currently active? Events?
 */
var IgxNavigationService = /** @class */ (function () {
    function IgxNavigationService() {
        this.navs = {};
    }
    IgxNavigationService.prototype.add = function (id, navItem) {
        this.navs[id] = navItem;
    };
    IgxNavigationService.prototype.remove = function (id) {
        delete this.navs[id];
    };
    IgxNavigationService.prototype.get = function (id) {
        if (id) {
            return this.navs[id];
        }
    };
    IgxNavigationService.prototype.toggle = function (id) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.navs[id]) {
            return (_a = this.navs[id]).toggle.apply(_a, __spread(args));
        }
    };
    IgxNavigationService.prototype.open = function (id) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.navs[id]) {
            return (_a = this.navs[id]).open.apply(_a, __spread(args));
        }
    };
    IgxNavigationService.prototype.close = function (id) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.navs[id]) {
            return (_a = this.navs[id]).close.apply(_a, __spread(args));
        }
    };
    IgxNavigationService = __decorate([
        Injectable()
    ], IgxNavigationService);
    return IgxNavigationService;
}());
export { IgxNavigationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2NvcmUvbmF2aWdhdGlvbi9uYXYuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQzs7OztHQUlHO0FBRUg7SUFHSTtRQUNJLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFTSxrQ0FBRyxHQUFWLFVBQVcsRUFBVSxFQUFFLE9BQW9CO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDO0lBQzVCLENBQUM7SUFFTSxxQ0FBTSxHQUFiLFVBQWMsRUFBVTtRQUNwQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVNLGtDQUFHLEdBQVYsVUFBVyxFQUFVO1FBQ2pCLElBQUksRUFBRSxFQUFFO1lBQ0osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3hCO0lBQ0wsQ0FBQztJQUVNLHFDQUFNLEdBQWIsVUFBYyxFQUFVOztRQUFFLGNBQU87YUFBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO1lBQVAsNkJBQU87O1FBQzdCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNmLE9BQU8sQ0FBQSxLQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxNQUFNLG9CQUFJLElBQUksR0FBRTtTQUN4QztJQUNMLENBQUM7SUFDTSxtQ0FBSSxHQUFYLFVBQVksRUFBVTs7UUFBRSxjQUFPO2FBQVAsVUFBTyxFQUFQLHFCQUFPLEVBQVAsSUFBTztZQUFQLDZCQUFPOztRQUMzQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDZixPQUFPLENBQUEsS0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUMsSUFBSSxvQkFBSSxJQUFJLEdBQUU7U0FDdEM7SUFDTCxDQUFDO0lBQ00sb0NBQUssR0FBWixVQUFhLEVBQVU7O1FBQUUsY0FBTzthQUFQLFVBQU8sRUFBUCxxQkFBTyxFQUFQLElBQU87WUFBUCw2QkFBTzs7UUFDNUIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2YsT0FBTyxDQUFBLEtBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDLEtBQUssb0JBQUksSUFBSSxHQUFFO1NBQ3ZDO0lBQ0wsQ0FBQztJQW5DUSxvQkFBb0I7UUFEaEMsVUFBVSxFQUFFO09BQ0Esb0JBQW9CLENBb0NoQztJQUFELDJCQUFDO0NBQUEsQUFwQ0QsSUFvQ0M7U0FwQ1ksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVRvZ2dsZVZpZXcgfSBmcm9tICcuL0lUb2dnbGVWaWV3JztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBDb21tb24gc2VydmljZSB0byBiZSBpbmplY3RlZCBiZXR3ZWVuIGNvbXBvbmVudHMgd2hlcmUgdGhvc2UgaW1wbGVtZW50aW5nIGNvbW1vblxuICogVG9nZ2xlVmlldyBpbnRlcmZhY2UgY2FuIHJlZ2lzdGVyIGFuZCB0b2dnbGUgZGlyZWN0aXZlcyBjYW4gY2FsbCB0aGVpciBtZXRob2RzLlxuICogVE9ETzogVHJhY2sgY3VycmVudGx5IGFjdGl2ZT8gRXZlbnRzP1xuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSWd4TmF2aWdhdGlvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgbmF2czogeyBbaWQ6IHN0cmluZ106IElUb2dnbGVWaWV3OyB9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubmF2cyA9IHt9O1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGQoaWQ6IHN0cmluZywgbmF2SXRlbTogSVRvZ2dsZVZpZXcpIHtcbiAgICAgICAgdGhpcy5uYXZzW2lkXSA9IG5hdkl0ZW07XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZShpZDogc3RyaW5nKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLm5hdnNbaWRdO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQoaWQ6IHN0cmluZyk6IElUb2dnbGVWaWV3IHtcbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYXZzW2lkXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGUoaWQ6IHN0cmluZywgLi4uYXJncykge1xuICAgICAgICBpZiAodGhpcy5uYXZzW2lkXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF2c1tpZF0udG9nZ2xlKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBvcGVuKGlkOiBzdHJpbmcsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMubmF2c1tpZF0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdnNbaWRdLm9wZW4oLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGNsb3NlKGlkOiBzdHJpbmcsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMubmF2c1tpZF0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdnNbaWRdLmNsb3NlKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19