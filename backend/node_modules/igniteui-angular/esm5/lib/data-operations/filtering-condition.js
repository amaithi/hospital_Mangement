import { __extends } from "tslib";
/**
 * Provides base filtering operations
 * Implementations should be Singleton
 *
 * @export
 */
var IgxFilteringOperand = /** @class */ (function () {
    function IgxFilteringOperand() {
        var _this = this;
        this.operations = [{
                name: 'null',
                isUnary: true,
                iconName: 'is_null',
                logic: function (target) {
                    return target === null;
                }
            }, {
                name: 'notNull',
                isUnary: true,
                iconName: 'is_not_null',
                logic: function (target) {
                    return target !== null;
                }
            }, {
                name: 'in',
                isUnary: false,
                iconName: 'is_in',
                hidden: true,
                logic: function (target, searchVal) {
                    return _this.findValueInSet(target, searchVal);
                }
            }];
    }
    IgxFilteringOperand.instance = function () {
        return this._instance || (this._instance = new this());
    };
    /**
     * @hidden
     */
    IgxFilteringOperand.prototype.findValueInSet = function (target, searchVal) {
        return searchVal.has(target);
    };
    /**
     * Returns an array of names of the conditions which are visible in the UI
     */
    IgxFilteringOperand.prototype.conditionList = function () {
        return this.operations.filter(function (f) { return !f.hidden; }).map(function (element) { return element.name; });
    };
    /**
     * Returns an instance of the condition with the specified name.
     * @param name The name of the condition.
     */
    IgxFilteringOperand.prototype.condition = function (name) {
        return this.operations.find(function (element) { return element.name === name; });
    };
    /**
     * Adds a new condition to the filtering operations.
     * @param operation The filtering operation.
     */
    IgxFilteringOperand.prototype.append = function (operation) {
        this.operations.push(operation);
    };
    IgxFilteringOperand._instance = null;
    return IgxFilteringOperand;
}());
export { IgxFilteringOperand };
/**
 * Provides filtering operations for booleans
 *
 * @export
 */
var IgxBooleanFilteringOperand = /** @class */ (function (_super) {
    __extends(IgxBooleanFilteringOperand, _super);
    function IgxBooleanFilteringOperand() {
        var _this = _super.call(this) || this;
        _this.operations = [{
                name: 'all',
                isUnary: true,
                iconName: 'all',
                logic: function (target) {
                    return true;
                }
            }, {
                name: 'true',
                isUnary: true,
                iconName: 'is_true',
                logic: function (target) {
                    return !!(target && target !== null && target !== undefined);
                }
            }, {
                name: 'false',
                isUnary: true,
                iconName: 'is_false',
                logic: function (target) {
                    return !target && target !== null && target !== undefined;
                }
            }, {
                name: 'empty',
                isUnary: true,
                iconName: 'empty',
                logic: function (target) {
                    return target === null || target === undefined;
                }
            }, {
                name: 'notEmpty',
                isUnary: true,
                iconName: 'not_empty',
                logic: function (target) {
                    return target !== null && target !== undefined;
                }
            }].concat(_this.operations);
        return _this;
    }
    return IgxBooleanFilteringOperand;
}(IgxFilteringOperand));
export { IgxBooleanFilteringOperand };
/**
 * Provides filtering operations for Dates
 *
 * @export
 */
var IgxDateFilteringOperand = /** @class */ (function (_super) {
    __extends(IgxDateFilteringOperand, _super);
    function IgxDateFilteringOperand() {
        var _this = _super.call(this) || this;
        _this.operations = [{
                name: 'equals',
                isUnary: false,
                iconName: 'equals',
                logic: function (target, searchVal) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');
                    var searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');
                    return targetp.year === searchp.year &&
                        targetp.month === searchp.month &&
                        targetp.day === searchp.day;
                }
            }, {
                name: 'doesNotEqual',
                isUnary: false,
                iconName: 'not_equal',
                logic: function (target, searchVal) {
                    if (!target) {
                        return true;
                    }
                    _this.validateInputData(target);
                    var targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');
                    var searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');
                    return targetp.year !== searchp.year ||
                        targetp.month !== searchp.month ||
                        targetp.day !== searchp.day;
                }
            }, {
                name: 'before',
                isUnary: false,
                iconName: 'is_before',
                logic: function (target, searchVal) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    return target < searchVal;
                }
            }, {
                name: 'after',
                isUnary: false,
                iconName: 'is_after',
                logic: function (target, searchVal) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    return target > searchVal;
                }
            }, {
                name: 'today',
                isUnary: true,
                iconName: 'today',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var d = IgxDateFilteringOperand.getDateParts(target, 'yMd');
                    var now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');
                    return d.year === now.year &&
                        d.month === now.month &&
                        d.day === now.day;
                }
            }, {
                name: 'yesterday',
                isUnary: true,
                iconName: 'yesterday',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var td = IgxDateFilteringOperand.getDateParts(target, 'yMd');
                    var y = (function (d) { return new Date(d.setDate(d.getDate() - 1)); })(new Date());
                    var yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');
                    return td.year === yesterday.year &&
                        td.month === yesterday.month &&
                        td.day === yesterday.day;
                }
            }, {
                name: 'thisMonth',
                isUnary: true,
                iconName: 'this_month',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var d = IgxDateFilteringOperand.getDateParts(target, 'yM');
                    var now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');
                    return d.year === now.year &&
                        d.month === now.month;
                }
            }, {
                name: 'lastMonth',
                isUnary: true,
                iconName: 'last_month',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var d = IgxDateFilteringOperand.getDateParts(target, 'yM');
                    var now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');
                    if (!now.month) {
                        now.month = 11;
                        now.year -= 1;
                    }
                    else {
                        now.month--;
                    }
                    return d.year === now.year &&
                        d.month === now.month;
                }
            }, {
                name: 'nextMonth',
                isUnary: true,
                iconName: 'next_month',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var d = IgxDateFilteringOperand.getDateParts(target, 'yM');
                    var now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');
                    if (now.month === 11) {
                        now.month = 0;
                        now.year += 1;
                    }
                    else {
                        now.month++;
                    }
                    return d.year === now.year &&
                        d.month === now.month;
                }
            }, {
                name: 'thisYear',
                isUnary: true,
                iconName: 'this_year',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var d = IgxDateFilteringOperand.getDateParts(target, 'y');
                    var now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');
                    return d.year === now.year;
                }
            }, {
                name: 'lastYear',
                isUnary: true,
                iconName: 'last_year',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var d = IgxDateFilteringOperand.getDateParts(target, 'y');
                    var now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');
                    return d.year === now.year - 1;
                }
            }, {
                name: 'nextYear',
                isUnary: true,
                iconName: 'next_year',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var d = IgxDateFilteringOperand.getDateParts(target, 'y');
                    var now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');
                    return d.year === now.year + 1;
                }
            }, {
                name: 'empty',
                isUnary: true,
                iconName: 'empty',
                logic: function (target) {
                    return target === null || target === undefined;
                }
            }, {
                name: 'notEmpty',
                isUnary: true,
                iconName: 'not_empty',
                logic: function (target) {
                    return target !== null && target !== undefined;
                }
            }].concat(_this.operations);
        return _this;
    }
    /**
     * Splits a Date object into parts
     *
     * @memberof IgxDateFilteringOperand
     */
    IgxDateFilteringOperand.getDateParts = function (date, dateFormat) {
        var res = {
            day: null,
            hours: null,
            milliseconds: null,
            minutes: null,
            month: null,
            seconds: null,
            year: null
        };
        if (!date || !dateFormat) {
            return res;
        }
        if (dateFormat.indexOf('y') >= 0) {
            res.year = date.getFullYear();
        }
        if (dateFormat.indexOf('M') >= 0) {
            res.month = date.getMonth();
        }
        if (dateFormat.indexOf('d') >= 0) {
            res.day = date.getDate();
        }
        if (dateFormat.indexOf('h') >= 0) {
            res.hours = date.getHours();
        }
        if (dateFormat.indexOf('m') >= 0) {
            res.minutes = date.getMinutes();
        }
        if (dateFormat.indexOf('s') >= 0) {
            res.seconds = date.getSeconds();
        }
        if (dateFormat.indexOf('f') >= 0) {
            res.milliseconds = date.getMilliseconds();
        }
        return res;
    };
    IgxDateFilteringOperand.prototype.validateInputData = function (target) {
        if (!(target instanceof Date)) {
            throw new Error('Could not perform filtering on \'date\' column because the datasource object type is not \'Date\'.');
        }
    };
    IgxDateFilteringOperand.prototype.findValueInSet = function (target, searchVal) {
        if (!target) {
            return false;
        }
        return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());
    };
    return IgxDateFilteringOperand;
}(IgxFilteringOperand));
export { IgxDateFilteringOperand };
/**
 * Provides filtering operations for numbers
 *
 * @export
 */
var IgxNumberFilteringOperand = /** @class */ (function (_super) {
    __extends(IgxNumberFilteringOperand, _super);
    function IgxNumberFilteringOperand() {
        var _this = _super.call(this) || this;
        _this.operations = [{
                name: 'equals',
                isUnary: false,
                iconName: 'equals',
                logic: function (target, searchVal) {
                    return target === searchVal;
                }
            }, {
                name: 'doesNotEqual',
                isUnary: false,
                iconName: 'not_equal',
                logic: function (target, searchVal) {
                    return target !== searchVal;
                }
            }, {
                name: 'greaterThan',
                isUnary: false,
                iconName: 'greater_than',
                logic: function (target, searchVal) {
                    return target > searchVal;
                }
            }, {
                name: 'lessThan',
                isUnary: false,
                iconName: 'less_than',
                logic: function (target, searchVal) {
                    return target < searchVal;
                }
            }, {
                name: 'greaterThanOrEqualTo',
                isUnary: false,
                iconName: 'greater_than_or_equal',
                logic: function (target, searchVal) {
                    return target >= searchVal;
                }
            }, {
                name: 'lessThanOrEqualTo',
                isUnary: false,
                iconName: 'less_than_or_equal',
                logic: function (target, searchVal) {
                    return target <= searchVal;
                }
            }, {
                name: 'empty',
                isUnary: true,
                iconName: 'empty',
                logic: function (target) {
                    return target === null || target === undefined || isNaN(target);
                }
            }, {
                name: 'notEmpty',
                isUnary: true,
                iconName: 'not_empty',
                logic: function (target) {
                    return target !== null && target !== undefined && !isNaN(target);
                }
            }].concat(_this.operations);
        return _this;
    }
    return IgxNumberFilteringOperand;
}(IgxFilteringOperand));
export { IgxNumberFilteringOperand };
/**
 * Provides filtering operations for strings
 *
 * @export
 */
var IgxStringFilteringOperand = /** @class */ (function (_super) {
    __extends(IgxStringFilteringOperand, _super);
    function IgxStringFilteringOperand() {
        var _this = _super.call(this) || this;
        _this.operations = [{
                name: 'contains',
                isUnary: false,
                iconName: 'contains',
                logic: function (target, searchVal, ignoreCase) {
                    var search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target.indexOf(search) !== -1;
                }
            }, {
                name: 'doesNotContain',
                isUnary: false,
                iconName: 'does_not_contain',
                logic: function (target, searchVal, ignoreCase) {
                    var search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target.indexOf(search) === -1;
                }
            }, {
                name: 'startsWith',
                isUnary: false,
                iconName: 'starts_with',
                logic: function (target, searchVal, ignoreCase) {
                    var search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target.startsWith(search);
                }
            }, {
                name: 'endsWith',
                isUnary: false,
                iconName: 'ends_with',
                logic: function (target, searchVal, ignoreCase) {
                    var search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target.endsWith(search);
                }
            }, {
                name: 'equals',
                isUnary: false,
                iconName: 'equals',
                logic: function (target, searchVal, ignoreCase) {
                    var search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target === search;
                }
            }, {
                name: 'doesNotEqual',
                isUnary: false,
                iconName: 'not_equal',
                logic: function (target, searchVal, ignoreCase) {
                    var search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target !== search;
                }
            }, {
                name: 'empty',
                isUnary: true,
                iconName: 'empty',
                logic: function (target) {
                    return target === null || target === undefined || target.length === 0;
                }
            }, {
                name: 'notEmpty',
                isUnary: true,
                iconName: 'not_empty',
                logic: function (target) {
                    return target !== null && target !== undefined && target.length > 0;
                }
            }].concat(_this.operations);
        return _this;
    }
    /**
     * Applies case sensitivity on strings if provided
     *
     * @memberof IgxStringFilteringOperand
     */
    IgxStringFilteringOperand.applyIgnoreCase = function (a, ignoreCase) {
        a = a || '';
        // bulletproof
        return ignoreCase ? ('' + a).toLowerCase() : a;
    };
    return IgxStringFilteringOperand;
}(IgxFilteringOperand));
export { IgxStringFilteringOperand };
//# sourceMappingURL=data:application/json;base64,