import { __extends, __read, __spread, __values } from "tslib";
import { cloneArray } from '../core/utils';
import { SortingDirection } from './sorting-expression.interface';
import { getHierarchy, isHierarchyMatch } from './operations';
var DefaultSortingStrategy = /** @class */ (function () {
    function DefaultSortingStrategy() {
    }
    DefaultSortingStrategy.instance = function () {
        return this._instance || (this._instance = new this());
    };
    DefaultSortingStrategy.prototype.sort = function (data, fieldName, dir, ignoreCase, valueResolver) {
        var _this = this;
        var key = fieldName;
        var reverse = (dir === SortingDirection.Desc ? -1 : 1);
        var cmpFunc = function (obj1, obj2) {
            return _this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);
        };
        return this.arraySort(data, cmpFunc);
    };
    DefaultSortingStrategy.prototype.compareValues = function (a, b) {
        var an = (a === null || a === undefined);
        var bn = (b === null || b === undefined);
        if (an) {
            if (bn) {
                return 0;
            }
            return -1;
        }
        else if (bn) {
            return 1;
        }
        return a > b ? 1 : a < b ? -1 : 0;
    };
    DefaultSortingStrategy.prototype.compareObjects = function (obj1, obj2, key, reverse, ignoreCase, valueResolver) {
        var a = valueResolver(obj1, key);
        var b = valueResolver(obj2, key);
        if (ignoreCase) {
            a = a && a.toLowerCase ? a.toLowerCase() : a;
            b = b && b.toLowerCase ? b.toLowerCase() : b;
        }
        return reverse * this.compareValues(a, b);
    };
    DefaultSortingStrategy.prototype.arraySort = function (data, compareFn) {
        return data.sort(compareFn);
    };
    DefaultSortingStrategy._instance = null;
    return DefaultSortingStrategy;
}());
export { DefaultSortingStrategy };
var NoopSortingStrategy = /** @class */ (function () {
    function NoopSortingStrategy() {
    }
    NoopSortingStrategy.instance = function () {
        return this._instance || (this._instance = new NoopSortingStrategy());
    };
    NoopSortingStrategy.prototype.sort = function (data, expressions) {
        return data;
    };
    NoopSortingStrategy._instance = null;
    return NoopSortingStrategy;
}());
export { NoopSortingStrategy };
var IgxSorting = /** @class */ (function () {
    function IgxSorting() {
    }
    IgxSorting.prototype.sort = function (data, expressions) {
        return this.sortDataRecursive(data, expressions);
    };
    IgxSorting.prototype.groupedRecordsByExpression = function (data, index, expression) {
        var i;
        var groupval;
        var res = [];
        var key = expression.fieldName;
        var len = data.length;
        res.push(data[index]);
        groupval = this.getFieldValue(data[index], key);
        index++;
        var comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;
        for (i = index; i < len; i++) {
            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {
                res.push(data[i]);
            }
            else {
                break;
            }
        }
        return res;
    };
    IgxSorting.prototype.sortDataRecursive = function (data, expressions, expressionIndex) {
        if (expressionIndex === void 0) { expressionIndex = 0; }
        var i;
        var j;
        var expr;
        var gbData;
        var gbDataLen;
        var exprsLen = expressions.length;
        var dataLen = data.length;
        expressionIndex = expressionIndex || 0;
        if (expressionIndex >= exprsLen || dataLen <= 1) {
            return data;
        }
        expr = expressions[expressionIndex];
        if (!expr.strategy) {
            expr.strategy = DefaultSortingStrategy.instance();
        }
        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);
        if (expressionIndex === exprsLen - 1) {
            return data;
        }
        // in case of multiple sorting
        for (i = 0; i < dataLen; i++) {
            gbData = this.groupedRecordsByExpression(data, i, expr);
            gbDataLen = gbData.length;
            if (gbDataLen > 1) {
                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);
            }
            for (j = 0; j < gbDataLen; j++) {
                data[i + j] = gbData[j];
            }
            i += gbDataLen - 1;
        }
        return data;
    };
    IgxSorting.prototype.groupDataRecursive = function (data, state, level, parent, metadata, grid, groupsRecords, fullResult) {
        if (grid === void 0) { grid = null; }
        if (groupsRecords === void 0) { groupsRecords = []; }
        if (fullResult === void 0) { fullResult = { data: [], metadata: [] }; }
        var expressions = state.expressions;
        var expansion = state.expansion;
        var i = 0;
        var result = [];
        var _loop_1 = function () {
            var e_1, _a;
            var group = this_1.groupedRecordsByExpression(data, i, expressions[level]);
            var groupRow = {
                expression: expressions[level],
                level: level,
                records: cloneArray(group),
                value: group[0][expressions[level].fieldName],
                groupParent: parent,
                groups: [],
                height: grid ? grid.renderedRowHeight : null
            };
            if (parent) {
                parent.groups.push(groupRow);
            }
            else {
                groupsRecords.push(groupRow);
            }
            var hierarchy = getHierarchy(groupRow);
            var expandState = expansion.find(function (s) {
                return isHierarchyMatch(s.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy);
            });
            var expanded = expandState ? expandState.expanded : state.defaultExpanded;
            var recursiveResult = void 0;
            result.push(groupRow);
            metadata.push(null);
            fullResult.data.push(groupRow);
            fullResult.metadata.push(null);
            if (level < expressions.length - 1) {
                recursiveResult = this_1.groupDataRecursive(group, state, level + 1, groupRow, expanded ? metadata : [], grid, groupsRecords, fullResult);
                if (expanded) {
                    result = result.concat(recursiveResult);
                }
            }
            else {
                try {
                    for (var group_1 = (e_1 = void 0, __values(group)), group_1_1 = group_1.next(); !group_1_1.done; group_1_1 = group_1.next()) {
                        var groupItem = group_1_1.value;
                        fullResult.metadata.push(groupRow);
                        fullResult.data.push(groupItem);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (group_1_1 && !group_1_1.done && (_a = group_1.return)) _a.call(group_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (expanded) {
                    metadata.push.apply(metadata, __spread(fullResult.metadata.slice(fullResult.metadata.length - group.length)));
                    result.push.apply(result, __spread(fullResult.data.slice(fullResult.data.length - group.length)));
                }
            }
            i += group.length;
        };
        var this_1 = this;
        while (i < data.length) {
            _loop_1();
        }
        return result;
    };
    IgxSorting.prototype.getFieldValue = function (obj, key) {
        return obj[key];
    };
    return IgxSorting;
}());
export { IgxSorting };
var IgxDataRecordSorting = /** @class */ (function (_super) {
    __extends(IgxDataRecordSorting, _super);
    function IgxDataRecordSorting() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxDataRecordSorting.prototype.getFieldValue = function (obj, key) {
        return obj.data[key];
    };
    return IgxDataRecordSorting;
}(IgxSorting));
export { IgxDataRecordSorting };
//# sourceMappingURL=data:application/json;base64,