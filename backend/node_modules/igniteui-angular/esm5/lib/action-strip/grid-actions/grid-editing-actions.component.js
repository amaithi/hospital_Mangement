import { __decorate, __extends } from "tslib";
import { Component, HostBinding } from '@angular/core';
import { IgxGridActionsBaseDirective } from './grid-actions-base.directive';
import { showMessage } from '../../core/deprecateDecorators';
var IgxGridEditingActionsComponent = /** @class */ (function (_super) {
    __extends(IgxGridEditingActionsComponent, _super);
    function IgxGridEditingActionsComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Host `class.igx-action-strip` binding.
         * @hidden
         * @internal
         */
        _this.cssClass = 'igx-action-strip__editing-actions';
        _this.isMessageShown = false;
        return _this;
    }
    IgxGridEditingActionsComponent_1 = IgxGridEditingActionsComponent;
    /**
     * Enter row or cell edit mode depending the grid rowEditable option
     * @example
     * ```typescript
     * this.gridEditingActions.startEdit();
     * ```
     */
    IgxGridEditingActionsComponent.prototype.startEdit = function (event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        var row = this.strip.context;
        var firstEditable = row.cells.filter(function (cell) { return cell.editable; })[0];
        var grid = row.grid;
        if (!grid.hasEditableColumns) {
            this.isMessageShown = showMessage('The grid should be editable in order to use IgxGridEditingActionsComponent', this.isMessageShown);
            return;
        }
        // be sure row is in view
        if (grid.rowList.filter(function (r) { return r === row; }).length !== 0) {
            grid.crudService.begin(firstEditable);
        }
        this.strip.hide();
    };
    /**
     * Delete a row according to the context
     * @example
     * ```typescript
     * this.gridEditingActions.deleteRow();
     * ```
     */
    IgxGridEditingActionsComponent.prototype.deleteRow = function (event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        var context = this.strip.context;
        var grid = context.grid;
        grid.deleteRow(context.rowID);
        this.strip.hide();
    };
    Object.defineProperty(IgxGridEditingActionsComponent.prototype, "disabled", {
        /**
         * Getter if the row is disabled
         * @hidden
         * @internal
         */
        get: function () {
            if (!this.isRow(this.strip.context)) {
                return;
            }
            return this.strip.context.disabled;
        },
        enumerable: true,
        configurable: true
    });
    var IgxGridEditingActionsComponent_1;
    __decorate([
        HostBinding('class.igx-action-strip__editing-actions')
    ], IgxGridEditingActionsComponent.prototype, "cssClass", void 0);
    IgxGridEditingActionsComponent = IgxGridEditingActionsComponent_1 = __decorate([
        Component({
            selector: 'igx-grid-editing-actions',
            template: "<ng-container *ngIf=\"isRowContext\">\n    <button igxButton=\"icon\" [disabled]=\"disabled\" igxRipple (click)=\"startEdit($event)\">\n        <igx-icon>edit</igx-icon>\n    </button>\n    <button igxButton=\"icon\" [disabled]=\"disabled\" class=\"igx-action-strip__delete\" igxRipple (click)=\"deleteRow($event)\">\n        <igx-icon >delete</igx-icon>\n    </button>\n</ng-container>\n",
            providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridEditingActionsComponent_1 }]
        })
    ], IgxGridEditingActionsComponent);
    return IgxGridEditingActionsComponent;
}(IgxGridActionsBaseDirective));
export { IgxGridEditingActionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1lZGl0aW5nLWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9hY3Rpb24tc3RyaXAvZ3JpZC1hY3Rpb25zL2dyaWQtZWRpdGluZy1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBUTdEO0lBQW9ELGtEQUEyQjtJQUEvRTtRQUFBLHFFQXdFQztRQXZFRzs7OztXQUlHO1FBRUksY0FBUSxHQUFHLG1DQUFtQyxDQUFDO1FBRTlDLG9CQUFjLEdBQUcsS0FBSyxDQUFDOztJQStEbkMsQ0FBQzt1Q0F4RVksOEJBQThCO0lBV3ZDOzs7Ozs7T0FNRztJQUNJLGtEQUFTLEdBQWhCLFVBQWlCLEtBQU07UUFDbkIsSUFBSSxLQUFLLEVBQUU7WUFDUCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDM0I7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2pDLE9BQU87U0FDVjtRQUNELElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQy9CLElBQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLFFBQVEsRUFBYixDQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxXQUFXLENBQzdCLDRFQUE0RSxFQUM1RSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDckIsT0FBTztTQUNkO1FBQ0QseUJBQXlCO1FBQ3pCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEtBQUssR0FBRyxFQUFULENBQVMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDekM7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxrREFBUyxHQUFoQixVQUFpQixLQUFNO1FBQ25CLElBQUksS0FBSyxFQUFFO1lBQ1AsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNqQyxPQUFPO1NBQ1Y7UUFDRCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUNuQyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQU9ELHNCQUFJLG9EQUFRO1FBTFo7Ozs7V0FJRzthQUNIO1lBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDakMsT0FBTzthQUNWO1lBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDdkMsQ0FBQzs7O09BQUE7O0lBaEVEO1FBREMsV0FBVyxDQUFDLHlDQUF5QyxDQUFDO29FQUNEO0lBUDdDLDhCQUE4QjtRQU4xQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsMEJBQTBCO1lBQ3BDLGdaQUFrRDtZQUNsRCxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxXQUFXLEVBQUUsZ0NBQThCLEVBQUUsQ0FBQztTQUNyRyxDQUFDO09BRVcsOEJBQThCLENBd0UxQztJQUFELHFDQUFDO0NBQUEsQUF4RUQsQ0FBb0QsMkJBQTJCLEdBd0U5RTtTQXhFWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQWN0aW9uc0Jhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2dyaWQtYWN0aW9ucy1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBzaG93TWVzc2FnZSB9IGZyb20gJy4uLy4uL2NvcmUvZGVwcmVjYXRlRGVjb3JhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LWdyaWQtZWRpdGluZy1hY3Rpb25zJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2dyaWQtZWRpdGluZy1hY3Rpb25zLmNvbXBvbmVudC5odG1sJyxcbiAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IElneEdyaWRBY3Rpb25zQmFzZURpcmVjdGl2ZSwgdXNlRXhpc3Rpbmc6IElneEdyaWRFZGl0aW5nQWN0aW9uc0NvbXBvbmVudCB9XVxufSlcblxuZXhwb3J0IGNsYXNzIElneEdyaWRFZGl0aW5nQWN0aW9uc0NvbXBvbmVudCBleHRlbmRzIElneEdyaWRBY3Rpb25zQmFzZURpcmVjdGl2ZSB7XG4gICAgLyoqXG4gICAgICogSG9zdCBgY2xhc3MuaWd4LWFjdGlvbi1zdHJpcGAgYmluZGluZy5cbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtYWN0aW9uLXN0cmlwX19lZGl0aW5nLWFjdGlvbnMnKVxuICAgIHB1YmxpYyBjc3NDbGFzcyA9ICdpZ3gtYWN0aW9uLXN0cmlwX19lZGl0aW5nLWFjdGlvbnMnO1xuXG4gICAgcHJpdmF0ZSBpc01lc3NhZ2VTaG93biA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogRW50ZXIgcm93IG9yIGNlbGwgZWRpdCBtb2RlIGRlcGVuZGluZyB0aGUgZ3JpZCByb3dFZGl0YWJsZSBvcHRpb25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWRFZGl0aW5nQWN0aW9ucy5zdGFydEVkaXQoKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhcnRFZGl0KGV2ZW50Pyk6IHZvaWQge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc1Jvdyh0aGlzLnN0cmlwLmNvbnRleHQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5zdHJpcC5jb250ZXh0O1xuICAgICAgICBjb25zdCBmaXJzdEVkaXRhYmxlID0gcm93LmNlbGxzLmZpbHRlcihjZWxsID0+IGNlbGwuZWRpdGFibGUpWzBdO1xuICAgICAgICBjb25zdCBncmlkID0gcm93LmdyaWQ7XG4gICAgICAgIGlmICghZ3JpZC5oYXNFZGl0YWJsZUNvbHVtbnMpIHtcbiAgICAgICAgICAgIHRoaXMuaXNNZXNzYWdlU2hvd24gPSBzaG93TWVzc2FnZShcbiAgICAgICAgICAgICAgICAnVGhlIGdyaWQgc2hvdWxkIGJlIGVkaXRhYmxlIGluIG9yZGVyIHRvIHVzZSBJZ3hHcmlkRWRpdGluZ0FjdGlvbnNDb21wb25lbnQnLFxuICAgICAgICAgICAgICAgIHRoaXMuaXNNZXNzYWdlU2hvd24pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBiZSBzdXJlIHJvdyBpcyBpbiB2aWV3XG4gICAgICAgIGlmIChncmlkLnJvd0xpc3QuZmlsdGVyKHIgPT4gciA9PT0gcm93KS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGdyaWQuY3J1ZFNlcnZpY2UuYmVnaW4oZmlyc3RFZGl0YWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdHJpcC5oaWRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgcm93IGFjY29yZGluZyB0byB0aGUgY29udGV4dFxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuZ3JpZEVkaXRpbmdBY3Rpb25zLmRlbGV0ZVJvdygpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVSb3coZXZlbnQ/KTogdm9pZCB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzUm93KHRoaXMuc3RyaXAuY29udGV4dCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5zdHJpcC5jb250ZXh0O1xuICAgICAgICBjb25zdCBncmlkID0gY29udGV4dC5ncmlkO1xuICAgICAgICBncmlkLmRlbGV0ZVJvdyhjb250ZXh0LnJvd0lEKTtcbiAgICAgICAgdGhpcy5zdHJpcC5oaWRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIGlmIHRoZSByb3cgaXMgZGlzYWJsZWRcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXRoaXMuaXNSb3codGhpcy5zdHJpcC5jb250ZXh0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmlwLmNvbnRleHQuZGlzYWJsZWQ7XG4gICAgfVxufVxuIl19