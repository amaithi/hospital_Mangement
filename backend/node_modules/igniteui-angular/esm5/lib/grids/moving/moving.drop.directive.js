import { __decorate, __extends } from "tslib";
import { Directive, Input, OnDestroy, ElementRef, Renderer2, NgZone } from '@angular/core';
import { IgxColumnComponent } from '../columns/column.component';
import { DropPosition, IgxColumnMovingService } from './moving.service';
import { Subject, interval } from 'rxjs';
import { IgxColumnMovingDragDirective } from './moving.drag.directive';
import { takeUntil } from 'rxjs/operators';
import { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';
import { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';
var IgxColumnMovingDropDirective = /** @class */ (function (_super) {
    __extends(IgxColumnMovingDropDirective, _super);
    function IgxColumnMovingDropDirective(elementRef, renderer, zone, cms) {
        var _this = _super.call(this, elementRef, renderer, zone) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.zone = zone;
        _this.cms = cms;
        _this._dropIndicator = null;
        _this._lastDropIndicator = null;
        _this._dragLeave = new Subject();
        _this._dropIndicatorClass = 'igx-grid__th-drop-indicator--active';
        return _this;
    }
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "data", {
        set: function (val) {
            if (val instanceof IgxColumnComponent) {
                this._column = val;
            }
            if (val instanceof IgxGridForOfDirective) {
                this._hVirtDir = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "column", {
        get: function () {
            return this._column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "isDropTarget", {
        get: function () {
            return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable &&
                ((!this._column.pinned && this.cms.column.disablePinning) || !this.cms.column.disablePinning);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "horizontalScroll", {
        get: function () {
            if (this._hVirtDir) {
                return this._hVirtDir;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxColumnMovingDropDirective.prototype.ngOnDestroy = function () {
        this._dragLeave.next(true);
        this._dragLeave.complete();
    };
    IgxColumnMovingDropDirective.prototype.onDragOver = function (event) {
        var drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.isDropTarget &&
            this.cms.column !== this.column &&
            this.cms.column.level === this.column.level &&
            this.cms.column.parent === this.column.parent) {
            if (this._lastDropIndicator) {
                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);
            }
            var clientRect = this.elementRef.nativeElement.getBoundingClientRect();
            var pos = clientRect.left + clientRect.width / 2;
            var parent_1 = this.elementRef.nativeElement.parentElement;
            if (event.detail.pageX < pos) {
                this._dropPos = DropPosition.BeforeDropTarget;
                this._lastDropIndicator = this._dropIndicator = parent_1.firstElementChild;
            }
            else {
                this._dropPos = DropPosition.AfterDropTarget;
                this._lastDropIndicator = this._dropIndicator = parent_1.lastElementChild;
            }
            if (this.cms.icon.innerText !== 'block') {
                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);
            }
        }
    };
    IgxColumnMovingDropDirective.prototype.onDragEnter = function (event) {
        var _this = this;
        var drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {
            this.cms.icon.innerText = 'block';
            return;
        }
        if (this.isDropTarget &&
            this.cms.column !== this.column &&
            this.cms.column.level === this.column.level &&
            this.cms.column.parent === this.column.parent) {
            if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {
                this.cms.icon.innerText = 'swap_horiz';
            }
            this.cms.icon.innerText = 'lock';
        }
        else {
            this.cms.icon.innerText = 'block';
        }
        if (this.horizontalScroll) {
            this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';
            interval(100).pipe(takeUntil(this._dragLeave)).subscribe(function () {
                event.target.id === 'right' ? _this.horizontalScroll.scrollPosition += 15 :
                    _this.horizontalScroll.scrollPosition -= 15;
            });
        }
    };
    IgxColumnMovingDropDirective.prototype.onDragLeave = function (event) {
        var drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        this.cms.icon.innerText = 'block';
        if (this._dropIndicator) {
            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);
        }
        if (this.horizontalScroll) {
            this._dragLeave.next(true);
        }
    };
    IgxColumnMovingDropDirective.prototype.onDragDrop = function (event) {
        event.preventDefault();
        var drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {
            return;
        }
        if (this.horizontalScroll) {
            this._dragLeave.next(true);
        }
        if (this.isDropTarget) {
            var args = {
                source: this.cms.column,
                target: this.column
            };
            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);
            this.column.grid.draggedColumn = null;
            this.column.grid.cdr.detectChanges();
        }
    };
    IgxColumnMovingDropDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone },
        { type: IgxColumnMovingService }
    ]; };
    __decorate([
        Input('igxColumnMovingDrop')
    ], IgxColumnMovingDropDirective.prototype, "data", null);
    IgxColumnMovingDropDirective = __decorate([
        Directive({
            selector: '[igxColumnMovingDrop]'
        })
    ], IgxColumnMovingDropDirective);
    return IgxColumnMovingDropDirective;
}(IgxDropDirective));
export { IgxColumnMovingDropDirective };
//# sourceMappingURL=data:application/json;base64,