import { __decorate, __extends } from "tslib";
import { Directive, OnDestroy, Input, ElementRef, ViewContainerRef, NgZone, Renderer2, ChangeDetectorRef } from '@angular/core';
import { IgxDragDirective } from '../../directives/drag-drop/drag-drop.directive';
import { fromEvent } from 'rxjs';
import { IgxColumnMovingService } from './moving.service';
/**
 * @hidden
 * @internal
 */
var IgxColumnMovingDragDirective = /** @class */ (function (_super) {
    __extends(IgxColumnMovingDragDirective, _super);
    function IgxColumnMovingDragDirective(element, viewContainer, zone, renderer, cdr, cms) {
        var _this = _super.call(this, cdr, element, viewContainer, zone, renderer) || this;
        _this.element = element;
        _this.viewContainer = viewContainer;
        _this.zone = zone;
        _this.renderer = renderer;
        _this.cdr = cdr;
        _this.cms = cms;
        _this._ghostClass = 'igx-grid__drag-ghost-image';
        _this.ghostImgIconClass = 'igx-grid__drag-ghost-image-icon';
        _this.ghostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';
        _this.columnSelectedClass = 'igx-grid__th--selected';
        return _this;
    }
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "data", {
        set: function (val) {
            this._column = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "column", {
        get: function () {
            return this._column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "draggable", {
        get: function () {
            return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "icon", {
        get: function () {
            return this.cms.icon;
        },
        enumerable: true,
        configurable: true
    });
    IgxColumnMovingDragDirective.prototype.ngOnDestroy = function () {
        this._unsubscribe();
    };
    IgxColumnMovingDragDirective.prototype.onEscape = function (event) {
        this.cms.cancelDrop = true;
        this.onPointerUp(event);
    };
    IgxColumnMovingDragDirective.prototype.onPointerDown = function (event) {
        var _this = this;
        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this._removeOnDestroy = false;
        this.cms.column = this.column;
        this.ghostClass = this._ghostClass;
        _super.prototype.onPointerDown.call(this, event);
        this.cms.isColumnMoving = true;
        this.column.grid.cdr.detectChanges();
        var args = {
            source: this.column
        };
        this.column.grid.onColumnMovingStart.emit(args);
        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe(function (ev) {
            if (ev.key === "Escape" /* ESCAPE */ || ev.key === "Esc" /* ESCAPE_IE */) {
                _this.onEscape(ev);
            }
        });
    };
    IgxColumnMovingDragDirective.prototype.onPointerMove = function (event) {
        event.preventDefault();
        _super.prototype.onPointerMove.call(this, event);
        if (this._dragStarted && this.ghostElement && !this.column.grid.draggedColumn) {
            this.column.grid.draggedColumn = this.column;
            this.column.grid.cdr.detectChanges();
        }
        if (this.cms.isColumnMoving) {
            var args = {
                source: this.column,
                cancel: false
            };
            this.column.grid.onColumnMoving.emit(args);
            if (args.cancel) {
                this.onEscape(event);
            }
        }
    };
    IgxColumnMovingDragDirective.prototype.onPointerUp = function (event) {
        var _this = this;
        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.
        this.zone.run(function () {
            _super.prototype.onPointerUp.call(_this, event);
            _this.cms.isColumnMoving = false;
            _this.column.grid.draggedColumn = null;
            _this.column.grid.cdr.detectChanges();
        });
        this._unsubscribe();
    };
    IgxColumnMovingDragDirective.prototype.createGhost = function (pageX, pageY) {
        _super.prototype.createGhost.call(this, pageX, pageY);
        this.ghostElement.style.height = null;
        this.ghostElement.style.minWidth = null;
        this.ghostElement.style.flexBasis = null;
        this.ghostElement.style.position = null;
        this.renderer.removeClass(this.ghostElement, this.columnSelectedClass);
        var icon = document.createElement('i');
        var text = document.createTextNode('block');
        icon.appendChild(text);
        icon.classList.add('material-icons');
        this.cms.icon = icon;
        if (!this.column.columnGroup) {
            this.renderer.addClass(icon, this.ghostImgIconClass);
            this.ghostElement.insertBefore(icon, this.ghostElement.firstElementChild);
            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);
            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);
        }
        else {
            this.ghostElement.insertBefore(icon, this.ghostElement.childNodes[0]);
            this.renderer.addClass(icon, this.ghostImgIconGroupClass);
            this.ghostElement.children[0].style.paddingLeft = '0px';
            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);
            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);
        }
    };
    IgxColumnMovingDragDirective.prototype._unsubscribe = function () {
        if (this.subscription$) {
            this.subscription$.unsubscribe();
            this.subscription$ = null;
        }
    };
    IgxColumnMovingDragDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: NgZone },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: IgxColumnMovingService }
    ]; };
    __decorate([
        Input('igxColumnMovingDrag')
    ], IgxColumnMovingDragDirective.prototype, "data", null);
    IgxColumnMovingDragDirective = __decorate([
        Directive({
            selector: '[igxColumnMovingDrag]',
        })
    ], IgxColumnMovingDragDirective);
    return IgxColumnMovingDragDirective;
}(IgxDragDirective));
export { IgxColumnMovingDragDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92aW5nLmRyYWcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9tb3ZpbmcvbW92aW5nLmRyYWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEksT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDbEYsT0FBTyxFQUFnQixTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHL0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFMUQ7OztHQUdHO0FBS0g7SUFBa0QsZ0RBQWdCO0lBMEI5RCxzQ0FDVyxPQUFnQyxFQUNoQyxhQUErQixFQUMvQixJQUFZLEVBQ1osUUFBbUIsRUFDbkIsR0FBc0IsRUFDckIsR0FBMkI7UUFOdkMsWUFRSSxrQkFBTSxHQUFHLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLFNBQ3JEO1FBUlUsYUFBTyxHQUFQLE9BQU8sQ0FBeUI7UUFDaEMsbUJBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLFVBQUksR0FBSixJQUFJLENBQVE7UUFDWixjQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLFNBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ3JCLFNBQUcsR0FBSCxHQUFHLENBQXdCO1FBWC9CLGlCQUFXLEdBQUcsNEJBQTRCLENBQUM7UUFDM0MsdUJBQWlCLEdBQUcsaUNBQWlDLENBQUM7UUFDdEQsNEJBQXNCLEdBQUcsdUNBQXVDLENBQUM7UUFDakUseUJBQW1CLEdBQUcsd0JBQXdCLENBQUM7O0lBV3ZELENBQUM7SUFoQ0Qsc0JBQUksOENBQUk7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RCxnQkFBZ0IsR0F1SmpFO1NBdkpZLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT25EZXN0cm95LCBJbnB1dCwgRWxlbWVudFJlZiwgVmlld0NvbnRhaW5lclJlZiwgTmdab25lLCBSZW5kZXJlcjIsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hEcmFnRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9kcmFnLWRyb3AvZHJhZy1kcm9wLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIGZyb21FdmVudCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IEtFWVMgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzJztcbmltcG9ydCB7IElneENvbHVtbk1vdmluZ1NlcnZpY2UgfSBmcm9tICcuL21vdmluZy5zZXJ2aWNlJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAaW50ZXJuYWxcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q29sdW1uTW92aW5nRHJhZ10nLFxuXG59KVxuZXhwb3J0IGNsYXNzIElneENvbHVtbk1vdmluZ0RyYWdEaXJlY3RpdmUgZXh0ZW5kcyBJZ3hEcmFnRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICAgIEBJbnB1dCgnaWd4Q29sdW1uTW92aW5nRHJhZycpXG4gICAgc2V0IGRhdGEodmFsKSB7XG4gICAgICAgIHRoaXMuX2NvbHVtbiA9IHZhbDtcbiAgICB9XG5cbiAgICBnZXQgY29sdW1uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1uO1xuICAgIH1cblxuICAgIGdldCBkcmFnZ2FibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbiAmJiAodGhpcy5jb2x1bW4ubW92YWJsZSB8fCAodGhpcy5jb2x1bW4uZ3JvdXBhYmxlICYmICF0aGlzLmNvbHVtbi5jb2x1bW5Hcm91cCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaWNvbigpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNtcy5pY29uO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9uJDogU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgX2NvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50O1xuICAgIHByaXZhdGUgX2dob3N0Q2xhc3MgPSAnaWd4LWdyaWRfX2RyYWctZ2hvc3QtaW1hZ2UnO1xuICAgIHByaXZhdGUgZ2hvc3RJbWdJY29uQ2xhc3MgPSAnaWd4LWdyaWRfX2RyYWctZ2hvc3QtaW1hZ2UtaWNvbic7XG4gICAgcHJpdmF0ZSBnaG9zdEltZ0ljb25Hcm91cENsYXNzID0gJ2lneC1ncmlkX19kcmFnLWdob3N0LWltYWdlLWljb24tZ3JvdXAnO1xuICAgIHByaXZhdGUgY29sdW1uU2VsZWN0ZWRDbGFzcyA9ICdpZ3gtZ3JpZF9fdGgtLXNlbGVjdGVkJztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIHB1YmxpYyB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBwdWJsaWMgem9uZTogTmdab25lLFxuICAgICAgICBwdWJsaWMgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICAgICAgcHVibGljIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIHByaXZhdGUgY21zOiBJZ3hDb2x1bW5Nb3ZpbmdTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBzdXBlcihjZHIsIGVsZW1lbnQsIHZpZXdDb250YWluZXIsIHpvbmUsIHJlbmRlcmVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uRXNjYXBlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuY21zLmNhbmNlbERyb3AgPSB0cnVlO1xuICAgICAgICB0aGlzLm9uUG9pbnRlclVwKGV2ZW50KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25Qb2ludGVyRG93bihldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuZHJhZ2dhYmxlIHx8IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RyYWdnYWJsZScpID09PSAnZmFsc2UnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICB0aGlzLl9yZW1vdmVPbkRlc3Ryb3kgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jbXMuY29sdW1uID0gdGhpcy5jb2x1bW47XG4gICAgICAgIHRoaXMuZ2hvc3RDbGFzcyA9IHRoaXMuX2dob3N0Q2xhc3M7XG5cbiAgICAgICAgc3VwZXIub25Qb2ludGVyRG93bihldmVudCk7XG5cbiAgICAgICAgdGhpcy5jbXMuaXNDb2x1bW5Nb3ZpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmNvbHVtbi5ncmlkLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5jb2x1bW5cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb2x1bW4uZ3JpZC5vbkNvbHVtbk1vdmluZ1N0YXJ0LmVtaXQoYXJncyk7XG5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24kID0gZnJvbUV2ZW50KHRoaXMuY29sdW1uLmdyaWQuZG9jdW1lbnQuZGVmYXVsdFZpZXcsICdrZXlkb3duJykuc3Vic2NyaWJlKChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2LmtleSA9PT0gS0VZUy5FU0NBUEUgfHwgZXYua2V5ID09PSBLRVlTLkVTQ0FQRV9JRSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25Fc2NhcGUoZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25Qb2ludGVyTW92ZShldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzdXBlci5vblBvaW50ZXJNb3ZlKGV2ZW50KTtcblxuICAgICAgICBpZiAodGhpcy5fZHJhZ1N0YXJ0ZWQgJiYgdGhpcy5naG9zdEVsZW1lbnQgJiYgIXRoaXMuY29sdW1uLmdyaWQuZHJhZ2dlZENvbHVtbikge1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4uZ3JpZC5kcmFnZ2VkQ29sdW1uID0gdGhpcy5jb2x1bW47XG4gICAgICAgICAgICB0aGlzLmNvbHVtbi5ncmlkLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jbXMuaXNDb2x1bW5Nb3ZpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLmNvbHVtbixcbiAgICAgICAgICAgICAgICBjYW5jZWw6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4uZ3JpZC5vbkNvbHVtbk1vdmluZy5lbWl0KGFyZ3MpO1xuXG4gICAgICAgICAgICBpZiAoYXJncy5jYW5jZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRXNjYXBlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvblBvaW50ZXJVcChldmVudCkge1xuICAgICAgICAvLyBSdW4gaXQgZXhwbGljaXRseSBpbnNpZGUgdGhlIHpvbmUgYmVjYXVzZSBzb21ldGltZXMgb25Qb2ludGVyVXAgZXhlY3V0ZXMgYWZ0ZXIgdGhlIGNvZGUgYmVsb3cuXG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgc3VwZXIub25Qb2ludGVyVXAoZXZlbnQpO1xuXG4gICAgICAgICAgICB0aGlzLmNtcy5pc0NvbHVtbk1vdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4uZ3JpZC5kcmFnZ2VkQ29sdW1uID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY29sdW1uLmdyaWQuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3JlYXRlR2hvc3QocGFnZVgsIHBhZ2VZKSB7XG4gICAgICAgIHN1cGVyLmNyZWF0ZUdob3N0KHBhZ2VYLCBwYWdlWSk7XG5cbiAgICAgICAgdGhpcy5naG9zdEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5naG9zdEVsZW1lbnQuc3R5bGUubWluV2lkdGggPSBudWxsO1xuICAgICAgICB0aGlzLmdob3N0RWxlbWVudC5zdHlsZS5mbGV4QmFzaXMgPSBudWxsO1xuICAgICAgICB0aGlzLmdob3N0RWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyggdGhpcy5naG9zdEVsZW1lbnQsIHRoaXMuY29sdW1uU2VsZWN0ZWRDbGFzcyk7XG5cbiAgICAgICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdibG9jaycpO1xuICAgICAgICBpY29uLmFwcGVuZENoaWxkKHRleHQpO1xuXG4gICAgICAgIGljb24uY2xhc3NMaXN0LmFkZCgnbWF0ZXJpYWwtaWNvbnMnKTtcbiAgICAgICAgdGhpcy5jbXMuaWNvbiA9IGljb247XG5cbiAgICAgICAgaWYgKCF0aGlzLmNvbHVtbi5jb2x1bW5Hcm91cCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhpY29uLCB0aGlzLmdob3N0SW1nSWNvbkNsYXNzKTtcblxuICAgICAgICAgICAgdGhpcy5naG9zdEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGljb24sIHRoaXMuZ2hvc3RFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKTtcblxuICAgICAgICAgICAgdGhpcy5naG9zdExlZnQgPSB0aGlzLl9naG9zdFN0YXJ0WCA9IHBhZ2VYIC0gKCh0aGlzLmdob3N0RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDMpICogMik7XG4gICAgICAgICAgICB0aGlzLmdob3N0VG9wID0gdGhpcy5fZ2hvc3RTdGFydFkgPSBwYWdlWSAtICgodGhpcy5naG9zdEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC8gMykgKiAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2hvc3RFbGVtZW50Lmluc2VydEJlZm9yZShpY29uLCB0aGlzLmdob3N0RWxlbWVudC5jaGlsZE5vZGVzWzBdKTtcblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhpY29uLCB0aGlzLmdob3N0SW1nSWNvbkdyb3VwQ2xhc3MpO1xuICAgICAgICAgICAgdGhpcy5naG9zdEVsZW1lbnQuY2hpbGRyZW5bMF0uc3R5bGUucGFkZGluZ0xlZnQgPSAnMHB4JztcblxuICAgICAgICAgICAgdGhpcy5naG9zdExlZnQgPSB0aGlzLl9naG9zdFN0YXJ0WCA9IHBhZ2VYIC0gKCh0aGlzLmdob3N0RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDMpICogMik7XG4gICAgICAgICAgICB0aGlzLmdob3N0VG9wID0gdGhpcy5fZ2hvc3RTdGFydFkgPSBwYWdlWSAtICgodGhpcy5naG9zdEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC8gMykgKiAyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3Vuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24kKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uJCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=