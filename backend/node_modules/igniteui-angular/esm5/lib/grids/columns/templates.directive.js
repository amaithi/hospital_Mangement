import { __decorate } from "tslib";
import { Directive, TemplateRef } from '@angular/core';
var IgxFilterCellTemplateDirective = /** @class */ (function () {
    function IgxFilterCellTemplateDirective(template) {
        this.template = template;
    }
    IgxFilterCellTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxFilterCellTemplateDirective = __decorate([
        Directive({
            selector: '[igxFilterCellTemplate]'
        })
    ], IgxFilterCellTemplateDirective);
    return IgxFilterCellTemplateDirective;
}());
export { IgxFilterCellTemplateDirective };
var IgxCellTemplateDirective = /** @class */ (function () {
    function IgxCellTemplateDirective(template) {
        this.template = template;
    }
    IgxCellTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxCellTemplateDirective = __decorate([
        Directive({
            selector: '[igxCell]'
        })
    ], IgxCellTemplateDirective);
    return IgxCellTemplateDirective;
}());
export { IgxCellTemplateDirective };
var IgxCellHeaderTemplateDirective = /** @class */ (function () {
    function IgxCellHeaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCellHeaderTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxCellHeaderTemplateDirective = __decorate([
        Directive({
            selector: '[igxHeader]'
        })
    ], IgxCellHeaderTemplateDirective);
    return IgxCellHeaderTemplateDirective;
}());
export { IgxCellHeaderTemplateDirective };
/**
 * @hidden
 */
var IgxCellFooterTemplateDirective = /** @class */ (function () {
    function IgxCellFooterTemplateDirective(template) {
        this.template = template;
    }
    IgxCellFooterTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxCellFooterTemplateDirective = __decorate([
        Directive({
            selector: '[igxFooter]'
        })
    ], IgxCellFooterTemplateDirective);
    return IgxCellFooterTemplateDirective;
}());
export { IgxCellFooterTemplateDirective };
var IgxCellEditorTemplateDirective = /** @class */ (function () {
    function IgxCellEditorTemplateDirective(template) {
        this.template = template;
    }
    IgxCellEditorTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxCellEditorTemplateDirective = __decorate([
        Directive({
            selector: '[igxCellEditor]'
        })
    ], IgxCellEditorTemplateDirective);
    return IgxCellEditorTemplateDirective;
}());
export { IgxCellEditorTemplateDirective };
var IgxCollapsibleIndicatorTemplateDirective = /** @class */ (function () {
    function IgxCollapsibleIndicatorTemplateDirective(template) {
        this.template = template;
    }
    IgxCollapsibleIndicatorTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxCollapsibleIndicatorTemplateDirective = __decorate([
        Directive({
            selector: '[igxCollapsibleIndicator]'
        })
    ], IgxCollapsibleIndicatorTemplateDirective);
    return IgxCollapsibleIndicatorTemplateDirective;
}());
export { IgxCollapsibleIndicatorTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZ3JpZHMvY29sdW1ucy90ZW1wbGF0ZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU12RDtJQUNJLHdDQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFHLENBQUM7O2dCQUFwQixXQUFXOztJQUQvQiw4QkFBOEI7UUFIMUMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLHlCQUF5QjtTQUN0QyxDQUFDO09BQ1csOEJBQThCLENBRTFDO0lBQUQscUNBQUM7Q0FBQSxBQUZELElBRUM7U0FGWSw4QkFBOEI7QUFPM0M7SUFFSSxrQ0FBbUIsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFBSSxDQUFDOztnQkFBckIsV0FBVzs7SUFGL0Isd0JBQXdCO1FBSHBDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxXQUFXO1NBQ3hCLENBQUM7T0FDVyx3QkFBd0IsQ0FHcEM7SUFBRCwrQkFBQztDQUFBLEFBSEQsSUFHQztTQUhZLHdCQUF3QjtBQVFyQztJQUVJLHdDQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7O2dCQUFyQixXQUFXOztJQUYvQiw4QkFBOEI7UUFIMUMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGFBQWE7U0FDMUIsQ0FBQztPQUNXLDhCQUE4QixDQUkxQztJQUFELHFDQUFDO0NBQUEsQUFKRCxJQUlDO1NBSlksOEJBQThCO0FBSzNDOztHQUVHO0FBSUg7SUFFSSx3Q0FBbUIsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFBSSxDQUFDOztnQkFBckIsV0FBVzs7SUFGL0IsOEJBQThCO1FBSDFDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxhQUFhO1NBQzFCLENBQUM7T0FDVyw4QkFBOEIsQ0FHMUM7SUFBRCxxQ0FBQztDQUFBLEFBSEQsSUFHQztTQUhZLDhCQUE4QjtBQVEzQztJQUVJLHdDQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7O2dCQUFyQixXQUFXOztJQUYvQiw4QkFBOEI7UUFIMUMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGlCQUFpQjtTQUM5QixDQUFDO09BQ1csOEJBQThCLENBRzFDO0lBQUQscUNBQUM7Q0FBQSxBQUhELElBR0M7U0FIWSw4QkFBOEI7QUFRM0M7SUFFSSxrREFBbUIsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFBSSxDQUFDOztnQkFBckIsV0FBVzs7SUFGL0Isd0NBQXdDO1FBSHBELFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSwyQkFBMkI7U0FDeEMsQ0FBQztPQUNXLHdDQUF3QyxDQUdwRDtJQUFELCtDQUFDO0NBQUEsQUFIRCxJQUdDO1NBSFksd0NBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEZpbHRlckNlbGxUZW1wbGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIElneEZpbHRlckNlbGxUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hDZWxsXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2VsbFRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEhlYWRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIElneENlbGxIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxuXG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Rm9vdGVyXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2VsbEZvb3RlclRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneENlbGxFZGl0b3JdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDZWxsRWRpdG9yVGVtcGxhdGVEaXJlY3RpdmUge1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q29sbGFwc2libGVJbmRpY2F0b3JdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDb2xsYXBzaWJsZUluZGljYXRvclRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG4iXX0=