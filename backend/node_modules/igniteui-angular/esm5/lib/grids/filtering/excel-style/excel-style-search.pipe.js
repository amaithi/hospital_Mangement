import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
/**
 * @hidden
 */
var IgxExcelStyleSearchFilterPipe = /** @class */ (function () {
    function IgxExcelStyleSearchFilterPipe() {
    }
    IgxExcelStyleSearchFilterPipe.prototype.transform = function (items, searchText) {
        if (!items || !items.length) {
            return [];
        }
        if (!searchText) {
            return items;
        }
        searchText = searchText.toLowerCase();
        var result = items.filter(function (it, i) { return (i === 0 && it.isSpecial) ||
            (it.label !== null && it.label !== undefined) &&
                !it.isBlanks &&
                it.label.toString().toLowerCase().indexOf(searchText) > -1; });
        // If 'result' contains the 'Select All' item and at least one more - we use it, otherwise we use an empty array.
        return result.length > 1 ? result : [];
    };
    IgxExcelStyleSearchFilterPipe = __decorate([
        Pipe({
            name: 'excelStyleSearchFilter'
        })
    ], IgxExcelStyleSearchFilterPipe);
    return IgxExcelStyleSearchFilterPipe;
}());
export { IgxExcelStyleSearchFilterPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtc2VhcmNoLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2ZpbHRlcmluZy9leGNlbC1zdHlsZS9leGNlbC1zdHlsZS1zZWFyY2gucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFJcEQ7O0dBRUc7QUFJSDtJQUFBO0lBbUJBLENBQUM7SUFsQkcsaURBQVMsR0FBVCxVQUFVLEtBQXVCLEVBQUUsVUFBa0I7UUFDakQsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDekIsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDYixPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUVELFVBQVUsR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdEMsSUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEVBQUUsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUM1RCxDQUFDLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDO2dCQUM3QyxDQUFDLEVBQUUsQ0FBQyxRQUFRO2dCQUNaLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUh2QixDQUd1QixDQUFDLENBQUM7UUFFaEUsaUhBQWlIO1FBQ2pILE9BQU8sTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFsQlEsNkJBQTZCO1FBSHpDLElBQUksQ0FBQztZQUNGLElBQUksRUFBRSx3QkFBd0I7U0FDakMsQ0FBQztPQUNXLDZCQUE2QixDQW1CekM7SUFBRCxvQ0FBQztDQUFBLEFBbkJELElBbUJDO1NBbkJZLDZCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpbHRlckxpc3RJdGVtLCBJZ3hHcmlkRXhjZWxTdHlsZUZpbHRlcmluZ0NvbXBvbmVudCB9IGZyb20gJy4vZ3JpZC5leGNlbC1zdHlsZS1maWx0ZXJpbmcuY29tcG9uZW50JztcbmltcG9ydCB7IGNsb25lQXJyYXkgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3V0aWxzJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBQaXBlKHtcbiAgICBuYW1lOiAnZXhjZWxTdHlsZVNlYXJjaEZpbHRlcidcbn0pXG5leHBvcnQgY2xhc3MgSWd4RXhjZWxTdHlsZVNlYXJjaEZpbHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICB0cmFuc2Zvcm0oaXRlbXM6IEZpbHRlckxpc3RJdGVtW10sIHNlYXJjaFRleHQ6IHN0cmluZyk6IGFueVtdIHtcbiAgICAgICAgaWYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNlYXJjaFRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgICAgfVxuXG4gICAgICAgIHNlYXJjaFRleHQgPSBzZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGl0ZW1zLmZpbHRlcigoaXQsIGkpID0+IChpID09PSAwICYmIGl0LmlzU3BlY2lhbCkgfHxcbiAgICAgICAgICAgIChpdC5sYWJlbCAhPT0gbnVsbCAmJiBpdC5sYWJlbCAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgIWl0LmlzQmxhbmtzICYmXG4gICAgICAgICAgICBpdC5sYWJlbC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWFyY2hUZXh0KSA+IC0xKTtcblxuICAgICAgICAvLyBJZiAncmVzdWx0JyBjb250YWlucyB0aGUgJ1NlbGVjdCBBbGwnIGl0ZW0gYW5kIGF0IGxlYXN0IG9uZSBtb3JlIC0gd2UgdXNlIGl0LCBvdGhlcndpc2Ugd2UgdXNlIGFuIGVtcHR5IGFycmF5LlxuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA+IDEgPyByZXN1bHQgOiBbXTtcbiAgICB9XG59XG4iXX0=