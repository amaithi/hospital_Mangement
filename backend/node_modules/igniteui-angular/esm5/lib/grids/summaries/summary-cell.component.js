import { __decorate } from "tslib";
import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';
var IgxSummaryCellComponent = /** @class */ (function () {
    function IgxSummaryCellComponent(element) {
        this.element = element;
        this.firstCellIndentation = 0;
        this.hasSummary = false;
    }
    Object.defineProperty(IgxSummaryCellComponent.prototype, "visibleColumnIndex", {
        get: function () {
            return this.column.visibleIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSummaryCellComponent.prototype, "describeby", {
        get: function () {
            return "Summary_" + this.column.field;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSummaryCellComponent.prototype, "attrCellID", {
        get: function () {
            return this.grid.id + "_" + this.rowIndex + "_" + this.visibleColumnIndex;
        },
        enumerable: true,
        configurable: true
    });
    IgxSummaryCellComponent.prototype.activate = function () {
        this.grid.navigation.activeNode = { row: this.rowIndex, column: this.visibleColumnIndex };
        this.grid.cdr.detectChanges();
    };
    Object.defineProperty(IgxSummaryCellComponent.prototype, "selectionNode", {
        get: function () {
            return {
                row: this.rowIndex,
                column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,
                isSummaryRow: true
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSummaryCellComponent.prototype, "width", {
        get: function () {
            return this.column.getCellWidth();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSummaryCellComponent.prototype, "nativeElement", {
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSummaryCellComponent.prototype, "columnDatatype", {
        get: function () {
            return this.column.dataType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSummaryCellComponent.prototype, "itemHeight", {
        get: function () {
            return this.column.grid.defaultSummaryHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSummaryCellComponent.prototype, "grid", {
        /**
         * @hidden
         */
        get: function () {
            return this.column.grid;
        },
        enumerable: true,
        configurable: true
    });
    IgxSummaryCellComponent.prototype.translateSummary = function (summary) {
        return this.grid.resourceStrings["igx_grid_summary_" + summary.key] || summary.label;
    };
    IgxSummaryCellComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], IgxSummaryCellComponent.prototype, "summaryResults", void 0);
    __decorate([
        Input()
    ], IgxSummaryCellComponent.prototype, "column", void 0);
    __decorate([
        Input()
    ], IgxSummaryCellComponent.prototype, "firstCellIndentation", void 0);
    __decorate([
        Input()
    ], IgxSummaryCellComponent.prototype, "hasSummary", void 0);
    __decorate([
        Input()
    ], IgxSummaryCellComponent.prototype, "density", void 0);
    __decorate([
        Input(),
        HostBinding('class.igx-grid-summary--active')
    ], IgxSummaryCellComponent.prototype, "active", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-rowIndex')
    ], IgxSummaryCellComponent.prototype, "rowIndex", void 0);
    __decorate([
        HostBinding('attr.data-visibleIndex')
    ], IgxSummaryCellComponent.prototype, "visibleColumnIndex", null);
    __decorate([
        HostBinding('attr.aria-describedby')
    ], IgxSummaryCellComponent.prototype, "describeby", null);
    __decorate([
        HostBinding('attr.id')
    ], IgxSummaryCellComponent.prototype, "attrCellID", null);
    __decorate([
        HostListener('pointerdown')
    ], IgxSummaryCellComponent.prototype, "activate", null);
    IgxSummaryCellComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: 'igx-grid-summary-cell',
            template: "<ng-container *ngIf=\"hasSummary\">\n    <ng-container *ngFor=\"let summary of summaryResults\">\n            <div class=\"igx-grid-summary__item\" [style.height.px]=\"itemHeight\">\n\n                <ng-container *ngIf=\"visibleColumnIndex === 0 && firstCellIndentation >= 0\">\n                    <div class=\"igx-grid__tree-cell--padding-level-{{firstCellIndentation}}\"></div>\n\n                    <div #indicator class=\"igx-grid__tree-grouping-indicator\" style=\"visibility: hidden\">\n                        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n                    </div>\n                </ng-container>\n\n                <span class=\"igx-grid-summary__label\" title=\"{{ summary.label }}\">{{ translateSummary(summary) }}</span>\n                <span class=\"igx-grid-summary__result\" title=\"{{ summary.summaryResult }}\">\n                    {{ columnDatatype === 'number' ? (summary.summaryResult | igxdecimal: grid.locale) : columnDatatype === 'date' ? (summary.summaryResult | igxdate: grid.locale) : (summary.summaryResult) }}\n                </span>\n            </div>\n    </ng-container>\n</ng-container>\n"
        })
    ], IgxSummaryCellComponent);
    return IgxSummaryCellComponent;
}());
export { IgxSummaryCellComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtbWFyeS1jZWxsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZ3JpZHMvc3VtbWFyaWVzL3N1bW1hcnktY2VsbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBWWpIO0lBaUJJLGlDQUFvQixPQUFtQjtRQUFuQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBUmhDLHlCQUFvQixHQUFHLENBQUMsQ0FBQztRQUd6QixlQUFVLEdBQUcsS0FBSyxDQUFDO0lBTTFCLENBQUM7SUFZRCxzQkFBSSx1REFBa0I7YUFBdEI7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3BDLENBQUM7OztPQUFBO0lBR0Qsc0JBQVcsK0NBQVU7YUFBckI7WUFDSSxPQUFPLGFBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFPLENBQUM7UUFDMUMsQ0FBQzs7O09BQUE7SUFHRCxzQkFBVywrQ0FBVTthQUFyQjtZQUNJLE9BQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQUksSUFBSSxDQUFDLFFBQVEsU0FBSyxJQUFJLENBQUMsa0JBQW9CLENBQUM7UUFDMUUsQ0FBQzs7O09BQUE7SUFHTSwwQ0FBUSxHQUFmO1FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBQyxDQUFDO1FBQ3hGLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxzQkFBYyxrREFBYTthQUEzQjtZQUNJLE9BQU87Z0JBQ0gsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCO2dCQUNqRyxZQUFZLEVBQUUsSUFBSTthQUNyQixDQUFDO1FBQ04sQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSwwQ0FBSzthQUFUO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksa0RBQWE7YUFBakI7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQ3RDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksbURBQWM7YUFBbEI7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksK0NBQVU7YUFBZDtZQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUM7UUFDakQsQ0FBQzs7O09BQUE7SUFLRCxzQkFBVyx5Q0FBSTtRQUhmOztXQUVHO2FBQ0g7WUFDSSxPQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBWSxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBRU0sa0RBQWdCLEdBQXZCLFVBQXdCLE9BQXlCO1FBQzdDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsc0JBQW9CLE9BQU8sQ0FBQyxHQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ3pGLENBQUM7O2dCQWxFNEIsVUFBVTs7SUFkdkM7UUFEQyxLQUFLLEVBQUU7bUVBQ2tDO0lBRzFDO1FBREMsS0FBSyxFQUFFOzJEQUMwQjtJQUdsQztRQURDLEtBQUssRUFBRTt5RUFDd0I7SUFHaEM7UUFEQyxLQUFLLEVBQUU7K0RBQ2tCO0lBRzFCO1FBREMsS0FBSyxFQUFFOzREQUNPO0lBUWY7UUFGQyxLQUFLLEVBQUU7UUFDUCxXQUFXLENBQUMsZ0NBQWdDLENBQUM7MkRBQ3ZCO0lBSXZCO1FBRkMsS0FBSyxFQUFFO1FBQ1AsV0FBVyxDQUFDLG9CQUFvQixDQUFDOzZEQUNWO0lBR3hCO1FBREMsV0FBVyxDQUFDLHdCQUF3QixDQUFDO3FFQUdyQztJQUdEO1FBREMsV0FBVyxDQUFDLHVCQUF1QixDQUFDOzZEQUdwQztJQUdEO1FBREMsV0FBVyxDQUFDLFNBQVMsQ0FBQzs2REFHdEI7SUFHRDtRQURDLFlBQVksQ0FBQyxhQUFhLENBQUM7MkRBSTNCO0lBaERRLHVCQUF1QjtRQU5uQyxTQUFTLENBQUM7WUFDUCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtZQUMvQyxtQkFBbUIsRUFBRSxLQUFLO1lBQzFCLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsaXBDQUE0QztTQUMvQyxDQUFDO09BQ1csdUJBQXVCLENBb0ZuQztJQUFELDhCQUFDO0NBQUEsQUFwRkQsSUFvRkM7U0FwRlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneFN1bW1hcnlSZXN1bHQgfSBmcm9tICcuL2dyaWQtc3VtbWFyeSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZGF0YS11dGlsJztcbmltcG9ydCB7IElTZWxlY3Rpb25Ob2RlIH0gZnJvbSAnLi4vc2VsZWN0aW9uL3NlbGVjdGlvbi5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gICAgc2VsZWN0b3I6ICdpZ3gtZ3JpZC1zdW1tYXJ5LWNlbGwnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zdW1tYXJ5LWNlbGwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElneFN1bW1hcnlDZWxsQ29tcG9uZW50IHtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHN1bW1hcnlSZXN1bHRzOiBJZ3hTdW1tYXJ5UmVzdWx0W107XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb2x1bW46IElneENvbHVtbkNvbXBvbmVudDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGZpcnN0Q2VsbEluZGVudGF0aW9uID0gMDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGhhc1N1bW1hcnkgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGRlbnNpdHk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZ3JpZC1zdW1tYXJ5LS1hY3RpdmUnKVxuICAgIHB1YmxpYyBhY3RpdmU6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXJvd0luZGV4JylcbiAgICBwdWJsaWMgcm93SW5kZXg6IG51bWJlcjtcblxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXZpc2libGVJbmRleCcpXG4gICAgZ2V0IHZpc2libGVDb2x1bW5JbmRleCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW4udmlzaWJsZUluZGV4O1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWRlc2NyaWJlZGJ5JylcbiAgICBwdWJsaWMgZ2V0IGRlc2NyaWJlYnkoKSB7XG4gICAgICAgIHJldHVybiBgU3VtbWFyeV8ke3RoaXMuY29sdW1uLmZpZWxkfWA7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmlkJylcbiAgICBwdWJsaWMgZ2V0IGF0dHJDZWxsSUQoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmdyaWQuaWR9XyR7dGhpcy5yb3dJbmRleH1fJHsgdGhpcy52aXNpYmxlQ29sdW1uSW5kZXh9YDtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdwb2ludGVyZG93bicpXG4gICAgcHVibGljIGFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLmdyaWQubmF2aWdhdGlvbi5hY3RpdmVOb2RlID0ge3JvdzogdGhpcy5yb3dJbmRleCwgY29sdW1uOiB0aGlzLnZpc2libGVDb2x1bW5JbmRleH07XG4gICAgICAgIHRoaXMuZ3JpZC5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgc2VsZWN0aW9uTm9kZSgpOiBJU2VsZWN0aW9uTm9kZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb3c6IHRoaXMucm93SW5kZXgsXG4gICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uLmNvbHVtbkxheW91dENoaWxkID8gdGhpcy5jb2x1bW4ucGFyZW50LnZpc2libGVJbmRleCA6IHRoaXMudmlzaWJsZUNvbHVtbkluZGV4LFxuICAgICAgICAgICAgaXNTdW1tYXJ5Um93OiB0cnVlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW4uZ2V0Q2VsbFdpZHRoKCk7XG4gICAgfVxuXG4gICAgZ2V0IG5hdGl2ZUVsZW1lbnQoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIGdldCBjb2x1bW5EYXRhdHlwZSgpOiBEYXRhVHlwZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5kYXRhVHlwZTtcbiAgICB9XG5cbiAgICBnZXQgaXRlbUhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uLmdyaWQuZGVmYXVsdFN1bW1hcnlIZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZ3JpZCgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNvbHVtbi5ncmlkIGFzIGFueSk7XG4gICAgfVxuXG4gICAgcHVibGljIHRyYW5zbGF0ZVN1bW1hcnkoc3VtbWFyeTogSWd4U3VtbWFyeVJlc3VsdCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQucmVzb3VyY2VTdHJpbmdzW2BpZ3hfZ3JpZF9zdW1tYXJ5XyR7c3VtbWFyeS5rZXl9YF0gfHwgc3VtbWFyeS5sYWJlbDtcbiAgICB9XG59XG4iXX0=