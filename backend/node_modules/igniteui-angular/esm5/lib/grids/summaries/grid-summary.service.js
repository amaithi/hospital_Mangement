import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray } from '../../core/utils';
/** @hidden */
var IgxGridSummaryService = /** @class */ (function () {
    function IgxGridSummaryService() {
        this.summaryCacheMap = new Map();
        this.rootSummaryID = 'igxGridRootSummary';
        this.summaryHeight = 0;
        this.maxSummariesLenght = 0;
        this.groupingExpressions = [];
        this.retriggerRootPipe = 0;
        this.deleteOperation = false;
    }
    IgxGridSummaryService.prototype.recalculateSummaries = function () {
        this.resetSummaryHeight();
        this.grid.notifyChanges(true);
    };
    IgxGridSummaryService.prototype.clearSummaryCache = function (args) {
        if (!this.summaryCacheMap.size) {
            return;
        }
        if (!args) {
            this.summaryCacheMap.clear();
            if (this.grid && this.grid.rootSummariesEnabled) {
                this.retriggerRootPipe++;
            }
            return;
        }
        if (args.data) {
            var rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;
            this.removeSummaries(rowID);
        }
        if (args.rowID !== undefined && args.rowID !== null) {
            var columnName = args.cellID ? this.grid.columnList.find(function (col) { return col.index === args.cellID.columnID; }).field : undefined;
            if (columnName && this.grid.rowEditable) {
                return;
            }
            var isGroupedColumn = this.grid.groupingExpressions &&
                this.grid.groupingExpressions.map(function (expr) { return expr.fieldName; }).indexOf(columnName) !== -1;
            if (columnName && isGroupedColumn) {
                columnName = undefined;
            }
            this.removeSummaries(args.rowID, columnName);
        }
    };
    IgxGridSummaryService.prototype.removeSummaries = function (rowID, columnName) {
        var _this = this;
        this.deleteSummaryCache(this.rootSummaryID, columnName);
        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) {
            return;
        }
        if (this.isTreeGrid) {
            if (this.grid.transactions.enabled && this.deleteOperation) {
                this.deleteOperation = false;
                // TODO: this.removeChildRowSummaries(rowID, columnName);
                this.summaryCacheMap.clear();
                return;
            }
            this.removeAllTreeGridSummaries(rowID, columnName);
        }
        else if (this.isHierarchicalGrid) {
            if (this.grid.transactions.enabled && this.deleteOperation) {
                this.deleteOperation = false;
                this.summaryCacheMap.clear();
            }
        }
        else {
            var summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);
            summaryIds.forEach(function (id) {
                _this.deleteSummaryCache(id, columnName);
            });
        }
    };
    IgxGridSummaryService.prototype.removeSummariesCachePerColumn = function (columnName) {
        this.summaryCacheMap.forEach(function (cache) {
            if (cache.get(columnName)) {
                cache.delete(columnName);
            }
        });
        if (this.grid.rootSummariesEnabled) {
            this.retriggerRootPipe++;
        }
    };
    IgxGridSummaryService.prototype.calcMaxSummaryHeight = function () {
        if (this.summaryHeight) {
            return this.summaryHeight;
        }
        if (!this.grid.data) {
            return this.summaryHeight = 0;
        }
        var maxSummaryLength = 0;
        this.grid.columnList.filter(function (col) { return col.hasSummary && !col.hidden; }).forEach(function (column) {
            var getCurrentSummaryColumn = column.summaries.operate([], [], column.field).length;
            if (getCurrentSummaryColumn) {
                if (maxSummaryLength < getCurrentSummaryColumn) {
                    maxSummaryLength = getCurrentSummaryColumn;
                }
            }
        });
        this.maxSummariesLenght = maxSummaryLength;
        this.summaryHeight = maxSummaryLength * this.grid.defaultSummaryHeight;
        return this.summaryHeight;
    };
    IgxGridSummaryService.prototype.calculateSummaries = function (rowID, data) {
        var rowSummaries = this.summaryCacheMap.get(rowID);
        if (!rowSummaries) {
            rowSummaries = new Map();
            this.summaryCacheMap.set(rowID, rowSummaries);
        }
        if (!this.hasSummarizedColumns || !data) {
            return rowSummaries;
        }
        this.grid.columnList.filter(function (col) { return col.hasSummary; }).forEach(function (column) {
            if (!rowSummaries.get(column.field)) {
                rowSummaries.set(column.field, column.summaries.operate(data.map(function (r) { return r[column.field]; }), data, column.field));
            }
        });
        return rowSummaries;
    };
    IgxGridSummaryService.prototype.resetSummaryHeight = function () {
        this.summaryHeight = 0;
        this.grid._summaryPipeTrigger++;
        if (this.grid.rootSummariesEnabled) {
            this.retriggerRootPipe++;
        }
    };
    IgxGridSummaryService.prototype.updateSummaryCache = function (groupingArgs) {
        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) {
            return;
        }
        if (this.groupingExpressions.length === 0) {
            this.groupingExpressions = groupingArgs.expressions.map(function (record) { return record.fieldName; });
            return;
        }
        if (groupingArgs.length === 0) {
            this.groupingExpressions = [];
            this.clearSummaryCache();
            return;
        }
        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);
        this.groupingExpressions = groupingArgs.expressions.map(function (record) { return record.fieldName; });
    };
    Object.defineProperty(IgxGridSummaryService.prototype, "hasSummarizedColumns", {
        get: function () {
            var summarizedColumns = this.grid.columnList.filter(function (col) { return col.hasSummary && !col.hidden; });
            return summarizedColumns.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridSummaryService.prototype.deleteSummaryCache = function (id, columnName) {
        if (this.summaryCacheMap.get(id)) {
            var filteringApplied = columnName && this.grid.filteringExpressionsTree &&
                this.grid.filteringExpressionsTree.filteringOperands.map(function (expr) { return expr.fieldName; }).indexOf(columnName) !== -1;
            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {
                this.summaryCacheMap.get(id).delete(columnName);
            }
            else {
                this.summaryCacheMap.delete(id);
            }
            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {
                this.retriggerRootPipe++;
            }
        }
    };
    IgxGridSummaryService.prototype.getSummaryID = function (rowID, groupingExpressions) {
        var _this = this;
        if (groupingExpressions.length === 0) {
            return [];
        }
        var summaryIDs = [];
        var data = this.grid.data;
        if (this.grid.transactions.enabled) {
            data = DataUtil.mergeTransactions(cloneArray(this.grid.data), this.grid.transactions.getAggregatedChanges(true), this.grid.primaryKey);
        }
        var rowData = this.grid.primaryKey ? data.find(function (rec) { return rec[_this.grid.primaryKey] === rowID; }) : rowID;
        var id = '{ ';
        groupingExpressions.forEach(function (expr) {
            id += "'" + expr.fieldName + "': '" + rowData[expr.fieldName] + "'";
            summaryIDs.push(id.concat(' }'));
            id += ', ';
        });
        return summaryIDs;
    };
    IgxGridSummaryService.prototype.removeAllTreeGridSummaries = function (rowID, columnName) {
        var row = this.grid.records.get(rowID);
        if (!row) {
            return;
        }
        row = row.children ? row : row.parent;
        while (row) {
            rowID = row.rowID;
            this.deleteSummaryCache(rowID, columnName);
            row = row.parent;
        }
    };
    // TODO: remove only deleted rows
    IgxGridSummaryService.prototype.removeChildRowSummaries = function (rowID, columnName) {
    };
    IgxGridSummaryService.prototype.compareGroupingExpressions = function (current, groupingArgs) {
        var _this = this;
        var newExpressions = groupingArgs.expressions.map(function (record) { return record.fieldName; });
        var removedCols = groupingArgs.ungroupedColumns;
        if (current.length <= newExpressions.length) {
            var newExpr = newExpressions.slice(0, current.length).toString();
            if (current.toString() !== newExpr) {
                this.clearSummaryCache();
            }
        }
        else {
            var currExpr = current.slice(0, newExpressions.length).toString();
            if (currExpr !== newExpressions.toString()) {
                this.clearSummaryCache();
                return;
            }
            removedCols.map(function (col) { return col.field; }).forEach(function (colName) {
                _this.summaryCacheMap.forEach(function (cache, id) {
                    if (id.indexOf(colName) !== -1) {
                        _this.summaryCacheMap.delete(id);
                    }
                });
            });
        }
    };
    Object.defineProperty(IgxGridSummaryService.prototype, "isTreeGrid", {
        get: function () {
            return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryService.prototype, "isHierarchicalGrid", {
        get: function () {
            return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';
        },
        enumerable: true,
        configurable: true
    });
    IgxGridSummaryService = __decorate([
        Injectable()
    ], IgxGridSummaryService);
    return IgxGridSummaryService;
}());
export { IgxGridSummaryService };
//# sourceMappingURL=data:application/json;base64,