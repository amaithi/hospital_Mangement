import { __decorate, __extends, __param, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Inject, Input, NgZone, OnInit, TemplateRef, ViewChild } from '@angular/core';
import { IgxGridCellComponent } from '../cell.component';
import { GridBaseAPIService } from '../api.service';
import { getNodeSizeViaRange, PlatformUtil } from '../../core/utils';
import { DOCUMENT } from '@angular/common';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { HammerGesturesManager } from '../../core/touch';
var IgxGridExpandableCellComponent = /** @class */ (function (_super) {
    __extends(IgxGridExpandableCellComponent, _super);
    function IgxGridExpandableCellComponent(selectionService, crudService, gridAPI, cdr, element, zone, touchManager, document, platformUtil) {
        var _this = _super.call(this, selectionService, crudService, gridAPI, cdr, element, zone, touchManager, platformUtil) || this;
        _this.zone = zone;
        _this.document = document;
        _this.platformUtil = platformUtil;
        /**
         * @hidden
         */
        _this.expanded = false;
        return _this;
    }
    /**
     * @hidden
     */
    IgxGridExpandableCellComponent.prototype.toggle = function (event) {
        event.stopPropagation();
        var expansionState = this.gridAPI.get_row_expansion_state(this.row.rowData);
        this.gridAPI.set_row_expansion_state(this.row.rowID, !expansionState, event);
    };
    /**
     * @hidden
     */
    IgxGridExpandableCellComponent.prototype.onIndicatorFocus = function () {
        this.gridAPI.submit_value();
    };
    /**
     * @hidden
     */
    IgxGridExpandableCellComponent.prototype.calculateSizeToFit = function (range) {
        var indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;
        var indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);
        var indicatorMargin = parseFloat(indicatorStyle.marginRight);
        var leftPadding = 0;
        if (this.indentationDiv) {
            var indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);
            leftPadding = parseFloat(indentationStyle.paddingLeft);
        }
        var largestWidth = Math.max.apply(Math, __spread(Array.from(this.nativeElement.children)
            .map(function (child) { return getNodeSizeViaRange(range, child); })));
        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;
    };
    Object.defineProperty(IgxGridExpandableCellComponent.prototype, "iconTemplate", {
        /**
         * @hidden
         */
        get: function () {
            if (this.expanded) {
                return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;
            }
            else {
                return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExpandableCellComponent.prototype, "showExpanderIndicator", {
        /**
         * @hidden
         */
        get: function () {
            var isGhost = this.row.pinned && this.row.disabled;
            return !this.editMode && (!this.row.pinned || isGhost);
        },
        enumerable: true,
        configurable: true
    });
    IgxGridExpandableCellComponent.ctorParameters = function () { return [
        { type: IgxGridSelectionService },
        { type: IgxGridCRUDService },
        { type: GridBaseAPIService },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone },
        { type: HammerGesturesManager },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: PlatformUtil }
    ]; };
    __decorate([
        Input()
    ], IgxGridExpandableCellComponent.prototype, "expanded", void 0);
    __decorate([
        ViewChild('indicator', { read: ElementRef })
    ], IgxGridExpandableCellComponent.prototype, "indicator", void 0);
    __decorate([
        ViewChild('indentationDiv', { read: ElementRef })
    ], IgxGridExpandableCellComponent.prototype, "indentationDiv", void 0);
    __decorate([
        ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })
    ], IgxGridExpandableCellComponent.prototype, "defaultExpandedTemplate", void 0);
    __decorate([
        ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })
    ], IgxGridExpandableCellComponent.prototype, "defaultCollapsedTemplate", void 0);
    IgxGridExpandableCellComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            selector: 'igx-expandable-grid-cell',
            template: "<ng-template #defaultPinnedIndicator>\n    <igx-chip *ngIf=\"displayPinnedChip\" class=\"igx-grid__td--pinned-chip\" [disabled]=\"true\" [displayDensity]=\"'compact'\">{{ grid.resourceStrings.igx_grid_pinned_row_indicator }}</igx-chip>\n</ng-template>\n<ng-template #defaultCell>\n    <div igxTextHighlight style=\"pointer-events: none\" [cssClass]=\"highlightClass\" [activeCssClass]=\"activeHighlightClass\" [groupName]=\"gridID\"\n        [value]=\"formatter ? formatter(value) : column.dataType === 'number' ? (value | igxdecimal: grid.locale) : column.dataType === 'date' ? (value | igxdate: grid.locale) : value\"\n        [row]=\"rowData\" [column]=\"this.column.field\" [containerClass]=\"'igx-grid__td-text'\" [metadata]=\"searchMetadata\"\n        class=\"igx-grid__td-text\">{{ formatter ? formatter(value) : column.dataType === 'number' ? (value | igxdecimal:\n        grid.locale) : column.dataType === 'date' ? (value | igxdate: grid.locale) : value }}</div>\n</ng-template>\n<ng-template #inlineEditor  let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [(ngModel)]=\"editValue\" [igxFocus]=\"true\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [(ngModel)]=\"editValue\" [igxFocus]=\"true\"  type=\"number\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox (change)=\"editValue = $event.checked\" [value]=\"editValue\" [checked]=\"editValue\" [disableRipple]=\"true\"></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-date-picker [style.width.%]=\"100\" [outlet]=\"grid.outletDirective\" mode=\"dropdown\"\n        [locale]=\"grid.locale\" [(value)]=\"editValue\" [igxFocus]=\"true\" [labelVisibility]=\"false\">\n    </igx-date-picker>\n    </ng-container>\n</ng-template>\n<ng-container *ngIf=\"showExpanderIndicator\">\n    <div #indicator\n         class=\"igx-grid__tree-grouping-indicator\"\n         (click)=\"toggle($event)\" (focus)=\"onIndicatorFocus()\">\n         <ng-container *ngTemplateOutlet=\"iconTemplate; context: { $implicit:  this }\">\n        </ng-container>\n    </div>\n</ng-container>\n<ng-container *ngTemplateOutlet=\"pinnedIndicatorTemplate; context: context\">\n</ng-container>\n<ng-container *ngTemplateOutlet=\"template; context: context\">\n</ng-container>\n<ng-template #defaultExpandedTemplate>\n        <igx-icon fontSet=\"material\">expand_more</igx-icon>\n</ng-template>\n<ng-template #defaultCollapsedTemplate>\n        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n</ng-template>\n",
            providers: [HammerGesturesManager]
        }),
        __param(7, Inject(DOCUMENT))
    ], IgxGridExpandableCellComponent);
    return IgxGridExpandableCellComponent;
}(IgxGridCellComponent));
export { IgxGridExpandableCellComponent };
//# sourceMappingURL=data:application/json;base64,