import { __decorate, __extends } from "tslib";
import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';
import { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';
import { SortingDirection } from '../../data-operations/sorting-expression.interface';
import { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';
/**
 * @hidden
 */
var IgxGroupByRowTemplateDirective = /** @class */ (function () {
    function IgxGroupByRowTemplateDirective(template) {
        this.template = template;
    }
    IgxGroupByRowTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxGroupByRowTemplateDirective = __decorate([
        Directive({
            selector: '[igxGroupByRow]'
        })
    ], IgxGroupByRowTemplateDirective);
    return IgxGroupByRowTemplateDirective;
}());
export { IgxGroupByRowTemplateDirective };
/**
 * @hidden
 */
var IgxGridDetailTemplateDirective = /** @class */ (function () {
    function IgxGridDetailTemplateDirective() {
    }
    IgxGridDetailTemplateDirective = __decorate([
        Directive({
            selector: '[igxGridDetail]'
        })
    ], IgxGridDetailTemplateDirective);
    return IgxGridDetailTemplateDirective;
}());
export { IgxGridDetailTemplateDirective };
/**
 * @hidden
 */
var IgxRowExpandedIndicatorDirective = /** @class */ (function () {
    function IgxRowExpandedIndicatorDirective() {
    }
    IgxRowExpandedIndicatorDirective = __decorate([
        Directive({
            selector: '[igxRowExpandedIndicator]'
        })
    ], IgxRowExpandedIndicatorDirective);
    return IgxRowExpandedIndicatorDirective;
}());
export { IgxRowExpandedIndicatorDirective };
/**
 * @hidden
 */
var IgxRowCollapsedIndicatorDirective = /** @class */ (function () {
    function IgxRowCollapsedIndicatorDirective() {
    }
    IgxRowCollapsedIndicatorDirective = __decorate([
        Directive({
            selector: '[igxRowCollapsedIndicator]'
        })
    ], IgxRowCollapsedIndicatorDirective);
    return IgxRowCollapsedIndicatorDirective;
}());
export { IgxRowCollapsedIndicatorDirective };
/**
 * @hidden
 */
var IgxHeaderExpandIndicatorDirective = /** @class */ (function () {
    function IgxHeaderExpandIndicatorDirective() {
    }
    IgxHeaderExpandIndicatorDirective = __decorate([
        Directive({
            selector: '[igxHeaderExpandedIndicator]'
        })
    ], IgxHeaderExpandIndicatorDirective);
    return IgxHeaderExpandIndicatorDirective;
}());
export { IgxHeaderExpandIndicatorDirective };
/**
 * @hidden
 */
var IgxHeaderCollapseIndicatorDirective = /** @class */ (function () {
    function IgxHeaderCollapseIndicatorDirective() {
    }
    IgxHeaderCollapseIndicatorDirective = __decorate([
        Directive({
            selector: '[igxHeaderCollapsedIndicator]'
        })
    ], IgxHeaderCollapseIndicatorDirective);
    return IgxHeaderCollapseIndicatorDirective;
}());
export { IgxHeaderCollapseIndicatorDirective };
/**
 * @hidden
 */
var IgxGroupAreaDropDirective = /** @class */ (function (_super) {
    __extends(IgxGroupAreaDropDirective, _super);
    function IgxGroupAreaDropDirective(elementRef, renderer, zone) {
        var _this = _super.call(this, elementRef, renderer, zone) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.zone = zone;
        _this.hovered = false;
        return _this;
    }
    IgxGroupAreaDropDirective.prototype.onDragEnter = function (event) {
        var drag = event.detail.owner;
        var column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        var grid = column.grid;
        var isGrouped = grid.groupingExpressions.findIndex(function (item) { return item.fieldName === column.field; }) !== -1;
        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
            drag.icon.innerText = 'group_work';
            this.hovered = true;
        }
        else {
            drag.icon.innerText = 'block';
            this.hovered = false;
        }
    };
    IgxGroupAreaDropDirective.prototype.onDragLeave = function (event) {
        var drag = event.detail.owner;
        var column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        event.detail.owner.icon.innerText = 'block';
        this.hovered = false;
    };
    IgxGroupAreaDropDirective.prototype.onDragDrop = function (event) {
        var drag = event.detail.owner;
        if (drag instanceof IgxColumnMovingDragDirective) {
            var column_1 = drag.column;
            if (!this.columnBelongsToGrid(column_1)) {
                return;
            }
            var grid = column_1.grid;
            var isGrouped = grid.groupingExpressions.findIndex(function (item) { return item.fieldName === column_1.field; }) !== -1;
            if (column_1.groupable && !isGrouped && !column_1.columnGroup && !!column_1.field) {
                grid.groupBy({ fieldName: column_1.field, dir: SortingDirection.Asc, ignoreCase: column_1.sortingIgnoreCase,
                    strategy: column_1.sortStrategy, groupingComparer: column_1.groupingComparer });
            }
        }
    };
    IgxGroupAreaDropDirective.prototype.closestParentByAttr = function (elem, attr) {
        return elem.hasAttribute(attr) ?
            elem :
            this.closestParentByAttr(elem.parentElement, attr);
    };
    IgxGroupAreaDropDirective.prototype.columnBelongsToGrid = function (column) {
        var elem = this.elementRef.nativeElement;
        var closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');
        if (!column) {
            return false;
        }
        else {
            var grid = column.grid;
            if (!grid || grid.id !== closestGridID) {
                return false;
            }
            return true;
        }
    };
    IgxGroupAreaDropDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    __decorate([
        HostBinding('class.igx-drop-area--hover')
    ], IgxGroupAreaDropDirective.prototype, "hovered", void 0);
    IgxGroupAreaDropDirective = __decorate([
        Directive({
            selector: '[igxGroupAreaDrop]'
        })
    ], IgxGroupAreaDropDirective);
    return IgxGroupAreaDropDirective;
}(IgxDropDirective));
export { IgxGroupAreaDropDirective };
//# sourceMappingURL=data:application/json;base64,