import { __decorate, __extends, __param, __read, __spread, __values } from "tslib";
import { Pipe, Inject, LOCALE_ID } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray } from '../../core/utils';
import { DatePipe, DecimalPipe } from '@angular/common';
/**
 * @hidden
 * @internal
 */
var IgxGridCellStyleClassesPipe = /** @class */ (function () {
    function IgxGridCellStyleClassesPipe() {
    }
    IgxGridCellStyleClassesPipe.prototype.transform = function (cssClasses, value, data, field, index) {
        var e_1, _a;
        if (!cssClasses) {
            return '';
        }
        var result = [];
        try {
            for (var _b = __values(Object.keys(cssClasses)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var cssClass = _c.value;
                var callbackOrValue = cssClasses[cssClass];
                var apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field, value, index) : callbackOrValue;
                if (apply) {
                    result.push(cssClass);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result.join(' ');
    };
    IgxGridCellStyleClassesPipe = __decorate([
        Pipe({
            name: 'igxCellStyleClasses'
        })
    ], IgxGridCellStyleClassesPipe);
    return IgxGridCellStyleClassesPipe;
}());
export { IgxGridCellStyleClassesPipe };
/**
 * @hidden
 * @internal
 */
var IgxGridCellStylesPipe = /** @class */ (function () {
    function IgxGridCellStylesPipe() {
    }
    IgxGridCellStylesPipe.prototype.transform = function (styles, value, data, field, index) {
        var e_2, _a;
        var css = {};
        if (!styles) {
            return css;
        }
        try {
            for (var _b = __values(Object.keys(styles)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var prop = _c.value;
                var res = styles[prop];
                css[prop] = typeof res === 'function' ? res(data, field, value, index) : res;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return css;
    };
    IgxGridCellStylesPipe = __decorate([
        Pipe({
            name: 'igxCellStyles'
        })
    ], IgxGridCellStylesPipe);
    return IgxGridCellStylesPipe;
}());
export { IgxGridCellStylesPipe };
/**
 * @hidden
 * @internal
 */
var IgxGridNotGroupedPipe = /** @class */ (function () {
    function IgxGridNotGroupedPipe() {
    }
    IgxGridNotGroupedPipe.prototype.transform = function (value) {
        return value.filter(function (item) { return !item.columnGroup; });
    };
    IgxGridNotGroupedPipe = __decorate([
        Pipe({
            name: 'igxNotGrouped'
        })
    ], IgxGridNotGroupedPipe);
    return IgxGridNotGroupedPipe;
}());
export { IgxGridNotGroupedPipe };
/**
 * @hidden
 * @internal
 */
var IgxGridTopLevelColumns = /** @class */ (function () {
    function IgxGridTopLevelColumns() {
    }
    IgxGridTopLevelColumns.prototype.transform = function (value) {
        return value.filter(function (item) { return item.level === 0; });
    };
    IgxGridTopLevelColumns = __decorate([
        Pipe({
            name: 'igxTopLevel'
        })
    ], IgxGridTopLevelColumns);
    return IgxGridTopLevelColumns;
}());
export { IgxGridTopLevelColumns };
/**
 * @hidden
 * @internal
 */
var IgxGridFilterConditionPipe = /** @class */ (function () {
    function IgxGridFilterConditionPipe() {
    }
    IgxGridFilterConditionPipe.prototype.transform = function (value) {
        return value.split(/(?=[A-Z])/).join(' ');
    };
    IgxGridFilterConditionPipe = __decorate([
        Pipe({
            name: 'filterCondition',
            pure: true
        })
    ], IgxGridFilterConditionPipe);
    return IgxGridFilterConditionPipe;
}());
export { IgxGridFilterConditionPipe };
/**
 * @hidden
 * @internal
 */
var IgxGridTransactionPipe = /** @class */ (function () {
    function IgxGridTransactionPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridTransactionPipe.prototype.transform = function (collection, id, pipeTrigger) {
        var grid = this.gridAPI.grid;
        if (grid.transactions.enabled) {
            var result = DataUtil.mergeTransactions(cloneArray(collection), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            return result;
        }
        return collection;
    };
    IgxGridTransactionPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxGridTransactionPipe = __decorate([
        Pipe({
            name: 'gridTransaction',
            pure: true
        })
    ], IgxGridTransactionPipe);
    return IgxGridTransactionPipe;
}());
export { IgxGridTransactionPipe };
/**
 * @hidden
 * @internal
 */
var IgxGridPaginatorOptionsPipe = /** @class */ (function () {
    function IgxGridPaginatorOptionsPipe() {
    }
    IgxGridPaginatorOptionsPipe.prototype.transform = function (values) {
        return Array.from(new Set(__spread(values))).sort(function (a, b) { return a - b; });
    };
    IgxGridPaginatorOptionsPipe = __decorate([
        Pipe({
            name: 'paginatorOptions',
            pure: true,
        })
    ], IgxGridPaginatorOptionsPipe);
    return IgxGridPaginatorOptionsPipe;
}());
export { IgxGridPaginatorOptionsPipe };
/**
 * @hidden
 * @internal
 */
var IgxHasVisibleColumnsPipe = /** @class */ (function () {
    function IgxHasVisibleColumnsPipe() {
    }
    IgxHasVisibleColumnsPipe.prototype.transform = function (values, hasVisibleColumns) {
        if (!(values && values.length)) {
            return values;
        }
        return hasVisibleColumns ? values : [];
    };
    IgxHasVisibleColumnsPipe = __decorate([
        Pipe({
            name: 'visibleColumns',
            pure: true
        })
    ], IgxHasVisibleColumnsPipe);
    return IgxHasVisibleColumnsPipe;
}());
export { IgxHasVisibleColumnsPipe };
/**
 * @hidden
 * @internal
 */
var IgxDatePipeComponent = /** @class */ (function (_super) {
    __extends(IgxDatePipeComponent, _super);
    function IgxDatePipeComponent(locale) {
        var _this = 
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        _super.call(this, locale) || this;
        _this.DEFAULT_DATE_FORMAT = 'mediumDate';
        return _this;
    }
    IgxDatePipeComponent.prototype.transform = function (value, locale) {
        if (value && value instanceof Date) {
            if (locale) {
                return _super.prototype.transform.call(this, value, this.DEFAULT_DATE_FORMAT, undefined, locale);
            }
            else {
                return _super.prototype.transform.call(this, value);
            }
        }
        else {
            return value;
        }
    };
    IgxDatePipeComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    IgxDatePipeComponent = __decorate([
        Pipe({
            name: 'igxdate'
        }),
        __param(0, Inject(LOCALE_ID))
    ], IgxDatePipeComponent);
    return IgxDatePipeComponent;
}(DatePipe));
export { IgxDatePipeComponent };
/**
 * @hidden
 * @internal
 */
var IgxDecimalPipeComponent = /** @class */ (function (_super) {
    __extends(IgxDecimalPipeComponent, _super);
    function IgxDecimalPipeComponent(locale) {
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        return _super.call(this, locale) || this;
    }
    IgxDecimalPipeComponent.prototype.transform = function (value, locale) {
        if (value && typeof value === 'number') {
            if (locale) {
                return _super.prototype.transform.call(this, value, undefined, locale);
            }
            else {
                return _super.prototype.transform.call(this, value);
            }
        }
        else {
            return value;
        }
    };
    IgxDecimalPipeComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    IgxDecimalPipeComponent = __decorate([
        Pipe({
            name: 'igxdecimal'
        }),
        __param(0, Inject(LOCALE_ID))
    ], IgxDecimalPipeComponent);
    return IgxDecimalPipeComponent;
}(DecimalPipe));
export { IgxDecimalPipeComponent };
/**
 * @hidden
 */
var IgxGridRowPinningPipe = /** @class */ (function () {
    function IgxGridRowPinningPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridRowPinningPipe.prototype.transform = function (collection, id, isPinned, pipeTrigger) {
        if (isPinned === void 0) { isPinned = false; }
        var grid = this.gridAPI.grid;
        if (grid.hasPinnedRecords && isPinned) {
            var result = collection.filter(function (rec) { return grid.isRecordPinned(rec); });
            result.sort(function (rec1, rec2) { return grid.getInitialPinnedIndex(rec1) - grid.getInitialPinnedIndex(rec2); });
            return result;
        }
        grid.unpinnedRecords = collection;
        if (!grid.hasPinnedRecords) {
            grid.pinnedRecords = [];
            return isPinned ? [] : collection;
        }
        return collection.map(function (rec) {
            return grid.isRecordPinned(rec) ? { recordRef: rec, ghostRecord: true } : rec;
        });
    };
    IgxGridRowPinningPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxGridRowPinningPipe = __decorate([
        Pipe({
            name: 'gridRowPinning',
            pure: true
        })
    ], IgxGridRowPinningPipe);
    return IgxGridRowPinningPipe;
}());
export { IgxGridRowPinningPipe };
//# sourceMappingURL=data:application/json;base64,