import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';
import { interval, Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
export var DragScrollDirection;
(function (DragScrollDirection) {
    DragScrollDirection[DragScrollDirection["NONE"] = 0] = "NONE";
    DragScrollDirection[DragScrollDirection["LEFT"] = 1] = "LEFT";
    DragScrollDirection[DragScrollDirection["TOP"] = 2] = "TOP";
    DragScrollDirection[DragScrollDirection["RIGHT"] = 3] = "RIGHT";
    DragScrollDirection[DragScrollDirection["BOTTOM"] = 4] = "BOTTOM";
    DragScrollDirection[DragScrollDirection["TOPLEFT"] = 5] = "TOPLEFT";
    DragScrollDirection[DragScrollDirection["TOPRIGHT"] = 6] = "TOPRIGHT";
    DragScrollDirection[DragScrollDirection["BOTTOMLEFT"] = 7] = "BOTTOMLEFT";
    DragScrollDirection[DragScrollDirection["BOTTOMRIGHT"] = 8] = "BOTTOMRIGHT";
})(DragScrollDirection || (DragScrollDirection = {}));
var IgxGridDragSelectDirective = /** @class */ (function () {
    function IgxGridDragSelectDirective(ref, zone) {
        var _this = this;
        this.ref = ref;
        this.zone = zone;
        this.onDragStop = new EventEmitter();
        this.onDragScroll = new EventEmitter();
        this.end$ = new Subject();
        this.lastDirection = DragScrollDirection.NONE;
        this.startDragSelection = function (ev) {
            if (!_this.activeDrag) {
                return;
            }
            var x = ev.clientX;
            var y = ev.clientY;
            var direction = _this._measureDimensions(x, y);
            if (direction === _this.lastDirection) {
                return;
            }
            _this.unsubscribe();
            _this._sub = _this._interval$.subscribe(function () { return _this.onDragScroll.emit(direction); });
            _this.lastDirection = direction;
        };
        this.stopDragSelection = function () {
            if (!_this.activeDrag) {
                return;
            }
            _this.onDragStop.emit(false);
            _this.unsubscribe();
            _this.lastDirection = DragScrollDirection.NONE;
        };
        this._interval$ = interval(100).pipe(takeUntil(this.end$), filter(function () { return _this.activeDrag; }));
    }
    Object.defineProperty(IgxGridDragSelectDirective.prototype, "activeDrag", {
        get: function () {
            return this._activeDrag;
        },
        set: function (val) {
            if (val !== this._activeDrag) {
                this.unsubscribe();
                this._activeDrag = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridDragSelectDirective.prototype, "nativeElement", {
        get: function () {
            return this.ref.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridDragSelectDirective.prototype, "clientRect", {
        get: function () {
            return this.nativeElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    IgxGridDragSelectDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.nativeElement.addEventListener('pointerover', _this.startDragSelection);
            _this.nativeElement.addEventListener('pointerleave', _this.stopDragSelection);
        });
    };
    IgxGridDragSelectDirective.prototype.ngOnDestroy = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.nativeElement.removeEventListener('pointerover', _this.startDragSelection);
            _this.nativeElement.removeEventListener('pointerleave', _this.stopDragSelection);
        });
        this.unsubscribe();
        this.end$.complete();
    };
    IgxGridDragSelectDirective.prototype._measureDimensions = function (x, y) {
        var direction;
        var rect = this.clientRect;
        var RATIO = 0.15;
        var offsetX = Math.trunc(x - rect.left);
        var offsetY = Math.trunc(y - rect.top);
        var left = offsetX <= rect.width * RATIO;
        var right = offsetX >= rect.width * (1 - RATIO);
        var top = offsetY <= rect.height * RATIO;
        var bottom = offsetY >= rect.height * (1 - RATIO);
        if (top && left) {
            direction = DragScrollDirection.TOPLEFT;
        }
        else if (top && right) {
            direction = DragScrollDirection.TOPRIGHT;
        }
        else if (bottom && left) {
            direction = DragScrollDirection.BOTTOMLEFT;
        }
        else if (bottom && right) {
            direction = DragScrollDirection.BOTTOMRIGHT;
        }
        else if (top) {
            direction = DragScrollDirection.TOP;
        }
        else if (bottom) {
            direction = DragScrollDirection.BOTTOM;
        }
        else if (left) {
            direction = DragScrollDirection.LEFT;
        }
        else if (right) {
            direction = DragScrollDirection.RIGHT;
        }
        else {
            direction = DragScrollDirection.NONE;
        }
        return direction;
    };
    IgxGridDragSelectDirective.prototype.unsubscribe = function () {
        if (this._sub) {
            this._sub.unsubscribe();
        }
    };
    IgxGridDragSelectDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    __decorate([
        Input('igxGridDragSelect')
    ], IgxGridDragSelectDirective.prototype, "activeDrag", null);
    __decorate([
        Output()
    ], IgxGridDragSelectDirective.prototype, "onDragStop", void 0);
    __decorate([
        Output()
    ], IgxGridDragSelectDirective.prototype, "onDragScroll", void 0);
    IgxGridDragSelectDirective = __decorate([
        Directive({
            selector: '[igxGridDragSelect]'
        })
    ], IgxGridDragSelectDirective);
    return IgxGridDragSelectDirective;
}());
export { IgxGridDragSelectDirective };
//# sourceMappingURL=data:application/json;base64,