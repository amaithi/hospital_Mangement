import { __decorate, __extends } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
/**
 * @hidden
 */
var ItemPropertyValueChangedDirective = /** @class */ (function () {
    function ItemPropertyValueChangedDirective(propName) {
        this.valueChanged = new EventEmitter();
        this._propName = propName;
    }
    Object.defineProperty(ItemPropertyValueChangedDirective.prototype, "object", {
        get: function () {
            return this._object;
        },
        set: function (value) {
            if (value) {
                this._object = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ItemPropertyValueChangedDirective.prototype, "value", {
        get: function () {
            return (this.object) ? this.object[this._propName] : null;
        },
        set: function (value) {
            this.onValueChanged(value);
        },
        enumerable: true,
        configurable: true
    });
    ItemPropertyValueChangedDirective.prototype.onValueChanged = function (value) {
        var currentValue = this.value;
        if (value !== currentValue) {
            this.object[this._propName] = value;
            this.valueChanged.emit({ oldValue: currentValue, newValue: value });
        }
    };
    ItemPropertyValueChangedDirective.ctorParameters = function () { return [
        { type: String }
    ]; };
    __decorate([
        Input()
    ], ItemPropertyValueChangedDirective.prototype, "value", null);
    __decorate([
        Output()
    ], ItemPropertyValueChangedDirective.prototype, "valueChanged", void 0);
    ItemPropertyValueChangedDirective = __decorate([
        Directive()
    ], ItemPropertyValueChangedDirective);
    return ItemPropertyValueChangedDirective;
}());
export { ItemPropertyValueChangedDirective };
/** @hidden */
var ColumnChooserItemBaseDirective = /** @class */ (function (_super) {
    __extends(ColumnChooserItemBaseDirective, _super);
    function ColumnChooserItemBaseDirective(prop) {
        var _this = _super.call(this, prop) || this;
        _this.prop = prop;
        _this.indentation = 30;
        return _this;
    }
    Object.defineProperty(ColumnChooserItemBaseDirective.prototype, "column", {
        get: function () {
            return this.object;
        },
        set: function (value) {
            if (value) {
                this.object = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserItemBaseDirective.prototype, "name", {
        get: function () {
            return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserItemBaseDirective.prototype, "level", {
        get: function () {
            return this.column.level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserItemBaseDirective.prototype, "calcIndent", {
        get: function () {
            return this.indentation * this.level;
        },
        enumerable: true,
        configurable: true
    });
    ColumnChooserItemBaseDirective.ctorParameters = function () { return [
        { type: String }
    ]; };
    __decorate([
        Input()
    ], ColumnChooserItemBaseDirective.prototype, "column", null);
    __decorate([
        Input()
    ], ColumnChooserItemBaseDirective.prototype, "indentation", void 0);
    __decorate([
        Input()
    ], ColumnChooserItemBaseDirective.prototype, "container", void 0);
    ColumnChooserItemBaseDirective = __decorate([
        Directive()
    ], ColumnChooserItemBaseDirective);
    return ColumnChooserItemBaseDirective;
}(ItemPropertyValueChangedDirective));
export { ColumnChooserItemBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItaXRlbS1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9jb2x1bW4tY2hvb3Nlci1pdGVtLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRdkU7O0dBRUc7QUFFSDtJQTBCSSwyQ0FBWSxRQUFnQjtRQUZyQixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUEwQixDQUFDO1FBRzdELElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzlCLENBQUM7SUF4QkQsc0JBQUkscURBQU07YUFBVjtZQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDO2FBRUQsVUFBVyxLQUFLO1lBQ1osSUFBSSxLQUFLLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7YUFDeEI7UUFDTCxDQUFDOzs7T0FOQTtJQVNELHNCQUFJLG9EQUFLO2FBQVQ7WUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzlELENBQUM7YUFFRCxVQUFVLEtBQUs7WUFDWCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLENBQUM7OztPQUpBO0lBYVMsMERBQWMsR0FBeEIsVUFBeUIsS0FBSztRQUMxQixJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2hDLElBQUksS0FBSyxLQUFLLFlBQVksRUFBRTtZQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0wsQ0FBQzs7OztJQXJCRDtRQURDLEtBQUssRUFBRTtrRUFHUDtJQU9EO1FBREMsTUFBTSxFQUFFOzJFQUN3RDtJQXhCL0MsaUNBQWlDO1FBRHRELFNBQVMsRUFBRTtPQUNVLGlDQUFpQyxDQXFDdEQ7SUFBRCx3Q0FBQztDQUFBLEFBckNELElBcUNDO1NBckNxQixpQ0FBaUM7QUF1Q3ZELGNBQWM7QUFFZDtJQUFvRCxrREFBaUM7SUFrQmpGLHdDQUFtQixJQUFZO1FBQS9CLFlBQ0ksa0JBQU0sSUFBSSxDQUFDLFNBQ2Q7UUFGa0IsVUFBSSxHQUFKLElBQUksQ0FBUTtRQUx4QixpQkFBVyxHQUFHLEVBQUUsQ0FBQzs7SUFPeEIsQ0FBQztJQWxCRCxzQkFBSSxrREFBTTthQUFWO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7YUFFRCxVQUFXLEtBQUs7WUFDWixJQUFJLEtBQUssRUFBRTtnQkFDUCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQzthQUN2QjtRQUNMLENBQUM7OztPQU5BO0lBa0JELHNCQUFJLGdEQUFJO2FBQVI7WUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNoRyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLGlEQUFLO2FBQVQ7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzdCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksc0RBQVU7YUFBZDtZQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3pDLENBQUM7OztPQUFBOzs7O0lBOUJEO1FBREMsS0FBSyxFQUFFO2dFQUdQO0lBU0Q7UUFEQyxLQUFLLEVBQUU7dUVBQ2dCO0lBR3hCO1FBREMsS0FBSyxFQUFFO3FFQUNjO0lBaEJiLDhCQUE4QjtRQUQxQyxTQUFTLEVBQUU7T0FDQyw4QkFBOEIsQ0FpQzFDO0lBQUQscUNBQUM7Q0FBQSxBQWpDRCxDQUFvRCxpQ0FBaUMsR0FpQ3BGO1NBakNZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElWYWx1ZUNoYW5nZWRFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgb2xkVmFsdWU6IGFueTtcbiAgICBuZXdWYWx1ZTogYW55O1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSXRlbVByb3BlcnR5VmFsdWVDaGFuZ2VkRGlyZWN0aXZlIHtcbiAgICBwcml2YXRlIF9vYmplY3Q6IGFueTtcbiAgICBwcml2YXRlIF9wcm9wTmFtZTogc3RyaW5nO1xuXG4gICAgZ2V0IG9iamVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29iamVjdDtcbiAgICB9XG5cbiAgICBzZXQgb2JqZWN0KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fb2JqZWN0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm9iamVjdCkgPyB0aGlzLm9iamVjdFt0aGlzLl9wcm9wTmFtZV0gOiBudWxsO1xuICAgIH1cblxuICAgIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLm9uVmFsdWVDaGFuZ2VkKHZhbHVlKTtcbiAgICB9XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgdmFsdWVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxJVmFsdWVDaGFuZ2VkRXZlbnRBcmdzPigpO1xuXG4gICAgY29uc3RydWN0b3IocHJvcE5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9wcm9wTmFtZSA9IHByb3BOYW1lO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvblZhbHVlQ2hhbmdlZCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vYmplY3RbdGhpcy5fcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZC5lbWl0KHsgb2xkVmFsdWU6IGN1cnJlbnRWYWx1ZSwgbmV3VmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKiogQGhpZGRlbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgQ29sdW1uQ2hvb3Nlckl0ZW1CYXNlRGlyZWN0aXZlIGV4dGVuZHMgSXRlbVByb3BlcnR5VmFsdWVDaGFuZ2VkRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIGdldCBjb2x1bW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9iamVjdDtcbiAgICB9XG5cbiAgICBzZXQgY29sdW1uKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vYmplY3QgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGluZGVudGF0aW9uID0gMzA7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb250YWluZXI6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwcm9wOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIocHJvcCk7XG4gICAgfVxuXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5jb2x1bW4pID8gKCh0aGlzLmNvbHVtbi5oZWFkZXIpID8gdGhpcy5jb2x1bW4uaGVhZGVyIDogdGhpcy5jb2x1bW4uZmllbGQpIDogJyc7XG4gICAgfVxuXG4gICAgZ2V0IGxldmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW4ubGV2ZWw7XG4gICAgfVxuXG4gICAgZ2V0IGNhbGNJbmRlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGVudGF0aW9uICogdGhpcy5sZXZlbDtcbiAgICB9XG59XG4iXX0=