import { __decorate, __values } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, HostBinding, HostListener, Input, NgZone, OnInit, OnDestroy } from '@angular/core';
import { DataType } from '../../data-operations/data-util';
import { SortingDirection } from '../../data-operations/sorting-expression.interface';
import { GridBaseAPIService } from '../api.service';
import { IgxColumnResizingService } from '../resizing/resizing.service';
import { Subject } from 'rxjs';
import { GridSelectionMode } from '../common/enums';
import { IgxGridExcelStyleFilteringComponent } from '../filtering/excel-style/grid.excel-style-filtering.component';
/**
 * @hidden
 */
var IgxGridHeaderComponent = /** @class */ (function () {
    function IgxGridHeaderComponent(gridAPI, colResizingService, cdr, elementRef, zone) {
        this.gridAPI = gridAPI;
        this.colResizingService = colResizingService;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.zone = zone;
        this._destroy$ = new Subject();
        this.hostRole = 'columnheader';
        this.sortDirection = SortingDirection.None;
    }
    Object.defineProperty(IgxGridHeaderComponent.prototype, "ariaSelected", {
        /**
         * Returns the `aria-selected` of the header.
         */
        get: function () {
            return this.column.selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "styleClasses", {
        get: function () {
            var e_1, _a;
            var defaultClasses = [
                'igx-grid__th--fw',
                this.column.headerClasses
            ];
            var classList = {
                'igx-grid__th': !this.column.columnGroup,
                'asc': this.ascending,
                'desc': this.descending,
                'igx-grid__th--number': this.column.dataType === DataType.Number,
                'igx-grid__th--sortable': this.column.sortable,
                'igx-grid__th--selectable': this.selectable,
                'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,
                'igx-grid__th--sorted': this.sorted,
                'igx-grid__th--selected': this.selected
            };
            try {
                for (var _b = __values(Object.keys(classList)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var klass = _c.value;
                    if (classList[klass]) {
                        defaultClasses.push(klass);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return defaultClasses.join(' ');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "height", {
        get: function () {
            if (this.grid.hasColumnGroups) {
                return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight / this.grid._baseFontSize;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "ascending", {
        get: function () {
            return this.sortDirection === SortingDirection.Asc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "descending", {
        get: function () {
            return this.sortDirection === SortingDirection.Desc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "sortingIcon", {
        get: function () {
            if (this.sortDirection !== SortingDirection.None) {
                // arrow_downward and arrow_upward
                // are material icons ligature strings
                return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';
            }
            return 'arrow_upward';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "sorted", {
        get: function () {
            return this.sortDirection !== SortingDirection.None;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "filterIconClassName", {
        get: function () {
            return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "selectable", {
        get: function () {
            return this.grid.columnSelection !== GridSelectionMode.none &&
                this.column.applySelectableClass &&
                !this.column.selected &&
                !this.grid.filteringService.isFilterRowVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "selected", {
        get: function () {
            return this.column.selected
                && (!this.grid.filteringService.isFilterRowVisible || this.grid.filteringService.filteredColumn !== this.column);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "columnTitle", {
        get: function () {
            return this.column.elementRef.nativeElement.getAttribute('title') ||
                this.column.header || this.column.field;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "headerID", {
        get: function () {
            return this.gridID + "_" + this.column.field;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridHeaderComponent.prototype.ngOnInit = function () {
        this.grid.filteringService.initFilteringSettings();
    };
    IgxGridHeaderComponent.prototype.ngDoCheck = function () {
        this.getSortDirection();
        this.cdr.markForCheck();
    };
    IgxGridHeaderComponent.prototype.ngOnDestroy = function () {
        this._destroy$.next(true);
        this._destroy$.complete();
        this.grid.filteringService.hideExcelFiltering();
    };
    IgxGridHeaderComponent.prototype.onClick = function (event) {
        if (!this.colResizingService.isColumnResizing) {
            if (this.grid.filteringService.isFilterRowVisible) {
                if (this.column.filterCellTemplate) {
                    this.grid.filteringRow.close();
                    return;
                }
                if (this.column.filterable && !this.column.columnGroup &&
                    !this.grid.filteringService.isFilterComplex(this.column.field)) {
                    this.grid.filteringService.filteredColumn = this.column;
                }
            }
            else if (this.grid.columnSelection !== GridSelectionMode.none && this.column.selectable) {
                var clearSelection = this.grid.columnSelection === GridSelectionMode.single || !event.ctrlKey;
                var rangeSelection = this.grid.columnSelection === GridSelectionMode.multiple && event.shiftKey;
                if (!this.column.selected || (this.grid.selectionService.getSelectedColumns().length > 1 && clearSelection)) {
                    this.grid.selectionService.selectColumn(this.column.field, clearSelection, rangeSelection, event);
                }
                else {
                    this.grid.selectionService.deselectColumn(this.column.field, event);
                }
            }
        }
        this.grid.theadRow.nativeElement.focus();
    };
    IgxGridHeaderComponent.prototype.onFilteringIconClick = function (event) {
        event.stopPropagation();
        this.grid.filteringService.toggleFilterDropdown(this.elementRef.nativeElement, this.column, IgxGridExcelStyleFilteringComponent);
    };
    Object.defineProperty(IgxGridHeaderComponent.prototype, "grid", {
        get: function () {
            return this.gridAPI.grid;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridHeaderComponent.prototype.getSortDirection = function () {
        var _this = this;
        var expr = this.gridAPI.grid.sortingExpressions.find(function (x) { return x.fieldName === _this.column.field; });
        this.sortDirection = expr ? expr.dir : SortingDirection.None;
    };
    IgxGridHeaderComponent.prototype.onSortingIconClick = function (event) {
        event.stopPropagation();
        this.triggerSort();
    };
    IgxGridHeaderComponent.prototype.triggerSort = function () {
        var _this = this;
        var groupingExpr = this.grid.groupingExpressions ?
            this.grid.groupingExpressions.find(function (expr) { return expr.fieldName === _this.column.field; }) : null;
        var sortDir = groupingExpr ?
            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc
            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;
        this.sortDirection = sortDir;
        this.grid.sort({
            fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,
            strategy: this.column.sortStrategy
        });
    };
    /**
     * @hidden
     */
    IgxGridHeaderComponent.prototype.onPinterEnter = function () {
        this.column.applySelectableClass = true;
    };
    /**
     * @hidden
     */
    IgxGridHeaderComponent.prototype.onPointerLeave = function () {
        this.column.applySelectableClass = false;
    };
    IgxGridHeaderComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService },
        { type: IgxColumnResizingService },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    __decorate([
        Input()
    ], IgxGridHeaderComponent.prototype, "column", void 0);
    __decorate([
        Input()
    ], IgxGridHeaderComponent.prototype, "gridID", void 0);
    __decorate([
        HostBinding('attr.aria-selected')
    ], IgxGridHeaderComponent.prototype, "ariaSelected", null);
    __decorate([
        HostBinding('class')
    ], IgxGridHeaderComponent.prototype, "styleClasses", null);
    __decorate([
        HostBinding('style.height.rem')
    ], IgxGridHeaderComponent.prototype, "height", null);
    __decorate([
        HostBinding('attr.role')
    ], IgxGridHeaderComponent.prototype, "hostRole", void 0);
    __decorate([
        HostBinding('attr.id')
    ], IgxGridHeaderComponent.prototype, "headerID", null);
    __decorate([
        HostListener('click', ['$event'])
    ], IgxGridHeaderComponent.prototype, "onClick", null);
    __decorate([
        HostListener('pointerenter')
    ], IgxGridHeaderComponent.prototype, "onPinterEnter", null);
    __decorate([
        HostListener('pointerleave')
    ], IgxGridHeaderComponent.prototype, "onPointerLeave", null);
    IgxGridHeaderComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: 'igx-grid-header',
            template: "<ng-template #defaultColumn>\n    <span [attr.title]=\"columnTitle\">{{ column.header || column.field }}</span>\n</ng-template>\n\n<span class=\"igx-grid__th-title\">\n    <ng-container *ngTemplateOutlet=\"column.headerTemplate ? column.headerTemplate : defaultColumn; context: { $implicit: column, column: column}\">\n    </ng-container>\n</span>\n<div class=\"igx-grid__th-icons\" *ngIf=\"!column.columnGroup\">\n    <igx-icon [attr.draggable]=\"false\"\n        class=\"sort-icon\"\n        *ngIf=\"column.sortable\"\n        (click)=\"onSortingIconClick($event)\">\n        {{sortingIcon}}\n    </igx-icon>\n\n    <igx-icon [ngClass]=\"filterIconClassName\" [attr.draggable]=\"false\" (click)=\"onFilteringIconClick($event)\"\n        *ngIf=\"grid.allowFiltering == true && column.filterable && grid.filterMode == 'excelStyleFilter'\">\n        filter_list\n    </igx-icon>\n</div>\n"
        })
    ], IgxGridHeaderComponent);
    return IgxGridHeaderComponent;
}());
export { IgxGridHeaderComponent };
//# sourceMappingURL=data:application/json;base64,