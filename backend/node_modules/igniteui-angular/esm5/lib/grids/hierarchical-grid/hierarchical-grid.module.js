import { __decorate } from "tslib";
import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { IgxGridModule } from '../grid/grid.module';
import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';
import { IgxHierarchicalRowComponent } from './hierarchical-row.component';
import { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';
import { IgxRowIslandComponent } from './row-island.component';
import { IgxChildGridRowComponent } from './child-grid-row.component';
import { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';
import { IgxGridComponent } from '../grid/grid.component';
import { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';
/**
 * @hidden
 */
var IgxHierarchicalGridModule = /** @class */ (function () {
    function IgxHierarchicalGridModule() {
    }
    IgxHierarchicalGridModule = __decorate([
        NgModule({
            declarations: [
                IgxHierarchicalGridBaseDirective,
                IgxHierarchicalGridComponent,
                IgxHierarchicalRowComponent,
                IgxRowIslandComponent,
                IgxChildGridRowComponent,
                IgxHierarchicalGridCellComponent,
                IgxGridHierarchicalPipe,
                IgxGridHierarchicalPagingPipe
            ],
            exports: [
                IgxGridModule,
                IgxHierarchicalGridComponent,
                IgxHierarchicalRowComponent,
                IgxHierarchicalGridCellComponent,
                IgxRowIslandComponent,
                IgxChildGridRowComponent
            ],
            imports: [
                IgxGridModule,
            ],
            entryComponents: [
                IgxGridComponent
            ],
            schemas: [CUSTOM_ELEMENTS_SCHEMA]
        })
    ], IgxHierarchicalGridModule);
    return IgxHierarchicalGridModule;
}());
export { IgxHierarchicalGridModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLWdyaWQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9oaWVyYXJjaGljYWwtZ3JpZC9oaWVyYXJjaGljYWwtZ3JpZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzdFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzNFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ25HLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQy9ELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRXRGOztHQUVHO0FBNEJIO0lBQUE7SUFDQSxDQUFDO0lBRFkseUJBQXlCO1FBM0JyQyxRQUFRLENBQUM7WUFDUixZQUFZLEVBQUU7Z0JBQ1osZ0NBQWdDO2dCQUNoQyw0QkFBNEI7Z0JBQzVCLDJCQUEyQjtnQkFDM0IscUJBQXFCO2dCQUNyQix3QkFBd0I7Z0JBQ3hCLGdDQUFnQztnQkFDaEMsdUJBQXVCO2dCQUN2Qiw2QkFBNkI7YUFDOUI7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsYUFBYTtnQkFDYiw0QkFBNEI7Z0JBQzVCLDJCQUEyQjtnQkFDM0IsZ0NBQWdDO2dCQUNoQyxxQkFBcUI7Z0JBQ3JCLHdCQUF3QjthQUN6QjtZQUNELE9BQU8sRUFBRTtnQkFDUCxhQUFhO2FBQ2Q7WUFDRCxlQUFlLEVBQUU7Z0JBQ2YsZ0JBQWdCO2FBQ2pCO1lBQ0QsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUM7U0FDbEMsQ0FBQztPQUNXLHlCQUF5QixDQUNyQztJQUFELGdDQUFDO0NBQUEsQUFERCxJQUNDO1NBRFkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIENVU1RPTV9FTEVNRU5UU19TQ0hFTUEgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEdyaWRNb2R1bGUgfSBmcm9tICcuLi9ncmlkL2dyaWQubW9kdWxlJztcbmltcG9ydCB7IElneEhpZXJhcmNoaWNhbEdyaWRDb21wb25lbnQgfSBmcm9tICcuL2hpZXJhcmNoaWNhbC1ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hIaWVyYXJjaGljYWxSb3dDb21wb25lbnQgfSBmcm9tICcuL2hpZXJhcmNoaWNhbC1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRIaWVyYXJjaGljYWxQaXBlLCBJZ3hHcmlkSGllcmFyY2hpY2FsUGFnaW5nUGlwZSB9IGZyb20gJy4vaGllcmFyY2hpY2FsLWdyaWQucGlwZXMnO1xuaW1wb3J0IHsgSWd4Um93SXNsYW5kQ29tcG9uZW50IH0gZnJvbSAnLi9yb3ctaXNsYW5kLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hDaGlsZEdyaWRSb3dDb21wb25lbnQgfSBmcm9tICcuL2NoaWxkLWdyaWQtcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hIaWVyYXJjaGljYWxHcmlkQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vaGllcmFyY2hpY2FsLWNlbGwuY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRDb21wb25lbnQgfSBmcm9tICcuLi9ncmlkL2dyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IElneEhpZXJhcmNoaWNhbEdyaWRCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9oaWVyYXJjaGljYWwtZ3JpZC1iYXNlLmRpcmVjdGl2ZSc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBJZ3hIaWVyYXJjaGljYWxHcmlkQmFzZURpcmVjdGl2ZSxcbiAgICBJZ3hIaWVyYXJjaGljYWxHcmlkQ29tcG9uZW50LFxuICAgIElneEhpZXJhcmNoaWNhbFJvd0NvbXBvbmVudCxcbiAgICBJZ3hSb3dJc2xhbmRDb21wb25lbnQsXG4gICAgSWd4Q2hpbGRHcmlkUm93Q29tcG9uZW50LFxuICAgIElneEhpZXJhcmNoaWNhbEdyaWRDZWxsQ29tcG9uZW50LFxuICAgIElneEdyaWRIaWVyYXJjaGljYWxQaXBlLFxuICAgIElneEdyaWRIaWVyYXJjaGljYWxQYWdpbmdQaXBlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBJZ3hHcmlkTW9kdWxlLFxuICAgIElneEhpZXJhcmNoaWNhbEdyaWRDb21wb25lbnQsXG4gICAgSWd4SGllcmFyY2hpY2FsUm93Q29tcG9uZW50LFxuICAgIElneEhpZXJhcmNoaWNhbEdyaWRDZWxsQ29tcG9uZW50LFxuICAgIElneFJvd0lzbGFuZENvbXBvbmVudCxcbiAgICBJZ3hDaGlsZEdyaWRSb3dDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIElneEdyaWRNb2R1bGUsXG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1xuICAgIElneEdyaWRDb21wb25lbnRcbiAgXSxcbiAgc2NoZW1hczogW0NVU1RPTV9FTEVNRU5UU19TQ0hFTUFdXG59KVxuZXhwb3J0IGNsYXNzIElneEhpZXJhcmNoaWNhbEdyaWRNb2R1bGUge1xufVxuIl19