import { __decorate, __extends } from "tslib";
import { Directive } from '@angular/core';
import { ConnectedPositioningStrategy } from '../services/public_api';
import { VerticalAlignment } from '../services/overlay/utilities';
import { scaleInVerBottom, scaleInVerTop } from '../animations/main';
import { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';
var IgxGridBodyDirective = /** @class */ (function () {
    function IgxGridBodyDirective() {
    }
    IgxGridBodyDirective = __decorate([
        Directive({
            selector: '[igxGridBody]',
            providers: [IgxForOfSyncService]
        })
    ], IgxGridBodyDirective);
    return IgxGridBodyDirective;
}());
export { IgxGridBodyDirective };
/**
 * @hidden
 */
var RowEditPositionStrategy = /** @class */ (function (_super) {
    __extends(RowEditPositionStrategy, _super);
    function RowEditPositionStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isTop = false;
        _this.isTopInitialPosition = null;
        return _this;
    }
    RowEditPositionStrategy.prototype.position = function (contentElement, size, document, initialCall) {
        var container = this.settings.container; // grid.tbody
        var target = this.settings.target; // current grid.row
        // Position of the overlay depends on the available space in the grid.
        // If the bottom space is not enough then the the row overlay will show at the top of the row.
        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),
        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).
        this.isTop = this.isTopInitialPosition !== null ?
            this.isTopInitialPosition :
            container.getBoundingClientRect().bottom <
                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;
        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.
        contentElement.style.width = target.clientWidth + 'px';
        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;
        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;
        _super.prototype.position.call(this, contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);
    };
    return RowEditPositionStrategy;
}(ConnectedPositioningStrategy));
export { RowEditPositionStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5jb21tb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2dyaWQuY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxpQkFBaUIsRUFBb0IsTUFBTSwrQkFBK0IsQ0FBQztBQUNwRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFRL0U7SUFBQTtJQUFtQyxDQUFDO0lBQXZCLG9CQUFvQjtRQUpoQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsZUFBZTtZQUN6QixTQUFTLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztTQUNuQyxDQUFDO09BQ1csb0JBQW9CLENBQUc7SUFBRCwyQkFBQztDQUFBLEFBQXBDLElBQW9DO1NBQXZCLG9CQUFvQjtBQWtCakM7O0dBRUc7QUFDSDtJQUE2QywyQ0FBNEI7SUFBekU7UUFBQSxxRUF3QkM7UUF2QkcsV0FBSyxHQUFHLEtBQUssQ0FBQztRQUNkLDBCQUFvQixHQUFHLElBQUksQ0FBQzs7SUFzQmhDLENBQUM7SUFwQkcsMENBQVEsR0FBUixVQUFTLGNBQTJCLEVBQUUsSUFBdUMsRUFBRSxRQUFtQixFQUFFLFdBQXFCO1FBQ3JILElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsYUFBYTtRQUN4RCxJQUFNLE1BQU0sR0FBZ0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxtQkFBbUI7UUFFckUsc0VBQXNFO1FBQ3RFLDhGQUE4RjtRQUM5RiwwSEFBMEg7UUFDMUgsMEdBQTBHO1FBQzFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixLQUFLLElBQUksQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQzNCLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU07Z0JBQ3BDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFFOUYsK0ZBQStGO1FBQy9GLGNBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztRQUNuSSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBRTVFLGlCQUFNLFFBQVEsWUFBQyxjQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN0SCxDQUFDO0lBQ0wsOEJBQUM7QUFBRCxDQUFDLEFBeEJELENBQTZDLDRCQUE0QixHQXdCeEUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbm5lY3RlZFBvc2l0aW9uaW5nU3RyYXRlZ3kgfSBmcm9tICcuLi9zZXJ2aWNlcy9wdWJsaWNfYXBpJztcbmltcG9ydCB7IFZlcnRpY2FsQWxpZ25tZW50LCBQb3NpdGlvblNldHRpbmdzIH0gZnJvbSAnLi4vc2VydmljZXMvb3ZlcmxheS91dGlsaXRpZXMnO1xuaW1wb3J0IHsgc2NhbGVJblZlckJvdHRvbSwgc2NhbGVJblZlclRvcCB9IGZyb20gJy4uL2FuaW1hdGlvbnMvbWFpbic7XG5pbXBvcnQgeyBJZ3hGb3JPZlN5bmNTZXJ2aWNlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9mb3Itb2YvZm9yX29mLnN5bmMuc2VydmljZSc7XG5pbXBvcnQgeyBDb2x1bW5QaW5uaW5nUG9zaXRpb24sIFJvd1Bpbm5pbmdQb3NpdGlvbiB9IGZyb20gJy4vY29tbW9uL2VudW1zJztcblxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hHcmlkQm9keV0nLFxuICAgIHByb3ZpZGVyczogW0lneEZvck9mU3luY1NlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIElneEdyaWRCb2R5RGlyZWN0aXZlIHt9XG5cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm93RWRpdFBvc2l0aW9uU2V0dGluZ3MgZXh0ZW5kcyBQb3NpdGlvblNldHRpbmdzIHtcbiAgICBjb250YWluZXI/OiBIVE1MRWxlbWVudDtcbn1cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgZGVzY3JpYmluZyBzZXR0aW5ncyBmb3Igcm93L2NvbHVtbiBwaW5uaW5nIHBvc2l0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElQaW5uaW5nQ29uZmlnIHtcbiAgICBjb2x1bW5zPzogQ29sdW1uUGlubmluZ1Bvc2l0aW9uO1xuICAgIHJvd3M/OiBSb3dQaW5uaW5nUG9zaXRpb247XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgUm93RWRpdFBvc2l0aW9uU3RyYXRlZ3kgZXh0ZW5kcyBDb25uZWN0ZWRQb3NpdGlvbmluZ1N0cmF0ZWd5IHtcbiAgICBpc1RvcCA9IGZhbHNlO1xuICAgIGlzVG9wSW5pdGlhbFBvc2l0aW9uID0gbnVsbDtcbiAgICBwdWJsaWMgc2V0dGluZ3M6IFJvd0VkaXRQb3NpdGlvblNldHRpbmdzO1xuICAgIHBvc2l0aW9uKGNvbnRlbnRFbGVtZW50OiBIVE1MRWxlbWVudCwgc2l6ZTogeyB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9LCBkb2N1bWVudD86IERvY3VtZW50LCBpbml0aWFsQ2FsbD86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5zZXR0aW5ncy5jb250YWluZXI7IC8vIGdyaWQudGJvZHlcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gPEhUTUxFbGVtZW50PnRoaXMuc2V0dGluZ3MudGFyZ2V0OyAvLyBjdXJyZW50IGdyaWQucm93XG5cbiAgICAgICAgLy8gUG9zaXRpb24gb2YgdGhlIG92ZXJsYXkgZGVwZW5kcyBvbiB0aGUgYXZhaWxhYmxlIHNwYWNlIGluIHRoZSBncmlkLlxuICAgICAgICAvLyBJZiB0aGUgYm90dG9tIHNwYWNlIGlzIG5vdCBlbm91Z2ggdGhlbiB0aGUgdGhlIHJvdyBvdmVybGF5IHdpbGwgc2hvdyBhdCB0aGUgdG9wIG9mIHRoZSByb3cuXG4gICAgICAgIC8vIE9uY2Ugc2hvd24sIGVpdGhlciB0b3Agb3IgYm90dG9tLCB0aGVuIHRoaXMgcG9zaXRpb24gc3RheXMgdW50aWwgdGhlIG92ZXJsYXkgaXMgY2xvc2VkIChpc1RvcEluaXRpYWxQb3NpdGlvbiBwcm9wZXJ0eSksXG4gICAgICAgIC8vIHdoaWNoIG1lYW5zIHRoYXQgd2hlbiBzY3JvbGxpbmcgdGhlbiBvdmVybGF5IG1heSBoaWRlLCB3aGlsZSB0aGUgcm93IGlzIHN0aWxsIHZpc2libGUgKFVYIHJlcXVpcmVtZW50KS5cbiAgICAgICAgdGhpcy5pc1RvcCA9IHRoaXMuaXNUb3BJbml0aWFsUG9zaXRpb24gIT09IG51bGwgP1xuICAgICAgICAgICAgdGhpcy5pc1RvcEluaXRpYWxQb3NpdGlvbiA6XG4gICAgICAgICAgICBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDxcbiAgICAgICAgICAgICAgICB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tICsgY29udGVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXG4gICAgICAgIC8vIFNldCB3aWR0aCBvZiB0aGUgcm93IGVkaXRpbmcgb3ZlcmxheSB0byBlcXVhbCByb3cgd2lkdGgsIG90aGVyd2lzZSBpdCBmaXRzIDEwMCUgb2YgdGhlIGdyaWQuXG4gICAgICAgIGNvbnRlbnRFbGVtZW50LnN0eWxlLndpZHRoID0gdGFyZ2V0LmNsaWVudFdpZHRoICsgJ3B4JztcbiAgICAgICAgdGhpcy5zZXR0aW5ncy52ZXJ0aWNhbFN0YXJ0UG9pbnQgPSB0aGlzLnNldHRpbmdzLnZlcnRpY2FsRGlyZWN0aW9uID0gdGhpcy5pc1RvcCA/IFZlcnRpY2FsQWxpZ25tZW50LlRvcCA6IFZlcnRpY2FsQWxpZ25tZW50LkJvdHRvbTtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5vcGVuQW5pbWF0aW9uID0gdGhpcy5pc1RvcCA/IHNjYWxlSW5WZXJCb3R0b20gOiBzY2FsZUluVmVyVG9wO1xuXG4gICAgICAgIHN1cGVyLnBvc2l0aW9uKGNvbnRlbnRFbGVtZW50LCB7IHdpZHRoOiB0YXJnZXQuY2xpZW50V2lkdGgsIGhlaWdodDogdGFyZ2V0LmNsaWVudEhlaWdodCB9LCBkb2N1bWVudCwgaW5pdGlhbENhbGwpO1xuICAgIH1cbn1cbiJdfQ==