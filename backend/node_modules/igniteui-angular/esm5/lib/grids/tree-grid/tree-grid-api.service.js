import { __decorate, __extends, __values } from "tslib";
import { GridBaseAPIService } from '../api.service';
import { DataType } from '../../data-operations/data-util';
import { TransactionType } from '../../services/public_api';
import { mergeObjects } from '../../core/utils';
import { Injectable } from '@angular/core';
var IgxTreeGridAPIService = /** @class */ (function (_super) {
    __extends(IgxTreeGridAPIService, _super);
    function IgxTreeGridAPIService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxTreeGridAPIService.prototype.get_all_data = function (transactions) {
        var grid = this.grid;
        var data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;
        return data ? data : [];
    };
    IgxTreeGridAPIService.prototype.get_summary_data = function () {
        var grid = this.grid;
        var data = grid.processedRootRecords.filter(function (row) { return row.isFilteredOutParent === undefined || row.isFilteredOutParent === false; })
            .map(function (rec) { return rec.data; });
        if (grid.transactions.enabled) {
            var deletedRows = grid.transactions.getTransactionLog().filter(function (t) { return t.type === TransactionType.DELETE; }).map(function (t) { return t.id; });
            deletedRows.forEach(function (rowID) {
                var tempData = grid.primaryKey ? data.map(function (rec) { return rec[grid.primaryKey]; }) : data;
                var index = tempData.indexOf(rowID);
                if (index !== -1) {
                    data.splice(index, 1);
                }
            });
        }
        return data;
    };
    IgxTreeGridAPIService.prototype.allow_expansion_state_change = function (rowID, expanded) {
        var grid = this.grid;
        var row = grid.records.get(rowID);
        if (row.expanded === expanded ||
            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||
                (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {
            return false;
        }
        return true;
    };
    IgxTreeGridAPIService.prototype.expand_path_to_record = function (record) {
        var grid = this.grid;
        var expandedStates = grid.expansionStates;
        while (record.parent) {
            record = record.parent;
            var expanded = this.get_row_expansion_state(record);
            if (!expanded) {
                expandedStates.set(record.rowID, true);
            }
        }
        grid.expansionStates = expandedStates;
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    };
    IgxTreeGridAPIService.prototype.get_row_expansion_state = function (record) {
        var grid = this.grid;
        var states = grid.expansionStates;
        var expanded = states.get(record.rowID);
        if (expanded !== undefined) {
            return expanded;
        }
        else {
            return record.children && record.children.length && record.level < grid.expansionDepth;
        }
    };
    IgxTreeGridAPIService.prototype.update_row_in_array = function (value, rowID, index) {
        var grid = this.grid;
        if (grid.primaryKey && grid.foreignKey) {
            _super.prototype.update_row_in_array.call(this, value, rowID, index);
        }
        else {
            var record = grid.records.get(rowID);
            var childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;
            index = grid.primaryKey ? childData.map(function (c) { return c[grid.primaryKey]; }).indexOf(rowID) :
                childData.indexOf(rowID);
            childData[index] = value;
        }
    };
    IgxTreeGridAPIService.prototype.should_apply_number_style = function (column) {
        return column.dataType === DataType.Number && column.visibleIndex !== 0;
    };
    IgxTreeGridAPIService.prototype.deleteRowById = function (rowID) {
        var treeGrid = this.grid;
        var flatDataWithCascadeOnDeleteAndTransactions = treeGrid.primaryKey &&
            treeGrid.foreignKey &&
            treeGrid.cascadeOnDelete &&
            treeGrid.transactions.enabled;
        if (flatDataWithCascadeOnDeleteAndTransactions) {
            treeGrid.transactions.startPending();
        }
        _super.prototype.deleteRowById.call(this, rowID);
        if (flatDataWithCascadeOnDeleteAndTransactions) {
            treeGrid.transactions.endPending(true);
        }
    };
    IgxTreeGridAPIService.prototype.deleteRowFromData = function (rowID, index) {
        var treeGrid = this.grid;
        var record = treeGrid.records.get(rowID);
        if (treeGrid.primaryKey && treeGrid.foreignKey) {
            index = treeGrid.primaryKey ?
                treeGrid.data.map(function (c) { return c[treeGrid.primaryKey]; }).indexOf(rowID) :
                treeGrid.data.indexOf(rowID);
            _super.prototype.deleteRowFromData.call(this, rowID, index);
            if (treeGrid.cascadeOnDelete) {
                if (record && record.children && record.children.length > 0) {
                    for (var i = 0; i < record.children.length; i++) {
                        var child = record.children[i];
                        _super.prototype.deleteRowById.call(this, child.rowID);
                    }
                }
            }
        }
        else {
            var collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;
            index = treeGrid.primaryKey ?
                collection.map(function (c) { return c[treeGrid.primaryKey]; }).indexOf(rowID) :
                collection.indexOf(rowID);
            var selectedChildren = [];
            this.get_selected_children(record, selectedChildren);
            if (selectedChildren.length > 0) {
                treeGrid.deselectRows(selectedChildren);
            }
            if (treeGrid.transactions.enabled) {
                var path = treeGrid.generateRowPath(rowID);
                treeGrid.transactions.add({
                    id: rowID,
                    type: TransactionType.DELETE,
                    newValue: null,
                    path: path
                }, collection[index]);
            }
            else {
                collection.splice(index, 1);
            }
        }
    };
    /**
     * Updates related row of provided grid's data source with provided new row value
     * @param grid Grid to update data for
     * @param rowID ID of the row to update
     * @param rowValueInDataSource Initial value of the row as it is in data source
     * @param rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param rowNewValue New value of the row
     */
    IgxTreeGridAPIService.prototype.updateData = function (grid, rowID, rowValueInDataSource, rowCurrentValue, rowNewValue) {
        if (grid.transactions.enabled) {
            var path = grid.generateRowPath(rowID);
            var transaction = {
                id: rowID,
                type: TransactionType.UPDATE,
                newValue: rowNewValue,
                path: path
            };
            grid.transactions.add(transaction, rowCurrentValue);
        }
        else {
            mergeObjects(rowValueInDataSource, rowNewValue);
        }
    };
    IgxTreeGridAPIService.prototype.get_selected_children = function (record, selectedRowIDs) {
        var e_1, _a;
        var grid = this.grid;
        if (!record.children || record.children.length === 0) {
            return;
        }
        try {
            for (var _b = __values(record.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                if (grid.selectionService.isRowSelected(child.rowID)) {
                    selectedRowIDs.push(child.rowID);
                }
                this.get_selected_children(child, selectedRowIDs);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    IgxTreeGridAPIService.prototype.row_deleted_transaction = function (rowID) {
        return this.row_deleted_parent(rowID) || _super.prototype.row_deleted_transaction.call(this, rowID);
    };
    IgxTreeGridAPIService.prototype.get_rec_by_id = function (rowID) {
        return this.grid.records.get(rowID);
    };
    IgxTreeGridAPIService.prototype.row_deleted_parent = function (rowID) {
        var grid = this.grid;
        if (!grid) {
            return false;
        }
        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {
            var node = grid.records.get(rowID);
            while (node) {
                var state = grid.transactions.getState(node.rowID);
                if (state && state.type === TransactionType.DELETE) {
                    return true;
                }
                node = node.parent;
            }
        }
        return false;
    };
    IgxTreeGridAPIService = __decorate([
        Injectable()
    ], IgxTreeGridAPIService);
    return IgxTreeGridAPIService;
}(GridBaseAPIService));
export { IgxTreeGridAPIService };
//# sourceMappingURL=data:application/json;base64,