import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { Directive, ElementRef, EventEmitter, Input, NgModule, OnChanges, Output, Pipe, PipeTransform, Renderer2, SimpleChanges } from '@angular/core';
var IgxFilterOptions = /** @class */ (function () {
    function IgxFilterOptions() {
        // Input text value that will be used as a filtering pattern (matching condition is based on it)
        this.inputValue = '';
    }
    // Function - get value to be tested from the item
    // item - single item of the list to be filtered
    // key - property name of item, which value should be tested
    // Default behavior - returns "key"- named property value of item if key si provided,
    // otherwise textContent of the item's html element
    IgxFilterOptions.prototype.get_value = function (item, key) {
        var result = '';
        if (key && item[key]) {
            result = item[key].toString();
        }
        else if (item.element) {
            if (item.element.nativeElement) {
                result = item.element.nativeElement.textContent.trim();
                // Check if element doesn't return the DOM element directly
            }
            else if (item.element.textContent) {
                result = item.element.textContent.trim();
            }
        }
        return result;
    };
    // Function - formats the original text before matching process
    // Default behavior - returns text to lower case
    IgxFilterOptions.prototype.formatter = function (valueToTest) {
        return valueToTest.toLowerCase();
    };
    // Function - determines whether the item met the condition
    // valueToTest - text value that should be tested
    // inputValue - text value from input that condition is based on
    // Default behavior - "contains"
    IgxFilterOptions.prototype.matchFn = function (valueToTest, inputValue) {
        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;
    };
    // Function - executed after matching test for every matched item
    // Default behavior - shows the item
    IgxFilterOptions.prototype.metConditionFn = function (item) {
        if (item.hasOwnProperty('hidden')) {
            item.hidden = false;
        }
    };
    // Function - executed for every NOT matched item after matching test
    // Default behavior - hides the item
    IgxFilterOptions.prototype.overdueConditionFn = function (item) {
        if (item.hasOwnProperty('hidden')) {
            item.hidden = true;
        }
    };
    return IgxFilterOptions;
}());
export { IgxFilterOptions };
var IgxFilterDirective = /** @class */ (function () {
    function IgxFilterDirective(element, renderer) {
        this.element = element;
        this.filtering = new EventEmitter(false); // synchronous event emitter
        this.filtered = new EventEmitter();
    }
    IgxFilterDirective.prototype.ngOnChanges = function (changes) {
        // Detect only changes of input value
        if (changes.filterOptions &&
            changes.filterOptions.currentValue &&
            changes.filterOptions.currentValue.inputValue !== undefined &&
            changes.filterOptions.previousValue &&
            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {
            this.filter();
        }
    };
    IgxFilterDirective.prototype.filter = function () {
        if (!this.filterOptions.items) {
            return;
        }
        var args = { cancel: false, items: this.filterOptions.items };
        this.filtering.emit(args);
        if (args.cancel) {
            return;
        }
        var pipe = new IgxFilterPipe();
        var filtered = pipe.transform(this.filterOptions.items, this.filterOptions);
        this.filtered.emit({ filteredItems: filtered });
    };
    IgxFilterDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Output()
    ], IgxFilterDirective.prototype, "filtering", void 0);
    __decorate([
        Output()
    ], IgxFilterDirective.prototype, "filtered", void 0);
    __decorate([
        Input('igxFilter')
    ], IgxFilterDirective.prototype, "filterOptions", void 0);
    IgxFilterDirective = __decorate([
        Directive({
            selector: '[igxFilter]'
        })
    ], IgxFilterDirective);
    return IgxFilterDirective;
}());
export { IgxFilterDirective };
var IgxFilterPipe = /** @class */ (function () {
    function IgxFilterPipe() {
    }
    IgxFilterPipe.prototype.transform = function (items, 
    // options - initial settings of filter functionality
    options) {
        var result = [];
        if (!items || !items.length || !options) {
            return;
        }
        if (options.items) {
            items = options.items;
        }
        result = items.filter(function (item) {
            var match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);
            if (match) {
                if (options.metConditionFn) {
                    options.metConditionFn(item);
                }
            }
            else {
                if (options.overdueConditionFn) {
                    options.overdueConditionFn(item);
                }
            }
            return match;
        });
        return result;
    };
    IgxFilterPipe = __decorate([
        Pipe({
            name: 'igxFilter',
            pure: false
        })
    ], IgxFilterPipe);
    return IgxFilterPipe;
}());
export { IgxFilterPipe };
/**
 * @hidden
 */
var IgxFilterModule = /** @class */ (function () {
    function IgxFilterModule() {
    }
    IgxFilterModule = __decorate([
        NgModule({
            declarations: [IgxFilterDirective, IgxFilterPipe],
            exports: [IgxFilterDirective, IgxFilterPipe],
            imports: [CommonModule]
        })
    ], IgxFilterModule);
    return IgxFilterModule;
}());
export { IgxFilterModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9maWx0ZXIvZmlsdGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBQ0wsUUFBUSxFQUNSLFNBQVMsRUFDVCxNQUFNLEVBQ04sSUFBSSxFQUNKLGFBQWEsRUFDYixTQUFTLEVBQ1QsYUFBYSxFQUNoQixNQUFNLGVBQWUsQ0FBQztBQUV2QjtJQUFBO1FBQ0ksZ0dBQWdHO1FBQ3pGLGVBQVUsR0FBRyxFQUFFLENBQUM7SUEyRDNCLENBQUM7SUFuREcsa0RBQWtEO0lBQ2xELGdEQUFnRDtJQUNoRCw0REFBNEQ7SUFDNUQscUZBQXFGO0lBQ3JGLG1EQUFtRDtJQUM1QyxvQ0FBUyxHQUFoQixVQUFpQixJQUFTLEVBQUUsR0FBVztRQUNuQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFaEIsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2xCLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakM7YUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDckIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRTtnQkFDNUIsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDM0QsMkRBQTJEO2FBQzFEO2lCQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7Z0JBQ2pDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJ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RVcsYUFBYSxDQWlDekI7SUFBRCxvQkFBQztDQUFBLEFBakNELElBaUNDO1NBakNZLGFBQWE7QUFtQzFCOztHQUVHO0FBTUg7SUFBQTtJQUNBLENBQUM7SUFEWSxlQUFlO1FBTDNCLFFBQVEsQ0FBQztZQUNOLFlBQVksRUFBRSxDQUFDLGtCQUFrQixFQUFFLGFBQWEsQ0FBQztZQUNqRCxPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUM7WUFDNUMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO1NBQzFCLENBQUM7T0FDVyxlQUFlLENBQzNCO0lBQUQsc0JBQUM7Q0FBQSxBQURELElBQ0M7U0FEWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIElucHV0LFxuICAgIE5nTW9kdWxlLFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPdXRwdXQsXG4gICAgUGlwZSxcbiAgICBQaXBlVHJhbnNmb3JtLFxuICAgIFJlbmRlcmVyMixcbiAgICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgSWd4RmlsdGVyT3B0aW9ucyB7XG4gICAgLy8gSW5wdXQgdGV4dCB2YWx1ZSB0aGF0IHdpbGwgYmUgdXNlZCBhcyBhIGZpbHRlcmluZyBwYXR0ZXJuIChtYXRjaGluZyBjb25kaXRpb24gaXMgYmFzZWQgb24gaXQpXG4gICAgcHVibGljIGlucHV0VmFsdWUgPSAnJztcblxuICAgIC8vIEl0ZW0gcHJvcGVydHksIHdoaWNoIHZhbHVlIHNob3VsZCBiZSB1c2VkIGZvciBmaWx0ZXJpbmdcbiAgICBwdWJsaWMga2V5OiBzdHJpbmc7XG5cbiAgICAvLyBSZXByZXNlbnQgaXRlbXMgb2YgdGhlIGxpc3QuIEl0IHNob3VsZCBiZSB1c2VkIHRvIGhhbmRsZSBkZWNhbGFyYXRldmVseSBkZWZpbmVkIHdpZGdldHNcbiAgICBwdWJsaWMgaXRlbXM6IGFueVtdO1xuXG4gICAgLy8gRnVuY3Rpb24gLSBnZXQgdmFsdWUgdG8gYmUgdGVzdGVkIGZyb20gdGhlIGl0ZW1cbiAgICAvLyBpdGVtIC0gc2luZ2xlIGl0ZW0gb2YgdGhlIGxpc3QgdG8gYmUgZmlsdGVyZWRcbiAgICAvLyBrZXkgLSBwcm9wZXJ0eSBuYW1lIG9mIGl0ZW0sIHdoaWNoIHZhbHVlIHNob3VsZCBiZSB0ZXN0ZWRcbiAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIC0gcmV0dXJucyBcImtleVwiLSBuYW1lZCBwcm9wZXJ0eSB2YWx1ZSBvZiBpdGVtIGlmIGtleSBzaSBwcm92aWRlZCxcbiAgICAvLyBvdGhlcndpc2UgdGV4dENvbnRlbnQgb2YgdGhlIGl0ZW0ncyBodG1sIGVsZW1lbnRcbiAgICBwdWJsaWMgZ2V0X3ZhbHVlKGl0ZW06IGFueSwga2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XG5cbiAgICAgICAgaWYgKGtleSAmJiBpdGVtW2tleV0pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW1ba2V5XS50b1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGl0ZW0uZWxlbWVudC5uYXRpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXRlbS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQudGV4dENvbnRlbnQudHJpbSgpO1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZWxlbWVudCBkb2Vzbid0IHJldHVybiB0aGUgRE9NIGVsZW1lbnQgZGlyZWN0bHlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5lbGVtZW50LnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXRlbS5lbGVtZW50LnRleHRDb250ZW50LnRyaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRnVuY3Rpb24gLSBmb3JtYXRzIHRoZSBvcmlnaW5hbCB0ZXh0IGJlZm9yZSBtYXRjaGluZyBwcm9jZXNzXG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciAtIHJldHVybnMgdGV4dCB0byBsb3dlciBjYXNlXG4gICAgcHVibGljIGZvcm1hdHRlcih2YWx1ZVRvVGVzdDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlVG9UZXN0LnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLy8gRnVuY3Rpb24gLSBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGl0ZW0gbWV0IHRoZSBjb25kaXRpb25cbiAgICAvLyB2YWx1ZVRvVGVzdCAtIHRleHQgdmFsdWUgdGhhdCBzaG91bGQgYmUgdGVzdGVkXG4gICAgLy8gaW5wdXRWYWx1ZSAtIHRleHQgdmFsdWUgZnJvbSBpbnB1dCB0aGF0IGNvbmRpdGlvbiBpcyBiYXNlZCBvblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgLSBcImNvbnRhaW5zXCJcbiAgICBwdWJsaWMgbWF0Y2hGbih2YWx1ZVRvVGVzdDogc3RyaW5nLCBpbnB1dFZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlVG9UZXN0LmluZGV4T2YoaW5wdXRWYWx1ZSAmJiBpbnB1dFZhbHVlLnRvTG93ZXJDYXNlKCkgfHwgJycpID4gLTE7XG4gICAgfVxuXG4gICAgLy8gRnVuY3Rpb24gLSBleGVjdXRlZCBhZnRlciBtYXRjaGluZyB0ZXN0IGZvciBldmVyeSBtYXRjaGVkIGl0ZW1cbiAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIC0gc2hvd3MgdGhlIGl0ZW1cbiAgICBwdWJsaWMgbWV0Q29uZGl0aW9uRm4oaXRlbTogYW55KSB7XG4gICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdoaWRkZW4nKSkge1xuICAgICAgICAgICAgaXRlbS5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZ1bmN0aW9uIC0gZXhlY3V0ZWQgZm9yIGV2ZXJ5IE5PVCBtYXRjaGVkIGl0ZW0gYWZ0ZXIgbWF0Y2hpbmcgdGVzdFxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgLSBoaWRlcyB0aGUgaXRlbVxuICAgIHB1YmxpYyBvdmVyZHVlQ29uZGl0aW9uRm4oaXRlbTogYW55KSB7XG4gICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdoaWRkZW4nKSkge1xuICAgICAgICAgICAgaXRlbS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEZpbHRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIElneEZpbHRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgQE91dHB1dCgpIHB1YmxpYyBmaWx0ZXJpbmcgPSBuZXcgRXZlbnRFbWl0dGVyKGZhbHNlKTsgLy8gc3luY2hyb25vdXMgZXZlbnQgZW1pdHRlclxuICAgIEBPdXRwdXQoKSBwdWJsaWMgZmlsdGVyZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBASW5wdXQoJ2lneEZpbHRlcicpIHB1YmxpYyBmaWx0ZXJPcHRpb25zOiBJZ3hGaWx0ZXJPcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgfVxuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgLy8gRGV0ZWN0IG9ubHkgY2hhbmdlcyBvZiBpbnB1dCB2YWx1ZVxuICAgICAgICBpZiAoY2hhbmdlcy5maWx0ZXJPcHRpb25zICYmXG4gICAgICAgICAgICBjaGFuZ2VzLmZpbHRlck9wdGlvbnMuY3VycmVudFZhbHVlICYmXG4gICAgICAgICAgICBjaGFuZ2VzLmZpbHRlck9wdGlvbnMuY3VycmVudFZhbHVlLmlucHV0VmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgY2hhbmdlcy5maWx0ZXJPcHRpb25zLnByZXZpb3VzVmFsdWUgJiZcbiAgICAgICAgICAgIGNoYW5nZXMuZmlsdGVyT3B0aW9ucy5jdXJyZW50VmFsdWUuaW5wdXRWYWx1ZSAhPT0gY2hhbmdlcy5maWx0ZXJPcHRpb25zLnByZXZpb3VzVmFsdWUuaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZmlsdGVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuZmlsdGVyT3B0aW9ucy5pdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXJncyA9IHsgY2FuY2VsOiBmYWxzZSwgaXRlbXM6IHRoaXMuZmlsdGVyT3B0aW9ucy5pdGVtcyB9O1xuICAgICAgICB0aGlzLmZpbHRlcmluZy5lbWl0KGFyZ3MpO1xuXG4gICAgICAgIGlmIChhcmdzLmNhbmNlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGlwZSA9IG5ldyBJZ3hGaWx0ZXJQaXBlKCk7XG5cbiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBwaXBlLnRyYW5zZm9ybSh0aGlzLmZpbHRlck9wdGlvbnMuaXRlbXMsIHRoaXMuZmlsdGVyT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZmlsdGVyZWQuZW1pdCh7IGZpbHRlcmVkSXRlbXM6IGZpbHRlcmVkIH0pO1xuICAgIH1cbn1cblxuQFBpcGUoe1xuICAgIG5hbWU6ICdpZ3hGaWx0ZXInLFxuICAgIHB1cmU6IGZhbHNlXG59KVxuXG5leHBvcnQgY2xhc3MgSWd4RmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHB1YmxpYyB0cmFuc2Zvcm0oaXRlbXM6IGFueVtdLFxuICAgICAgICAgICAgICAgICAgICAgLy8gb3B0aW9ucyAtIGluaXRpYWwgc2V0dGluZ3Mgb2YgZmlsdGVyIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IElneEZpbHRlck9wdGlvbnMpIHtcblxuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG5cbiAgICAgICAgaWYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoIHx8ICFvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5pdGVtcykge1xuICAgICAgICAgICAgaXRlbXMgPSBvcHRpb25zLml0ZW1zO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ID0gaXRlbXMuZmlsdGVyKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gb3B0aW9ucy5tYXRjaEZuKG9wdGlvbnMuZm9ybWF0dGVyKG9wdGlvbnMuZ2V0X3ZhbHVlKGl0ZW0sIG9wdGlvbnMua2V5KSksIG9wdGlvbnMuaW5wdXRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1ldENvbmRpdGlvbkZuKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMubWV0Q29uZGl0aW9uRm4oaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vdmVyZHVlQ29uZGl0aW9uRm4pIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vdmVyZHVlQ29uZGl0aW9uRm4oaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hGaWx0ZXJEaXJlY3RpdmUsIElneEZpbHRlclBpcGVdLFxuICAgIGV4cG9ydHM6IFtJZ3hGaWx0ZXJEaXJlY3RpdmUsIElneEZpbHRlclBpcGVdLFxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIElneEZpbHRlck1vZHVsZSB7XG59XG4iXX0=