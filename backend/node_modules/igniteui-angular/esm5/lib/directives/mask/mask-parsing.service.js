import { __decorate, __values } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/** @hidden */
export var MASK_FLAGS = ['C', '&', 'a', 'A', '?', 'L', '9', '0', '#'];
/** @hidden */
var MaskParsingService = /** @class */ (function () {
    function MaskParsingService() {
    }
    MaskParsingService.prototype.applyMask = function (inputVal, maskOptions) {
        var e_1, _a, e_2, _b;
        var _this = this;
        var outputVal = '';
        var value = '';
        var mask = maskOptions.format;
        var literals = this.getMaskLiterals(mask);
        var literalKeys = Array.from(literals.keys());
        var nonLiteralIndices = this.getNonLiteralIndices(mask, literalKeys);
        var literalValues = Array.from(literals.values());
        if (inputVal != null) {
            value = inputVal.toString();
        }
        try {
            for (var mask_1 = __values(mask), mask_1_1 = mask_1.next(); !mask_1_1.done; mask_1_1 = mask_1.next()) {
                var maskSym = mask_1_1.value;
                outputVal += maskOptions.promptChar;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (mask_1_1 && !mask_1_1.done && (_a = mask_1.return)) _a.call(mask_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        literals.forEach(function (val, key) {
            outputVal = _this.replaceCharAt(outputVal, key, val);
        });
        if (!value) {
            return outputVal;
        }
        var nonLiteralValues = this.getNonLiteralValues(value, literalValues);
        for (var i = 0; i < nonLiteralValues.length; i++) {
            var char = nonLiteralValues[i];
            var isCharValid = this.validateCharOnPosition(char, nonLiteralIndices[i], mask);
            if (!isCharValid && char !== maskOptions.promptChar) {
                nonLiteralValues[i] = maskOptions.promptChar;
            }
        }
        if (nonLiteralValues.length > nonLiteralIndices.length) {
            nonLiteralValues.splice(nonLiteralIndices.length);
        }
        var pos = 0;
        try {
            for (var nonLiteralValues_1 = __values(nonLiteralValues), nonLiteralValues_1_1 = nonLiteralValues_1.next(); !nonLiteralValues_1_1.done; nonLiteralValues_1_1 = nonLiteralValues_1.next()) {
                var nonLiteralValue = nonLiteralValues_1_1.value;
                var char = nonLiteralValue;
                outputVal = this.replaceCharAt(outputVal, nonLiteralIndices[pos++], char);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (nonLiteralValues_1_1 && !nonLiteralValues_1_1.done && (_b = nonLiteralValues_1.return)) _b.call(nonLiteralValues_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return outputVal;
    };
    MaskParsingService.prototype.parseValueFromMask = function (maskedValue, maskOptions) {
        var e_3, _a;
        var outputVal = '';
        var mask = maskOptions.format;
        var literals = this.getMaskLiterals(mask);
        var literalValues = Array.from(literals.values());
        try {
            for (var maskedValue_1 = __values(maskedValue), maskedValue_1_1 = maskedValue_1.next(); !maskedValue_1_1.done; maskedValue_1_1 = maskedValue_1.next()) {
                var val = maskedValue_1_1.value;
                if (literalValues.indexOf(val) === -1) {
                    if (val !== maskOptions.promptChar) {
                        outputVal += val;
                    }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (maskedValue_1_1 && !maskedValue_1_1.done && (_a = maskedValue_1.return)) _a.call(maskedValue_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return outputVal;
    };
    MaskParsingService.prototype.replaceInMask = function (maskedValue, value, maskOptions, start, end) {
        var literalsPositions = Array.from(this.getMaskLiterals(maskOptions.format).keys());
        var chars = Array.from(value);
        var cursor = start;
        end = Math.min(end, maskedValue.length);
        for (var i = start; i < end || (chars.length && i < maskedValue.length); i++) {
            if (literalsPositions.indexOf(i) !== -1) {
                if (chars[0] === maskedValue[i]) {
                    cursor = i + 1;
                    chars.shift();
                }
                continue;
            }
            if (chars[0]
                && !this.validateCharOnPosition(chars[0], i, maskOptions.format)
                && chars[0] !== maskOptions.promptChar) {
                break;
            }
            var char = maskOptions.promptChar;
            if (chars.length) {
                cursor = i + 1;
                char = chars.shift();
            }
            maskedValue = this.replaceCharAt(maskedValue, i, char);
        }
        return { value: maskedValue, end: cursor };
    };
    MaskParsingService.prototype.replaceCharAt = function (strValue, index, char) {
        if (strValue !== undefined) {
            return strValue.substring(0, index) + char + strValue.substring(index + 1);
        }
    };
    /** Validates only non literal positions. */
    MaskParsingService.prototype.validateCharOnPosition = function (inputChar, position, mask) {
        var regex;
        var isValid;
        var letterOrDigitRegEx = '[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]';
        var letterDigitOrSpaceRegEx = '[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]';
        var letterRegEx = '[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]';
        var letterSpaceRegEx = '[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]';
        var digitRegEx = '[\\d]';
        var digitSpaceRegEx = '[\\d\\u0020]';
        var digitSpecialRegEx = '[\\d-\\+]';
        switch (mask.charAt(position)) {
            case 'C':
                isValid = inputChar !== '';
                break;
            case '&':
                regex = new RegExp('[\\u0020]');
                isValid = !regex.test(inputChar);
                break;
            case 'a':
                regex = new RegExp(letterDigitOrSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case 'A':
                regex = new RegExp(letterOrDigitRegEx);
                isValid = regex.test(inputChar);
                break;
            case '?':
                regex = new RegExp(letterSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case 'L':
                regex = new RegExp(letterRegEx);
                isValid = regex.test(inputChar);
                break;
            case '0':
                regex = new RegExp(digitRegEx);
                isValid = regex.test(inputChar);
                break;
            case '9':
                regex = new RegExp(digitSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case '#':
                regex = new RegExp(digitSpecialRegEx);
                isValid = regex.test(inputChar);
                break;
            default: {
                isValid = null;
            }
        }
        return isValid;
    };
    MaskParsingService.prototype.getMaskLiterals = function (mask) {
        var literals = new Map();
        for (var i = 0; i < mask.length; i++) {
            var char = mask.charAt(i);
            if (MASK_FLAGS.indexOf(char) === -1) {
                literals.set(i, char);
            }
        }
        return literals;
    };
    MaskParsingService.prototype.getNonLiteralIndices = function (mask, literalKeys) {
        var nonLiteralsIndices = new Array();
        for (var i = 0; i < mask.length; i++) {
            if (literalKeys.indexOf(i) === -1) {
                nonLiteralsIndices.push(i);
            }
        }
        return nonLiteralsIndices;
    };
    MaskParsingService.prototype.getNonLiteralValues = function (value, literalValues) {
        var e_4, _a;
        var nonLiteralValues = new Array();
        try {
            for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                var val = value_1_1.value;
                if (literalValues.indexOf(val) === -1) {
                    nonLiteralValues.push(val);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return nonLiteralValues;
    };
    MaskParsingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MaskParsingService_Factory() { return new MaskParsingService(); }, token: MaskParsingService, providedIn: "root" });
    MaskParsingService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], MaskParsingService);
    return MaskParsingService;
}());
export { MaskParsingService };
//# sourceMappingURL=data:application/json;base64,