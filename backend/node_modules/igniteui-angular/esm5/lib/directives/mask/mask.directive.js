import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { Directive, ElementRef, EventEmitter, HostListener, Output, PipeTransform, Renderer2, Input, NgModule, OnInit, AfterViewChecked, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DeprecateProperty } from '../../core/deprecateDecorators';
import { MaskParsingService, MaskOptions } from './mask-parsing.service';
import { isIE } from '../../core/utils';
var noop = function () { };
var Éµ0 = noop;
var IgxMaskDirective = /** @class */ (function () {
    function IgxMaskDirective(elementRef, maskParser, renderer) {
        this.elementRef = elementRef;
        this.maskParser = maskParser;
        this.renderer = renderer;
        /**
         * Sets the character representing a fillable spot in the input mask.
         * Default value is "'_'".
         * ```html
         * <input [promptChar] = "'/'">
         * ```
         */
        this.promptChar = '_';
        /**
         * Emits an event each time the value changes.
         * Provides `rawValue: string` and `formattedValue: string` as event arguments.
         * ```html
         * <input (onValueChange) = "onValueChange(rawValue: string, formattedValue: string)">
         * ```
         */
        this.onValueChange = new EventEmitter();
        this._end = 0;
        this._start = 0;
        this._oldText = '';
        this._dataValue = '';
        this._focused = false;
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
    }
    IgxMaskDirective_1 = IgxMaskDirective;
    Object.defineProperty(IgxMaskDirective.prototype, "placeholder", {
        get: function () {
            return this.nativeElement.placeholder;
        },
        /**
         * Specifies a placeholder.
         * ```html
         * <input placeholder = "enter text...">
         * ```
         */
        set: function (val) {
            this.renderer.setAttribute(this.nativeElement, 'placeholder', val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "nativeElement", {
        /** @hidden */
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "inputValue", {
        /** @hidden @internal; */
        get: function () {
            return this.nativeElement.value;
        },
        /** @hidden @internal */
        set: function (val) {
            this.nativeElement.value = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "maskOptions", {
        /** @hidden */
        get: function () {
            var format = this.mask || 'CCCCCCCCCC';
            var promptChar = this.promptChar && this.promptChar.substring(0, 1);
            return { format: format, promptChar: promptChar };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "selectionStart", {
        /** @hidden */
        get: function () {
            // Edge(classic) and FF don't select text on drop
            return this.nativeElement.selectionStart === this.nativeElement.selectionEnd && this._hasDropAction ?
                this.nativeElement.selectionEnd - this._droppedData.length :
                this.nativeElement.selectionStart;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "selectionEnd", {
        /** @hidden */
        get: function () {
            return this.nativeElement.selectionEnd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "start", {
        /** @hidden */
        get: function () {
            return this._start;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "end", {
        /** @hidden */
        get: function () {
            return this._end;
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    IgxMaskDirective.prototype.ngOnInit = function () {
        this.renderer.setAttribute(this.nativeElement, 'placeholder', this.placeholder ? this.placeholder : this.maskOptions.format);
    };
    /**
     * TODO: Remove after date/time picker integration refactor
     * @hidden
     */
    IgxMaskDirective.prototype.ngAfterViewChecked = function () {
        this._oldText = this.inputValue;
    };
    /** @hidden */
    IgxMaskDirective.prototype.onKeyDown = function (event) {
        var key = event.keyCode || event.charCode;
        if (!key) {
            return;
        }
        if (isIE() && this._stopPropagation) {
            this._stopPropagation = false;
        }
        if ((key === 17 /* CTRL */ && key === 90 /* Z */) || (key === 17 /* CTRL */ && key === 89 /* Y */)) {
            event.preventDefault();
        }
        this._key = key;
        this._start = this.selectionStart;
        this._end = this.selectionEnd;
    };
    /** @hidden */
    IgxMaskDirective.prototype.onInputChanged = function () {
        if (isIE() && this._stopPropagation) {
            this._stopPropagation = false;
            return;
        }
        if (this._hasDropAction) {
            this._start = this.selectionStart;
        }
        if (this.inputValue.length < this._oldText.length && this._key === 229 /* INPUT_METHOD */) {
            // software keyboard input delete
            this._key = 8 /* BACKSPACE */;
        }
        var valueToParse = '';
        switch (this._key) {
            case 46 /* DELETE */:
                this._end = this._start === this._end ? ++this._end : this._end;
                break;
            case 8 /* BACKSPACE */:
                this._start = this.selectionStart;
                break;
            default:
                valueToParse = this.inputValue.substring(this._start, this.selectionEnd);
                break;
        }
        var replacedData = this.maskParser.replaceInMask(this._oldText, valueToParse, this.maskOptions, this._start, this._end);
        this.inputValue = replacedData.value;
        if (this._key === 8 /* BACKSPACE */) {
            replacedData.end = this._start;
        }
        this.setSelectionRange(replacedData.end);
        var rawVal = this.maskParser.parseValueFromMask(this.inputValue, this.maskOptions);
        this._dataValue = this.includeLiterals ? this.inputValue : rawVal;
        this._onChangeCallback(this._dataValue);
        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.inputValue });
        this.afterInput();
    };
    /** @hidden */
    IgxMaskDirective.prototype.onPaste = function () {
        this._oldText = this.inputValue;
        this._start = this.selectionStart;
    };
    /** @hidden */
    IgxMaskDirective.prototype.onFocus = function () {
        this._focused = true;
        this.showMask(this._dataValue);
    };
    /** @hidden */
    IgxMaskDirective.prototype.onBlur = function (value) {
        this._focused = false;
        this.showDisplayValue(value);
        this._onTouchedCallback();
    };
    /** @hidden */
    IgxMaskDirective.prototype.onDragEnter = function () {
        if (!this._focused) {
            this.showMask(this._dataValue);
        }
    };
    /** @hidden */
    IgxMaskDirective.prototype.onDragLeave = function () {
        if (!this._focused) {
            this.showDisplayValue(this.inputValue);
        }
    };
    /** @hidden */
    IgxMaskDirective.prototype.onDrop = function (event) {
        this._hasDropAction = true;
        this._droppedData = event.dataTransfer.getData('text');
    };
    /** @hidden */
    IgxMaskDirective.prototype.showMask = function (value) {
        if (this.focusedValuePipe) {
            if (isIE()) {
                this._stopPropagation = true;
            }
            // TODO(D.P.): focusedValuePipe should be deprecated or force-checked to match mask format
            this.inputValue = this.focusedValuePipe.transform(value);
        }
        else {
            this.inputValue = this.maskParser.applyMask(this.inputValue, this.maskOptions);
        }
        this._oldText = this.inputValue;
    };
    /** @hidden */
    IgxMaskDirective.prototype.setSelectionRange = function (start, end) {
        if (end === void 0) { end = start; }
        this.nativeElement.setSelectionRange(start, end);
    };
    /** @hidden */
    IgxMaskDirective.prototype.afterInput = function () {
        this._oldText = this.inputValue;
        this._hasDropAction = false;
        this._start = 0;
        this._end = 0;
        this._key = null;
    };
    IgxMaskDirective.prototype.showDisplayValue = function (value) {
        if (this.displayValuePipe) {
            this.inputValue = this.displayValuePipe.transform(value);
        }
        else if (value === this.maskParser.applyMask(null, this.maskOptions)) {
            this.inputValue = '';
        }
    };
    /** @hidden */
    IgxMaskDirective.prototype.writeValue = function (value) {
        if (this.promptChar && this.promptChar.length > 1) {
            this.maskOptions.promptChar = this.promptChar.substring(0, 1);
        }
        this.inputValue = value ? this.maskParser.applyMask(value, this.maskOptions) : '';
        if (this.displayValuePipe) {
            this.inputValue = this.displayValuePipe.transform(this.inputValue);
        }
        this._dataValue = this.includeLiterals ? this.inputValue : value;
        this.onValueChange.emit({ rawValue: value, formattedValue: this.inputValue });
    };
    /** @hidden */
    IgxMaskDirective.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    /** @hidden */
    IgxMaskDirective.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    var IgxMaskDirective_1;
    IgxMaskDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: MaskParsingService },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input('igxMask')
    ], IgxMaskDirective.prototype, "mask", void 0);
    __decorate([
        Input()
    ], IgxMaskDirective.prototype, "promptChar", void 0);
    __decorate([
        Input()
    ], IgxMaskDirective.prototype, "includeLiterals", void 0);
    __decorate([
        DeprecateProperty('"placeholder" is deprecated, use native placeholder instead.')
    ], IgxMaskDirective.prototype, "placeholder", null);
    __decorate([
        Input()
    ], IgxMaskDirective.prototype, "displayValuePipe", void 0);
    __decorate([
        Input()
    ], IgxMaskDirective.prototype, "focusedValuePipe", void 0);
    __decorate([
        Output()
    ], IgxMaskDirective.prototype, "onValueChange", void 0);
    __decorate([
        HostListener('keydown', ['$event'])
    ], IgxMaskDirective.prototype, "onKeyDown", null);
    __decorate([
        HostListener('input')
    ], IgxMaskDirective.prototype, "onInputChanged", null);
    __decorate([
        HostListener('paste')
    ], IgxMaskDirective.prototype, "onPaste", null);
    __decorate([
        HostListener('focus')
    ], IgxMaskDirective.prototype, "onFocus", null);
    __decorate([
        HostListener('blur', ['$event.target.value'])
    ], IgxMaskDirective.prototype, "onBlur", null);
    __decorate([
        HostListener('dragenter')
    ], IgxMaskDirective.prototype, "onDragEnter", null);
    __decorate([
        HostListener('dragleave')
    ], IgxMaskDirective.prototype, "onDragLeave", null);
    __decorate([
        HostListener('drop', ['$event'])
    ], IgxMaskDirective.prototype, "onDrop", null);
    IgxMaskDirective = IgxMaskDirective_1 = __decorate([
        Directive({
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective_1, multi: true }],
            selector: '[igxMask]',
            exportAs: 'igxMask'
        })
    ], IgxMaskDirective);
    return IgxMaskDirective;
}());
export { IgxMaskDirective };
/** @hidden */
var IgxMaskModule = /** @class */ (function () {
    function IgxMaskModule() {
    }
    IgxMaskModule = __decorate([
        NgModule({
            declarations: [IgxMaskDirective],
            exports: [IgxMaskDirective],
            imports: [CommonModule]
        })
    ], IgxMaskModule);
    return IgxMaskModule;
}());
export { IgxMaskModule };
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,