import { __decorate, __extends, __param } from "tslib";
import { Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit, Output, EventEmitter, Optional, HostBinding, Inject } from '@angular/core';
import { useAnimation } from '@angular/animations';
import { scaleInCenter } from '../../animations/scale/index';
import { fadeOut } from '../../animations/fade/index';
import { IgxOverlayService } from '../../services/overlay/overlay';
import { HorizontalAlignment, AutoPositionStrategy } from '../../services/public_api';
import { CommonModule } from '@angular/common';
import { IgxNavigationService } from '../../core/navigation';
import { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';
/**
 * **Ignite UI for Angular Tooltip Target** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)
 *
 * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.
 * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the
 * target's selector property.
 *
 * Example:
 * ```html
 * <button [igxTooltipTarget]="tooltipRef">Hover me</button>
 * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
 * ```
 */
var IgxTooltipTargetDirective = /** @class */ (function (_super) {
    __extends(IgxTooltipTargetDirective, _super);
    function IgxTooltipTargetDirective(_element, _navigationService) {
        var _this = _super.call(this, _element, _navigationService) || this;
        _this._element = _element;
        _this._navigationService = _navigationService;
        /**
         * Gets/sets the amount of milliseconds that should pass before showing the tooltip.
         *
         * ```typescript
         * // get
         * let tooltipShowDelay = this.tooltipTarget.showDelay;
         * ```
         *
         * ```html
         * <!--set-->
         * <button [igxTooltipTarget]="tooltipRef" showDelay="1500">Hover me</button>
         * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
         * ```
         */
        _this.showDelay = 500;
        /**
         * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.
         *
         * ```typescript
         * // get
         * let tooltipHideDelay = this.tooltipTarget.hideDelay;
         * ```
         *
         * ```html
         * <!--set-->
         * <button [igxTooltipTarget]="tooltipRef" hideDelay="1500">Hover me</button>
         * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
         * ```
         */
        _this.hideDelay = 500;
        /**
         * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)
         * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,
         * the developer will still be able to show/hide the tooltip through the API.
         *
         * ```typescript
         * // get
         * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;
         * ```
         *
         * ```html
         * <!--set-->
         * <button [igxTooltipTarget]="tooltipRef" [tooltipDisabled]="true">Hover me</button>
         * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
         * ```
         */
        _this.tooltipDisabled = false;
        /**
         * Emits an event when the tooltip that is associated with this target starts showing.
         * This event is fired before the start of the countdown to showing the tooltip.
         *
         * ```typescript
         * tooltipShowing(args: ITooltipShowEventArgs) {
         *    alert("Tooltip started showing!");
         * }
         * ```
         *
         * ```html
         * <button [igxTooltipTarget]="tooltipRef"
         *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>
         * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
         * ```
         */
        _this.onTooltipShow = new EventEmitter();
        /**
         * Emits an event when the tooltip that is associated with this target starts hiding.
         * This event is fired before the start of the countdown to hiding the tooltip.
         *
         * ```typescript
         * tooltipHiding(args: ITooltipHideEventArgs) {
         *    alert("Tooltip started hiding!");
         * }
         * ```
         *
         * ```html
         * <button [igxTooltipTarget]="tooltipRef"
         *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>
         * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
         * ```
         */
        _this.onTooltipHide = new EventEmitter();
        return _this;
    }
    Object.defineProperty(IgxTooltipTargetDirective.prototype, "target", {
        /**
         * @hidden
         */
        get: function () {
            if (typeof this._target === 'string') {
                return this._navigationService.get(this._target);
            }
            return this._target;
        },
        /**
         * @hidden
         */
        set: function (target) {
            if (target !== null && target !== '') {
                this._target = target;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTooltipTargetDirective.prototype, "nativeElement", {
        /**
         * Gets the respective native element of the directive.
         *
         * ```typescript
         * let tooltipTargetElement = this.tooltipTarget.nativeElement;
         * ```
         */
        get: function () {
            return this._element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTooltipTargetDirective.prototype, "tooltipHidden", {
        /**
         * Indicates if the tooltip that is is associated with this target is currently hidden.
         *
         * ```typescript
         * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;
         * ```
         */
        get: function () {
            return !this.target || this.target.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxTooltipTargetDirective.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        var positionSettings = {
            target: this.nativeElement,
            horizontalDirection: HorizontalAlignment.Center,
            horizontalStartPoint: HorizontalAlignment.Center,
            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),
            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })
        };
        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);
        this._overlayDefaults.closeOnOutsideClick = false;
    };
    IgxTooltipTargetDirective.prototype.checkOutletAndOutsideClick = function () {
        if (this.outlet) {
            this._overlayDefaults.outlet = this.outlet;
        }
    };
    Object.defineProperty(IgxTooltipTargetDirective.prototype, "mergedOverlaySettings", {
        get: function () {
            return Object.assign({}, this._overlayDefaults, this.overlaySettings);
        },
        enumerable: true,
        configurable: true
    });
    // Return true if the execution in onMouseEnter should be terminated after this method
    IgxTooltipTargetDirective.prototype.preMouseEnterCheck = function () {
        // If tooltip is about to be opened
        if (this.target.toBeShown) {
            clearTimeout(this.target.timeoutId);
            this.target.toBeShown = false;
        }
        // If Tooltip is opened or about to be hidden
        if (!this.target.collapsed || this.target.toBeHidden) {
            clearTimeout(this.target.timeoutId);
            var hidingArgs = { target: this, tooltip: this.target, cancel: false };
            this.onTooltipHide.emit(hidingArgs);
            if (hidingArgs.cancel) {
                return true;
            }
            //  if close animation has started finish it, or close the tooltip with no animation
            this.target.forceClose(this.mergedOverlaySettings);
            this.target.toBeHidden = false;
        }
        return false;
    };
    // Return true if the execution in onMouseLeave should be terminated after this method
    IgxTooltipTargetDirective.prototype.preMouseLeaveCheck = function () {
        clearTimeout(this.target.timeoutId);
        // If tooltip is about to be opened
        if (this.target.toBeShown) {
            this.target.toBeShown = false;
            this.target.toBeHidden = false;
            return true;
        }
        return false;
    };
    /**
     * @hidden
     */
    IgxTooltipTargetDirective.prototype.onKeydownEscape = function (event) {
        var hidingArgs = { target: this, tooltip: this.target, cancel: false };
        this.onTooltipHide.emit(hidingArgs);
        if (hidingArgs.cancel) {
            return;
        }
        this.target.toBeHidden = true;
        this.target.close();
        this.target.toBeHidden = false;
    };
    /**
     * @hidden
     */
    IgxTooltipTargetDirective.prototype.onClick = function () {
        if (!this.target.collapsed) {
            var hidingArgs = { target: this, tooltip: this.target, cancel: false };
            this.onTooltipHide.emit(hidingArgs);
            if (hidingArgs.cancel) {
                return;
            }
            this.target.forceClose(this.mergedOverlaySettings);
        }
    };
    /**
     * @hidden
     */
    IgxTooltipTargetDirective.prototype.onMouseEnter = function () {
        var _this = this;
        if (this.tooltipDisabled) {
            return;
        }
        this.checkOutletAndOutsideClick();
        var shouldReturn = this.preMouseEnterCheck();
        if (shouldReturn) {
            return;
        }
        var showingArgs = { target: this, tooltip: this.target, cancel: false };
        this.onTooltipShow.emit(showingArgs);
        if (showingArgs.cancel) {
            return;
        }
        this.target.toBeShown = true;
        this.target.timeoutId = setTimeout(function () {
            _this.target.open(_this.mergedOverlaySettings); // Call open() of IgxTooltipDirective
            _this.target.toBeShown = false;
        }, this.showDelay);
    };
    /**
     * @hidden
     */
    IgxTooltipTargetDirective.prototype.onMouseLeave = function () {
        var _this = this;
        if (this.tooltipDisabled) {
            return;
        }
        this.checkOutletAndOutsideClick();
        var shouldReturn = this.preMouseLeaveCheck();
        if (shouldReturn || this.target.collapsed) {
            return;
        }
        var hidingArgs = { target: this, tooltip: this.target, cancel: false };
        this.onTooltipHide.emit(hidingArgs);
        if (hidingArgs.cancel) {
            return;
        }
        this.target.toBeHidden = true;
        this.target.timeoutId = setTimeout(function () {
            _this.target.close(); // Call close() of IgxTooltipDirective
            _this.target.toBeHidden = false;
        }, this.hideDelay);
    };
    /**
     * @hidden
     */
    IgxTooltipTargetDirective.prototype.onTouchStart = function (event) {
        if (this.tooltipDisabled) {
            return;
        }
        this.showTooltip();
    };
    /**
     * @hidden
     */
    IgxTooltipTargetDirective.prototype.onDocumentTouchStart = function (event) {
        if (this.tooltipDisabled) {
            return;
        }
        if (this.nativeElement !== event.target &&
            !this.nativeElement.contains(event.target)) {
            this.hideTooltip();
        }
    };
    /**
     * Shows the tooltip by respecting the 'showDelay' property.
     *
     * ```typescript
     * this.tooltipTarget.showTooltip();
     * ```
     */
    IgxTooltipTargetDirective.prototype.showTooltip = function () {
        var _this = this;
        clearTimeout(this.target.timeoutId);
        if (!this.target.collapsed) {
            var hidingArgs = { target: this, tooltip: this.target, cancel: false };
            this.onTooltipHide.emit(hidingArgs);
            if (hidingArgs.cancel) {
                return;
            }
            //  if close animation has started finish it, or close the tooltip with no animation
            this.target.forceClose(this.mergedOverlaySettings);
            this.target.toBeHidden = false;
        }
        var showingArgs = { target: this, tooltip: this.target, cancel: false };
        this.onTooltipShow.emit(showingArgs);
        if (showingArgs.cancel) {
            return;
        }
        this.target.toBeShown = true;
        this.target.timeoutId = setTimeout(function () {
            _this.target.open(_this.mergedOverlaySettings); // Call open() of IgxTooltipDirective
            _this.target.toBeShown = false;
        }, this.showDelay);
    };
    /**
     * Hides the tooltip by respecting the 'hideDelay' property.
     *
     * ```typescript
     * this.tooltipTarget.hideTooltip();
     * ```
     */
    IgxTooltipTargetDirective.prototype.hideTooltip = function () {
        var _this = this;
        if (this.target.collapsed && this.target.toBeShown) {
            clearTimeout(this.target.timeoutId);
        }
        if (this.target.collapsed || this.target.toBeHidden) {
            return;
        }
        var hidingArgs = { target: this, tooltip: this.target, cancel: false };
        this.onTooltipHide.emit(hidingArgs);
        if (hidingArgs.cancel) {
            return;
        }
        this.target.toBeHidden = true;
        this.target.timeoutId = setTimeout(function () {
            _this.target.close(); // Call close() of IgxTooltipDirective
            _this.target.toBeHidden = false;
        }, this.hideDelay);
    };
    IgxTooltipTargetDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IgxNavigationService, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input('showDelay')
    ], IgxTooltipTargetDirective.prototype, "showDelay", void 0);
    __decorate([
        Input('hideDelay')
    ], IgxTooltipTargetDirective.prototype, "hideDelay", void 0);
    __decorate([
        Input('tooltipDisabled')
    ], IgxTooltipTargetDirective.prototype, "tooltipDisabled", void 0);
    __decorate([
        Input('igxTooltipTarget')
    ], IgxTooltipTargetDirective.prototype, "target", null);
    __decorate([
        Output()
    ], IgxTooltipTargetDirective.prototype, "onTooltipShow", void 0);
    __decorate([
        Output()
    ], IgxTooltipTargetDirective.prototype, "onTooltipHide", void 0);
    __decorate([
        HostListener('document:keydown.escape', ['$event'])
    ], IgxTooltipTargetDirective.prototype, "onKeydownEscape", null);
    __decorate([
        HostListener('click')
    ], IgxTooltipTargetDirective.prototype, "onClick", null);
    __decorate([
        HostListener('mouseenter')
    ], IgxTooltipTargetDirective.prototype, "onMouseEnter", null);
    __decorate([
        HostListener('mouseleave')
    ], IgxTooltipTargetDirective.prototype, "onMouseLeave", null);
    __decorate([
        HostListener('touchstart', ['$event'])
    ], IgxTooltipTargetDirective.prototype, "onTouchStart", null);
    __decorate([
        HostListener('document:touchstart', ['$event'])
    ], IgxTooltipTargetDirective.prototype, "onDocumentTouchStart", null);
    IgxTooltipTargetDirective = __decorate([
        Directive({
            exportAs: 'tooltipTarget',
            selector: '[igxTooltipTarget]'
        }),
        __param(1, Optional())
    ], IgxTooltipTargetDirective);
    return IgxTooltipTargetDirective;
}(IgxToggleActionDirective));
export { IgxTooltipTargetDirective };
var NEXT_ID = 0;
/**
 * **Ignite UI for Angular Tooltip** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)
 *
 * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.
 * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the
 * respective target's selector property.
 *
 * Example:
 * ```html
 * <button [igxTooltipTarget]="tooltipRef">Hover me</button>
 * <span #tooltipRef="tooltip" igxTooltip>Hello there, I am a tooltip!</span>
 * ```
 */
var IgxTooltipDirective = /** @class */ (function (_super) {
    __extends(IgxTooltipDirective, _super);
    /** @hidden */
    function IgxTooltipDirective(elementRef, cdr, overlayService, navigationService) {
        var _this = 
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        _super.call(this, elementRef, cdr, overlayService, navigationService) || this;
        /**
         * @hidden
         * Returns whether close time out has started
         */
        _this.toBeHidden = false;
        /**
         * @hidden
         * Returns whether open time out has started
         */
        _this.toBeShown = false;
        /**
         * Identifier for the tooltip.
         * If this is property is not explicitly set, it will be automatically generated.
         *
         * ```typescript
         * let tooltipId = this.tooltip.id;
         * ```
         */
        _this.id = "igx-tooltip-" + NEXT_ID++;
        return _this;
    }
    Object.defineProperty(IgxTooltipDirective.prototype, "hiddenClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTooltipDirective.prototype, "defaultClass", {
        /**
         * @hidden
         */
        get: function () {
            return !this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTooltipDirective.prototype, "role", {
        /**
         * Get the role attribute of the tooltip.
         *
         * ```typescript
         * let tooltipRole = this.tooltip.role;
         * ```
         */
        get: function () {
            return 'tooltip';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * If there is open animation in progress this method will finish is.
     * If there is no open animation in progress this method will open the toggle with no animation.
     * @param overlaySettings setting to use for opening the toggle
     */
    IgxTooltipDirective.prototype.forceOpen = function (overlaySettings) {
        var info = this.overlayService.getOverlayById(this._overlayId);
        var hasOpenAnimation = info ? info.openAnimationPlayer : false;
        if (hasOpenAnimation) {
            info.openAnimationPlayer.finish();
            info.openAnimationPlayer.reset();
            info.openAnimationPlayer = null;
        }
        else if (this.collapsed) {
            var animation = overlaySettings.positionStrategy.settings.openAnimation;
            overlaySettings.positionStrategy.settings.openAnimation = null;
            this.open(overlaySettings);
            overlaySettings.positionStrategy.settings.openAnimation = animation;
        }
    };
    /**
     * If there is close animation in progress this method will finish is.
     * If there is no close animation in progress this method will close the toggle with no animation.
     * @param overlaySettings settings to use for closing the toggle
     */
    IgxTooltipDirective.prototype.forceClose = function (overlaySettings) {
        var info = this.overlayService.getOverlayById(this._overlayId);
        var hasCloseAnimation = info ? info.closeAnimationPlayer : false;
        if (hasCloseAnimation) {
            info.closeAnimationPlayer.finish();
            info.closeAnimationPlayer.reset();
            info.closeAnimationPlayer = null;
        }
        else if (!this.collapsed) {
            var animation = overlaySettings.positionStrategy.settings.closeAnimation;
            overlaySettings.positionStrategy.settings.closeAnimation = null;
            this.close();
            overlaySettings.positionStrategy.settings.closeAnimation = animation;
        }
    };
    IgxTooltipDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: IgxNavigationService, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        HostBinding('class.igx-tooltip--hidden')
    ], IgxTooltipDirective.prototype, "hiddenClass", null);
    __decorate([
        HostBinding('class.igx-tooltip--desktop')
    ], IgxTooltipDirective.prototype, "defaultClass", null);
    __decorate([
        Input('context')
    ], IgxTooltipDirective.prototype, "context", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxTooltipDirective.prototype, "id", void 0);
    __decorate([
        HostBinding('attr.role')
    ], IgxTooltipDirective.prototype, "role", null);
    IgxTooltipDirective = __decorate([
        Directive({
            exportAs: 'tooltip',
            selector: '[igxTooltip]'
        }),
        __param(2, Inject(IgxOverlayService)),
        __param(3, Optional())
    ], IgxTooltipDirective);
    return IgxTooltipDirective;
}(IgxToggleDirective));
export { IgxTooltipDirective };
/**
 * @hidden
 */
var IgxTooltipModule = /** @class */ (function () {
    function IgxTooltipModule() {
    }
    IgxTooltipModule = __decorate([
        NgModule({
            declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],
            exports: [IgxTooltipDirective, IgxTooltipTargetDirective],
            imports: [CommonModule],
            providers: [IgxOverlayService]
        })
    ], IgxTooltipModule);
    return IgxTooltipModule;
}());
export { IgxTooltipModule };
//# sourceMappingURL=data:application/json;base64,