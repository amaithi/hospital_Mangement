import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, NgModule, OnDestroy, Optional, Output, Self } from '@angular/core';
import { NgModel, FormControlName } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { first, takeUntil } from 'rxjs/operators';
import { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../services/public_api';
import { IgxDropDownItemNavigationDirective, IgxDropDownModule } from '../../drop-down/public_api';
import { IgxInputGroupComponent } from '../../input-group/public_api';
/**
 * **Ignite UI for Angular Autocomplete** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)
 *
 * The igxAutocomplete directive provides a way to enhance a text input
 * by showing a drop down of suggested options, provided by the developer.
 *
 * Example:
 * ```html
 * <input type="text" [igxAutocomplete]="townsPanel" />
 * <igx-drop-down #townsPanel>
 *     <igx-drop-down-item *ngFor="let town of towns | startsWith:townSelected" [value]="town">
 *         {{town}}
 *     </igx-drop-down-item>
 * </igx-drop-down>
 * ```
 */
var IgxAutocompleteDirective = /** @class */ (function (_super) {
    __extends(IgxAutocompleteDirective, _super);
    function IgxAutocompleteDirective(ngModel, formControl, group, elementRef, cdr) {
        var _this = _super.call(this, null) || this;
        _this.ngModel = ngModel;
        _this.formControl = formControl;
        _this.group = group;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.defaultSettings = {
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy({ target: _this.parentElement }),
            excludePositionTarget: true
        };
        _this.dropDownOpened$ = new Subject();
        /**
         * Enables/disables autocomplete component
         *
         * ```typescript
         * // get
         * let disabled = this.autocomplete.disabled;
         * ```
         * ```html
         * <!--set-->
         * <input type="text" [igxAutocomplete]="townsPanel" [igxAutocompleteDisabled]="disabled"/>
         * ```
         * ```typescript
         * // set
         * public disabled = true;
         * ```
         */
        _this.disabled = false;
        /**
         * Emitted after item from the drop down is selected
         *
         * ```html
         * <input igxInput [igxAutocomplete]="townsPanel" (onItemSelected)='itemSelected($event)' />
         * ```
         */
        _this.onItemSelected = new EventEmitter();
        /** @hidden @internal */
        _this.autofill = 'off';
        /** @hidden  @internal */
        _this.role = 'combobox';
        _this.select = function (value) {
            if (!value.newSelection) {
                return;
            }
            value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.
            var newValue = value.newSelection.value;
            var args = { value: newValue, cancel: false };
            _this.onItemSelected.emit(args);
            if (args.cancel) {
                return;
            }
            _this.close();
            _this.nativeElement.focus();
            // Update model after the input is re-focused, in order to have proper valid styling.
            // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.
            _this.model ? _this.model.control.setValue(newValue) : _this.nativeElement.value = newValue;
        };
        _this.highlightFirstItem = function () {
            if (_this.target.focusedItem) {
                _this.target.focusedItem.focused = false;
                _this.target.focusedItem = null;
            }
            _this.target.navigateFirst();
            _this.cdr.detectChanges();
        };
        return _this;
    }
    Object.defineProperty(IgxAutocompleteDirective.prototype, "model", {
        get: function () {
            return this.ngModel || this.formControl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "nativeElement", {
        /** @hidden @internal */
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "parentElement", {
        /** @hidden @internal */
        get: function () {
            return this.group ? this.group.element.nativeElement : this.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "settings", {
        get: function () {
            var settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);
            if (!settings.positionStrategy.settings.target) {
                var positionStrategyClone = settings.positionStrategy.clone();
                positionStrategyClone.settings.target = this.parentElement;
                settings.positionStrategy = positionStrategyClone;
            }
            return settings;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "ariaExpanded", {
        /** @hidden  @internal */
        get: function () {
            return !this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "hasPopUp", {
        /** @hidden  @internal */
        get: function () {
            return 'listbox';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "ariaOwns", {
        /** @hidden  @internal */
        get: function () {
            return this.target.listId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "ariaActiveDescendant", {
        /** @hidden  @internal */
        get: function () {
            return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAutocompleteDirective.prototype, "ariaAutocomplete", {
        /** @hidden  @internal */
        get: function () {
            return 'list';
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden  @internal */
    IgxAutocompleteDirective.prototype.onInput = function () {
        this.open();
    };
    /** @hidden  @internal */
    IgxAutocompleteDirective.prototype.onArrowDown = function (event) {
        event.preventDefault();
        this.open();
    };
    /** @hidden  @internal */
    IgxAutocompleteDirective.prototype.onTab = function () {
        this.close();
    };
    /** @hidden  @internal */
    IgxAutocompleteDirective.prototype.handleKeyDown = function (event) {
        if (!this.collapsed) {
            switch (event.key.toLowerCase()) {
                case 'space':
                case 'spacebar':
                case ' ':
                case 'home':
                case 'end':
                    return;
                default:
                    _super.prototype.handleKeyDown.call(this, event);
            }
        }
    };
    /** @hidden  @internal */
    IgxAutocompleteDirective.prototype.onArrowDownKeyDown = function () {
        _super.prototype.onArrowDownKeyDown.call(this);
    };
    /** @hidden  @internal */
    IgxAutocompleteDirective.prototype.onArrowUpKeyDown = function () {
        _super.prototype.onArrowUpKeyDown.call(this);
    };
    /** @hidden  @internal */
    IgxAutocompleteDirective.prototype.onEndKeyDown = function () {
        _super.prototype.onEndKeyDown.call(this);
    };
    /** @hidden  @internal */
    IgxAutocompleteDirective.prototype.onHomeKeyDown = function () {
        _super.prototype.onHomeKeyDown.call(this);
    };
    /**
     * Closes autocomplete drop down
     */
    IgxAutocompleteDirective.prototype.close = function () {
        if (this.collapsed) {
            return;
        }
        this.target.close();
        this.dropDownOpened$.next();
    };
    /**
     * Opens autocomplete drop down
     */
    IgxAutocompleteDirective.prototype.open = function () {
        if (this.disabled || !this.collapsed) {
            return;
        }
        // if no drop-down width is set, the drop-down will be as wide as the autocomplete input;
        this.target.width = this.target.width || (this.parentElement.clientWidth + 'px');
        this.target.open(this.settings);
        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);
        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);
        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);
    };
    Object.defineProperty(IgxAutocompleteDirective.prototype, "collapsed", {
        get: function () {
            return this.target ? this.target.collapsed : true;
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    IgxAutocompleteDirective.prototype.ngOnDestroy = function () {
        this.dropDownOpened$.complete();
    };
    IgxAutocompleteDirective.ctorParameters = function () { return [
        { type: NgModel, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [NgModel,] }] },
        { type: FormControlName, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [FormControlName,] }] },
        { type: IgxInputGroupComponent, decorators: [{ type: Optional }] },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input('igxAutocomplete')
    ], IgxAutocompleteDirective.prototype, "target", void 0);
    __decorate([
        Input('igxAutocompleteDisabled')
    ], IgxAutocompleteDirective.prototype, "disabled", void 0);
    __decorate([
        Input('igxAutocompleteSettings')
    ], IgxAutocompleteDirective.prototype, "autocompleteSettings", void 0);
    __decorate([
        Output()
    ], IgxAutocompleteDirective.prototype, "onItemSelected", void 0);
    __decorate([
        HostBinding('attr.autocomplete')
    ], IgxAutocompleteDirective.prototype, "autofill", void 0);
    __decorate([
        HostBinding('attr.role')
    ], IgxAutocompleteDirective.prototype, "role", void 0);
    __decorate([
        HostBinding('attr.aria-expanded')
    ], IgxAutocompleteDirective.prototype, "ariaExpanded", null);
    __decorate([
        HostBinding('attr.aria-haspopup')
    ], IgxAutocompleteDirective.prototype, "hasPopUp", null);
    __decorate([
        HostBinding('attr.aria-owns')
    ], IgxAutocompleteDirective.prototype, "ariaOwns", null);
    __decorate([
        HostBinding('attr.aria-activedescendant')
    ], IgxAutocompleteDirective.prototype, "ariaActiveDescendant", null);
    __decorate([
        HostBinding('attr.aria-autocomplete')
    ], IgxAutocompleteDirective.prototype, "ariaAutocomplete", null);
    __decorate([
        HostListener('input')
    ], IgxAutocompleteDirective.prototype, "onInput", null);
    __decorate([
        HostListener('keydown.ArrowDown', ['$event']),
        HostListener('keydown.Alt.ArrowDown', ['$event']),
        HostListener('keydown.ArrowUp', ['$event']),
        HostListener('keydown.Alt.ArrowUp', ['$event'])
    ], IgxAutocompleteDirective.prototype, "onArrowDown", null);
    __decorate([
        HostListener('keydown.Tab'),
        HostListener('keydown.Shift.Tab')
    ], IgxAutocompleteDirective.prototype, "onTab", null);
    IgxAutocompleteDirective = __decorate([
        Directive({
            selector: '[igxAutocomplete]'
        }),
        __param(0, Self()), __param(0, Optional()), __param(0, Inject(NgModel)),
        __param(1, Self()), __param(1, Optional()), __param(1, Inject(FormControlName)),
        __param(2, Optional())
    ], IgxAutocompleteDirective);
    return IgxAutocompleteDirective;
}(IgxDropDownItemNavigationDirective));
export { IgxAutocompleteDirective };
/** @hidden */
var IgxAutocompleteModule = /** @class */ (function () {
    function IgxAutocompleteModule() {
    }
    IgxAutocompleteModule = __decorate([
        NgModule({
            imports: [IgxDropDownModule, CommonModule],
            declarations: [IgxAutocompleteDirective],
            exports: [IgxAutocompleteDirective]
        })
    ], IgxAutocompleteModule);
    return IgxAutocompleteModule;
}());
export { IgxAutocompleteModule };
//# sourceMappingURL=data:application/json;base64,