import { __decorate, __extends, __param, __values } from "tslib";
import { Directive, Input, ElementRef, Renderer2, NgModule, Output, EventEmitter, Inject, LOCALE_ID, OnChanges, SimpleChanges, Host, Optional, Injector } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { formatDate, DOCUMENT } from '@angular/common';
import { IgxMaskDirective } from '../mask/mask.directive';
import { MaskParsingService } from '../mask/mask-parsing.service';
import { DatePickerUtil } from '../../date-picker/date-picker.utils';
import { DatePart } from './date-time-editor.common';
/**
 * Date Time Editor provides a functionality to input, edit and format date and time.
 *
 * @igxModule IgxDateTimeEditorModule
 *
 * @igxParent IgxInputGroup
 *
 * @igxTheme igx-input-theme
 *
 * @igxKeywords date, time, editor
 *
 * @igxGroup Scheduling
 *
 * @remarks
 *
 * The Ignite UI Date Time Editor Directive makes it easy for developers to manipulate date/time user input.
 * It requires input in a specified or default input format which is visible in the input element as a placeholder.
 * It allows the input of only date (ex: 'dd/MM/yyyy'), only time (ex:'HH:mm tt') or both at once, if needed.
 * Supports display format that may differ from the input format.
 * Provides methods to increment and decrement any specific/targeted `DatePart`.
 *
 * @example
 * ```html
 * <igx-input-group>
 *   <input type="text" igxInput [igxDateTimeEditor]="'dd/MM/yyyy'" [displayFormat]="'shortDate'" [(ngModel)]="date"/>
 * </igx-input-group>
 * ```
 */
var IgxDateTimeEditorDirective = /** @class */ (function (_super) {
    __extends(IgxDateTimeEditorDirective, _super);
    function IgxDateTimeEditorDirective(renderer, elementRef, maskParser, _document, _locale) {
        var _this = _super.call(this, elementRef, maskParser, renderer) || this;
        _this.renderer = renderer;
        _this.elementRef = elementRef;
        _this.maskParser = maskParser;
        _this._document = _document;
        _this._locale = _locale;
        /**
         * Specify if the currently spun date segment should loop over.
         * @example
         * ```html
         * <input igxDateTimeEditor [isSpinLoop]="false">
         * ```
         */
        _this.isSpinLoop = true;
        /**
         * Emitted when the editor's value has changed.
         * @example
         * ```html
         * <input igxDateTimeEditor (valueChange)="onValueChanged($event)"/>
         * ```
         */
        _this.valueChange = new EventEmitter();
        /**
         * Emitted when the editor is not within a specified range or when the editor's value is in an invalid state.
         * @example
         * ```html
         * <input igxDateTimeEditor [minValue]="minDate" [maxValue]="maxDate" (validationFailed)="onValidationFailed($event)"/>
         * ```
         */
        _this.validationFailed = new EventEmitter();
        _this.onTouchCallback = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        _this.onChangeCallback = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        _this.onValidatorChange = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        _this.document = _this._document;
        _this.locale = _this.locale || _this._locale;
        return _this;
    }
    IgxDateTimeEditorDirective_1 = IgxDateTimeEditorDirective;
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "minValue", {
        /**
         * Minimum value required for the editor to remain valid.
         *
         * @remarks
         * If a `string` value is passed, it must be in the defined input format.
         *
         * @example
         * ```html
         * <input igxDateTimeEditor [minValue]="minDate">
         * ```
         */
        get: function () {
            return this._minValue;
        },
        set: function (value) {
            this._minValue = value;
            this.onValidatorChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "maxValue", {
        /**
         * Maximum value required for the editor to remain valid.
         *
         * @remarks
         * If a `string` value is passed in, it must be in the defined input format.
         *
         * @example
         * ```html
         * <input igxDateTimeEditor [maxValue]="maxDate">
         * ```
         */
        get: function () {
            return this._maxValue;
        },
        set: function (value) {
            this._maxValue = value;
            this.onValidatorChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "inputFormat", {
        get: function () {
            return this._format;
        },
        /**
         * Expected user input format (and placeholder).
         * @example
         * ```html
         * <input [igxDateTimeEditor]="'dd/MM/yyyy'">
         * ```
         */
        set: function (value) {
            if (value) {
                this._format = value;
            }
            var mask = (this.inputFormat || DatePickerUtil.DEFAULT_INPUT_FORMAT)
                .replace(new RegExp(/(?=[^t])[\w]/, 'g'), '0');
            this.mask = mask.indexOf('tt') !== -1 ? mask.replace(new RegExp('tt', 'g'), 'LL') : mask;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Editor value.
         * @example
         * ```html
         * <input igxDateTimeEditor [value]="date">
         * ```
         */
        set: function (value) {
            this._value = value;
            this.onChangeCallback(value);
            this.updateMask();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "emptyMask", {
        get: function () {
            return this.maskParser.applyMask(null, this.maskOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "targetDatePart", {
        get: function () {
            var _this = this;
            var _a;
            if (this.document.activeElement === this.nativeElement) {
                return (_a = this._inputDateParts
                    .find(function (p) { return p.start <= _this.selectionStart && _this.selectionStart <= p.end && p.type !== DatePart.Literal; })) === null || _a === void 0 ? void 0 : _a.type;
            }
            else {
                if (this._inputDateParts.some(function (p) { return p.type === DatePart.Date; })) {
                    return DatePart.Date;
                }
                else if (this._inputDateParts.some(function (p) { return p.type === DatePart.Hours; })) {
                    return DatePart.Hours;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "hasDateParts", {
        get: function () {
            return this._inputDateParts.some(function (p) { return p.type === DatePart.Date
                || p.type === DatePart.Month
                || p.type === DatePart.Year; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateTimeEditorDirective.prototype, "hasTimeParts", {
        get: function () {
            return this._inputDateParts.some(function (p) { return p.type === DatePart.Hours
                || p.type === DatePart.Minutes
                || p.type === DatePart.Seconds; });
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.ngOnChanges = function (changes) {
        if (changes['inputFormat'] || changes['locale']) {
            var defPlaceholder = this.inputFormat || DatePickerUtil.getDefaultInputFormat(this.locale);
            this._inputDateParts = DatePickerUtil.parseDateTimeFormat(this.inputFormat);
            this.inputFormat = this._inputDateParts.map(function (p) { return p.format; }).join('');
            if (!this.nativeElement.placeholder) {
                this.renderer.setAttribute(this.nativeElement, 'placeholder', defPlaceholder);
            }
            // TODO: fill in partial dates?
            this.updateMask();
        }
    };
    /** Clear the input element value. */
    IgxDateTimeEditorDirective.prototype.clear = function () {
        this.updateValue(null);
    };
    /**
     * Increment specified DatePart.
     * @param datePart The optional DatePart to increment. Defaults to Date or Hours(when Date is absent from the inputFormat - ex:'HH:mm').
     */
    IgxDateTimeEditorDirective.prototype.increment = function (datePart) {
        var targetDatePart = this.targetDatePart;
        if (!targetDatePart) {
            return;
        }
        var newValue = datePart
            ? this.spinValue(datePart, 1)
            : this.spinValue(targetDatePart, 1);
        this.updateValue(newValue ? newValue : new Date());
    };
    /**
     * Decrement specified DatePart.
     *
     * @param datePart The optional DatePart to decrement. Defaults to Date or Hours(when Date is absent from the inputFormat - ex:'HH:mm').
     */
    IgxDateTimeEditorDirective.prototype.decrement = function (datePart) {
        var targetDatePart = this.targetDatePart;
        if (!targetDatePart) {
            return;
        }
        var newValue = datePart
            ? this.spinValue(datePart, -1)
            : this.spinValue(targetDatePart, -1);
        this.updateValue(newValue ? newValue : new Date());
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.writeValue = function (value) {
        this._value = value;
        this.updateMask();
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.validate = function (control) {
        if (!this.inputIsComplete() || !control.value) {
            return { 'value': true };
        }
        var maxValueAsDate = this.isDate(this.maxValue) ? this.maxValue : this.parseDate(this.maxValue);
        var minValueAsDate = this.isDate(this.minValue) ? this.minValue : this.parseDate(this.minValue);
        if (minValueAsDate
            && DatePickerUtil.lessThanMinValue(control.value, minValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return { 'minValue': true };
        }
        if (maxValueAsDate
            && DatePickerUtil.greaterThanMaxValue(control.value, maxValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return { 'maxValue': true };
        }
        return null;
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.registerOnValidatorChange = function (fn) { this.onValidatorChange = fn; };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.registerOnChange = function (fn) { this.onChangeCallback = fn; };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.registerOnTouched = function (fn) { this.onTouchCallback = fn; };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.setDisabledState = function (isDisabled) { };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.onInputChanged = function () {
        var _a;
        _super.prototype.onInputChanged.call(this);
        if (this.inputIsComplete()) {
            var parsedDate = this.parseDate(this.inputValue);
            if (this.isValidDate(parsedDate)) {
                this.updateValue(parsedDate);
            }
            else {
                var oldValue = this.value && new Date(this.value.getTime());
                var args = { oldValue: oldValue, newValue: parsedDate, userInput: this.inputValue };
                this.validationFailed.emit(args);
                if (((_a = args.newValue) === null || _a === void 0 ? void 0 : _a.getTime) && args.newValue.getTime() !== oldValue.getTime()) {
                    this.updateValue(args.newValue);
                }
                else {
                    this.updateValue(null);
                }
            }
        }
        else {
            this.updateValue(null);
        }
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.onKeyDown = function (event) {
        _super.prototype.onKeyDown.call(this, event);
        if (event.altKey) {
            return;
        }
        if (event.key === "ArrowUp" /* UP_ARROW */ || event.key === "Up" /* UP_ARROW_IE */ ||
            event.key === "ArrowDown" /* DOWN_ARROW */ || event.key === "Down" /* DOWN_ARROW_IE */) {
            this.spin(event);
            return;
        }
        if (event.ctrlKey && event.key === ";" /* SEMICOLON */) {
            this.updateValue(new Date());
        }
        this.moveCursor(event);
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.onFocus = function () {
        this._isFocused = true;
        this.onTouchCallback();
        this.updateMask();
        _super.prototype.onFocus.call(this);
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.onBlur = function (value) {
        this._isFocused = false;
        if (!this.inputIsComplete() && this.inputValue !== this.emptyMask) {
            this.updateValue(this.parseDate(this.inputValue));
        }
        else {
            this.updateMask();
        }
        _super.prototype.onBlur.call(this, value);
    };
    /** @hidden @internal */
    IgxDateTimeEditorDirective.prototype.updateMask = function () {
        if (this._isFocused) {
            if (!this.value) {
                return;
            }
            // store the cursor position as it will be moved during masking
            var cursor = this.selectionEnd;
            this.inputValue = this.getMaskedValue();
            this.setSelectionRange(cursor);
        }
        else {
            if (!this.value || !this.isValidDate(this.value)) {
                this.inputValue = '';
                return;
            }
            var format = this.displayFormat || this.inputFormat;
            if (format) {
                this.inputValue = formatDate(this.value, format.replace('tt', 'aa'), this.locale);
            }
            else {
                // TODO: formatter function?
                this.inputValue = this.value.toLocaleString();
            }
        }
    };
    IgxDateTimeEditorDirective.prototype.getMaskedValue = function () {
        var e_1, _a;
        var mask = this.emptyMask;
        try {
            for (var _b = __values(this._inputDateParts), _c = _b.next(); !_c.done; _c = _b.next()) {
                var part = _c.value;
                if (part.type === DatePart.Literal) {
                    continue;
                }
                var targetValue = this.getPartValue(part, part.format.length);
                mask = this.maskParser.replaceInMask(mask, targetValue, this.maskOptions, part.start, part.end).value;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return mask;
    };
    // TODO: move isDate to utils
    IgxDateTimeEditorDirective.prototype.isDate = function (value) {
        return value instanceof Date && typeof value === 'object';
    };
    IgxDateTimeEditorDirective.prototype.valueInRange = function (value) {
        if (!value) {
            return false;
        }
        var maxValueAsDate = this.isDate(this.maxValue) ? this.maxValue : this.parseDate(this.maxValue);
        var minValueAsDate = this.isDate(this.minValue) ? this.minValue : this.parseDate(this.minValue);
        if (minValueAsDate
            && DatePickerUtil.lessThanMinValue(value, minValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return false;
        }
        if (maxValueAsDate
            && DatePickerUtil.greaterThanMaxValue(value, maxValueAsDate, this.hasTimeParts, this.hasDateParts)) {
            return false;
        }
        return true;
    };
    IgxDateTimeEditorDirective.prototype.spinValue = function (datePart, delta) {
        if (!this.value || !this.isValidDate(this.value)) {
            return null;
        }
        var newDate = new Date(this.value.getTime());
        switch (datePart) {
            case DatePart.Date:
                DatePickerUtil.spinDate(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Month:
                DatePickerUtil.spinMonth(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Year:
                DatePickerUtil.spinYear(delta, newDate);
                break;
            case DatePart.Hours:
                DatePickerUtil.spinHours(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Minutes:
                DatePickerUtil.spinMinutes(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.Seconds:
                DatePickerUtil.spinSeconds(delta, newDate, this.isSpinLoop);
                break;
            case DatePart.AmPm:
                var formatPart = this._inputDateParts.find(function (dp) { return dp.type === DatePart.AmPm; });
                var amPmFromMask = this.inputValue.substring(formatPart.start, formatPart.end);
                return DatePickerUtil.spinAmPm(newDate, this.value, amPmFromMask);
        }
        return newDate;
    };
    IgxDateTimeEditorDirective.prototype.updateValue = function (newDate) {
        this._oldValue = this.value;
        this.value = newDate;
        if (this.value && !this.valueInRange(this.value)) {
            this.validationFailed.emit({ oldValue: this._oldValue, newValue: this.value, userInput: this.inputValue });
        }
        if (this.inputIsComplete() || this.inputValue === this.emptyMask) {
            this.valueChange.emit(this.value);
        }
    };
    IgxDateTimeEditorDirective.prototype.toTwelveHourFormat = function (value) {
        var hour = parseInt(value.replace(new RegExp(this.promptChar, 'g'), '0'), 10);
        if (hour > 12) {
            hour -= 12;
        }
        else if (hour === 0) {
            hour = 12;
        }
        return hour;
    };
    IgxDateTimeEditorDirective.prototype.getPartValue = function (datePartInfo, partLength) {
        var maskedValue;
        var datePart = datePartInfo.type;
        switch (datePart) {
            case DatePart.Date:
                maskedValue = this.value.getDate();
                break;
            case DatePart.Month:
                // months are zero based
                maskedValue = this.value.getMonth() + 1;
                break;
            case DatePart.Year:
                if (partLength === 2) {
                    maskedValue = this.prependValue(parseInt(this.value.getFullYear().toString().slice(-2), 10), partLength, '0');
                }
                else {
                    maskedValue = this.value.getFullYear();
                }
                break;
            case DatePart.Hours:
                if (datePartInfo.format.indexOf('h') !== -1) {
                    maskedValue = this.prependValue(this.toTwelveHourFormat(this.value.getHours().toString()), partLength, '0');
                }
                else {
                    maskedValue = this.value.getHours();
                }
                break;
            case DatePart.Minutes:
                maskedValue = this.value.getMinutes();
                break;
            case DatePart.Seconds:
                maskedValue = this.value.getSeconds();
                break;
            case DatePart.AmPm:
                maskedValue = this.value.getHours() >= 12 ? 'PM' : 'AM';
                break;
        }
        if (datePartInfo.type !== DatePart.AmPm) {
            return this.prependValue(maskedValue, partLength, '0');
        }
        return maskedValue;
    };
    IgxDateTimeEditorDirective.prototype.prependValue = function (value, partLength, prependChar) {
        return (prependChar + value.toString()).slice(-partLength);
    };
    IgxDateTimeEditorDirective.prototype.spin = function (event) {
        event.preventDefault();
        switch (event.key) {
            case "ArrowUp" /* UP_ARROW */:
            case "Up" /* UP_ARROW_IE */:
                this.increment();
                break;
            case "ArrowDown" /* DOWN_ARROW */:
            case "Down" /* DOWN_ARROW_IE */:
                this.decrement();
                break;
        }
    };
    IgxDateTimeEditorDirective.prototype.inputIsComplete = function () {
        return this.inputValue.indexOf(this.promptChar) === -1;
    };
    IgxDateTimeEditorDirective.prototype.isValidDate = function (date) {
        return date && date.getTime && !isNaN(date.getTime());
    };
    // TODO: move parseDate to utils
    IgxDateTimeEditorDirective.prototype.parseDate = function (val) {
        if (!val) {
            return null;
        }
        return DatePickerUtil.parseValueFromMask(val, this._inputDateParts, this.promptChar);
    };
    IgxDateTimeEditorDirective.prototype.moveCursor = function (event) {
        var value = event.target.value;
        switch (event.key) {
            case "ArrowLeft" /* LEFT_ARROW */:
            case "Left" /* LEFT_ARROW_IE */:
                if (event.ctrlKey) {
                    event.preventDefault();
                    this.setSelectionRange(this.getNewPosition(value));
                }
                break;
            case "ArrowRight" /* RIGHT_ARROW */:
            case "Right" /* RIGHT_ARROW_IE */:
                if (event.ctrlKey) {
                    event.preventDefault();
                    this.setSelectionRange(this.getNewPosition(value, 1));
                }
                break;
        }
    };
    /**
     * Move the cursor in a specific direction until it reaches a date/time separator.
     * Then return its index.
     *
     * @param value The string it operates on.
     * @param direction 0 is left, 1 is right. Default is 0.
     */
    IgxDateTimeEditorDirective.prototype.getNewPosition = function (value, direction) {
        if (direction === void 0) { direction = 0; }
        var literals = this._inputDateParts.filter(function (p) { return p.type === DatePart.Literal; });
        var cursorPos = this.selectionStart;
        if (!direction) {
            do {
                cursorPos = cursorPos > 0 ? --cursorPos : cursorPos;
            } while (!literals.some(function (l) { return l.end === cursorPos; }) && cursorPos > 0);
            return cursorPos;
        }
        else {
            do {
                cursorPos++;
            } while (!literals.some(function (l) { return l.start === cursorPos; }) && cursorPos < value.length);
            return cursorPos;
        }
    };
    var IgxDateTimeEditorDirective_1;
    IgxDateTimeEditorDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: MaskParsingService },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "locale", void 0);
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "minValue", null);
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "maxValue", null);
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "isSpinLoop", void 0);
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "displayFormat", void 0);
    __decorate([
        Input("igxDateTimeEditor")
    ], IgxDateTimeEditorDirective.prototype, "inputFormat", null);
    __decorate([
        Input()
    ], IgxDateTimeEditorDirective.prototype, "value", null);
    __decorate([
        Output()
    ], IgxDateTimeEditorDirective.prototype, "valueChange", void 0);
    __decorate([
        Output()
    ], IgxDateTimeEditorDirective.prototype, "validationFailed", void 0);
    IgxDateTimeEditorDirective = IgxDateTimeEditorDirective_1 = __decorate([
        Directive({
            selector: '[igxDateTimeEditor]',
            exportAs: 'igxDateTimeEditor',
            providers: [
                { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateTimeEditorDirective_1, multi: true },
                { provide: NG_VALIDATORS, useExisting: IgxDateTimeEditorDirective_1, multi: true }
            ]
        }),
        __param(3, Inject(DOCUMENT)),
        __param(4, Inject(LOCALE_ID))
    ], IgxDateTimeEditorDirective);
    return IgxDateTimeEditorDirective;
}(IgxMaskDirective));
export { IgxDateTimeEditorDirective };
var IgxDateTimeEditorModule = /** @class */ (function () {
    function IgxDateTimeEditorModule() {
    }
    IgxDateTimeEditorModule = __decorate([
        NgModule({
            declarations: [IgxDateTimeEditorDirective],
            exports: [IgxDateTimeEditorDirective]
        })
    ], IgxDateTimeEditorModule);
    return IgxDateTimeEditorModule;
}());
export { IgxDateTimeEditorModule };
//# sourceMappingURL=data:application/json;base64,