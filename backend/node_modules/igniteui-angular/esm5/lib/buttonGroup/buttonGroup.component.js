import { __decorate, __extends, __param, __read, __spread } from "tslib";
import { CommonModule } from '@angular/common';
import { AfterContentInit, AfterViewInit, Component, ContentChildren, ChangeDetectorRef, EventEmitter, HostBinding, Inject, Input, NgModule, Output, Optional, QueryList, Renderer2, ViewChildren, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxIconModule } from '../icon/public_api';
import { takeUntil } from 'rxjs/operators';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
export var ButtonGroupAlignment;
(function (ButtonGroupAlignment) {
    ButtonGroupAlignment[ButtonGroupAlignment["horizontal"] = 0] = "horizontal";
    ButtonGroupAlignment[ButtonGroupAlignment["vertical"] = 1] = "vertical";
})(ButtonGroupAlignment || (ButtonGroupAlignment = {}));
var NEXT_ID = 0;
/**
 * **Ignite UI for Angular Button Group** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)
 *
 * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports
 * single, multiple and toggle selection.
 *
 * Example:
 * ```html
 * <igx-buttongroup multiSelection="true" [values]="fontOptions">
 * </igx-buttongroup>
 * ```
 * The `fontOptions` value shown above is defined as:
 * ```typescript
 * this.fontOptions = [
 *   { icon: 'format_bold', selected: false },
 *   { icon: 'format_italic', selected: false },
 *   { icon: 'format_underlined', selected: false }];
 * ```
 */
var IgxButtonGroupComponent = /** @class */ (function (_super) {
    __extends(IgxButtonGroupComponent, _super);
    function IgxButtonGroupComponent(_cdr, _renderer, _displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this._cdr = _cdr;
        _this._renderer = _renderer;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._disabled = false;
        _this.buttonClickNotifier$ = new Subject();
        _this.queryListNotifier$ = new Subject();
        /**
         * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.
         * ```html
         *  <igx-buttongroup [id]="'igx-dialog-56'" [multiSelection]="!multi" [values]="alignOptions">
         * ```
         */
        _this.id = "igx-buttongroup-" + NEXT_ID++;
        /**
         * @hidden
         */
        _this.zIndex = 0;
        /**
         * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.
         * ```html
         * <igx-buttongroup [multiSelection]="false" [alignment]="alignment"></igx-buttongroup>
         * ```
         */
        _this.multiSelection = false;
        /**
         * @hidden
         */
        _this.selectedIndexes = [];
        /**
         * An @Ouput property that emits an event when a button is selected.
         * ```typescript
         * @ViewChild("toast")
         * private toast: IgxToastComponent;
         * public onSelect(buttongroup){
         *     this.toast.show()
         * }
         *  //...
         * ```
         * ```html
         * <igx-buttongroup #MyChild [multiSelection]="!multi" (onSelect)="onSelect($event)"></igx-buttongroup>
         * <igx-toast #toast message="You have made a selection!"></igx-toast>
         * ```
         */
        _this.onSelect = new EventEmitter();
        /**
         * An @Ouput property that emits an event when a button is deselected.
         * ```typescript
         *  @ViewChild("toast")
         *  private toast: IgxToastComponent;
         *  public onUnselect(buttongroup){
         *     this.toast.show()
         * }
         *  //...
         * ```
         * ```html
         * <igx-buttongroup> #MyChild [multiSelection]="multi" (onUnselect)="onUnselect($event)"></igx-buttongroup>
         * <igx-toast #toast message="You have deselected a button!"></igx-toast>
         * ```
         */
        _this.onUnselect = new EventEmitter();
        return _this;
    }
    Object.defineProperty(IgxButtonGroupComponent.prototype, "buttons", {
        /**
         * A collection containing all buttons inside the button group.
         */
        get: function () {
            return __spread(this.viewButtons.toArray(), this.templateButtons.toArray());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "itemContentCssClass", {
        /**
         * Returns the CSS class of the item content of the `IgxButtonGroup`.
         * ```typescript
         *  @ViewChild("MyChild")
         * public buttonG: IgxButtonGroupComponent;
         * ngAfterViewInit(){
         *    let buttonSelect = this.buttonG.itemContentCssClass;
         * }
         * ```
         */
        get: function () {
            return this._itemContentCssClass;
        },
        /**
         * Allows you to set a style using the `itemContentCssClass` input.
         * The value should be the CSS class name that will be applied to the button group.
         * ```typescript
         * public style1 = "styleClass";
         *  //..
         * ```
         *  ```html
         * <igx-buttongroup [itemContentCssClass]="style1" [multiSelection]="!multi" [values]="alignOptions">
         * ```
         */
        set: function (value) {
            this._itemContentCssClass = value || this._itemContentCssClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "disabled", {
        /**
         * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.
         * ```html
         * <igx-buttongroup [disabled]="true" [multiSelection]="multi" [values]="fontOptions"></igx-buttongroup>
         * ```
         */
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            var _this = this;
            if (this._disabled !== value) {
                this._disabled = value;
                if (this.viewButtons && this.templateButtons) {
                    this.buttons.forEach(function (b) { return b.disabled = _this._disabled; });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "alignment", {
        /**
         * Returns the alignment of the `igx-buttongroup`.
         * ```typescript
         * @ViewChild("MyChild")
         * public buttonG: IgxButtonGroupComponent;
         * ngAfterViewInit(){
         *    let buttonAlignment = this.buttonG.alignment;
         * }
         * ```
         */
        get: function () {
            return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;
        },
        /**
         * Allows you to set the button group alignment.
         * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.
         * ```typescript
         * public alignment = ButtonGroupAlignment.vertical;
         * //..
         * ```
         * ```html
         * <igx-buttongroup [multiSelection]="false" [values]="cities" [alignment]="alignment"></igx-buttongroup>
         * ```
         */
        set: function (value) {
            this._isVertical = value === ButtonGroupAlignment.vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "isVertical", {
        /**
         * Returns true if the `igx-buttongroup` alignment is vertical.
         * Note that in order for the accessor to work correctly the property should be set explicitly.
         * ```html
         * <igx-buttongroup #MyChild [alignment]="alignment" [values]="alignOptions">
         * ```
         * ```typescript
         * //...
         * @ViewChild("MyChild")
         * private buttonG: IgxButtonGroupComponent;
         * ngAfterViewInit(){
         *    let orientation = this.buttonG.isVertical;
         * }
         * ```
         */
        get: function () {
            return this._isVertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "selectedButtons", {
        /**
         * Gets the selected button/buttons.
         * ```typescript
         * @ViewChild("MyChild")
         * private buttonG: IgxButtonGroupComponent;
         * ngAfterViewInit(){
         *    let selectedButton = this.buttonG.selectedButtons;
         * }
         * ```
         */
        get: function () {
            var _this = this;
            return this.buttons.filter(function (b, i) {
                return _this.selectedIndexes.indexOf(i) !== -1;
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Selects a button by its index.
     * ```typescript
     * @ViewChild("MyChild")
     * private buttonG: IgxButtonGroupComponent;
     * ngAfterViewInit(){
     *    this.buttonG.selectButton(2);
     *    this.cdr.detectChanges();
     * }
     * ```
     * @memberOf {@link IgxButtonGroupComponent}
     */
    IgxButtonGroupComponent.prototype.selectButton = function (index) {
        var _this = this;
        if (index >= this.buttons.length || index < 0) {
            return;
        }
        var button = this.buttons[index];
        var buttonElement = button.nativeElement;
        this.selectedIndexes.push(index);
        button.selected = true;
        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');
        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');
        this.onSelect.emit({ button: button, index: index });
        var indexInViewButtons = this.viewButtons.toArray().indexOf(button);
        if (indexInViewButtons !== -1) {
            this.values[indexInViewButtons].selected = true;
        }
        // deselect other buttons if multiSelection is not enabled
        if (!this.multiSelection && this.selectedIndexes.length > 1) {
            this.buttons.forEach(function (b, i) {
                if (i !== index && _this.selectedIndexes.indexOf(i) !== -1) {
                    _this.deselectButton(i);
                }
            });
        }
    };
    /**
     * Deselects a button by its index.
     * ```typescript
     * @ViewChild("MyChild")
     * private buttonG: IgxButtonGroupComponent;
     * ngAfterViewInit(){
     *    this.buttonG.deselectButton(2);
     *    this.cdr.detectChanges();
     * }
     * ```
     * @memberOf {@link IgxButtonGroupComponent}
     */
    IgxButtonGroupComponent.prototype.deselectButton = function (index) {
        if (index >= this.buttons.length || index < 0) {
            return;
        }
        var button = this.buttons[index];
        var buttonElement = button.nativeElement;
        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);
        button.selected = false;
        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');
        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');
        this.onUnselect.emit({ button: button, index: index });
        var indexInViewButtons = this.viewButtons.toArray().indexOf(button);
        if (indexInViewButtons !== -1) {
            this.values[indexInViewButtons].selected = false;
        }
    };
    /**
     * @hidden
     */
    IgxButtonGroupComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templateButtons.forEach(function (button) {
            if (!button.initialDensity) {
                button.displayDensity = _this.displayDensity;
            }
        });
    };
    /**
     * @hidden
     */
    IgxButtonGroupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var initButtons = function () {
            // Cancel any existing buttonClick subscriptions
            _this.buttonClickNotifier$.next();
            _this.selectedIndexes.splice(0, _this.selectedIndexes.length);
            // initial configuration
            _this.buttons.forEach(function (button, index) {
                var buttonElement = button.nativeElement;
                if (_this.disabled) {
                    button.disabled = true;
                }
                if (button.selected) {
                    _this.selectButton(index);
                }
                button.buttonClick.pipe(takeUntil(_this.buttonClickNotifier$)).subscribe(function (ev) { return _this._clickHandler(ev, index); });
                _this._renderer.addClass(buttonElement, 'igx-button-group__item');
            });
        };
        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(function () { return initButtons(); });
        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(function () { return initButtons(); });
        initButtons();
        this._cdr.detectChanges();
    };
    /**
     * @hidden
     */
    IgxButtonGroupComponent.prototype.ngOnDestroy = function () {
        this.buttonClickNotifier$.next();
        this.buttonClickNotifier$.complete();
        this.queryListNotifier$.next();
        this.queryListNotifier$.complete();
    };
    /**
     * @hidden
     */
    IgxButtonGroupComponent.prototype._clickHandler = function (event, i) {
        if (this.selectedIndexes.indexOf(i) !== -1) {
            this.deselectButton(i);
        }
        else {
            this.selectButton(i);
        }
    };
    IgxButtonGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        ViewChildren(IgxButtonDirective)
    ], IgxButtonGroupComponent.prototype, "viewButtons", void 0);
    __decorate([
        ContentChildren(IgxButtonDirective)
    ], IgxButtonGroupComponent.prototype, "templateButtons", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxButtonGroupComponent.prototype, "id", void 0);
    __decorate([
        HostBinding('style.zIndex')
    ], IgxButtonGroupComponent.prototype, "zIndex", void 0);
    __decorate([
        Input()
    ], IgxButtonGroupComponent.prototype, "itemContentCssClass", null);
    __decorate([
        Input()
    ], IgxButtonGroupComponent.prototype, "multiSelection", void 0);
    __decorate([
        Input()
    ], IgxButtonGroupComponent.prototype, "values", void 0);
    __decorate([
        Input()
    ], IgxButtonGroupComponent.prototype, "disabled", null);
    __decorate([
        Input()
    ], IgxButtonGroupComponent.prototype, "alignment", null);
    __decorate([
        Output()
    ], IgxButtonGroupComponent.prototype, "onSelect", void 0);
    __decorate([
        Output()
    ], IgxButtonGroupComponent.prototype, "onUnselect", void 0);
    IgxButtonGroupComponent = __decorate([
        Component({
            selector: 'igx-buttongroup',
            template: "<div class=\"igx-button-group\" role=\"group\" [class.igx-button-group--vertical]=\"isVertical\">\n    <button *ngFor=\"let button of values; let i = 'index'\"\n        type=\"button\"\n        igxButton=\"flat\"\n        [displayDensity]=\"displayDensity\"\n        [selected]=\"button.selected\"\n        [attr.data-togglable]=\"button.togglable\"\n        [disabled]=\"disabled || button.disabled\"\n        [igxButtonColor]=\"button.color\"\n        [igxButtonBackground]=\"button.bgcolor\"\n        [igxLabel]=\"button.label\"\n        [igxRipple]=\"button.ripple\"\n    >\n        <span class=\"igx-button-group__item-content {{ itemContentCssClass }}\">\n            <igx-icon *ngIf=\"button.icon\" fontSet=\"material\">{{button.icon}}</igx-icon>\n            <span class=\"igx-button-group__button-text\" *ngIf=\"button.label\">{{button.label}}</span>\n        </span>\n    </button>\n    <ng-content></ng-content>\n</div>\n"
        }),
        __param(2, Optional()), __param(2, Inject(DisplayDensityToken))
    ], IgxButtonGroupComponent);
    return IgxButtonGroupComponent;
}(DisplayDensityBase));
export { IgxButtonGroupComponent };
/**
 * @hidden
 */
var IgxButtonGroupModule = /** @class */ (function () {
    function IgxButtonGroupModule() {
    }
    IgxButtonGroupModule = __decorate([
        NgModule({
            declarations: [IgxButtonGroupComponent],
            exports: [IgxButtonGroupComponent],
            imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]
        })
    ], IgxButtonGroupModule);
    return IgxButtonGroupModule;
}());
export { IgxButtonGroupModule };
//# sourceMappingURL=data:application/json;base64,