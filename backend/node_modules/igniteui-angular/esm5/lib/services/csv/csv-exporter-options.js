import { __extends } from "tslib";
import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';
/**
 * Objects of this class are used to configure the CSV exporting process.
 */
var IgxCsvExporterOptions = /** @class */ (function (_super) {
    __extends(IgxCsvExporterOptions, _super);
    function IgxCsvExporterOptions(fileName, fileType) {
        var _this = _super.call(this, fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType)) || this;
        _this.setFileType(fileType);
        _this.setDelimiter();
        return _this;
    }
    IgxCsvExporterOptions.getExtensionFromFileType = function (fType) {
        var extension = '';
        switch (fType) {
            case CsvFileTypes.CSV:
                extension = '.csv';
                break;
            case CsvFileTypes.TSV:
                extension = '.tsv';
                break;
            case CsvFileTypes.TAB:
                extension = '.tab';
                break;
            default:
                throw Error('Unsupported CSV file type!');
        }
        return extension;
    };
    Object.defineProperty(IgxCsvExporterOptions.prototype, "valueDelimiter", {
        /**
         * Gets the value delimiter which will be used for the exporting operation.
         * ```typescript
         * let delimiter = this.exportOptions.valueDelimiter;
         * ```
         * @memberof IgxCsvExporterOptions
         */
        get: function () {
            return this._valueDelimiter;
        },
        /**
         * Sets a value delimiter which will overwrite the default delimiter of the selected export format.
         * ```typescript
         * this.exportOptions.valueDelimiter = '|';
         * ```
         * @memberof IgxCsvExporterOptions
         */
        set: function (value) {
            this.setDelimiter(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCsvExporterOptions.prototype, "fileType", {
        /**
         * Gets the CSV export format.
         * ```typescript
         * let filetype = this.exportOptions.fileType;
         * ```
         * @memberof IgxCsvExporterOptions
         */
        get: function () {
            return this._fileType;
        },
        /**
         * Sets the CSV export format.
         * ```typescript
         * this.exportOptions.fileType = CsvFileTypes.TAB;
         * ```
         * @memberof IgxCsvExporterOptions
         */
        set: function (value) {
            this.setFileType(value);
        },
        enumerable: true,
        configurable: true
    });
    IgxCsvExporterOptions.prototype.setFileType = function (value) {
        if (value !== undefined && value !== null && value !== this._fileType) {
            this._fileType = value;
            var extension = IgxCsvExporterOptions.getExtensionFromFileType(value);
            if (!this.fileName.endsWith(extension)) {
                var oldExt = '.' + this.fileName.split('.').pop();
                var newName = this.fileName.replace(oldExt, extension);
                this._fileExtension = extension;
                this.fileName = newName;
            }
        }
    };
    IgxCsvExporterOptions.prototype.setDelimiter = function (value) {
        if (value !== undefined && value !== '' && value !== null) {
            this._valueDelimiter = value;
        }
        else {
            switch (this.fileType) {
                case CsvFileTypes.CSV:
                    this._valueDelimiter = ',';
                    break;
                case CsvFileTypes.TSV:
                case CsvFileTypes.TAB:
                    this._valueDelimiter = '\t';
                    break;
            }
        }
    };
    return IgxCsvExporterOptions;
}(IgxExporterOptionsBase));
export { IgxCsvExporterOptions };
/**
 * This enumeration is used to configure the default value separator
 * as well as the default file extension used when performing CSV exporting.
 */
export var CsvFileTypes;
(function (CsvFileTypes) {
    /**
     * Character Separated Values, default separator is "comma", default file extension is .csv
     */
    CsvFileTypes[CsvFileTypes["CSV"] = 0] = "CSV";
    /**
     * Tab Separated Values, default separator is tab, default file extension is .tsv
     */
    CsvFileTypes[CsvFileTypes["TSV"] = 1] = "TSV";
    /**
     * Tab Separated Values, default separator is tab, default file extension is .tab
     */
    CsvFileTypes[CsvFileTypes["TAB"] = 2] = "TAB";
})(CsvFileTypes || (CsvFileTypes = {}));
//# sourceMappingURL=data:application/json;base64,