import { __decorate } from "tslib";
import { Component, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { SplitterType } from '../splitter.component';
import { DragDirection } from '../../directives/drag-drop/drag-drop.directive';
export var SPLITTER_INTERACTION_KEYS = new Set('right down left up arrowright arrowdown arrowleft arrowup'.split(' '));
/**
 * @hidden @internal
 * Represents the draggable bar that visually separates panes and allows for changing their sizes.
 */
var IgxSplitBarComponent = /** @class */ (function () {
    function IgxSplitBarComponent() {
        /**
         * Set css class to the host element.
         */
        this.cssClass = 'igx-splitter-bar-host';
        /**
         * Gets/Sets the orientation.
         */
        this.type = SplitterType.Horizontal;
        /**
         * An event that is emitted whenever we start dragging the current `SplitBarComponent`.
         */
        this.moveStart = new EventEmitter();
        /**
         * An event that is emitted while we are dragging the current `SplitBarComponent`.
         */
        this.moving = new EventEmitter();
    }
    Object.defineProperty(IgxSplitBarComponent.prototype, "tabindex", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            return this.resizeDisallowed ? null : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSplitBarComponent.prototype, "orientation", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            return this.type === SplitterType.Horizontal ? 'horizontal' : 'vertical';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSplitBarComponent.prototype, "cursor", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            if (this.resizeDisallowed) {
                return '';
            }
            return this.type === SplitterType.Horizontal ? 'col-resize' : 'row-resize';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSplitBarComponent.prototype, "prevButtonHidden", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.siblings[0].collapsed && !this.siblings[1].collapsed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    IgxSplitBarComponent.prototype.keyEvent = function (event) {
        var key = event.key.toLowerCase();
        var ctrl = event.ctrlKey;
        event.stopPropagation();
        if (SPLITTER_INTERACTION_KEYS.has(key)) {
            event.preventDefault();
        }
        switch (key) {
            case 'arrowup':
            case 'up':
                if (this.type === SplitterType.Vertical) {
                    if (ctrl) {
                        this.onCollapsing(false);
                        break;
                    }
                    if (!this.resizeDisallowed) {
                        event.preventDefault();
                        this.moveStart.emit(this.pane);
                        this.moving.emit(10);
                    }
                }
                break;
            case 'arrowdown':
            case 'down':
                if (this.type === SplitterType.Vertical) {
                    if (ctrl) {
                        this.onCollapsing(true);
                        break;
                    }
                    if (!this.resizeDisallowed) {
                        event.preventDefault();
                        this.moveStart.emit(this.pane);
                        this.moving.emit(-10);
                    }
                }
                break;
            case 'arrowleft':
            case 'left':
                if (this.type === SplitterType.Horizontal) {
                    if (ctrl) {
                        this.onCollapsing(false);
                        break;
                    }
                    if (!this.resizeDisallowed) {
                        event.preventDefault();
                        this.moveStart.emit(this.pane);
                        this.moving.emit(10);
                    }
                }
                break;
            case 'arrowright':
            case 'right':
                if (this.type === SplitterType.Horizontal) {
                    if (ctrl) {
                        this.onCollapsing(true);
                        break;
                    }
                    if (!this.resizeDisallowed) {
                        event.preventDefault();
                        this.moveStart.emit(this.pane);
                        this.moving.emit(-10);
                    }
                }
                break;
            default:
                break;
        }
    };
    Object.defineProperty(IgxSplitBarComponent.prototype, "dragDir", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.type === SplitterType.Horizontal ? DragDirection.VERTICAL : DragDirection.HORIZONTAL;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSplitBarComponent.prototype, "nextButtonHidden", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.siblings[1].collapsed && !this.siblings[0].collapsed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    IgxSplitBarComponent.prototype.onDragStart = function (event) {
        if (this.resizeDisallowed) {
            event.cancel = true;
            return;
        }
        this.startPoint = this.type === SplitterType.Horizontal ? event.startX : event.startY;
        this.moveStart.emit(this.pane);
    };
    /**
     * @hidden @internal
     */
    IgxSplitBarComponent.prototype.onDragMove = function (event) {
        var isHorizontal = this.type === SplitterType.Horizontal;
        var curr = isHorizontal ? event.pageX : event.pageY;
        var delta = this.startPoint - curr;
        if (delta !== 0) {
            this.moving.emit(delta);
            event.cancel = true;
            event.owner.element.nativeElement.style.transform = '';
        }
    };
    Object.defineProperty(IgxSplitBarComponent.prototype, "resizeDisallowed", {
        get: function () {
            var relatedTabs = this.siblings;
            return !!relatedTabs.find(function (x) { return x.resizable === false || x.collapsed === true; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    IgxSplitBarComponent.prototype.onCollapsing = function (next) {
        var prevSibling = this.siblings[0];
        var nextSibling = this.siblings[1];
        var target;
        if (next) {
            // if next is clicked when prev pane is hidden, show prev pane, else hide next pane.
            target = prevSibling.collapsed ? prevSibling : nextSibling;
        }
        else {
            // if prev is clicked when next pane is hidden, show next pane, else hide prev pane.
            target = nextSibling.collapsed ? nextSibling : prevSibling;
        }
        target.toggle();
    };
    __decorate([
        HostBinding('class.igx-splitter-bar-host')
    ], IgxSplitBarComponent.prototype, "cssClass", void 0);
    __decorate([
        Input()
    ], IgxSplitBarComponent.prototype, "type", void 0);
    __decorate([
        HostBinding('style.order'),
        Input()
    ], IgxSplitBarComponent.prototype, "order", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxSplitBarComponent.prototype, "tabindex", null);
    __decorate([
        HostBinding('attr.aria-orientation')
    ], IgxSplitBarComponent.prototype, "orientation", null);
    __decorate([
        Input()
    ], IgxSplitBarComponent.prototype, "pane", void 0);
    __decorate([
        Input()
    ], IgxSplitBarComponent.prototype, "siblings", void 0);
    __decorate([
        Output()
    ], IgxSplitBarComponent.prototype, "moveStart", void 0);
    __decorate([
        Output()
    ], IgxSplitBarComponent.prototype, "moving", void 0);
    __decorate([
        HostListener('keydown', ['$event'])
    ], IgxSplitBarComponent.prototype, "keyEvent", null);
    IgxSplitBarComponent = __decorate([
        Component({
            selector: 'igx-splitter-bar',
            template: "<div class=\"igx-splitter-bar\"\n    [class.igx-splitter-bar--vertical]='type === 0'\n    [style.cursor]='cursor'\n    igxDrag\n    [ghost]=\"false\"\n    [dragDirection]='dragDir'\n    (dragStart)='onDragStart($event)'\n    (dragMove)=\"onDragMove($event)\"\n>\n    <div class=\"igx-splitter-bar__expander--start\" igxDragIgnore (click)='onCollapsing(false)' [hidden]='prevButtonHidden'></div>\n    <div class=\"igx-splitter-bar__handle\" ></div>\n    <div class=\"igx-splitter-bar__expander--end\" igxDragIgnore (click)='onCollapsing(true)' [hidden]='nextButtonHidden'></div>\n</div>\n"
        })
    ], IgxSplitBarComponent);
    return IgxSplitBarComponent;
}());
export { IgxSplitBarComponent };
//# sourceMappingURL=data:application/json;base64,