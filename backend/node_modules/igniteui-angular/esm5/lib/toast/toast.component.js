import { __decorate, __param } from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { Component, ElementRef, EventEmitter, HostBinding, Input, NgModule, OnDestroy, OnInit, Optional, Output } from '@angular/core';
import { IgxNavigationService, IToggleView } from '../core/navigation';
var NEXT_ID = 0;
/**
 * Enumeration for toast position
 * Can be:
 * Bottom
 * Middle
 * Top
 */
export var IgxToastPosition;
(function (IgxToastPosition) {
    IgxToastPosition[IgxToastPosition["Bottom"] = 0] = "Bottom";
    IgxToastPosition[IgxToastPosition["Middle"] = 1] = "Middle";
    IgxToastPosition[IgxToastPosition["Top"] = 2] = "Top";
})(IgxToastPosition || (IgxToastPosition = {}));
/**
 * **Ignite UI for Angular Toast** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)
 *
 * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot
 * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.
 *
 * Example:
 * ```html
 * <button (click)="toast.show()">Show notification</button>
 * <igx-toast #toast
 *           message="Notification displayed"
 *           displayTime="1000">
 * </igx-toast>
 * ```
 */
var IgxToastComponent = /** @class */ (function () {
    function IgxToastComponent(elementRef, navService) {
        this.elementRef = elementRef;
        this.navService = navService;
        this._isVisible = false;
        /**
         * @hidden
         */
        this.animationState = 'invisible';
        /**
         * Sets/gets the `id` of the toast.
         * If not set, the `id` will have value `"igx-toast-0"`.
         * ```html
         * <igx-toast id = "my-first-toast"></igx-toast>
         * ```
         * ```typescript
         * let toastId = this.toast.id;
         * ```
         */
        this.id = "igx-toast-" + NEXT_ID++;
        /**
         * Emits an event prior the toast is shown.
         * Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (onShowing) = "onShowing($event)"></igx-toast>
         * ```
         * @memberof IgxToastComponent
         */
        this.onShowing = new EventEmitter();
        /**
         * Emits an event when the toast is shown.
         * Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (onShown) = "onShown($event)"></igx-toast>
         * ```
         * @memberof IgxToastComponent
         */
        this.onShown = new EventEmitter();
        /**
         * Emits an event prior the toast is hidden.
         * Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (onHiding) = "onHiding($event)"></igx-toast>
         * ```
         * @memberof IgxToastComponent
         */
        this.onHiding = new EventEmitter();
        /**
         *  Emits an event when the toast is hidden.
         *  Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (onHidden) = "onHidden($event)"></igx-toast>
         * ```
         * @memberof IgxToastComponent
         */
        this.onHidden = new EventEmitter();
        /**
         * Sets/gets the `role` attribute.
         * If not set, `role` will have value `"alert"`.
         * ```html
         * <igx-toast [role] = "'notify'"></igx-toast>
         * ```
         * ```typescript
         * let toastRole = this.toast.role;
         * ```
         * @memberof IgxToastComponent
         */
        this.role = 'alert';
        /**
         * Sets/gets whether the toast will be hidden after the `displayTime` is over.
         * Default value is `true`.
         * ```html
         * <igx-toast [autoHide] = "false"></igx-toast>
         * ```
         * ```typescript
         * let autoHide = this.toast.autoHide;
         * ```
         * @memberof IgxToastComponent
         */
        this.autoHide = true;
        /**
         * Sets/gets the duration of time span(in milliseconds) which the toast will be visible
         * after it is being shown.
         * Default value is `4000`.
         * ```html
         * <igx-toast [displayTime] = "2500"></igx-toast>
         * ```
         * ```typescript
         * let displayTime = this.toast.displayTime;
         * ```
         * @memberof IgxToastComponent
         */
        this.displayTime = 4000;
        /**
         * @hidden
         */
        this.isVisibleChange = new EventEmitter();
        /**
         * @hidden
         */
        this.message = '';
        /**
         * Sets/gets the position of the toast.
         * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.
         * ```html
         * <igx-toast [position] = "top"></igx-toast>
         * ```
         * ```typescript
         * let toastPosition = this.toast.position;
         * ```
         * @memberof IgxToastComponent
         */
        this.position = IgxToastPosition.Bottom;
    }
    Object.defineProperty(IgxToastComponent.prototype, "isVisible", {
        /**
         * Enables/Disables the visibility of the toast.
         * If not set, the `isVisible` attribute will have value `false`.
         * ```html
         * <igx-toast [isVisible] = "true"></igx-toast>
         * ```
         * ```typescript
         * let isVisible = this.toast.isVisible;
         * ```
         *
         * Two-way data binding.
         * ```html
         * <igx-toast [(isVisible)] = "model.isVisible"></igx-toast>
         * ```
         * @memberof IgxToastComponent
         */
        get: function () {
            return this._isVisible;
        },
        set: function (value) {
            this._isVisible = value;
            this.isVisibleChange.emit(this._isVisible);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToastComponent.prototype, "element", {
        /**
         * Gets the nativeElement of the toast.
         * ```typescript
         * let nativeElement = this.toast.element;
         * ```
         * @memberof IgxToastComponent
         */
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Shows the toast.
     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.
     * ```typescript
     * this.toast.show();
     * ```
     * @memberof IgxToastComponent
     */
    IgxToastComponent.prototype.show = function () {
        var _this = this;
        clearInterval(this.timeoutId);
        this.onShowing.emit(this);
        this.isVisible = true;
        this.animationState = 'visible';
        if (this.autoHide) {
            this.timeoutId = window.setTimeout(function () {
                _this.hide();
            }, this.displayTime);
        }
        this.onShown.emit(this);
    };
    /**
     * Hides the toast.
     * ```typescript
     * this.toast.hide();
     * ```
     * @memberof IgxToastComponent
     */
    IgxToastComponent.prototype.hide = function () {
        this.onHiding.emit(this);
        this.isVisible = false;
        this.onHidden.emit(this);
        this.animationState = 'invisible';
        clearInterval(this.timeoutId);
    };
    /**
     * Wraps @show() method due @IToggleView interface implementation.
     * @hidden
     */
    IgxToastComponent.prototype.open = function () {
        this.show();
    };
    /**
     * Wraps @hide() method due @IToggleView interface implementation.
     * @hidden
     */
    IgxToastComponent.prototype.close = function () {
        this.hide();
    };
    /**
     * Toggles the visible state of the toast.
     * ```typescript
     * this.toast.toggle();
     * ```
     * @memberof IgxToastComponent
     */
    IgxToastComponent.prototype.toggle = function () {
        this.isVisible ? this.close() : this.open();
    };
    Object.defineProperty(IgxToastComponent.prototype, "cssClassTop", {
        /**
         * @hidden
         */
        get: function () {
            return this.position === IgxToastPosition.Top;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToastComponent.prototype, "cssClassMiddle", {
        /**
         * @hidden
         */
        get: function () {
            return this.position === IgxToastPosition.Middle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToastComponent.prototype, "cssClassBottom", {
        /**
         * @hidden
         */
        get: function () {
            return this.position === IgxToastPosition.Bottom;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxToastComponent.prototype.ngOnInit = function () {
        if (this.navService && this.id) {
            this.navService.add(this.id, this);
        }
    };
    /**
     * @hidden
     */
    IgxToastComponent.prototype.ngOnDestroy = function () {
        if (this.navService && this.id) {
            this.navService.remove(this.id);
        }
    };
    IgxToastComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IgxNavigationService, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        HostBinding('@animate')
    ], IgxToastComponent.prototype, "animationState", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxToastComponent.prototype, "id", void 0);
    __decorate([
        Output()
    ], IgxToastComponent.prototype, "onShowing", void 0);
    __decorate([
        Output()
    ], IgxToastComponent.prototype, "onShown", void 0);
    __decorate([
        Output()
    ], IgxToastComponent.prototype, "onHiding", void 0);
    __decorate([
        Output()
    ], IgxToastComponent.prototype, "onHidden", void 0);
    __decorate([
        Input()
    ], IgxToastComponent.prototype, "role", void 0);
    __decorate([
        Input()
    ], IgxToastComponent.prototype, "autoHide", void 0);
    __decorate([
        Input()
    ], IgxToastComponent.prototype, "displayTime", void 0);
    __decorate([
        Input()
    ], IgxToastComponent.prototype, "isVisible", null);
    __decorate([
        Output()
    ], IgxToastComponent.prototype, "isVisibleChange", void 0);
    __decorate([
        Input()
    ], IgxToastComponent.prototype, "message", void 0);
    __decorate([
        Input()
    ], IgxToastComponent.prototype, "position", void 0);
    __decorate([
        HostBinding('class.igx-toast--top')
    ], IgxToastComponent.prototype, "cssClassTop", null);
    __decorate([
        HostBinding('class.igx-toast--middle')
    ], IgxToastComponent.prototype, "cssClassMiddle", null);
    __decorate([
        HostBinding('class.igx-toast--bottom')
    ], IgxToastComponent.prototype, "cssClassBottom", null);
    IgxToastComponent = __decorate([
        Component({
            animations: [
                trigger('animate', [
                    state('visible', style({
                        opacity: 1
                    })),
                    transition('invisible => visible', animate('.20s ease')),
                    transition('visible => invisible', animate('.40s ease-out'))
                ])
            ],
            selector: 'igx-toast',
            template: "<ng-content></ng-content>\n<span>{{ message }}</span>\n\n",
            styles: ["\n        :host {\n            display: block;\n        }\n    "]
        }),
        __param(1, Optional())
    ], IgxToastComponent);
    return IgxToastComponent;
}());
export { IgxToastComponent };
/**
 * @hidden
 */
var IgxToastModule = /** @class */ (function () {
    function IgxToastModule() {
    }
    IgxToastModule = __decorate([
        NgModule({
            declarations: [IgxToastComponent],
            exports: [IgxToastComponent],
            imports: [CommonModule]
        })
    ], IgxToastModule);
    return IgxToastModule;
}());
export { IgxToastModule };
//# sourceMappingURL=data:application/json;base64,