import { __decorate, __extends } from "tslib";
import { Component, ContentChild, Pipe, Output, EventEmitter, HostListener, Directive } from '@angular/core';
import { formatDate } from '@angular/common';
import { NgControl } from '@angular/forms';
import { IgxInputDirective } from '../input-group/public_api';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxInputGroupBase } from '../input-group/input-group.common';
import { IgxDateTimeEditorDirective } from '../directives/date-time-editor/public_api';
/** @hidden @internal */
var DateRangePickerFormatPipe = /** @class */ (function () {
    function DateRangePickerFormatPipe() {
    }
    DateRangePickerFormatPipe.prototype.transform = function (values, inputFormat, locale) {
        if (!values) {
            return '';
        }
        var start = values.start, end = values.end;
        // TODO: move default locale from IgxDateTimeEditorDirective to its commons file/use displayFormat
        var startDate = inputFormat ? formatDate(start, inputFormat, locale || 'en') : start === null || start === void 0 ? void 0 : start.toLocaleDateString();
        var endDate = inputFormat ? formatDate(end, inputFormat, locale || 'en') : end === null || end === void 0 ? void 0 : end.toLocaleDateString();
        var formatted;
        if (start) {
            formatted = startDate + " - ";
            if (end) {
                formatted += endDate;
            }
        }
        // TODO: no need to set format twice
        return formatted ? formatted : '';
    };
    DateRangePickerFormatPipe = __decorate([
        Pipe({ name: 'dateRange' })
    ], DateRangePickerFormatPipe);
    return DateRangePickerFormatPipe;
}());
export { DateRangePickerFormatPipe };
/** @hidden @internal */
var IgxDateRangeInputsBaseComponent = /** @class */ (function (_super) {
    __extends(IgxDateRangeInputsBaseComponent, _super);
    function IgxDateRangeInputsBaseComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxDateRangeInputsBaseComponent_1 = IgxDateRangeInputsBaseComponent;
    Object.defineProperty(IgxDateRangeInputsBaseComponent.prototype, "nativeElement", {
        /** @hidden @internal */
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden @internal */
    IgxDateRangeInputsBaseComponent.prototype.setFocus = function () {
        this.input.focus();
    };
    /** @hidden @internal */
    IgxDateRangeInputsBaseComponent.prototype.updateInputValue = function (value) {
        if (this.ngControl) {
            this.ngControl.control.setValue(value);
        }
        else {
            this.dateTimeEditor.value = value;
        }
    };
    /** @hidden @internal */
    IgxDateRangeInputsBaseComponent.prototype.updateInputValidity = function (state) {
        this.inputDirective.valid = state;
    };
    var IgxDateRangeInputsBaseComponent_1;
    __decorate([
        ContentChild(NgControl)
    ], IgxDateRangeInputsBaseComponent.prototype, "ngControl", void 0);
    __decorate([
        ContentChild(IgxDateTimeEditorDirective)
    ], IgxDateRangeInputsBaseComponent.prototype, "dateTimeEditor", void 0);
    __decorate([
        ContentChild(IgxInputDirective)
    ], IgxDateRangeInputsBaseComponent.prototype, "inputDirective", void 0);
    IgxDateRangeInputsBaseComponent = IgxDateRangeInputsBaseComponent_1 = __decorate([
        Component({
            template: "",
            selector: "igx-date-range-base",
            providers: [{ provide: IgxInputGroupBase, useExisting: IgxDateRangeInputsBaseComponent_1 }]
        })
    ], IgxDateRangeInputsBaseComponent);
    return IgxDateRangeInputsBaseComponent;
}(IgxInputGroupComponent));
export { IgxDateRangeInputsBaseComponent };
/**
 * Templates the default icon in the `IgxDateRangePicker`.
 *
 * @igxModule IgxDateRangePickerModule
 *
 * @igxKeyWords date range icon, date picker icon
 *
 * @igxGroup scheduling
 *
 * @example
 * ```html
 * <igx-date-range-picker>
 *   <igx-picker-toggle igxSuffix>
 *      <igx-icon>calendar_view_day</igx-icon>
 *   </igx-picker-toggle>
 * </igx-date-range-picker>
 * ```
 */
var IgxPickerToggleComponent = /** @class */ (function () {
    function IgxPickerToggleComponent() {
        this.clicked = new EventEmitter();
    }
    IgxPickerToggleComponent.prototype.onClick = function (event) {
        // do not focus input on click
        event.stopPropagation();
        this.clicked.emit();
    };
    __decorate([
        Output()
    ], IgxPickerToggleComponent.prototype, "clicked", void 0);
    __decorate([
        HostListener('click', ['$event'])
    ], IgxPickerToggleComponent.prototype, "onClick", null);
    IgxPickerToggleComponent = __decorate([
        Component({
            template: "<ng-content></ng-content>",
            selector: 'igx-picker-toggle'
        })
    ], IgxPickerToggleComponent);
    return IgxPickerToggleComponent;
}());
export { IgxPickerToggleComponent };
/**
 * Defines the start input for a date range picker
 *
 * @igxModule IgxDateRangePickerModule
 *
 * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme
 *
 * @igxKeywords date, range, date range, date picker
 *
 * @igxGroup scheduling
 *
 * @remarks
 * When templating, start input has to be templated separately
 *
 * @example
 * ```html
 * <igx-date-range-picker mode="dropdown">
 *      <igx-date-range-start>
 *          <input igxInput igxDateTimeEditor type="text">
 *      </igx-date-range-start>
 *      ...
 * </igx-date-range-picker>
 * ```
 */
var IgxDateRangeStartComponent = /** @class */ (function (_super) {
    __extends(IgxDateRangeStartComponent, _super);
    function IgxDateRangeStartComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxDateRangeStartComponent_1 = IgxDateRangeStartComponent;
    var IgxDateRangeStartComponent_1;
    IgxDateRangeStartComponent = IgxDateRangeStartComponent_1 = __decorate([
        Component({
            selector: 'igx-date-range-start',
            template: "<div class=\"igx-input-group__wrapper\" *ngIf=\"isTypeBox; else bundle\">\n    <ng-container *ngTemplateOutlet=\"bundle\"></ng-container>\n</div>\n\n<div class=\"igx-input-group__hint\">\n    <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n</div>\n\n<ng-template #label>\n    <ng-content select=\"[igxLabel]\"></ng-content>\n</ng-template>\n\n<ng-template #input>\n    <ng-content select=\"[igxInput]\"></ng-content>\n</ng-template>\n\n<ng-template #inputBundle>\n    <ng-container *ngIf=\"!isNotMaterial\">\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n</ng-template>\n\n<ng-template #bundle>\n    <ng-container *ngIf=\"isNotMaterial\">\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n    </ng-container>\n\n    <div class=\"igx-input-group__bundle\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n\n        <div *ngIf=\"!isTypeBootstrap; else inputBundle\" class=\"igx-input-group__bundle-main\">\n\n            <ng-container *ngIf=\"!isNotMaterial\">\n                <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n            </ng-container>\n\n            <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n        </div>\n\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </div>\n    <div class=\"igx-input-group__border\" *ngIf=\"hasBorder\"></div>\n</ng-template>\n",
            providers: [
                { provide: IgxInputGroupBase, useExisting: IgxDateRangeStartComponent_1 },
                { provide: IgxDateRangeInputsBaseComponent, useExisting: IgxDateRangeStartComponent_1 }
            ]
        })
    ], IgxDateRangeStartComponent);
    return IgxDateRangeStartComponent;
}(IgxDateRangeInputsBaseComponent));
export { IgxDateRangeStartComponent };
/**
 * Defines the end input for a date range picker
 *
 * @igxModule IgxDateRangeModule
 *
 * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme
 *
 * @igxKeywords date, range, date range, date picker
 *
 * @igxGroup scheduling
 *
 * @remarks
 * When templating, end input has to be template separately
 *
 * @example
 * ```html
 * <igx-date-range-picker mode="dropdown">
 *      <igx-date-range-end>
 *          <input igxInput igxDateTimeEditor type="text">
 *      </igx-date-range-end>
 *      ...
 * </igx-date-range-picker>
 * ```
 */
var IgxDateRangeEndComponent = /** @class */ (function (_super) {
    __extends(IgxDateRangeEndComponent, _super);
    function IgxDateRangeEndComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxDateRangeEndComponent_1 = IgxDateRangeEndComponent;
    var IgxDateRangeEndComponent_1;
    IgxDateRangeEndComponent = IgxDateRangeEndComponent_1 = __decorate([
        Component({
            selector: 'igx-date-range-end',
            template: "<div class=\"igx-input-group__wrapper\" *ngIf=\"isTypeBox; else bundle\">\n    <ng-container *ngTemplateOutlet=\"bundle\"></ng-container>\n</div>\n\n<div class=\"igx-input-group__hint\">\n    <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n</div>\n\n<ng-template #label>\n    <ng-content select=\"[igxLabel]\"></ng-content>\n</ng-template>\n\n<ng-template #input>\n    <ng-content select=\"[igxInput]\"></ng-content>\n</ng-template>\n\n<ng-template #inputBundle>\n    <ng-container *ngIf=\"!isNotMaterial\">\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n</ng-template>\n\n<ng-template #bundle>\n    <ng-container *ngIf=\"isNotMaterial\">\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n    </ng-container>\n\n    <div class=\"igx-input-group__bundle\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n\n        <div *ngIf=\"!isTypeBootstrap; else inputBundle\" class=\"igx-input-group__bundle-main\">\n\n            <ng-container *ngIf=\"!isNotMaterial\">\n                <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n            </ng-container>\n\n            <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n        </div>\n\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </div>\n    <div class=\"igx-input-group__border\" *ngIf=\"hasBorder\"></div>\n</ng-template>\n",
            providers: [
                { provide: IgxInputGroupBase, useExisting: IgxDateRangeEndComponent_1 },
                { provide: IgxDateRangeInputsBaseComponent, useExisting: IgxDateRangeEndComponent_1 }
            ]
        })
    ], IgxDateRangeEndComponent);
    return IgxDateRangeEndComponent;
}(IgxDateRangeInputsBaseComponent));
export { IgxDateRangeEndComponent };
var IgxDateRangeSeparatorDirective = /** @class */ (function () {
    function IgxDateRangeSeparatorDirective() {
    }
    IgxDateRangeSeparatorDirective = __decorate([
        Directive({
            selector: '[igxDateRangeSeparator]'
        })
    ], IgxDateRangeSeparatorDirective);
    return IgxDateRangeSeparatorDirective;
}());
export { IgxDateRangeSeparatorDirective };
//# sourceMappingURL=data:application/json;base64,