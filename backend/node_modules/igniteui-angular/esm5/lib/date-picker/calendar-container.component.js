import { __decorate } from "tslib";
import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';
import { InteractionMode } from '../core/enums';
/**
 * @hidden
 */
var IgxCalendarContainerComponent = /** @class */ (function () {
    function IgxCalendarContainerComponent() {
        this.mode = InteractionMode.Dialog;
        this.vertical = false;
        this.onClose = new EventEmitter();
        this.onTodaySelection = new EventEmitter();
        this.styleClass = 'igx-date-picker';
    }
    Object.defineProperty(IgxCalendarContainerComponent.prototype, "dropdownCSS", {
        get: function () {
            return this.mode === InteractionMode.DropDown;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarContainerComponent.prototype, "verticalCSS", {
        get: function () {
            return this.vertical && this.mode === InteractionMode.Dialog;
        },
        enumerable: true,
        configurable: true
    });
    IgxCalendarContainerComponent.prototype.onEscape = function (event) {
        event.preventDefault();
        this.onClose.emit();
    };
    Object.defineProperty(IgxCalendarContainerComponent.prototype, "isReadonly", {
        /**
         * Returns whether the date-picker is in readonly dialog mode.
         *
         * @hidden
         */
        get: function () {
            return this.mode === InteractionMode.Dialog;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Emits close event for the calendar.
     */
    IgxCalendarContainerComponent.prototype.closeCalendar = function () {
        this.onClose.emit();
    };
    /**
     * Emits today selection event for the calendar.
     */
    IgxCalendarContainerComponent.prototype.triggerTodaySelection = function () {
        this.onTodaySelection.emit();
    };
    __decorate([
        ViewChild('calendar', { static: true })
    ], IgxCalendarContainerComponent.prototype, "calendar", void 0);
    __decorate([
        Input()
    ], IgxCalendarContainerComponent.prototype, "mode", void 0);
    __decorate([
        Input()
    ], IgxCalendarContainerComponent.prototype, "vertical", void 0);
    __decorate([
        Input()
    ], IgxCalendarContainerComponent.prototype, "cancelButtonLabel", void 0);
    __decorate([
        Input()
    ], IgxCalendarContainerComponent.prototype, "todayButtonLabel", void 0);
    __decorate([
        Input()
    ], IgxCalendarContainerComponent.prototype, "datePickerActions", void 0);
    __decorate([
        Output()
    ], IgxCalendarContainerComponent.prototype, "onClose", void 0);
    __decorate([
        Output()
    ], IgxCalendarContainerComponent.prototype, "onTodaySelection", void 0);
    __decorate([
        HostBinding('class.igx-date-picker')
    ], IgxCalendarContainerComponent.prototype, "styleClass", void 0);
    __decorate([
        HostBinding('class.igx-date-picker--dropdown')
    ], IgxCalendarContainerComponent.prototype, "dropdownCSS", null);
    __decorate([
        HostBinding('class.igx-date-picker--vertical')
    ], IgxCalendarContainerComponent.prototype, "verticalCSS", null);
    __decorate([
        HostListener('keydown.esc', ['$event']),
        HostListener('keydown.alt.arrowup', ['$event'])
    ], IgxCalendarContainerComponent.prototype, "onEscape", null);
    IgxCalendarContainerComponent = __decorate([
        Component({
            selector: 'igx-calendar-container',
            template: "<ng-template #defaultDatePickerActions>\n    <div *ngIf=\"cancelButtonLabel || todayButtonLabel\" class=\"igx-date-picker__buttons\">\n        <button #closeButton *ngIf=\"cancelButtonLabel\" igxButton=\"flat\" igxRipple (click)=\"closeCalendar()\">\n            {{ cancelButtonLabel }}\n        </button>\n        <button #todayButton *ngIf=\"todayButtonLabel\" igxButton=\"flat\" igxRipple (click)=\"triggerTodaySelection()\">\n            {{ todayButtonLabel }}\n        </button>\n    </div>\n</ng-template>\n<igx-calendar #calendar></igx-calendar>\n<ng-container *ngTemplateOutlet=\"datePickerActions ? datePickerActions.template : defaultDatePickerActions\"></ng-container>\n",
            styles: [':host {display: block;}']
        })
    ], IgxCalendarContainerComponent);
    return IgxCalendarContainerComponent;
}());
export { IgxCalendarContainerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZGF0ZS1waWNrZXIvY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR2hEOztHQUVHO0FBTUg7SUFBQTtRQUtXLFNBQUksR0FBb0IsZUFBZSxDQUFDLE1BQU0sQ0FBQztRQUcvQyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBWWpCLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRzdCLHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFHdEMsZUFBVSxHQUFHLGlCQUFpQixDQUFDO0lBeUMxQyxDQUFDO0lBdENHLHNCQUFJLHNEQUFXO2FBQWY7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLFFBQVEsQ0FBQztRQUNsRCxDQUFDOzs7T0FBQTtJQUdELHNCQUFJLHNEQUFXO2FBQWY7WUFDSSxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMsTUFBTSxDQUFDO1FBQ2pFLENBQUM7OztPQUFBO0lBSU0sZ0RBQVEsR0FBZixVQUFnQixLQUFLO1FBQ2pCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFPRCxzQkFBVyxxREFBVTtRQUxyQjs7OztXQUlHO2FBQ0g7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLE1BQU0sQ0FBQztRQUNoRCxDQUFDOzs7T0FBQTtJQUVEOztPQUVHO0lBQ0kscURBQWEsR0FBcEI7UUFDSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRztJQUNJLDZEQUFxQixHQUE1QjtRQUNJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBaEVEO1FBREMsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzttRUFDRjtJQUd0QztRQURDLEtBQUssRUFBRTsrREFDOEM7SUFHdEQ7UUFEQyxLQUFLLEVBQUU7bUVBQ2dCO0lBR3hCO1FBREMsS0FBSyxFQUFFOzRFQUN5QjtJQUdqQztRQURDLEtBQUssRUFBRTsyRUFDd0I7SUFHaEM7UUFEQyxLQUFLLEVBQUU7NEVBQ2dEO0lBR3hEO1FBREMsTUFBTSxFQUFFO2tFQUMyQjtJQUdwQztRQURDLE1BQU0sRUFBRTsyRUFDb0M7SUFHN0M7UUFEQyxXQUFXLENBQUMsdUJBQXVCLENBQUM7cUVBQ0M7SUFHdEM7UUFEQyxXQUFXLENBQUMsaUNBQWlDLENBQUM7b0VBRzlDO0lBR0Q7UUFEQyxXQUFXLENBQUMsaUNBQWlDLENBQUM7b0VBRzlDO0lBSUQ7UUFGQyxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7aUVBSS9DO0lBM0NRLDZCQUE2QjtRQUx6QyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsd0JBQXdCO1lBRWxDLHFyQkFBZ0Q7cUJBRHZDLHlCQUF5QjtTQUVyQyxDQUFDO09BQ1csNkJBQTZCLENBbUV6QztJQUFELG9DQUFDO0NBQUEsQUFuRUQsSUFtRUM7U0FuRVksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4Q2FsZW5kYXJDb21wb25lbnQgfSBmcm9tICcuLi9jYWxlbmRhci9wdWJsaWNfYXBpJztcbmltcG9ydCB7IEludGVyYWN0aW9uTW9kZSB9IGZyb20gJy4uL2NvcmUvZW51bXMnO1xuaW1wb3J0IHsgSWd4RGF0ZVBpY2tlckFjdGlvbnNEaXJlY3RpdmUgfSBmcm9tICcuL2RhdGUtcGlja2VyLmRpcmVjdGl2ZXMnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtY2FsZW5kYXItY29udGFpbmVyJyxcbiAgICBzdHlsZXM6IFsnOmhvc3Qge2Rpc3BsYXk6IGJsb2NrO30nXSxcbiAgICB0ZW1wbGF0ZVVybDogJ2NhbGVuZGFyLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2FsZW5kYXJDb250YWluZXJDb21wb25lbnQge1xuICAgIEBWaWV3Q2hpbGQoJ2NhbGVuZGFyJywgeyBzdGF0aWM6IHRydWUgfSlcbiAgICBwdWJsaWMgY2FsZW5kYXI6IElneENhbGVuZGFyQ29tcG9uZW50O1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbW9kZTogSW50ZXJhY3Rpb25Nb2RlID0gSW50ZXJhY3Rpb25Nb2RlLkRpYWxvZztcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHZlcnRpY2FsID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjYW5jZWxCdXR0b25MYWJlbDogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdG9kYXlCdXR0b25MYWJlbDogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZGF0ZVBpY2tlckFjdGlvbnM6IElneERhdGVQaWNrZXJBY3Rpb25zRGlyZWN0aXZlO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uQ2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25Ub2RheVNlbGVjdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWRhdGUtcGlja2VyJylcbiAgICBwdWJsaWMgc3R5bGVDbGFzcyA9ICdpZ3gtZGF0ZS1waWNrZXInO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZGF0ZS1waWNrZXItLWRyb3Bkb3duJylcbiAgICBnZXQgZHJvcGRvd25DU1MoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGUgPT09IEludGVyYWN0aW9uTW9kZS5Ecm9wRG93bjtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kYXRlLXBpY2tlci0tdmVydGljYWwnKVxuICAgIGdldCB2ZXJ0aWNhbENTUygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGljYWwgJiYgdGhpcy5tb2RlID09PSBJbnRlcmFjdGlvbk1vZGUuRGlhbG9nO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uZXNjJywgWyckZXZlbnQnXSlcbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmFsdC5hcnJvd3VwJywgWyckZXZlbnQnXSlcbiAgICBwdWJsaWMgb25Fc2NhcGUoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5vbkNsb3NlLmVtaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGRhdGUtcGlja2VyIGlzIGluIHJlYWRvbmx5IGRpYWxvZyBtb2RlLlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaXNSZWFkb25seSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZSA9PT0gSW50ZXJhY3Rpb25Nb2RlLkRpYWxvZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbWl0cyBjbG9zZSBldmVudCBmb3IgdGhlIGNhbGVuZGFyLlxuICAgICAqL1xuICAgIHB1YmxpYyBjbG9zZUNhbGVuZGFyKCkge1xuICAgICAgICB0aGlzLm9uQ2xvc2UuZW1pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVtaXRzIHRvZGF5IHNlbGVjdGlvbiBldmVudCBmb3IgdGhlIGNhbGVuZGFyLlxuICAgICAqL1xuICAgIHB1YmxpYyB0cmlnZ2VyVG9kYXlTZWxlY3Rpb24oKSB7XG4gICAgICAgIHRoaXMub25Ub2RheVNlbGVjdGlvbi5lbWl0KCk7XG4gICAgfVxufVxuIl19