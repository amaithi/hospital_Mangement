import { __decorate, __extends, __param, __values } from "tslib";
import { Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef, Optional, Inject, Directive } from '@angular/core';
import { Navigate } from './drop-down.common';
import { DropDownActionKey } from './drop-down.common';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
var NEXT_ID = 0;
/**
 * An abstract class, defining a drop-down component, with:
 * Properties for display styles and classes
 * A collection items of type `IgxDropDownItemBaseDirective`
 * Properties and methods for navigating (highlighting/focusing) items from the collection
 * Properties and methods for selecting items from the collection
 */
var IgxDropDownBaseDirective = /** @class */ (function (_super) {
    __extends(IgxDropDownBaseDirective, _super);
    function IgxDropDownBaseDirective(elementRef, cdr, _displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._focusedItem = null;
        _this._id = "igx-drop-down-" + NEXT_ID++;
        /**
         * Emitted when item selection is changing, before the selection completes
         *
         * ```html
         * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>
         * ```
         */
        _this.onSelection = new EventEmitter();
        /**
         * Gets/Sets the drop down's container max height.
         *
         * ```typescript
         * // get
         * let maxHeight = this.dropdown.maxHeight;
         * ```
         * ```html
         * <!--set-->
         * <igx-drop-down [maxHeight]='200px'></igx-drop-down>
         * ```
         */
        _this.maxHeight = null;
        /**
         * @hidden @internal
         */
        _this.cssClass = true;
        return _this;
    }
    Object.defineProperty(IgxDropDownBaseDirective.prototype, "scrollContainer", {
        /**
         * @hidden @internal
         * Get dropdown's html element of its scroll container
         */
        get: function () {
            return this.element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBaseDirective.prototype, "items", {
        /**
         * Get all non-header items
         *
         * ```typescript
         * let myDropDownItems = this.dropdown.items;
         * ```
         */
        get: function () {
            var e_1, _a;
            var items = [];
            if (this.children !== undefined) {
                try {
                    for (var _b = __values(this.children.toArray()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        if (!child.isHeader) {
                            items.push(child);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return items;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBaseDirective.prototype, "headers", {
        /**
         * Get all header items
         *
         * ```typescript
         * let myDropDownHeaderItems = this.dropdown.headers;
         * ```
         */
        get: function () {
            var e_2, _a;
            var headers = [];
            if (this.children !== undefined) {
                try {
                    for (var _b = __values(this.children.toArray()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        if (child.isHeader) {
                            headers.push(child);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            return headers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBaseDirective.prototype, "element", {
        /**
         * Get dropdown html element
         *
         * ```typescript
         * let myDropDownElement = this.dropdown.element;
         * ```
         */
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /** Keydown Handler */
    IgxDropDownBaseDirective.prototype.onItemActionKey = function (key, event) {
        switch (key) {
            case DropDownActionKey.ENTER:
            case DropDownActionKey.SPACE:
                this.selectItem(this.focusedItem, event);
                break;
            case DropDownActionKey.ESCAPE:
        }
    };
    /**
     * Emits onSelection with the target item & event
     * @hidden @internal
     * @param newSelection the item selected
     * @param event the event that triggered the call
     */
    IgxDropDownBaseDirective.prototype.selectItem = function (newSelection, event) {
        this.onSelection.emit({
            newSelection: newSelection,
            oldSelection: null,
            cancel: false
        });
    };
    Object.defineProperty(IgxDropDownBaseDirective.prototype, "focusedItem", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this._focusedItem;
        },
        /**
         * @hidden @internal
         */
        set: function (item) {
            this._focusedItem = item;
        },
        enumerable: true,
        configurable: true
    });
    IgxDropDownBaseDirective.prototype.navigate = function (direction, currentIndex) {
        var index = -1;
        if (this._focusedItem) {
            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;
        }
        var newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);
        this.navigateItem(newIndex);
    };
    IgxDropDownBaseDirective.prototype.getNearestSiblingFocusableItemIndex = function (startIndex, direction) {
        var index = startIndex;
        var items = this.items;
        while (items[index + direction] && items[index + direction].disabled) {
            index += direction;
        }
        index += direction;
        if (index >= 0 && index < items.length) {
            return index;
        }
        else {
            return -1;
        }
    };
    /**
     * Navigates to the item on the specified index
     * @param newIndex number - the index of the item in the `items` collection
     */
    IgxDropDownBaseDirective.prototype.navigateItem = function (newIndex) {
        if (newIndex !== -1) {
            var oldItem = this._focusedItem;
            var newItem = this.items[newIndex];
            if (oldItem) {
                oldItem.focused = false;
            }
            this.focusedItem = newItem;
            this.scrollToHiddenItem(newItem);
            this.focusedItem.focused = true;
        }
    };
    /**
     * @hidden @internal
     */
    IgxDropDownBaseDirective.prototype.navigateFirst = function () {
        this.navigate(Navigate.Down, -1);
    };
    /**
     * @hidden @internal
     */
    IgxDropDownBaseDirective.prototype.navigateLast = function () {
        this.navigate(Navigate.Up, this.items.length);
    };
    /**
     * @hidden @internal
     */
    IgxDropDownBaseDirective.prototype.navigateNext = function () {
        this.navigate(Navigate.Down);
    };
    /**
     * @hidden @internal
     */
    IgxDropDownBaseDirective.prototype.navigatePrev = function () {
        this.navigate(Navigate.Up);
    };
    IgxDropDownBaseDirective.prototype.scrollToHiddenItem = function (newItem) {
        var elementRect = newItem.element.nativeElement.getBoundingClientRect();
        var parentRect = this.scrollContainer.getBoundingClientRect();
        if (parentRect.top > elementRect.top) {
            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);
        }
        if (parentRect.bottom < elementRect.bottom) {
            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);
        }
    };
    IgxDropDownBaseDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        Output()
    ], IgxDropDownBaseDirective.prototype, "onSelection", void 0);
    __decorate([
        Input()
    ], IgxDropDownBaseDirective.prototype, "width", void 0);
    __decorate([
        Input()
    ], IgxDropDownBaseDirective.prototype, "height", void 0);
    __decorate([
        Input()
    ], IgxDropDownBaseDirective.prototype, "id", void 0);
    __decorate([
        Input(),
        HostBinding('style.maxHeight')
    ], IgxDropDownBaseDirective.prototype, "maxHeight", void 0);
    __decorate([
        HostBinding('class.igx-drop-down')
    ], IgxDropDownBaseDirective.prototype, "cssClass", void 0);
    IgxDropDownBaseDirective = __decorate([
        Directive({
            selector: '[igxDropDownBase]'
        }),
        __param(2, Optional()), __param(2, Inject(DisplayDensityToken))
    ], IgxDropDownBaseDirective);
    return IgxDropDownBaseDirective;
}(DisplayDensityBase));
export { IgxDropDownBaseDirective };
//# sourceMappingURL=data:application/json;base64,