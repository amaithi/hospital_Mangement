import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxAvatarModule } from '../avatar/avatar.component';
import { IgxIconModule } from '../icon/public_api';
import { IgxExpansionPanelComponent } from './expansion-panel.component';
import { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';
import { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';
import { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective, IgxExpansionPanelIconDirective } from './expansion-panel.directives';
/**
 * @hidden
 */
var IgxExpansionPanelModule = /** @class */ (function () {
    function IgxExpansionPanelModule() {
    }
    IgxExpansionPanelModule = __decorate([
        NgModule({
            declarations: [
                IgxExpansionPanelComponent,
                IgxExpansionPanelHeaderComponent,
                IgxExpansionPanelBodyComponent,
                IgxExpansionPanelDescriptionDirective,
                IgxExpansionPanelTitleDirective,
                IgxExpansionPanelIconDirective
            ],
            entryComponents: [],
            exports: [
                IgxExpansionPanelComponent,
                IgxExpansionPanelHeaderComponent,
                IgxExpansionPanelBodyComponent,
                IgxExpansionPanelDescriptionDirective,
                IgxExpansionPanelTitleDirective,
                IgxExpansionPanelIconDirective
            ],
            imports: [
                CommonModule,
                IgxRippleModule,
                IgxIconModule,
                IgxButtonModule,
                IgxAvatarModule
            ]
        })
    ], IgxExpansionPanelModule);
    return IgxExpansionPanelModule;
}());
export { IgxExpansionPanelModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZXhwYW5zaW9uLXBhbmVsL2V4cGFuc2lvbi1wYW5lbC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDeEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN0RixPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNsRixPQUFPLEVBQ0gscUNBQXFDLEVBQ3JDLCtCQUErQixFQUMvQiw4QkFBOEIsRUFDakMsTUFBTSw4QkFBOEIsQ0FBQztBQUV0Qzs7R0FFRztBQTRCSDtJQUFBO0lBQ0EsQ0FBQztJQURZLHVCQUF1QjtRQTNCbkMsUUFBUSxDQUFDO1lBQ1IsWUFBWSxFQUFFO2dCQUNaLDBCQUEwQjtnQkFDMUIsZ0NBQWdDO2dCQUNoQyw4QkFBOEI7Z0JBQzlCLHFDQUFxQztnQkFDckMsK0JBQStCO2dCQUMvQiw4QkFBOEI7YUFDL0I7WUFDRCxlQUFlLEVBQUUsRUFDaEI7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsMEJBQTBCO2dCQUMxQixnQ0FBZ0M7Z0JBQ2hDLDhCQUE4QjtnQkFDOUIscUNBQXFDO2dCQUNyQywrQkFBK0I7Z0JBQzdCLDhCQUE4QjthQUNqQztZQUNELE9BQU8sRUFBRTtnQkFDUCxZQUFZO2dCQUNaLGVBQWU7Z0JBQ2YsYUFBYTtnQkFDYixlQUFlO2dCQUNmLGVBQWU7YUFDaEI7U0FDRixDQUFDO09BQ1csdUJBQXVCLENBQ25DO0lBQUQsOEJBQUM7Q0FBQSxBQURELElBQ0M7U0FEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneFJpcHBsZU1vZHVsZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvcmlwcGxlL3JpcHBsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4QnV0dG9uTW9kdWxlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9idXR0b24vYnV0dG9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hBdmF0YXJNb2R1bGUgfSBmcm9tICcuLi9hdmF0YXIvYXZhdGFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9wdWJsaWNfYXBpJztcbmltcG9ydCB7IElneEV4cGFuc2lvblBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwuY29tcG9uZW50JztcbmltcG9ydCB7IElneEV4cGFuc2lvblBhbmVsSGVhZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwtaGVhZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hFeHBhbnNpb25QYW5lbEJvZHlDb21wb25lbnQgfSBmcm9tICcuL2V4cGFuc2lvbi1wYW5lbC1ib2R5LmNvbXBvbmVudCc7XG5pbXBvcnQge1xuICAgIElneEV4cGFuc2lvblBhbmVsRGVzY3JpcHRpb25EaXJlY3RpdmUsXG4gICAgSWd4RXhwYW5zaW9uUGFuZWxUaXRsZURpcmVjdGl2ZSxcbiAgICBJZ3hFeHBhbnNpb25QYW5lbEljb25EaXJlY3RpdmVcbn0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwuZGlyZWN0aXZlcyc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBJZ3hFeHBhbnNpb25QYW5lbENvbXBvbmVudCxcbiAgICBJZ3hFeHBhbnNpb25QYW5lbEhlYWRlckNvbXBvbmVudCxcbiAgICBJZ3hFeHBhbnNpb25QYW5lbEJvZHlDb21wb25lbnQsXG4gICAgSWd4RXhwYW5zaW9uUGFuZWxEZXNjcmlwdGlvbkRpcmVjdGl2ZSxcbiAgICBJZ3hFeHBhbnNpb25QYW5lbFRpdGxlRGlyZWN0aXZlLFxuICAgIElneEV4cGFuc2lvblBhbmVsSWNvbkRpcmVjdGl2ZVxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIElneEV4cGFuc2lvblBhbmVsQ29tcG9uZW50LFxuICAgIElneEV4cGFuc2lvblBhbmVsSGVhZGVyQ29tcG9uZW50LFxuICAgIElneEV4cGFuc2lvblBhbmVsQm9keUNvbXBvbmVudCxcbiAgICBJZ3hFeHBhbnNpb25QYW5lbERlc2NyaXB0aW9uRGlyZWN0aXZlLFxuICAgIElneEV4cGFuc2lvblBhbmVsVGl0bGVEaXJlY3RpdmUsXG4gICAgICBJZ3hFeHBhbnNpb25QYW5lbEljb25EaXJlY3RpdmVcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBJZ3hSaXBwbGVNb2R1bGUsXG4gICAgSWd4SWNvbk1vZHVsZSxcbiAgICBJZ3hCdXR0b25Nb2R1bGUsXG4gICAgSWd4QXZhdGFyTW9kdWxlXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4RXhwYW5zaW9uUGFuZWxNb2R1bGUge1xufVxuIl19