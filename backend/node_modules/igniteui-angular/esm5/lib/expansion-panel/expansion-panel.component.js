import { __decorate } from "tslib";
import { Component, ChangeDetectorRef, EventEmitter, HostBinding, Input, Output, ContentChild, AfterContentInit } from '@angular/core';
import { AnimationBuilder, AnimationReferenceMetadata, useAnimation } from '@angular/animations';
import { growVerOut, growVerIn } from '../animations/main';
import { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';
import { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';
import { IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';
var NEXT_ID = 0;
var IgxExpansionPanelComponent = /** @class */ (function () {
    function IgxExpansionPanelComponent(cdr, builder) {
        this.cdr = cdr;
        this.builder = builder;
        this._collapsed = true;
        /**
         * Sets/gets the animation settings of the expansion panel component
         * Open and Close animation should be passed
         *
         * Get
         * ```typescript
         *  const currentAnimations = this.panel.animationSettings;
         * ```
         * Set
         * ```typescript
         *  import { slideInLeft, slideOutRight } from 'igniteui-angular';
         *  ...
         *  this.panel.animationsSettings = {
         *      openAnimation: slideInLeft,
         *      closeAnimation: slideOutRight
         * };
         * ```
         * or via template
         * ```typescript
         *  import { slideInLeft, slideOutRight } from 'igniteui-angular';
         *  ...
         *  myCustomAnimationObject = {
         *      openAnimation: slideInLeft,
         *      closeAnimation: slideOutRight
         * };
         * ```html
         *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>
         *  ...
         *  </igx-expansion-panel>
         * ```
         */
        this.animationSettings = {
            openAnimation: growVerIn,
            closeAnimation: growVerOut
        };
        /**
         * Sets/gets the `id` of the expansion panel component.
         * If not set, `id` will have value `"igx-expansion-panel-0"`;
         * ```html
         * <igx-expansion-panel id = "my-first-expansion-panel"></igx-expansion-panel>
         * ```
         * ```typescript
         * let panelId =  this.panel.id;
         * ```
         * @memberof IgxExpansionPanelComponent
         */
        this.id = "igx-expansion-panel-" + NEXT_ID++;
        /**
         * @hidden
         */
        this.cssClass = 'igx-expansion-panel';
        /**
         * @hidden
         */
        this.collapsedChange = new EventEmitter();
        /**
         * Emitted when the expansion panel finishes collapsing
         * ```typescript
         *  handleCollapsed(event: {
         *  panel: IgxExpansionPanelComponent,
         *  event: Event
         * })
         * ```
         * ```html
         *  <igx-expansion-panel (onCollapsed)="handleCollapsed($event)">
         *      ...
         *  </igx-expansion-panel>
         * ```
         */
        this.onCollapsed = new EventEmitter();
        /**
         * Emitted when the expansion panel finishes expanding
         * ```typescript
         *  handleExpanded(event: {
         *  panel: IgxExpansionPanelComponent,
         *  event: Event
         * })
         * ```
         * ```html
         *  <igx-expansion-panel (onExpanded)="handleExpanded($event)">
         *      ...
         *  </igx-expansion-panel>
         * ```
         */
        this.onExpanded = new EventEmitter();
    }
    IgxExpansionPanelComponent_1 = IgxExpansionPanelComponent;
    Object.defineProperty(IgxExpansionPanelComponent.prototype, "collapsed", {
        /**
         * Gets/sets whether the component is collapsed (its content is hidden)
         * Get
         * ```typescript
         *  const myPanelState: boolean = this.panel.collapsed;
         * ```
         * Set
         * ```html
         *  this.panel.collapsed = true;
         * ```
         *
         * Two-way data binding:
         * ```html
         * <igx-expansion-panel [(collapsed)]="model.isCollapsed"></igx-expansion-panel>
         * ```
         */
        get: function () {
            return this._collapsed;
        },
        set: function (value) {
            this._collapsed = value;
            this.collapsedChange.emit(this._collapsed);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExpansionPanelComponent.prototype, "headerId", {
        /**
         * @hidden
         */
        get: function () {
            return this.header ? this.id + "-header" : '';
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    IgxExpansionPanelComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.body && this.header) {
            // schedule at end of turn:
            Promise.resolve().then(function () {
                _this.body.labelledBy = _this.body.labelledBy || _this.headerId;
                _this.body.label = _this.body.label || _this.id + '-region';
            });
        }
    };
    IgxExpansionPanelComponent.prototype.playOpenAnimation = function (cb) {
        if (!this.body) { // if not body element is passed, there is nothing to animate
            return;
        }
        var animation = useAnimation(this.animationSettings.openAnimation);
        var animationBuilder = this.builder.build(animation);
        var openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);
        openAnimationPlayer.onDone(function () {
            cb();
            openAnimationPlayer.reset();
        });
        openAnimationPlayer.play();
    };
    IgxExpansionPanelComponent.prototype.playCloseAnimation = function (cb) {
        if (!this.body) { // if not body element is passed, there is nothing to animate
            return;
        }
        var animation = useAnimation(this.animationSettings.closeAnimation);
        var animationBuilder = this.builder.build(animation);
        var closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);
        closeAnimationPlayer.onDone(function () {
            cb();
            closeAnimationPlayer.reset();
        });
        closeAnimationPlayer.play();
    };
    /**
     * Collapses the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.collapse($event)">Collpase Panel</button>
     * ```
     */
    IgxExpansionPanelComponent.prototype.collapse = function (evt) {
        var _this = this;
        if (this.collapsed) { // If expansion panel is already collapsed, do nothing
            return;
        }
        this.playCloseAnimation(function () {
            _this.onCollapsed.emit({ event: evt, panel: _this });
            _this.collapsed = true;
        });
    };
    /**
     * Expands the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.expand($event)">Expand Panel</button>
     * ```
     */
    IgxExpansionPanelComponent.prototype.expand = function (evt) {
        var _this = this;
        if (!this.collapsed) { // If the panel is already opened, do nothing
            return;
        }
        this.collapsed = false;
        this.cdr.detectChanges();
        this.playOpenAnimation(function () {
            _this.onExpanded.emit({ event: evt, panel: _this });
        });
    };
    /**
     * Toggles the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button (click)="myPanel.toggle($event)">Expand Panel</button>
     * ```
     */
    IgxExpansionPanelComponent.prototype.toggle = function (evt) {
        if (this.collapsed) {
            this.open(evt);
        }
        else {
            this.close(evt);
        }
    };
    IgxExpansionPanelComponent.prototype.open = function (evt) {
        this.expand(evt);
    };
    IgxExpansionPanelComponent.prototype.close = function (evt) {
        this.collapse(evt);
    };
    var IgxExpansionPanelComponent_1;
    IgxExpansionPanelComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: AnimationBuilder }
    ]; };
    __decorate([
        Input()
    ], IgxExpansionPanelComponent.prototype, "animationSettings", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxExpansionPanelComponent.prototype, "id", void 0);
    __decorate([
        HostBinding('class.igx-expansion-panel')
    ], IgxExpansionPanelComponent.prototype, "cssClass", void 0);
    __decorate([
        Input()
    ], IgxExpansionPanelComponent.prototype, "collapsed", null);
    __decorate([
        Output()
    ], IgxExpansionPanelComponent.prototype, "collapsedChange", void 0);
    __decorate([
        Output()
    ], IgxExpansionPanelComponent.prototype, "onCollapsed", void 0);
    __decorate([
        Output()
    ], IgxExpansionPanelComponent.prototype, "onExpanded", void 0);
    __decorate([
        ContentChild(IgxExpansionPanelBodyComponent, { read: IgxExpansionPanelBodyComponent })
    ], IgxExpansionPanelComponent.prototype, "body", void 0);
    __decorate([
        ContentChild(IgxExpansionPanelHeaderComponent, { read: IgxExpansionPanelHeaderComponent })
    ], IgxExpansionPanelComponent.prototype, "header", void 0);
    IgxExpansionPanelComponent = IgxExpansionPanelComponent_1 = __decorate([
        Component({
            selector: 'igx-expansion-panel',
            template: "<ng-content select=\"igx-expansion-panel-header\"></ng-content>\n<ng-content *ngIf=\"!collapsed\" select=\"igx-expansion-panel-body\"></ng-content>\n",
            providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent_1 }]
        })
    ], IgxExpansionPanelComponent);
    return IgxExpansionPanelComponent;
}());
export { IgxExpansionPanelComponent };
//# sourceMappingURL=data:application/json;base64,