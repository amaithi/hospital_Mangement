import { __decorate, __param } from "tslib";
import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, Inject } from '@angular/core';
import { IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';
var IgxExpansionPanelBodyComponent = /** @class */ (function () {
    function IgxExpansionPanelBodyComponent(panel, element, cdr) {
        this.panel = panel;
        this.element = element;
        this.cdr = cdr;
        this._labelledBy = '';
        this._label = '';
        /**
         * @hidden
         */
        this.cssClass = "igx-expansion-panel__body";
        /**
         * Gets/sets the `role` attribute of the panel body
         * Default is 'region';
         * Get
         * ```typescript
         *  const currentRole = this.panel.body.role;
         * ```
         * Set
         * ```typescript
         *  this.panel.body.role = 'content';
         * ```
         * ```html
         *  <igx-expansion-panel-body [role]="'custom'"></igx-expansion-panel-body>
         * ```
         */
        this.role = 'region';
    }
    Object.defineProperty(IgxExpansionPanelBodyComponent.prototype, "label", {
        /**
         * Gets the `aria-label` attribute of the panel body
         * Defaults to the panel id with '-region' in the end;
         * Get
         * ```typescript
         *  const currentLabel = this.panel.body.label;
         * ```
         */
        get: function () {
            return this._label || this.panel.id + '-region';
        },
        /**
         * Sets the `aria-label` attribute of the panel body
         * ```typescript
         *  this.panel.body.label = 'my-custom-label';
         * ```
         * ```html
         *  <igx-expansion-panel-body [label]="'my-custom-label'"></igx-expansion-panel-body>
         * ```
         */
        set: function (val) {
            this._label = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExpansionPanelBodyComponent.prototype, "labelledBy", {
        /**
         * Gets the `aria-labelledby` attribute of the panel body
         * Defaults to the panel header id;
         * Get
         * ```typescript
         *  const currentLabel = this.panel.body.labelledBy;
         * ```
         */
        get: function () {
            return this._labelledBy;
        },
        /**
         * Sets the `aria-labelledby` attribute of the panel body
         * ```typescript
         *  this.panel.body.labelledBy = 'my-custom-id';
         * ```
         * ```html
         *  <igx-expansion-panel-body [labelledBy]="'my-custom-id'"></igx-expansion-panel-body>
         * ```
         */
        set: function (val) {
            this._labelledBy = val;
        },
        enumerable: true,
        configurable: true
    });
    IgxExpansionPanelBodyComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_EXPANSION_PANEL_COMPONENT,] }] },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        HostBinding('class.igx-expansion-panel__body')
    ], IgxExpansionPanelBodyComponent.prototype, "cssClass", void 0);
    __decorate([
        Input(),
        HostBinding('attr.aria-label')
    ], IgxExpansionPanelBodyComponent.prototype, "label", null);
    __decorate([
        Input(),
        HostBinding('attr.aria-labelledby')
    ], IgxExpansionPanelBodyComponent.prototype, "labelledBy", null);
    __decorate([
        Input(),
        HostBinding('attr.role')
    ], IgxExpansionPanelBodyComponent.prototype, "role", void 0);
    IgxExpansionPanelBodyComponent = __decorate([
        Component({
            // tslint:disable-next-line:directive-selector
            selector: 'igx-expansion-panel-body',
            template: "<ng-content></ng-content>"
        }),
        __param(0, Inject(IGX_EXPANSION_PANEL_COMPONENT))
    ], IgxExpansionPanelBodyComponent);
    return IgxExpansionPanelBodyComponent;
}());
export { IgxExpansionPanelBodyComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLWJvZHkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9leHBhbnNpb24tcGFuZWwvZXhwYW5zaW9uLXBhbmVsLWJvZHkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQXlCLDZCQUE2QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFPaEc7SUFHSSx3Q0FDa0QsS0FBNEIsRUFDbkUsT0FBbUIsRUFBUyxHQUFzQjtRQURYLFVBQUssR0FBTCxLQUFLLENBQXVCO1FBQ25FLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUpyRCxnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUNqQixXQUFNLEdBQUcsRUFBRSxDQUFDO1FBS3BCOztXQUVHO1FBRUksYUFBUSxHQUFHLDJCQUEyQixDQUFDO1FBc0Q5Qzs7Ozs7Ozs7Ozs7Ozs7V0FjRztRQUdJLFNBQUksR0FBRyxRQUFRLENBQUM7SUE1RXZCLENBQUM7SUFpQkQsc0JBQVcsaURBQUs7UUFWaEI7Ozs7Ozs7V0FPRzthQUdIO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztRQUNwRCxDQUFDO1FBQ0Q7Ozs7Ozs7O1dBUUc7YUFDSCxVQUFpQixHQUFXO1lBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQ3RCLENBQUM7OztPQVpBO0lBd0JELHNCQUFXLHNEQUFVO1FBVnJCOzs7Ozs7O1dBT0c7YUFHSDtZQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QixDQUFDO1FBQ0Q7Ozs7Ozs7O1dBUUc7YUFDSCxVQUFzQixHQUFXO1lBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO1FBQzNCLENBQUM7OztPQVpBOztnREEvQ0ksTUFBTSxTQUFDLDZCQUE2QjtnQkFDckIsVUFBVTtnQkFBYyxpQkFBaUI7O0lBTTdEO1FBREMsV0FBVyxDQUFDLGlDQUFpQyxDQUFDO29FQUNEO0lBWTlDO1FBRkMsS0FBSyxFQUFFO1FBQ1AsV0FBVyxDQUFDLGlCQUFpQixDQUFDOytEQUc5QjtJQXdCRDtRQUZDLEtBQUssRUFBRTtRQUNQLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQztvRUFHbkM7SUErQkQ7UUFGQyxLQUFLLEVBQUU7UUFDUCxXQUFXLENBQUMsV0FBVyxDQUFDO2dFQUNGO0lBbEZkLDhCQUE4QjtRQUwxQyxTQUFTLENBQUM7WUFDUCw4Q0FBOEM7WUFDOUMsUUFBUSxFQUFFLDBCQUEwQjtZQUNwQyxRQUFRLEVBQUUsMkJBQTJCO1NBQ3hDLENBQUM7UUFLTyxXQUFBLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO09BSmpDLDhCQUE4QixDQW1GMUM7SUFBRCxxQ0FBQztDQUFBLEFBbkZELElBbUZDO1NBbkZZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIEVsZW1lbnRSZWYsIElucHV0LCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hFeHBhbnNpb25QYW5lbEJhc2UsIElHWF9FWFBBTlNJT05fUEFORUxfQ09NUE9ORU5UIH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwuY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnaWd4LWV4cGFuc2lvbi1wYW5lbC1ib2R5JyxcbiAgICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gXG59KVxuZXhwb3J0IGNsYXNzIElneEV4cGFuc2lvblBhbmVsQm9keUNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfbGFiZWxsZWRCeSA9ICcnO1xuICAgIHByaXZhdGUgX2xhYmVsID0gJyc7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoSUdYX0VYUEFOU0lPTl9QQU5FTF9DT01QT05FTlQpIHB1YmxpYyBwYW5lbDogSWd4RXhwYW5zaW9uUGFuZWxCYXNlLFxuICAgICAgICBwdWJsaWMgZWxlbWVudDogRWxlbWVudFJlZiwgcHVibGljIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWV4cGFuc2lvbi1wYW5lbF9fYm9keScpXG4gICAgcHVibGljIGNzc0NsYXNzID0gYGlneC1leHBhbnNpb24tcGFuZWxfX2JvZHlgO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYGFyaWEtbGFiZWxgIGF0dHJpYnV0ZSBvZiB0aGUgcGFuZWwgYm9keVxuICAgICAqIERlZmF1bHRzIHRvIHRoZSBwYW5lbCBpZCB3aXRoICctcmVnaW9uJyBpbiB0aGUgZW5kO1xuICAgICAqIEdldFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgY29uc3QgY3VycmVudExhYmVsID0gdGhpcy5wYW5lbC5ib2R5LmxhYmVsO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtbGFiZWwnKVxuICAgIHB1YmxpYyBnZXQgbGFiZWwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsIHx8IHRoaXMucGFuZWwuaWQgKyAnLXJlZ2lvbic7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGBhcmlhLWxhYmVsYCBhdHRyaWJ1dGUgb2YgdGhlIHBhbmVsIGJvZHlcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIHRoaXMucGFuZWwuYm9keS5sYWJlbCA9ICdteS1jdXN0b20tbGFiZWwnO1xuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1leHBhbnNpb24tcGFuZWwtYm9keSBbbGFiZWxdPVwiJ215LWN1c3RvbS1sYWJlbCdcIj48L2lneC1leHBhbnNpb24tcGFuZWwtYm9keT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGxhYmVsKHZhbDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2xhYmVsID0gdmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGBhcmlhLWxhYmVsbGVkYnlgIGF0dHJpYnV0ZSBvZiB0aGUgcGFuZWwgYm9keVxuICAgICAqIERlZmF1bHRzIHRvIHRoZSBwYW5lbCBoZWFkZXIgaWQ7XG4gICAgICogR2V0XG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBjb25zdCBjdXJyZW50TGFiZWwgPSB0aGlzLnBhbmVsLmJvZHkubGFiZWxsZWRCeTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWxhYmVsbGVkYnknKVxuICAgIHB1YmxpYyBnZXQgbGFiZWxsZWRCeSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWxsZWRCeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYGFyaWEtbGFiZWxsZWRieWAgYXR0cmlidXRlIG9mIHRoZSBwYW5lbCBib2R5XG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICB0aGlzLnBhbmVsLmJvZHkubGFiZWxsZWRCeSA9ICdteS1jdXN0b20taWQnO1xuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1leHBhbnNpb24tcGFuZWwtYm9keSBbbGFiZWxsZWRCeV09XCInbXktY3VzdG9tLWlkJ1wiPjwvaWd4LWV4cGFuc2lvbi1wYW5lbC1ib2R5PlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgbGFiZWxsZWRCeSh2YWw6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9sYWJlbGxlZEJ5ID0gdmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMvc2V0cyB0aGUgYHJvbGVgIGF0dHJpYnV0ZSBvZiB0aGUgcGFuZWwgYm9keVxuICAgICAqIERlZmF1bHQgaXMgJ3JlZ2lvbic7XG4gICAgICogR2V0XG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBjb25zdCBjdXJyZW50Um9sZSA9IHRoaXMucGFuZWwuYm9keS5yb2xlO1xuICAgICAqIGBgYFxuICAgICAqIFNldFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgdGhpcy5wYW5lbC5ib2R5LnJvbGUgPSAnY29udGVudCc7XG4gICAgICogYGBgXG4gICAgICogYGBgaHRtbFxuICAgICAqICA8aWd4LWV4cGFuc2lvbi1wYW5lbC1ib2R5IFtyb2xlXT1cIidjdXN0b20nXCI+PC9pZ3gtZXhwYW5zaW9uLXBhbmVsLWJvZHk+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpXG4gICAgcHVibGljIHJvbGUgPSAncmVnaW9uJztcbn1cbiJdfQ==