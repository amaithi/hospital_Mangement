import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { AfterContentInit, AfterViewInit, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Input, NgModule, Output, QueryList, TemplateRef, ViewChild, ViewChildren, OnDestroy } from '@angular/core';
import { IgxBadgeModule } from '../badge/badge.component';
import { IgxIconModule } from '../icon/public_api';
var NEXT_ID = 0;
var IgxTabTemplateDirective = /** @class */ (function () {
    function IgxTabTemplateDirective(template) {
        this.template = template;
    }
    IgxTabTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxTabTemplateDirective = __decorate([
        Directive({
            selector: '[igxTab]'
        })
    ], IgxTabTemplateDirective);
    return IgxTabTemplateDirective;
}());
export { IgxTabTemplateDirective };
/**
 * **Ignite UI for Angular Tab Bar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)
 *
 * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.
 *
 * Example:
 * ```html
 * <igx-bottom-nav>
 *   <igx-tab-panel label="Tab 1">Tab 1 Content</igx-tab-panel>
 *   <igx-tab-panel label="Tab 2">Tab 2 Content</igx-tab-panel>
 *   <igx-tab-panel label="Tab 3">Tab 3 Content</igx-tab-panel>
 * </igx-bottom-nav>
 * ```
 */
var IgxBottomNavComponent = /** @class */ (function () {
    function IgxBottomNavComponent(_element) {
        this._element = _element;
        this._currentBottomNavId = NEXT_ID++;
        /**
         * Sets/gets the `id` of the tab bar.
         * If not set, the `id` of the first tab bar component will be `"igx-bottom-nav-0"`.
         * ```html
         * <igx-bottom-nav id = "my-first-tab-bar"></igx-bottom-nav>
         * ```
         * ```typescript
         * let tabBarId =  this.tabBar.id;
         * ```
         * @memberof IgxBottomNavComponent
         */
        this.id = "igx-bottom-nav-" + this._currentBottomNavId;
        /**
         * Emits an event when a new tab is selected.
         * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.
         * ```html
         * <igx-bottom-nav (onTableSelected) = "onTabSelected($event)"><igx-bottom-nav>
         * ```
         * @memberof IgxBottomNavComponent
         */
        this.onTabSelected = new EventEmitter();
        /**
         * Emits an event when a tab is deselected.
         * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.
         * ```html
         * <igx-bottom-nav (onTabDeselected) = "onTabDeselected($event)"><igx-bottom-nav>
         * ```
         * @memberof IgxBottomNavComponent
         */
        this.onTabDeselected = new EventEmitter();
        /**
         * Gets the `index` of selected tab/panel in the respective collection.
         * ```typescript
         * let index =  this.tabBar.selectedIndex;
         * ```
         * @memberof IgxBottomNavComponent
         */
        this.selectedIndex = -1;
        /**
         * @hidden
         */
        this._itemStyle = 'igx-bottom-nav';
    }
    Object.defineProperty(IgxBottomNavComponent.prototype, "tabs", {
        /**
         * Gets the `IgxTabComponent` elements for this bottom navigation component.
         * First try to get them as content children if not available get them as view children.
         * ```typescript
         * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;
         * ```
         * @memberof IgxBottomNavComponent
         */
        get: function () {
            return this.hasContentTabs ? this.contentTabs : this.viewTabs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBottomNavComponent.prototype, "itemStyle", {
        /**
         * Gets the `itemStyle` of the tab bar.
         * ```typescript
         * let itemStyle =  this.tabBar.itemStyle;
         * ```
         * @memberof IgxBottomNavComponent
         */
        get: function () {
            return this._itemStyle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBottomNavComponent.prototype, "hasContentTabs", {
        /**
         * @hidden
         */
        get: function () {
            return (this.contentTabs && this.contentTabs.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBottomNavComponent.prototype, "selectedTab", {
        /**
         * Gets the selected tab in the tab bar.
         * ```typescript
         * let tab =  this.tabBar.selectedTab;
         * ```
         * @memberof IgxBottomNavComponent
         */
        get: function () {
            if (this.tabs && this.selectedIndex !== undefined) {
                return this.tabs.toArray()[this.selectedIndex];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxBottomNavComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.setPanelsAttributes();
        this._panelsChanges$ = this.panels.changes.subscribe(function () {
            _this.setPanelsAttributes();
        });
        // initial selection
        setTimeout(function () {
            if (_this.selectedIndex === -1) {
                var selectablePanels = _this.panels.filter(function (p) { return !p.disabled; });
                var panel = selectablePanels[0];
                if (panel) {
                    panel.select();
                }
            }
        }, 0);
    };
    /**
     * @hidden
     */
    IgxBottomNavComponent.prototype.ngOnDestroy = function () {
        if (this._panelsChanges$) {
            this._panelsChanges$.unsubscribe();
        }
    };
    IgxBottomNavComponent.prototype.setPanelsAttributes = function () {
        var panelsArray = Array.from(this.panels);
        for (var index = 0; index < this.panels.length; index++) {
            var tabPanels = panelsArray[index];
            tabPanels.nativeElement.setAttribute('id', this.getTabPanelId(index));
            tabPanels.nativeElement.setAttribute('aria-labelledby', this.getTabId(index));
        }
    };
    /**
     * @hidden
     */
    IgxBottomNavComponent.prototype._selectedPanelHandler = function (args) {
        var _this = this;
        if (this.hasContentTabs) {
            this.selectedIndex = args.tab.index;
            this.contentTabs.forEach(function (t) {
                if (t !== args.tab) {
                    _this._deselectTab(t);
                }
            });
        }
        else {
            if (args.panel) {
                this.selectedIndex = args.panel.index;
                this.panels.forEach(function (p) {
                    if (p.index !== _this.selectedIndex) {
                        _this._deselectPanel(p);
                    }
                });
            }
        }
    };
    /**
     * @hidden
     */
    IgxBottomNavComponent.prototype._deselectPanel = function (panel) {
        // Cannot deselect the selected tab - this will mean that there will be not selected tab left
        if (panel.disabled || this.selectedTab.index === panel.index) {
            return;
        }
        panel.isSelected = false;
        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel: panel });
    };
    IgxBottomNavComponent.prototype._deselectTab = function (aTab) {
        aTab.isSelected = false;
        this.onTabDeselected.emit({ tab: aTab, panel: null });
    };
    /**
     * @hidden
     */
    IgxBottomNavComponent.prototype.getTabId = function (index) {
        return "igx-tab-" + this._currentBottomNavId + "-" + index;
    };
    /**
     * @hidden
     */
    IgxBottomNavComponent.prototype.getTabPanelId = function (index) {
        return "igx-tab-panel-" + this._currentBottomNavId + "-" + index;
    };
    IgxBottomNavComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        ViewChildren(forwardRef(function () { return IgxTabComponent; }))
    ], IgxBottomNavComponent.prototype, "viewTabs", void 0);
    __decorate([
        ContentChildren(forwardRef(function () { return IgxTabComponent; }))
    ], IgxBottomNavComponent.prototype, "contentTabs", void 0);
    __decorate([
        ContentChildren(forwardRef(function () { return IgxTabPanelComponent; }))
    ], IgxBottomNavComponent.prototype, "panels", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxBottomNavComponent.prototype, "id", void 0);
    __decorate([
        Output()
    ], IgxBottomNavComponent.prototype, "onTabSelected", void 0);
    __decorate([
        Output()
    ], IgxBottomNavComponent.prototype, "onTabDeselected", void 0);
    __decorate([
        HostListener('onTabSelected', ['$event'])
    ], IgxBottomNavComponent.prototype, "_selectedPanelHandler", null);
    IgxBottomNavComponent = __decorate([
        Component({
            selector: 'igx-bottom-nav',
            template: "<div *ngIf=\"!hasContentTabs\">\n    <ng-content></ng-content>\n</div>\n<div #tablist class=\"{{itemStyle}}__menu {{itemStyle}}__menu--bottom\" role=\"tablist\" aria-orientation=\"horizontal\">\n    <ng-container *ngIf=\"!hasContentTabs\">\n        <igx-tab *ngFor=\"let panel of panels; let i = index\"\n            [relatedPanel]=\"panel\"\n            [autoGenerated]=\"true\"\n            [id]=\"getTabId(i)\"\n            [attr.aria-controls]=\"getTabPanelId(i)\">>\n        </igx-tab>\n    </ng-container>\n    <ng-content select=\"igx-tab\"></ng-content>\n</div>\n",
            styles: ["\n        :host {\n            display: block;\n        }\n    "]
        })
    ], IgxBottomNavComponent);
    return IgxBottomNavComponent;
}());
export { IgxBottomNavComponent };
// ================================= IgxTabPanelComponent ======================================
var IgxTabPanelComponent = /** @class */ (function () {
    function IgxTabPanelComponent(_tabBar, _element) {
        this._tabBar = _tabBar;
        this._element = _element;
        /**
         * @hidden
         */
        this._itemStyle = 'igx-tab-panel';
        /**
         * @hidden
         */
        this._isSelected = false;
        /**
         * Gets the role of the tab panel.
         * ```typescript
         * let tabPanelRole = this.tabPanel.role;
         * ```
         * @memberof IgxTabPanelComponent
         */
        this.role = 'tabpanel';
    }
    Object.defineProperty(IgxTabPanelComponent.prototype, "styleClass", {
        /**
         * Gets whether a tab panel will have `igx-bottom-nav__panel` class.
         * ```typescript
         * let styleClass = this.tabPanel.styleClass;
         * ```
         * @memberof IgxTabPanelComponent
         */
        get: function () {
            return (!this.isSelected);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "isSelected", {
        /**
         * Sets/gets whether a tab panel is selected.
         * ```typescript
         * this.tabPanel.isSelected = true;
         * ```
         * ```typescript
         * let isSelected =  this.tabPanel.isSelected;
         * ```
         * @memberof IgxTabPanelComponent
         */
        get: function () {
            return this._isSelected;
        },
        set: function (newValue) {
            if (this._isSelected !== newValue) {
                if (newValue) {
                    this.select();
                }
                else {
                    this._isSelected = newValue;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "itemStyle", {
        /**
         * Gets the `itemStyle` of the tab panel.
         * ```typescript
         * let itemStyle = this.tabPanel.itemStyle;
         * ```
         * @memberof IgxTabPanelComponent
         */
        get: function () {
            return this._itemStyle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "nativeElement", {
        /**
         * Returns the native element of the tab-panel component
         * ```typescript
         *  const mytabPanelElement: HTMLElement = tabPanel.nativeElement;
         * ```
         */
        get: function () {
            return this._element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "relatedTab", {
        /**
         * Gets the tab associated with the panel.
         * ```typescript
         * let tab = this.tabPanel.relatedTab;
         * ```
         * @memberof IgxTabPanelComponent
         */
        get: function () {
            if (this._tabBar.tabs) {
                return this._tabBar.tabs.toArray()[this.index];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "changesCount", {
        /**
         * Gets the changes and updates accordingly applied to the tab/panel.
         *
         * @memberof IgxTabComponent
         */
        get: function () {
            return this.relatedTab ? this.relatedTab.changesCount : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "index", {
        /**
         * Gets the index of a panel in the panels collection.
         * ```typescript
         * let panelIndex =  this.tabPanel.index
         * ```
         * @memberof IgxTabPanelComponent
         */
        get: function () {
            if (this._tabBar.panels) {
                return this._tabBar.panels.toArray().indexOf(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "customTabTemplate", {
        /**
         * Gets the tab template.
         * ```typescript
         * let tabTemplate = this.tabPanel.customTabTemplate
         * ```
         * @memberof IgxTabPanelComponent
         */
        get: function () {
            return this._tabTemplate;
        },
        /**
         * Sets the tab template.
         * ```typescript
         * this.tabPanel.customTabTemplate(tabTemplate);
         * ```
         * @memberof IgxTabPanelComponent
         */
        set: function (template) {
            this._tabTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxTabPanelComponent.prototype.ngAfterContentInit = function () {
        if (this.tabTemplate) {
            this._tabTemplate = this.tabTemplate.template;
        }
    };
    /**
     * Selects the current tab and the tab panel.
     * ```typescript
     * this.tabPanel.select();
     * ```
     * @memberof IgxTabPanelComponent
     */
    IgxTabPanelComponent.prototype.select = function () {
        if (this.disabled || this._tabBar.selectedIndex === this.index) {
            return;
        }
        this._isSelected = true;
        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });
    };
    IgxTabPanelComponent.ctorParameters = function () { return [
        { type: IgxBottomNavComponent },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], IgxTabPanelComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], IgxTabPanelComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], IgxTabPanelComponent.prototype, "disabled", void 0);
    __decorate([
        HostBinding('attr.role')
    ], IgxTabPanelComponent.prototype, "role", void 0);
    __decorate([
        HostBinding('class.igx-bottom-nav__panel')
    ], IgxTabPanelComponent.prototype, "styleClass", null);
    __decorate([
        HostBinding('class.igx-bottom-nav__panel--selected')
    ], IgxTabPanelComponent.prototype, "isSelected", null);
    __decorate([
        ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })
    ], IgxTabPanelComponent.prototype, "tabTemplate", void 0);
    IgxTabPanelComponent = __decorate([
        Component({
            selector: 'igx-tab-panel',
            template: "<ng-content></ng-content>\n"
        })
    ], IgxTabPanelComponent);
    return IgxTabPanelComponent;
}());
export { IgxTabPanelComponent };
// ======================================= IgxTabComponent ==========================================
var IgxTabComponent = /** @class */ (function () {
    function IgxTabComponent(_tabBar, _element) {
        this._tabBar = _tabBar;
        this._element = _element;
        /**
         * Gets the `role` attribute.
         * ```typescript
         * let tabRole = this.tab.role;
         * ```
         * @memberof IgxTabComponent
         */
        this.role = 'tab';
        /**
         * @hidden @internal
         */
        this.ariaLabel = this.label;
        /**
         * @hidden @internal
         */
        this.ariaDisabled = this.disabled;
        /**
         * @hidden @internal
         */
        this.ariaSelected = this.isSelected;
        /**
         * @hidden
         */
        this._changesCount = 0; // changes and updates accordingly applied to the tab.
        this._disabled = false;
        this._selected = false;
    }
    Object.defineProperty(IgxTabComponent.prototype, "label", {
        /**
         * Sets/gets the `label` of the tab panel.
         * ```html
         * <igx-tab [label] = "'Tab label'"><igx-tab>
         * ```
         * ```typescript
         * let tabLabel = this.tab.label;
         * ```
         * @memberof IgxTabComponent
         */
        get: function () {
            return this.relatedPanel ? this.relatedPanel.label : this._label;
        },
        set: function (newValue) {
            if (this.relatedPanel) {
                this.relatedPanel.label = newValue;
            }
            this._label = newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "icon", {
        /**
         * Sets/gets  the `icon` of the tab panel.
         * ```html
         * <igx-tab [icon] = "tab_icon"><igx-tab>
         * ```
         * ```typescript
         * let tabIcon =  this.tab.icon;
         * ```
         * @memberof IgxTabComponent
         */
        get: function () {
            return this.relatedPanel ? this.relatedPanel.icon : this._icon;
        },
        set: function (newValue) {
            if (this.relatedPanel) {
                this.relatedPanel.icon = newValue;
            }
            this._icon = newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "changesCount", {
        /**
         * Gets the changes and updates accordingly applied to the tab.
         *
         * @memberof IgxTabComponent
         */
        get: function () {
            return this._changesCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "disabled", {
        /**
         * Gets whether the tab is disabled.
         * ```typescript
         * let isDisabled = this.tab.disabled;
         * ```
         * @memberof IgxTabComponent
         */
        get: function () {
            return this.relatedPanel ? this.relatedPanel.disabled : this._disabled;
        },
        set: function (newValue) {
            if (this.relatedPanel) {
                this.relatedPanel.disabled = newValue;
            }
            else {
                this._disabled = newValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "isSelected", {
        get: function () {
            return this.relatedPanel ? this.relatedPanel.isSelected : this._selected;
        },
        /**
         * Gets whether the tab is selected.
         * ```typescript
         * let isSelected  = this.tab.isSelected;
         * ```
         * @memberof IgxTabComponent
         */
        set: function (newValue) {
            if (this.relatedPanel) {
                this.relatedPanel.isSelected = newValue;
            }
            else if (this._selected !== newValue) {
                this._selected = newValue;
                if (this._selected) {
                    this._tabBar.onTabSelected.emit({ tab: this, panel: null });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "cssClassSelected", {
        get: function () {
            return this.isSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "cssClassDisabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "cssClass", {
        get: function () {
            return (!this.disabled && !this.isSelected);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "index", {
        /**
         * Gets the `index` of the tab.
         * ```typescript
         * let tabIndex = this.tab.index;
         * ```
         * @memberof IgxTabComponent
         */
        get: function () {
            if (this._tabBar.tabs) {
                return this._tabBar.tabs.toArray().indexOf(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "template", {
        /**
         * Returns the `template` for this IgxTabComponent.
         * ```typescript
         * let tabItemTemplate = this.tabItem.template;
         * ```
         * @memberof IgxTabComponent
         */
        get: function () {
            if (this.relatedPanel && this.relatedPanel.customTabTemplate) {
                return this.relatedPanel.customTabTemplate;
            }
            if (this.customTabTemplateDir) {
                return this.customTabTemplateDir.template;
            }
            return this.defaultTabTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "context", {
        /**
         * Returns the `context` object for the template of this `IgxTabComponent`.
         * ```typescript
         * let tabItemContext = this.tabItem.context;
         * ```
         */
        get: function () {
            return this.relatedPanel ? this.relatedPanel : this;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Selects the current tab and the associated panel.
     * ```typescript
     * this.tab.select();
     * ```
     * @memberof IgxTabComponent
     */
    IgxTabComponent.prototype.select = function () {
        if (this.relatedPanel) {
            this.relatedPanel.select();
        }
        else {
            this._selected = true;
            this._tabBar.onTabSelected.emit({ tab: this, panel: null });
        }
    };
    /**
     * @hidden
     */
    IgxTabComponent.prototype.onClick = function () {
        if (this.autoGenerated) {
            this.select();
        }
    };
    IgxTabComponent.prototype.elementRef = function () {
        return this._element;
    };
    IgxTabComponent.ctorParameters = function () { return [
        { type: IgxBottomNavComponent },
        { type: ElementRef }
    ]; };
    __decorate([
        HostBinding('attr.role')
    ], IgxTabComponent.prototype, "role", void 0);
    __decorate([
        HostBinding('attr.aria-label')
    ], IgxTabComponent.prototype, "ariaLabel", void 0);
    __decorate([
        HostBinding('attr.aria-disabled')
    ], IgxTabComponent.prototype, "ariaDisabled", void 0);
    __decorate([
        HostBinding('attr.aria-selected')
    ], IgxTabComponent.prototype, "ariaSelected", void 0);
    __decorate([
        Input()
    ], IgxTabComponent.prototype, "relatedPanel", void 0);
    __decorate([
        Input()
    ], IgxTabComponent.prototype, "label", null);
    __decorate([
        Input()
    ], IgxTabComponent.prototype, "icon", null);
    __decorate([
        Input()
    ], IgxTabComponent.prototype, "disabled", null);
    __decorate([
        Input()
    ], IgxTabComponent.prototype, "isSelected", null);
    __decorate([
        Input()
    ], IgxTabComponent.prototype, "autoGenerated", void 0);
    __decorate([
        HostBinding('class.igx-bottom-nav__menu-item--selected')
    ], IgxTabComponent.prototype, "cssClassSelected", null);
    __decorate([
        HostBinding('class.igx-bottom-nav__menu-item--disabled')
    ], IgxTabComponent.prototype, "cssClassDisabled", null);
    __decorate([
        HostBinding('class.igx-bottom-nav__menu-item')
    ], IgxTabComponent.prototype, "cssClass", null);
    __decorate([
        ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })
    ], IgxTabComponent.prototype, "defaultTabTemplate", void 0);
    __decorate([
        ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })
    ], IgxTabComponent.prototype, "customTabTemplateDir", void 0);
    __decorate([
        HostListener('click')
    ], IgxTabComponent.prototype, "onClick", null);
    IgxTabComponent = __decorate([
        Component({
            selector: 'igx-tab',
            template: "<ng-template #defaultTabTemplate let-context>\n    <div *ngIf=\"context.icon\" class=\"tab-icon\">\n        <igx-icon fontSet=\"material\">{{context.icon}}</igx-icon>\n        <igx-badge [value]=\"context.changesCount\" [hidden]=\"context.changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"context.label\" ngClass=\"tab-label\">{{context.label}}</div>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this.context }\">\n</ng-container>"
        })
    ], IgxTabComponent);
    return IgxTabComponent;
}());
export { IgxTabComponent };
/**
 * @hidden
 */
var IgxBottomNavModule = /** @class */ (function () {
    function IgxBottomNavModule() {
    }
    IgxBottomNavModule = __decorate([
        NgModule({
            declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],
            exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],
            imports: [CommonModule, IgxBadgeModule, IgxIconModule]
        })
    ], IgxBottomNavModule);
    return IgxBottomNavModule;
}());
export { IgxBottomNavModule };
//# sourceMappingURL=data:application/json;base64,