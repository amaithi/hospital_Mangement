import { __decorate } from "tslib";
import { Directive, HostBinding, TemplateRef } from '@angular/core';
import { IgxTabsBase } from './tabs.common';
var ButtonStyle;
(function (ButtonStyle) {
    ButtonStyle["VISIBLE"] = "visible";
    ButtonStyle["HIDDEN"] = "hidden";
    ButtonStyle["NOT_DISPLAYED"] = "not_displayed";
})(ButtonStyle || (ButtonStyle = {}));
let IgxRightButtonStyleDirective = class IgxRightButtonStyleDirective {
    constructor(tabs) {
        this.tabs = tabs;
    }
    get visibleCSS() {
        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
    }
    get hiddenCSS() {
        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
    }
    get notDisplayedCSS() {
        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
    }
    getRightButtonStyle() {
        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;
        // We use this hacky way to get the width of the itemsContainer,
        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.
        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;
        let itemsContainerWidth = 0;
        if (itemsContainerChildrenCount > 1) {
            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];
            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;
        }
        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        const offset = this.tabs.offset;
        const total = offset + viewPortWidth;
        // Fix for IE 11, a difference is accumulated from the widths calculations.
        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {
            return ButtonStyle.NOT_DISPLAYED;
        }
        if (itemsContainerWidth > total) {
            return ButtonStyle.VISIBLE;
        }
        else {
            return ButtonStyle.HIDDEN;
        }
    }
};
IgxRightButtonStyleDirective.ctorParameters = () => [
    { type: IgxTabsBase }
];
__decorate([
    HostBinding('class.igx-tabs__header-button')
], IgxRightButtonStyleDirective.prototype, "visibleCSS", null);
__decorate([
    HostBinding('class.igx-tabs__header-button--hidden')
], IgxRightButtonStyleDirective.prototype, "hiddenCSS", null);
__decorate([
    HostBinding('class.igx-tabs__header-button--none')
], IgxRightButtonStyleDirective.prototype, "notDisplayedCSS", null);
IgxRightButtonStyleDirective = __decorate([
    Directive({
        selector: '[igxRightButtonStyle]'
    })
], IgxRightButtonStyleDirective);
export { IgxRightButtonStyleDirective };
let IgxLeftButtonStyleDirective = class IgxLeftButtonStyleDirective {
    constructor(tabs) {
        this.tabs = tabs;
    }
    get visibleCSS() {
        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
    }
    get hiddenCSS() {
        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
    }
    get notDisplayedCSS() {
        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
    }
    getLeftButtonStyle() {
        // We use this hacky way to get the width of the itemsContainer,
        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.
        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;
        let itemsContainerWidth = 0;
        if (itemsContainerChildrenCount > 1) {
            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];
            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;
        }
        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        const offset = this.tabs.offset;
        if (offset === 0) {
            // Fix for IE 11, a difference is accumulated from the widths calculations.
            if (itemsContainerWidth - headerContainerWidth <= 1) {
                return ButtonStyle.NOT_DISPLAYED;
            }
            return ButtonStyle.HIDDEN;
        }
        else {
            return ButtonStyle.VISIBLE;
        }
    }
};
IgxLeftButtonStyleDirective.ctorParameters = () => [
    { type: IgxTabsBase }
];
__decorate([
    HostBinding('class.igx-tabs__header-button')
], IgxLeftButtonStyleDirective.prototype, "visibleCSS", null);
__decorate([
    HostBinding('class.igx-tabs__header-button--hidden')
], IgxLeftButtonStyleDirective.prototype, "hiddenCSS", null);
__decorate([
    HostBinding('class.igx-tabs__header-button--none')
], IgxLeftButtonStyleDirective.prototype, "notDisplayedCSS", null);
IgxLeftButtonStyleDirective = __decorate([
    Directive({
        selector: '[igxLeftButtonStyle]'
    })
], IgxLeftButtonStyleDirective);
export { IgxLeftButtonStyleDirective };
let IgxTabItemTemplateDirective = class IgxTabItemTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxTabItemTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxTabItemTemplateDirective = __decorate([
    Directive({
        selector: '[igxTab]'
    })
], IgxTabItemTemplateDirective);
export { IgxTabItemTemplateDirective };
//# sourceMappingURL=data:application/json;base64,