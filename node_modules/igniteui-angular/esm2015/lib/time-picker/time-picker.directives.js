import { __decorate, __param } from "tslib";
/**
 * This file contains all the directives used by the @link IgxTimePickerComponent.
 * You should generally not use them directly.
 * @preferred
 */
import { Directive, ElementRef, HostBinding, HostListener, Inject, Input, TemplateRef } from '@angular/core';
import { IGX_TIME_PICKER_COMPONENT } from './time-picker.common';
import { InteractionMode } from '../core/enums';
/** @hidden */
let IgxItemListDirective = class IgxItemListDirective {
    constructor(timePicker, elementRef) {
        this.timePicker = timePicker;
        this.elementRef = elementRef;
        this.tabindex = 0;
    }
    get defaultCSS() {
        return true;
    }
    get hourCSS() {
        return this.type === 'hourList';
    }
    get minuteCSS() {
        return this.type === 'minuteList';
    }
    get secondsCSS() {
        return this.type === 'secondsList';
    }
    get ampmCSS() {
        return this.type === 'ampmList';
    }
    onFocus() {
        this.isActive = true;
    }
    onBlur() {
        this.isActive = false;
    }
    nextItem() {
        switch (this.type) {
            case 'hourList': {
                this.timePicker.nextHour();
                break;
            }
            case 'minuteList': {
                this.timePicker.nextMinute();
                break;
            }
            case 'secondsList': {
                this.timePicker.nextSeconds();
                break;
            }
            case 'ampmList': {
                this.timePicker.nextAmPm();
                break;
            }
        }
    }
    prevItem() {
        switch (this.type) {
            case 'hourList': {
                this.timePicker.prevHour();
                break;
            }
            case 'minuteList': {
                this.timePicker.prevMinute();
                break;
            }
            case 'secondsList': {
                this.timePicker.prevSeconds();
                break;
            }
            case 'ampmList': {
                this.timePicker.prevAmPm();
                break;
            }
        }
    }
    /**
     * @hidden
     */
    onKeydownArrowDown(event) {
        event.preventDefault();
        this.nextItem();
    }
    /**
     * @hidden
     */
    onKeydownArrowUp(event) {
        event.preventDefault();
        this.prevItem();
    }
    /**
     * @hidden
     */
    onKeydownArrowRight(event) {
        event.preventDefault();
        const listName = event.target.className;
        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.secondsList) {
            this.timePicker.secondsList.nativeElement.focus();
        }
        else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1 ||
            listName.indexOf('secondsList') !== -1) && this.timePicker.ampmList) {
            this.timePicker.ampmList.nativeElement.focus();
        }
    }
    /**
     * @hidden
     */
    onKeydownArrowLeft(event) {
        event.preventDefault();
        const listName = event.target.className;
        if (listName.indexOf('ampmList') !== -1 && this.timePicker.secondsList) {
            this.timePicker.secondsList.nativeElement.focus();
        }
        else if (listName.indexOf('secondsList') !== -1 && this.timePicker.secondsList
            && listName.indexOf('minutesList') && this.timePicker.minuteList) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('secondsList') !== -1 ||
            listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {
            this.timePicker.hourList.nativeElement.focus();
        }
    }
    /**
     * @hidden
     */
    onKeydownEnter(event) {
        event.preventDefault();
        if (this.timePicker.mode === InteractionMode.DropDown) {
            this.timePicker.close();
            return;
        }
        this.timePicker.okButtonClick();
    }
    /**
     * @hidden
     */
    onKeydownEscape(event) {
        event.preventDefault();
        this.timePicker.cancelButtonClick();
    }
    /**
     * @hidden
     */
    onHover() {
        this.elementRef.nativeElement.focus();
    }
    /**
     * @hidden
     */
    onScroll(event) {
        event.preventDefault();
        event.stopPropagation();
        if (event.deltaY > 0) {
            this.nextItem();
        }
        else if (event.deltaY < 0) {
            this.prevItem();
        }
    }
    /**
     * @hidden
     */
    onPanMove(event) {
        if (event.deltaY < 0) {
            this.nextItem();
        }
        else if (event.deltaY > 0) {
            this.prevItem();
        }
    }
};
IgxItemListDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
    { type: ElementRef }
];
__decorate([
    Input('igxItemList')
], IgxItemListDirective.prototype, "type", void 0);
__decorate([
    HostBinding('attr.tabindex')
], IgxItemListDirective.prototype, "tabindex", void 0);
__decorate([
    HostBinding('class.igx-time-picker__column')
], IgxItemListDirective.prototype, "defaultCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__hourList')
], IgxItemListDirective.prototype, "hourCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__minuteList')
], IgxItemListDirective.prototype, "minuteCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__secondsList')
], IgxItemListDirective.prototype, "secondsCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__ampmList')
], IgxItemListDirective.prototype, "ampmCSS", null);
__decorate([
    HostListener('focus')
], IgxItemListDirective.prototype, "onFocus", null);
__decorate([
    HostListener('blur')
], IgxItemListDirective.prototype, "onBlur", null);
__decorate([
    HostListener('keydown.arrowdown', ['$event'])
], IgxItemListDirective.prototype, "onKeydownArrowDown", null);
__decorate([
    HostListener('keydown.arrowup', ['$event'])
], IgxItemListDirective.prototype, "onKeydownArrowUp", null);
__decorate([
    HostListener('keydown.arrowright', ['$event'])
], IgxItemListDirective.prototype, "onKeydownArrowRight", null);
__decorate([
    HostListener('keydown.arrowleft', ['$event'])
], IgxItemListDirective.prototype, "onKeydownArrowLeft", null);
__decorate([
    HostListener('keydown.enter', ['$event'])
], IgxItemListDirective.prototype, "onKeydownEnter", null);
__decorate([
    HostListener('keydown.escape', ['$event'])
], IgxItemListDirective.prototype, "onKeydownEscape", null);
__decorate([
    HostListener('mouseover')
], IgxItemListDirective.prototype, "onHover", null);
__decorate([
    HostListener('wheel', ['$event'])
], IgxItemListDirective.prototype, "onScroll", null);
__decorate([
    HostListener('panmove', ['$event'])
], IgxItemListDirective.prototype, "onPanMove", null);
IgxItemListDirective = __decorate([
    Directive({
        selector: '[igxItemList]'
    }),
    __param(0, Inject(IGX_TIME_PICKER_COMPONENT))
], IgxItemListDirective);
export { IgxItemListDirective };
/**
 * @hidden
 */
let IgxHourItemDirective = class IgxHourItemDirective {
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    get defaultCSS() {
        return true;
    }
    get selectedCSS() {
        return this.isSelectedHour;
    }
    get activeCSS() {
        return this.isSelectedHour && this.itemList.isActive;
    }
    get isSelectedHour() {
        return this.timePicker.selectedHour === this.value;
    }
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollHourIntoView(item);
        }
    }
};
IgxHourItemDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
    { type: IgxItemListDirective }
];
__decorate([
    Input('igxHourItem')
], IgxHourItemDirective.prototype, "value", void 0);
__decorate([
    HostBinding('class.igx-time-picker__item')
], IgxHourItemDirective.prototype, "defaultCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__item--selected')
], IgxHourItemDirective.prototype, "selectedCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__item--active')
], IgxHourItemDirective.prototype, "activeCSS", null);
__decorate([
    HostListener('click', ['value'])
], IgxHourItemDirective.prototype, "onClick", null);
IgxHourItemDirective = __decorate([
    Directive({
        selector: '[igxHourItem]'
    }),
    __param(0, Inject(IGX_TIME_PICKER_COMPONENT))
], IgxHourItemDirective);
export { IgxHourItemDirective };
/**
 * @hidden
 */
let IgxMinuteItemDirective = class IgxMinuteItemDirective {
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    get defaultCSS() {
        return true;
    }
    get selectedCSS() {
        return this.isSelectedMinute;
    }
    get activeCSS() {
        return this.isSelectedMinute && this.itemList.isActive;
    }
    get isSelectedMinute() {
        return this.timePicker.selectedMinute === this.value;
    }
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollMinuteIntoView(item);
        }
    }
};
IgxMinuteItemDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
    { type: IgxItemListDirective }
];
__decorate([
    Input('igxMinuteItem')
], IgxMinuteItemDirective.prototype, "value", void 0);
__decorate([
    HostBinding('class.igx-time-picker__item')
], IgxMinuteItemDirective.prototype, "defaultCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__item--selected')
], IgxMinuteItemDirective.prototype, "selectedCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__item--active')
], IgxMinuteItemDirective.prototype, "activeCSS", null);
__decorate([
    HostListener('click', ['value'])
], IgxMinuteItemDirective.prototype, "onClick", null);
IgxMinuteItemDirective = __decorate([
    Directive({
        selector: '[igxMinuteItem]'
    }),
    __param(0, Inject(IGX_TIME_PICKER_COMPONENT))
], IgxMinuteItemDirective);
export { IgxMinuteItemDirective };
/**
 * @hidden
 */
let IgxSecondsItemDirective = class IgxSecondsItemDirective {
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    get defaultCSS() {
        return true;
    }
    get selectedCSS() {
        return this.isSelectedSeconds;
    }
    get activeCSS() {
        return this.isSelectedSeconds && this.itemList.isActive;
    }
    get isSelectedSeconds() {
        return this.timePicker.selectedSeconds === this.value;
    }
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollSecondsIntoView(item);
        }
    }
};
IgxSecondsItemDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
    { type: IgxItemListDirective }
];
__decorate([
    Input('igxSecondsItem')
], IgxSecondsItemDirective.prototype, "value", void 0);
__decorate([
    HostBinding('class.igx-time-picker__item')
], IgxSecondsItemDirective.prototype, "defaultCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__item--selected')
], IgxSecondsItemDirective.prototype, "selectedCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__item--active')
], IgxSecondsItemDirective.prototype, "activeCSS", null);
__decorate([
    HostListener('click', ['value'])
], IgxSecondsItemDirective.prototype, "onClick", null);
IgxSecondsItemDirective = __decorate([
    Directive({
        selector: '[igxSecondsItem]'
    }),
    __param(0, Inject(IGX_TIME_PICKER_COMPONENT))
], IgxSecondsItemDirective);
export { IgxSecondsItemDirective };
/**
 * @hidden
 */
let IgxAmPmItemDirective = class IgxAmPmItemDirective {
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    get defaultCSS() {
        return true;
    }
    get selectedCSS() {
        return this.isSelectedAmPm;
    }
    get activeCSS() {
        return this.isSelectedAmPm && this.itemList.isActive;
    }
    get isSelectedAmPm() {
        return this.timePicker.selectedAmPm === this.value;
    }
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollAmPmIntoView(item);
        }
    }
};
IgxAmPmItemDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
    { type: IgxItemListDirective }
];
__decorate([
    Input('igxAmPmItem')
], IgxAmPmItemDirective.prototype, "value", void 0);
__decorate([
    HostBinding('class.igx-time-picker__item')
], IgxAmPmItemDirective.prototype, "defaultCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__item--selected')
], IgxAmPmItemDirective.prototype, "selectedCSS", null);
__decorate([
    HostBinding('class.igx-time-picker__item--active')
], IgxAmPmItemDirective.prototype, "activeCSS", null);
__decorate([
    HostListener('click', ['value'])
], IgxAmPmItemDirective.prototype, "onClick", null);
IgxAmPmItemDirective = __decorate([
    Directive({
        selector: '[igxAmPmItem]'
    }),
    __param(0, Inject(IGX_TIME_PICKER_COMPONENT))
], IgxAmPmItemDirective);
export { IgxAmPmItemDirective };
/**
 * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.
 */
let IgxTimePickerTemplateDirective = class IgxTimePickerTemplateDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxTimePickerTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxTimePickerTemplateDirective = __decorate([
    Directive({
        selector: '[igxTimePickerTemplate]'
    })
], IgxTimePickerTemplateDirective);
export { IgxTimePickerTemplateDirective };
/**
 * This directive can be used to add custom action buttons to the dropdownb/dialog.
 */
let IgxTimePickerActionsDirective = class IgxTimePickerActionsDirective {
    constructor(template) {
        this.template = template;
    }
};
IgxTimePickerActionsDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxTimePickerActionsDirective = __decorate([
    Directive({
        selector: '[igxTimePickerActions]'
    })
], IgxTimePickerActionsDirective);
export { IgxTimePickerActionsDirective };
//# sourceMappingURL=data:application/json;base64,