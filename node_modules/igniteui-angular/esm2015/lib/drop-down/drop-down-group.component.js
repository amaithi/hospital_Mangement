import { __decorate } from "tslib";
import { Component, Input, HostBinding } from '@angular/core';
let NEXT_ID = 0;
/**
 * The `<igx-drop-down-item>` is a container intended for row items in
 * a `<igx-drop-down>` container.
 */
let IgxDropDownGroupComponent = class IgxDropDownGroupComponent {
    constructor() {
        this._id = NEXT_ID++;
        /**
         * @hidden @internal
         */
        this.role = 'group';
        /** @hidden @internal */
        this.groupClass = true;
        /**
         * Sets/gets if the item group is disabled
         *
         * ```typescript
         * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;
         * // get
         * ...
         * const groupState: boolean = myDropDownGroup.disabled;
         * ...
         * //set
         * ...
         * myDropDownGroup,disabled = false;
         * ...
         * ```
         *
         * ```html
         * <igx-drop-down-item-group [label]="'My Items'" [disabled]="true">
         *     <igx-drop-down-item *ngFor="let item of items[index]" [value]="item.value">
         *         {{ item.text }}
         *     </igx-drop-down-item>
         * </igx-drop-down-item-group>
         * ```
         *
         * **NOTE:** All items inside of a disabled drop down group will be treated as disabled
         */
        this.disabled = false;
    }
    /**
     * @hidden @internal
     */
    get labelId() {
        return `igx-item-group-label-${this._id}`;
    }
    get labelledBy() {
        return this.labelId;
    }
};
__decorate([
    HostBinding(`attr.aria-labelledby`)
], IgxDropDownGroupComponent.prototype, "labelledBy", null);
__decorate([
    HostBinding('attr.role')
], IgxDropDownGroupComponent.prototype, "role", void 0);
__decorate([
    HostBinding('class.igx-drop-down__group')
], IgxDropDownGroupComponent.prototype, "groupClass", void 0);
__decorate([
    Input(),
    HostBinding(`attr.aria-disabled`),
    HostBinding('class.igx-drop-down__group--disabled')
], IgxDropDownGroupComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], IgxDropDownGroupComponent.prototype, "label", void 0);
IgxDropDownGroupComponent = __decorate([
    Component({
        selector: 'igx-drop-down-item-group',
        template: `
        <label id="{{labelId}}">{{ label }}</label>
        <ng-content select="igx-drop-down-item"></ng-content>
    `
    })
], IgxDropDownGroupComponent);
export { IgxDropDownGroupComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcC1kb3duLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZHJvcC1kb3duL2Ryb3AtZG93bi1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDaEI7OztHQUdHO0FBUUgsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7SUFBdEM7UUFDWSxRQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFjeEI7O1dBRUc7UUFFSSxTQUFJLEdBQUcsT0FBTyxDQUFDO1FBRXRCLHdCQUF3QjtRQUVqQixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3pCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0F3Qkc7UUFJSSxhQUFRLEdBQUcsS0FBSyxDQUFDO0lBeUI1QixDQUFDO0lBMUVHOztPQUVHO0lBQ0gsSUFBVyxPQUFPO1FBQ2QsT0FBTyx3QkFBd0IsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFHRCxJQUFXLFVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7Q0FnRUosQ0FBQTtBQWxFRztJQURDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQzsyREFHbkM7QUFNRDtJQURDLFdBQVcsQ0FBQyxXQUFXLENBQUM7dURBQ0g7QUFJdEI7SUFEQyxXQUFXLENBQUMsNEJBQTRCLENBQUM7NkRBQ2pCO0FBNkJ6QjtJQUhDLEtBQUssRUFBRTtJQUNQLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztJQUNqQyxXQUFXLENBQUMsc0NBQXNDLENBQUM7MkRBQzVCO0FBd0J4QjtJQURDLEtBQUssRUFBRTt3REFDYTtBQTVFWix5QkFBeUI7SUFQckMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLDBCQUEwQjtRQUNwQyxRQUFRLEVBQUU7OztLQUdUO0tBQ0osQ0FBQztHQUNXLHlCQUF5QixDQTZFckM7U0E3RVkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxubGV0IE5FWFRfSUQgPSAwO1xuLyoqXG4gKiBUaGUgYDxpZ3gtZHJvcC1kb3duLWl0ZW0+YCBpcyBhIGNvbnRhaW5lciBpbnRlbmRlZCBmb3Igcm93IGl0ZW1zIGluXG4gKiBhIGA8aWd4LWRyb3AtZG93bj5gIGNvbnRhaW5lci5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtZHJvcC1kb3duLWl0ZW0tZ3JvdXAnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxsYWJlbCBpZD1cInt7bGFiZWxJZH19XCI+e3sgbGFiZWwgfX08L2xhYmVsPlxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJpZ3gtZHJvcC1kb3duLWl0ZW1cIj48L25nLWNvbnRlbnQ+XG4gICAgYFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hEcm9wRG93bkdyb3VwQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIF9pZCA9IE5FWFRfSUQrKztcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCBsYWJlbElkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgaWd4LWl0ZW0tZ3JvdXAtbGFiZWwtJHt0aGlzLl9pZH1gO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZyhgYXR0ci5hcmlhLWxhYmVsbGVkYnlgKVxuICAgIHB1YmxpYyBnZXQgbGFiZWxsZWRCeSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbElkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICAgIHB1YmxpYyByb2xlID0gJ2dyb3VwJztcblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWRyb3AtZG93bl9fZ3JvdXAnKVxuICAgIHB1YmxpYyBncm91cENsYXNzID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgaWYgdGhlIGl0ZW0gZ3JvdXAgaXMgZGlzYWJsZWRcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBteURyb3BEb3duR3JvdXA6IElneERyb3BEb3duR3JvdXBDb21wb25lbnQgPSB0aGlzLmRyb3Bkb3duR3JvdXA7XG4gICAgICogLy8gZ2V0XG4gICAgICogLi4uXG4gICAgICogY29uc3QgZ3JvdXBTdGF0ZTogYm9vbGVhbiA9IG15RHJvcERvd25Hcm91cC5kaXNhYmxlZDtcbiAgICAgKiAuLi5cbiAgICAgKiAvL3NldFxuICAgICAqIC4uLlxuICAgICAqIG15RHJvcERvd25Hcm91cCxkaXNhYmxlZCA9IGZhbHNlO1xuICAgICAqIC4uLlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZHJvcC1kb3duLWl0ZW0tZ3JvdXAgW2xhYmVsXT1cIidNeSBJdGVtcydcIiBbZGlzYWJsZWRdPVwidHJ1ZVwiPlxuICAgICAqICAgICA8aWd4LWRyb3AtZG93bi1pdGVtICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zW2luZGV4XVwiIFt2YWx1ZV09XCJpdGVtLnZhbHVlXCI+XG4gICAgICogICAgICAgICB7eyBpdGVtLnRleHQgfX1cbiAgICAgKiAgICAgPC9pZ3gtZHJvcC1kb3duLWl0ZW0+XG4gICAgICogPC9pZ3gtZHJvcC1kb3duLWl0ZW0tZ3JvdXA+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAqKk5PVEU6KiogQWxsIGl0ZW1zIGluc2lkZSBvZiBhIGRpc2FibGVkIGRyb3AgZG93biBncm91cCB3aWxsIGJlIHRyZWF0ZWQgYXMgZGlzYWJsZWRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZyhgYXR0ci5hcmlhLWRpc2FibGVkYClcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kcm9wLWRvd25fX2dyb3VwLS1kaXNhYmxlZCcpXG4gICAgcHVibGljIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIGxhYmVsIG9mIHRoZSBpdGVtIGdyb3VwXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbXlEcm9wRG93bkdyb3VwOiBJZ3hEcm9wRG93bkdyb3VwQ29tcG9uZW50ID0gdGhpcy5kcm9wZG93bkdyb3VwO1xuICAgICAqIC8vIGdldFxuICAgICAqIC4uLlxuICAgICAqIGNvbnN0IG15TGFiZWw6IHN0cmluZyA9IG15RHJvcERvd25Hcm91cC5sYWJlbDtcbiAgICAgKiAuLi5cbiAgICAgKiAvLyBzZXRcbiAgICAgKiAuLi5cbiAgICAgKiBteURyb3BEb3duR3JvdXAubGFiZWwgPSAnTXkgTmV3IExhYmVsJztcbiAgICAgKiAuLi5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWRyb3AtZG93bi1pdGVtLWdyb3VwIFtsYWJlbF09XCInTXkgbmV3IExhYmVsJ1wiPlxuICAgICAqICAgICAgLi4uXG4gICAgICogPC9pZ3gtZHJvcC1kb3duLWl0ZW0tZ3JvdXA+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbGFiZWw6IHN0cmluZztcbn1cbiJdfQ==