var IgxGridPinningActionsComponent_1;
import { __decorate } from "tslib";
import { Component, HostBinding } from '@angular/core';
import { IgxGridActionsBaseDirective } from './grid-actions-base.directive';
let IgxGridPinningActionsComponent = IgxGridPinningActionsComponent_1 = class IgxGridPinningActionsComponent extends IgxGridActionsBaseDirective {
    constructor() {
        super(...arguments);
        /**
         * Host `class.igx-action-strip` binding.
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-action-strip__pining-actions';
        this.iconsRendered = false;
    }
    /**
     * Getter to know if the row is pinned
     * @hidden
     * @internal
     */
    get pinned() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        if (context && !this.iconsRendered) {
            this.renderIcons();
            this.iconsRendered = true;
        }
        return context && context.pinned;
    }
    /**
     * Getter to know if the row is in pinned and ghost
     * @hidden
     * @internal
     */
    get inPinnedArea() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        return this.pinned && !context.disabled;
    }
    /**
     * Getter to know if the row pinning is set to top or bottom
     * @hidden
     * @internal
     */
    get pinnedTop() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        return this.strip.context.grid.isRowPinningToTop;
    }
    /**
     * Pin the row according to the context.
     * @example
     * ```typescript
     * this.gridPinningActions.pin();
     * ```
     */
    pin(event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const row = this.strip.context;
        const grid = row.grid;
        grid.pinRow(row.rowID);
        this.strip.hide();
    }
    /**
     * Unpin the row according to the context.
     * @example
     * ```typescript
     * this.gridPinningActions.unpin();
     * ```
     */
    unpin(event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const row = this.strip.context;
        const grid = row.grid;
        grid.unpinRow(row.rowID);
        this.strip.hide();
    }
    scrollToRow(event) {
        if (event) {
            event.stopPropagation();
        }
        const context = this.strip.context;
        const grid = context.grid;
        grid.scrollTo(context.rowData, 0);
        this.strip.hide();
    }
    renderIcons() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        const grid = context.grid;
        if (grid) {
            grid.filteringService.registerSVGIcons();
        }
    }
};
__decorate([
    HostBinding('class.igx-action-strip__pining-actions')
], IgxGridPinningActionsComponent.prototype, "cssClass", void 0);
IgxGridPinningActionsComponent = IgxGridPinningActionsComponent_1 = __decorate([
    Component({
        selector: 'igx-grid-pinning-actions',
        template: "<ng-container *ngIf=\"isRowContext\">\n    <button *ngIf=\"inPinnedArea && pinnedTop\" igxRipple igxButton=\"icon\" (click)=\"scrollToRow($event)\">\n        <igx-icon fontSet=\"filtering-icons\" name=\"jump_down\"></igx-icon>\n    </button>\n    <button *ngIf=\"inPinnedArea && !pinnedTop\" igxRipple igxButton=\"icon\" (click)=\"scrollToRow($event)\">\n        <igx-icon fontSet=\"filtering-icons\" name=\"jump_up\"></igx-icon>\n    </button>\n    <button *ngIf=\"!pinned\" igxRipple igxButton=\"icon\" (click)=\"pin($event)\">\n        <igx-icon fontSet=\"filtering-icons\" name=\"pin\"></igx-icon>\n    </button>\n    <button *ngIf=\"pinned\" igxRipple igxButton=\"icon\" (click)=\"unpin($event)\">\n        <igx-icon fontSet=\"filtering-icons\" name=\"unpin\"></igx-icon>\n    </button>\n</ng-container>",
        providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridPinningActionsComponent_1 }]
    })
], IgxGridPinningActionsComponent);
export { IgxGridPinningActionsComponent };
//# sourceMappingURL=data:application/json;base64,