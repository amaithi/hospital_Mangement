var IgxGridEditingActionsComponent_1;
import { __decorate } from "tslib";
import { Component, HostBinding } from '@angular/core';
import { IgxGridActionsBaseDirective } from './grid-actions-base.directive';
import { showMessage } from '../../core/deprecateDecorators';
let IgxGridEditingActionsComponent = IgxGridEditingActionsComponent_1 = class IgxGridEditingActionsComponent extends IgxGridActionsBaseDirective {
    constructor() {
        super(...arguments);
        /**
         * Host `class.igx-action-strip` binding.
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-action-strip__editing-actions';
        this.isMessageShown = false;
    }
    /**
     * Enter row or cell edit mode depending the grid rowEditable option
     * @example
     * ```typescript
     * this.gridEditingActions.startEdit();
     * ```
     */
    startEdit(event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const row = this.strip.context;
        const firstEditable = row.cells.filter(cell => cell.editable)[0];
        const grid = row.grid;
        if (!grid.hasEditableColumns) {
            this.isMessageShown = showMessage('The grid should be editable in order to use IgxGridEditingActionsComponent', this.isMessageShown);
            return;
        }
        // be sure row is in view
        if (grid.rowList.filter(r => r === row).length !== 0) {
            grid.crudService.begin(firstEditable);
        }
        this.strip.hide();
    }
    /**
     * Delete a row according to the context
     * @example
     * ```typescript
     * this.gridEditingActions.deleteRow();
     * ```
     */
    deleteRow(event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        const grid = context.grid;
        grid.deleteRow(context.rowID);
        this.strip.hide();
    }
    /**
     * Getter if the row is disabled
     * @hidden
     * @internal
     */
    get disabled() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        return this.strip.context.disabled;
    }
};
__decorate([
    HostBinding('class.igx-action-strip__editing-actions')
], IgxGridEditingActionsComponent.prototype, "cssClass", void 0);
IgxGridEditingActionsComponent = IgxGridEditingActionsComponent_1 = __decorate([
    Component({
        selector: 'igx-grid-editing-actions',
        template: "<ng-container *ngIf=\"isRowContext\">\n    <button igxButton=\"icon\" [disabled]=\"disabled\" igxRipple (click)=\"startEdit($event)\">\n        <igx-icon>edit</igx-icon>\n    </button>\n    <button igxButton=\"icon\" [disabled]=\"disabled\" class=\"igx-action-strip__delete\" igxRipple (click)=\"deleteRow($event)\">\n        <igx-icon >delete</igx-icon>\n    </button>\n</ng-container>\n",
        providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridEditingActionsComponent_1 }]
    })
], IgxGridEditingActionsComponent);
export { IgxGridEditingActionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1lZGl0aW5nLWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9hY3Rpb24tc3RyaXAvZ3JpZC1hY3Rpb25zL2dyaWQtZWRpdGluZy1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQVE3RCxJQUFhLDhCQUE4QixzQ0FBM0MsTUFBYSw4QkFBK0IsU0FBUSwyQkFBMkI7SUFBL0U7O1FBQ0k7Ozs7V0FJRztRQUVJLGFBQVEsR0FBRyxtQ0FBbUMsQ0FBQztRQUU5QyxtQkFBYyxHQUFHLEtBQUssQ0FBQztJQStEbkMsQ0FBQztJQTdERzs7Ozs7O09BTUc7SUFDSSxTQUFTLENBQUMsS0FBTTtRQUNuQixJQUFJLEtBQUssRUFBRTtZQUNQLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUMzQjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDakMsT0FBTztTQUNWO1FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDL0IsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakUsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQzFCLElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUM3Qiw0RUFBNEUsRUFDNUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3JCLE9BQU87U0FDZDtRQUNELHlCQUF5QjtRQUN6QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDekM7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxTQUFTLENBQUMsS0FBTTtRQUNuQixJQUFJLEtBQUssRUFBRTtZQUNQLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUMzQjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDakMsT0FBTztTQUNWO1FBQ0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDbkMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxRQUFRO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNqQyxPQUFPO1NBQ1Y7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUN2QyxDQUFDO0NBQ0osQ0FBQTtBQWpFRztJQURDLFdBQVcsQ0FBQyx5Q0FBeUMsQ0FBQztnRUFDRDtBQVA3Qyw4QkFBOEI7SUFOMUMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLDBCQUEwQjtRQUNwQyxnWkFBa0Q7UUFDbEQsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsV0FBVyxFQUFFLGdDQUE4QixFQUFFLENBQUM7S0FDckcsQ0FBQztHQUVXLDhCQUE4QixDQXdFMUM7U0F4RVksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4R3JpZEFjdGlvbnNCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9ncmlkLWFjdGlvbnMtYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgc2hvd01lc3NhZ2UgfSBmcm9tICcuLi8uLi9jb3JlL2RlcHJlY2F0ZURlY29yYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC1ncmlkLWVkaXRpbmctYWN0aW9ucycsXG4gICAgdGVtcGxhdGVVcmw6ICdncmlkLWVkaXRpbmctYWN0aW9ucy5jb21wb25lbnQuaHRtbCcsXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBJZ3hHcmlkQWN0aW9uc0Jhc2VEaXJlY3RpdmUsIHVzZUV4aXN0aW5nOiBJZ3hHcmlkRWRpdGluZ0FjdGlvbnNDb21wb25lbnQgfV1cbn0pXG5cbmV4cG9ydCBjbGFzcyBJZ3hHcmlkRWRpdGluZ0FjdGlvbnNDb21wb25lbnQgZXh0ZW5kcyBJZ3hHcmlkQWN0aW9uc0Jhc2VEaXJlY3RpdmUge1xuICAgIC8qKlxuICAgICAqIEhvc3QgYGNsYXNzLmlneC1hY3Rpb24tc3RyaXBgIGJpbmRpbmcuXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWFjdGlvbi1zdHJpcF9fZWRpdGluZy1hY3Rpb25zJylcbiAgICBwdWJsaWMgY3NzQ2xhc3MgPSAnaWd4LWFjdGlvbi1zdHJpcF9fZWRpdGluZy1hY3Rpb25zJztcblxuICAgIHByaXZhdGUgaXNNZXNzYWdlU2hvd24gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEVudGVyIHJvdyBvciBjZWxsIGVkaXQgbW9kZSBkZXBlbmRpbmcgdGhlIGdyaWQgcm93RWRpdGFibGUgb3B0aW9uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5ncmlkRWRpdGluZ0FjdGlvbnMuc3RhcnRFZGl0KCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIHN0YXJ0RWRpdChldmVudD8pOiB2b2lkIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNSb3codGhpcy5zdHJpcC5jb250ZXh0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuc3RyaXAuY29udGV4dDtcbiAgICAgICAgY29uc3QgZmlyc3RFZGl0YWJsZSA9IHJvdy5jZWxscy5maWx0ZXIoY2VsbCA9PiBjZWxsLmVkaXRhYmxlKVswXTtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHJvdy5ncmlkO1xuICAgICAgICBpZiAoIWdyaWQuaGFzRWRpdGFibGVDb2x1bW5zKSB7XG4gICAgICAgICAgICB0aGlzLmlzTWVzc2FnZVNob3duID0gc2hvd01lc3NhZ2UoXG4gICAgICAgICAgICAgICAgJ1RoZSBncmlkIHNob3VsZCBiZSBlZGl0YWJsZSBpbiBvcmRlciB0byB1c2UgSWd4R3JpZEVkaXRpbmdBY3Rpb25zQ29tcG9uZW50JyxcbiAgICAgICAgICAgICAgICB0aGlzLmlzTWVzc2FnZVNob3duKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gYmUgc3VyZSByb3cgaXMgaW4gdmlld1xuICAgICAgICBpZiAoZ3JpZC5yb3dMaXN0LmZpbHRlcihyID0+IHIgPT09IHJvdykubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBncmlkLmNydWRTZXJ2aWNlLmJlZ2luKGZpcnN0RWRpdGFibGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RyaXAuaGlkZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIHJvdyBhY2NvcmRpbmcgdG8gdGhlIGNvbnRleHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWRFZGl0aW5nQWN0aW9ucy5kZWxldGVSb3coKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlUm93KGV2ZW50Pyk6IHZvaWQge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc1Jvdyh0aGlzLnN0cmlwLmNvbnRleHQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuc3RyaXAuY29udGV4dDtcbiAgICAgICAgY29uc3QgZ3JpZCA9IGNvbnRleHQuZ3JpZDtcbiAgICAgICAgZ3JpZC5kZWxldGVSb3coY29udGV4dC5yb3dJRCk7XG4gICAgICAgIHRoaXMuc3RyaXAuaGlkZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBpZiB0aGUgcm93IGlzIGRpc2FibGVkXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUm93KHRoaXMuc3RyaXAuY29udGV4dCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdHJpcC5jb250ZXh0LmRpc2FibGVkO1xuICAgIH1cbn1cbiJdfQ==