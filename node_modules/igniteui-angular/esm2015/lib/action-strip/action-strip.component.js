import { __decorate, __param } from "tslib";
import { Component, Directive, HostBinding, Input, Renderer2, ViewContainerRef, Optional, Inject, ContentChildren, QueryList, ViewChild, TemplateRef } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import { CloseScrollStrategy } from '../services/public_api';
let IgxActionStripMenuItemDirective = class IgxActionStripMenuItemDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
IgxActionStripMenuItemDirective.ctorParameters = () => [
    { type: TemplateRef }
];
IgxActionStripMenuItemDirective = __decorate([
    Directive({
        selector: '[igxActionStripMenuItem]'
    })
], IgxActionStripMenuItemDirective);
export { IgxActionStripMenuItemDirective };
/**
 * Action Strip provides templatable area for one or more actions.
 *
 * @igxModule IgxActionStripModule
 *
 * @igxTheme igx-action-strip-theme
 *
 * @igxKeywords action, strip, actionStrip, pinning, editing
 *
 * @igxGroup Data Entry & Display
 *
 * @remarks
 * The Ignite UI Action Strip is a container, overlaying its parent container,
 * and displaying action buttons with action applicable to the parent component the strip is instantiated or shown for.
 *
 * @example
 * ```html
 * <igx-action-strip #actionStrip>
 *     <igx-icon (click)="doSomeAction()"></igx-icon>
 * </igx-action-strip>
 */
let IgxActionStripComponent = class IgxActionStripComponent extends DisplayDensityBase {
    constructor(_viewContainer, renderer, _displayDensityOptions) {
        super(_displayDensityOptions);
        this._viewContainer = _viewContainer;
        this.renderer = renderer;
        this._displayDensityOptions = _displayDensityOptions;
        this._hidden = false;
    }
    /**
     * Getter for the 'display' property of the current `IgxActionStrip`
     * @hidden
     * @internal
     */
    get display() {
        return this._hidden ? 'none' : 'flex';
    }
    /**
     * An @Input property that set the visibility of the Action Strip.
     * Could be used to set if the Action Strip will be initially hidden.
     * @example
     * ```html
     *  <igx-action-strip [hidden]="false">
     * ```
     */
    set hidden(value) {
        this._hidden = value;
    }
    get hidden() {
        return this._hidden;
    }
    /**
     * Host `attr.class` binding.
     * @hidden
     * @internal
     */
    get hostClasses() {
        const classes = [this.getComponentDensityClass('igx-action-strip')];
        // The custom classes should be at the end.
        if (!classes.includes('igx-action-strip')) {
            classes.push('igx-action-strip');
        }
        classes.push(this.hostClass);
        return classes.join(' ');
    }
    /**
     * Showing the Action Strip and appending it the specified context element.
     * @param context
     * @example
     * ```typescript
     * this.actionStrip.show(row);
     * ```
     */
    show(context) {
        this.hidden = false;
        if (!context) {
            return;
        }
        // when shown for different context make sure the menu won't stay opened
        if (this.context !== context) {
            this.closeMenu();
        }
        this.context = context;
        if (this.context && this.context.element) {
            this.renderer.appendChild(context.element.nativeElement, this._viewContainer.element.nativeElement);
        }
    }
    /**
     * Hiding the Action Strip and removing it from its current context element.
     * @example
     * ```typescript
     * this.actionStrip.hide();
     * ```
     */
    hide() {
        this.hidden = true;
        this.closeMenu();
        if (this.context && this.context.element) {
            this.renderer.removeChild(this.context.element.nativeElement, this._viewContainer.element.nativeElement);
        }
    }
    /**
     * Getter for menu overlay settings
     * @hidden
     * @internal
     */
    get menuOverlaySettings() {
        return { scrollStrategy: new CloseScrollStrategy() };
    }
    /**
     * Close the menu if opened
     * @hidden
     * @internal
     */
    closeMenu() {
        if (this.menu && !this.menu.collapsed) {
            this.menu.close();
        }
    }
};
IgxActionStripComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
__decorate([
    HostBinding('style.display')
], IgxActionStripComponent.prototype, "display", null);
__decorate([
    Input()
], IgxActionStripComponent.prototype, "hidden", null);
__decorate([
    Input('class')
], IgxActionStripComponent.prototype, "hostClass", void 0);
__decorate([
    HostBinding('attr.class')
], IgxActionStripComponent.prototype, "hostClasses", null);
__decorate([
    Input()
], IgxActionStripComponent.prototype, "context", void 0);
__decorate([
    ContentChildren(IgxActionStripMenuItemDirective)
], IgxActionStripComponent.prototype, "menuItems", void 0);
__decorate([
    ViewChild('dropdown')
], IgxActionStripComponent.prototype, "menu", void 0);
IgxActionStripComponent = __decorate([
    Component({
        selector: 'igx-action-strip',
        template: "<div class=\"igx-action-strip__actions\">\n    <ng-content #content></ng-content>\n    <ng-container *ngIf=\"menuItems.length > 0\">\n        <button igxButton=\"icon\" igxRipple [igxToggleAction]=\"dropdown\"\n            [overlaySettings]=\"menuOverlaySettings\" (click)=\"$event.stopPropagation()\"\n            [igxDropDownItemNavigation]=\"dropdown\">\n            <igx-icon>more_vert</igx-icon>\n        </button>\n        <igx-drop-down #dropdown>\n            <igx-drop-down-item *ngFor=\"let item of menuItems\">\n                <div class=\"igx-drop-down__item-template\">\n                    <ng-container *ngTemplateOutlet=\"item.templateRef; context: {$implicit: item}\"></ng-container>\n                </div>\n            </igx-drop-down-item>\n        </igx-drop-down>\n    </ng-container>\n</div>\n"
    }),
    __param(2, Optional()), __param(2, Inject(DisplayDensityToken))
], IgxActionStripComponent);
export { IgxActionStripComponent };
//# sourceMappingURL=data:application/json;base64,