import { __decorate, __param } from "tslib";
import { Directive, Optional, Input, NgModule, Host, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { IgxColumnComponent } from './columns/column.component';
import { DataType } from '../data-operations/data-util';
import { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand, IgxStringFilteringOperand } from '../data-operations/filtering-condition';
import { IgxGridComponent } from './grid/grid.component';
const COLUMNS = 'columns';
const FILTERING = 'filtering';
const ADVANCED_FILTERING = 'advancedFiltering';
const SORTING = 'sorting';
const GROUPBY = 'groupBy';
const PAGING = 'paging';
const ROW_SELECTION = 'rowSelection';
const ROW_PINNING = 'rowPinning';
const PINNING_CONFIG = 'pinningConfig';
const CELL_SELECTION = 'cellSelection';
const COLUMN_SELECTION = 'columnSelection';
let IgxGridStateDirective = class IgxGridStateDirective {
    /**
     * @hidden
     */
    constructor(grid, resolver, viewRef) {
        this.grid = grid;
        this.resolver = resolver;
        this.viewRef = viewRef;
        this._options = {
            columns: true,
            filtering: true,
            advancedFiltering: true,
            sorting: true,
            groupBy: true,
            paging: true,
            cellSelection: true,
            rowSelection: true,
            columnSelection: true,
            rowPinning: true
        };
    }
    /**
     *  An object with options determining if a certain feature state should be saved.
     *
     * ```html
     * <igx-grid [igxGridState]="options"></igx-grid>
     * ```
     * ```typescript
     * public options = {selection: false, advancedFiltering: false};
     * ```
     */
    get options() {
        return this._options;
    }
    set options(value) {
        Object.assign(this._options, value);
    }
    /**
     * Gets the state of a feature or states of all grid features, unless a certain feature is disabled through the `options` property.
     * @param `serialize` determines whether the returned object will be serialized to JSON string. Default value is false.
     * @param `feature` string or array of strings determining the features which state to retrieve. If skipped, returns all.
     * @returns Returns the serialized to JSON string IGridState object, or the non-serialized IGridState object.
     * ```html
     * <igx-grid [igxGridState]="options"></igx-grid>
     * ```
     * ```typescript
     * @ViewChild(IgxGridStateDirective, { static: true }) public state;
     * let state =  this.state.getState();
     * ```
     */
    getState(serialize = true, feature) {
        let state;
        if (feature) {
            state = {};
            if (Array.isArray(feature)) {
                feature.forEach(f => {
                    state = Object.assign(state, this.getGridFeature(f));
                });
            }
            else {
                state = this.getGridFeature(feature);
            }
        }
        else {
            state = this.getAllGridFeatures();
        }
        if (serialize) {
            state = JSON.stringify(state, this.stringifyCallback);
            return state;
        }
        else {
            return state;
        }
    }
    /**
     * Restores grid features' state based on the IGridState object passed as an argument.
     * @param IGridState object to restore state from.
     * @returns
     * ```html
     * <igx-grid [igxGridState]="options"></igx-grid>
     * ```
     * ```typescript
     * @ViewChild(IgxGridStateDirective, { static: true }) public state;
     * this.state.setState(gridState);
     * ```
     */
    setState(state) {
        if (typeof state === 'string') {
            state = JSON.parse(state);
        }
        this.state = state;
        this.restoreGridState();
        this.grid.cdr.detectChanges();
    }
    /**
     * The method that calls corresponding methods to restore feature from this.state object.
     */
    restoreGridState() {
        for (const key of Object.keys(this.state)) {
            if (this.state[key]) {
                this.restoreFeature(key, this.state[key]);
            }
        }
    }
    /**
     * Restores the state of a feature.
     */
    restoreFeature(feature, state) {
        switch (feature) {
            case COLUMNS: {
                this.restoreColumns(state);
                break;
            }
            case FILTERING: {
                this.restoreFiltering(state);
                break;
            }
            case ADVANCED_FILTERING: {
                this.restoreAdvancedFiltering(state);
                break;
            }
            case SORTING: {
                this.restoreSorting(state);
                break;
            }
            case GROUPBY: {
                this.restoreGroupBy(state);
                break;
            }
            case PAGING: {
                this.restorePaging(state);
                break;
            }
            case ROW_SELECTION: {
                this.restoreRowSelection(state);
                break;
            }
            case ROW_PINNING: {
                this.restoreRowPinning(state);
                break;
            }
            case PINNING_CONFIG: {
                this.restorePinningConfig(state);
                break;
            }
            case CELL_SELECTION: {
                this.restoreCellSelection(state);
                break;
            }
            case COLUMN_SELECTION: {
                this.restoreColumnSelection(state);
                break;
            }
        }
    }
    /**
     * Returns an object containing all grid features state.
     */
    getAllGridFeatures() {
        let gridState = {};
        for (const key of Object.keys(this.options)) {
            if (this.options[key]) {
                const feature = this.getGridFeature(key);
                gridState = Object.assign(gridState, feature);
            }
        }
        gridState = Object.assign({}, gridState);
        return gridState;
    }
    /**
     * Restores an object containing the state for a grid feature.
     * `serialize` param determines whether the returned object will be serialized to a JSON string. Default value is false.,
     */
    getGridFeature(feature) {
        const state = {};
        switch (feature) {
            case COLUMNS: {
                Object.assign(state, this.getColumns());
                break;
            }
            case FILTERING: {
                Object.assign(state, this.getFiltering());
                break;
            }
            case ADVANCED_FILTERING: {
                Object.assign(state, this.getAdvancedFiltering());
                break;
            }
            case SORTING: {
                Object.assign(state, this.getSorting());
                break;
            }
            case GROUPBY: {
                Object.assign(state, this.getGroupBy());
                break;
            }
            case PAGING: {
                Object.assign(state, this.getPaging());
                break;
            }
            case ROW_SELECTION: {
                Object.assign(state, this.getRowSelection());
                break;
            }
            case ROW_PINNING: {
                Object.assign(state, this.getRowPinning());
                break;
            }
            case PINNING_CONFIG: {
                Object.assign(state, this.getPinningConfig());
                break;
            }
            case CELL_SELECTION: {
                Object.assign(state, this.getCellSelection());
                break;
            }
            case COLUMN_SELECTION: {
                Object.assign(state, this.getColumnSelection());
                break;
            }
        }
        return state;
    }
    /**
     * Helper method that creates a new array with the current grid columns.
     */
    getColumns() {
        const gridColumns = this.grid.columns.sort(this.sortByVisibleIndex).map((c) => {
            return {
                pinned: c.pinned,
                sortable: c.sortable,
                filterable: c.filterable,
                editable: c.editable,
                sortingIgnoreCase: c.sortingIgnoreCase,
                filteringIgnoreCase: c.filteringIgnoreCase,
                headerClasses: c.headerClasses,
                headerGroupClasses: c.headerGroupClasses,
                maxWidth: c.maxWidth,
                groupable: c.groupable,
                movable: c.movable,
                hidden: c.hidden,
                dataType: c.dataType,
                hasSummary: c.hasSummary,
                field: c.field,
                width: c.width,
                header: c.header,
                resizable: c.resizable,
                searchable: c.searchable
            };
        });
        return { columns: gridColumns };
    }
    getFiltering() {
        const filteringState = this.grid.filteringExpressionsTree;
        return { filtering: filteringState };
    }
    getAdvancedFiltering() {
        const advancedFiltering = this.grid.advancedFilteringExpressionsTree;
        return { advancedFiltering: advancedFiltering };
    }
    getPaging() {
        const pagingState = this.grid.pagingState;
        return { paging: pagingState };
    }
    getSorting() {
        const sortingState = this.grid.sortingExpressions;
        sortingState.forEach(s => {
            delete s.strategy;
        });
        return { sorting: sortingState };
    }
    getGroupBy() {
        const groupingExpressions = this.grid.groupingExpressions;
        groupingExpressions.forEach(expr => {
            delete expr.strategy;
        });
        const expansionState = this.grid.groupingExpansionState;
        const groupsExpanded = this.grid.groupsExpanded;
        return { groupBy: { expressions: groupingExpressions, expansion: expansionState, defaultExpanded: groupsExpanded } };
    }
    getRowSelection() {
        const selection = this.grid.selectedRows();
        return { rowSelection: selection };
    }
    getRowPinning() {
        const pinned = this.grid.pinnedRows.map(x => x.rowID);
        return { rowPinning: pinned };
    }
    getPinningConfig() {
        return { pinningConfig: this.grid.pinning };
    }
    getColumnSelection() {
        const selection = this.grid.selectedColumns().map(c => c.field);
        return { columnSelection: selection };
    }
    getCellSelection() {
        const selection = this.grid.getSelectedRanges().map(range => {
            return { rowStart: range.rowStart, rowEnd: range.rowEnd, columnStart: range.columnStart, columnEnd: range.columnEnd };
        });
        return { cellSelection: selection };
    }
    /**
     * Restores the grid columns by modifying the `columnList` collection of the grid.
     */
    restoreColumns(columnsState) {
        const newColumns = [];
        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);
        columnsState.forEach((colState) => {
            const ref = factory.create(this.viewRef.injector);
            Object.assign(ref.instance, colState);
            ref.changeDetectorRef.detectChanges();
            newColumns.push(ref.instance);
        });
        this.grid.columnList.reset(newColumns);
        this.grid.columnList.notifyOnChanges();
    }
    sortByVisibleIndex(colA, colB) {
        const a = colA.visibleIndex, b = colB.visibleIndex;
        return a > b ? 1 : a < b ? -1 : 0;
    }
    /**
     * Restores the grid filtering state, i.e. sets the `filteringExpressionsTree` property value.
     */
    restoreFiltering(state) {
        const filterTree = this.createExpressionsTreeFromObject(state);
        this.grid.filteringExpressionsTree = filterTree;
    }
    /**
     * Restores the grid advanced filtering state, i.e. sets the `advancedFilteringExpressionsTree` property value.
     */
    restoreAdvancedFiltering(state) {
        const advFilterTree = this.createExpressionsTreeFromObject(state);
        this.grid.advancedFilteringExpressionsTree = advFilterTree;
    }
    /**
     * Restores the grid sorting state, i.e. sets the `sortingExpressions` property value.
     */
    restoreSorting(state) {
        this.grid.sortingExpressions = state;
    }
    /**
     * Restores the grid grouping state, i.e. sets the `groupbyExpressions` property value.
     */
    restoreGroupBy(state) {
        this.grid.groupingExpressions = state.expressions;
        if (this.grid.groupsExpanded !== state.defaultExpanded) {
            this.grid.toggleAllGroupRows();
        }
        else {
            this.grid.groupingExpansionState = state.expansion;
        }
    }
    /**
     * Restores the grid paging state, i.e. sets the `perPage` property value and paginate to index.
     */
    restorePaging(state) {
        if (this.grid.perPage !== state.recordsPerPage) {
            this.grid.perPage = state.recordsPerPage;
            this.grid.cdr.detectChanges();
        }
        this.grid.page = state.index;
    }
    restoreRowSelection(state) {
        this.grid.selectRows(state);
    }
    restoreRowPinning(state) {
        // clear current state.
        this.grid.pinnedRows.forEach(row => row.unpin());
        state.forEach(rowID => this.grid.pinRow(rowID));
    }
    restorePinningConfig(state) {
        this.grid.pinning = state;
    }
    restoreColumnSelection(state) {
        this.grid.selectColumns(state);
    }
    restoreCellSelection(state) {
        state.forEach(r => {
            const range = { rowStart: r.rowStart, rowEnd: r.rowEnd, columnStart: r.columnStart, columnEnd: r.columnEnd };
            this.grid.selectRange(range);
        });
    }
    /**
     * This method builds a FilteringExpressionsTree from a provided object.
     */
    createExpressionsTreeFromObject(exprTreeObject) {
        if (!exprTreeObject || !exprTreeObject.filteringOperands) {
            return null;
        }
        const expressionsTree = new FilteringExpressionsTree(exprTreeObject.operator, exprTreeObject.fieldName);
        for (const item of exprTreeObject.filteringOperands) {
            // Check if item is an expressions tree or a single expression.
            if (item.filteringOperands) {
                const subTree = this.createExpressionsTreeFromObject(item);
                expressionsTree.filteringOperands.push(subTree);
            }
            else {
                const expr = item;
                let dataType;
                if (this.grid.columnList.length > 0) {
                    dataType = this.grid.columnList.find(c => c.field === expr.fieldName).dataType;
                }
                else {
                    dataType = this.state[COLUMNS].find(c => c.field === expr.fieldName).dataType;
                }
                // when ESF, values are stored in Set.
                // First those values are converted to an array before returning string in the stringifyCallback
                // now we need to convert those back to Set
                if (Array.isArray(expr.searchVal)) {
                    expr.searchVal = new Set(expr.searchVal);
                }
                else {
                    expr.searchVal = (dataType === 'date') ? new Date(Date.parse(expr.searchVal)) : expr.searchVal;
                }
                expr.condition = this.generateFilteringCondition(dataType, expr.condition.name);
                expressionsTree.filteringOperands.push(expr);
            }
        }
        return expressionsTree;
    }
    /**
     * Returns the filtering logic function for a given dataType and condition (contains, greaterThan, etc.)
     */
    generateFilteringCondition(dataType, name) {
        let filters;
        switch (dataType) {
            case DataType.Boolean:
                filters = IgxBooleanFilteringOperand.instance();
                break;
            case DataType.Number:
                filters = IgxNumberFilteringOperand.instance();
                break;
            case DataType.Date:
                filters = IgxDateFilteringOperand.instance();
                break;
            case DataType.String:
            default:
                filters = IgxStringFilteringOperand.instance();
                break;
        }
        return filters.condition(name);
    }
    stringifyCallback(key, val) {
        if (key === 'searchVal' && val instanceof Set) {
            return Array.from(val);
        }
        return val;
    }
};
IgxGridStateDirective.ctorParameters = () => [
    { type: IgxGridComponent, decorators: [{ type: Host }, { type: Optional }] },
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef }
];
__decorate([
    Input('igxGridState')
], IgxGridStateDirective.prototype, "options", null);
IgxGridStateDirective = __decorate([
    Directive({
        selector: '[igxGridState]'
    }),
    __param(0, Host()), __param(0, Optional())
], IgxGridStateDirective);
export { IgxGridStateDirective };
/**
 * @hidden
 */
let IgxGridStateModule = class IgxGridStateModule {
};
IgxGridStateModule = __decorate([
    NgModule({
        declarations: [IgxGridStateDirective],
        exports: [IgxGridStateDirective]
    })
], IgxGridStateModule);
export { IgxGridStateModule };
//# sourceMappingURL=data:application/json;base64,