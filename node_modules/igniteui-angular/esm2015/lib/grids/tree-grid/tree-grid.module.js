import { __decorate } from "tslib";
import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { IgxTreeGridComponent } from './tree-grid.component';
import { IgxTreeGridRowComponent } from './tree-grid-row.component';
import { IgxGridCommonModule } from '../grid-common.module';
import { IgxTreeGridHierarchizingPipe, IgxTreeGridNormalizeRecordsPipe } from './tree-grid.pipes';
import { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';
import { IgxTreeGridCellComponent } from './tree-cell.component';
import { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';
import { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';
import { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';
/**
 * @hidden
 */
let IgxTreeGridModule = class IgxTreeGridModule {
};
IgxTreeGridModule = __decorate([
    NgModule({
        declarations: [
            IgxTreeGridComponent,
            IgxTreeGridRowComponent,
            IgxTreeGridCellComponent,
            IgxTreeGridHierarchizingPipe,
            IgxTreeGridFlatteningPipe,
            IgxTreeGridSortingPipe,
            IgxTreeGridFilteringPipe,
            IgxTreeGridPagingPipe,
            IgxTreeGridTransactionPipe,
            IgxTreeGridSummaryPipe,
            IgxRowLoadingIndicatorTemplateDirective,
            IgxTreeGridNormalizeRecordsPipe
        ],
        exports: [
            IgxTreeGridComponent,
            IgxTreeGridRowComponent,
            IgxTreeGridCellComponent,
            IgxRowLoadingIndicatorTemplateDirective,
            IgxGridCommonModule
        ],
        imports: [
            IgxGridCommonModule,
        ],
        schemas: [CUSTOM_ELEMENTS_SCHEMA]
    })
], IgxTreeGridModule);
export { IgxTreeGridModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZ3JpZHMvdHJlZS1ncmlkL3RyZWUtZ3JpZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLCtCQUErQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEcsT0FBTyxFQUFFLHlCQUF5QixFQUFFLHNCQUFzQixFQUFFLHFCQUFxQixFQUFFLDBCQUEwQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDekksT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDakY7O0dBRUc7QUE0QkgsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7Q0FDN0IsQ0FBQTtBQURZLGlCQUFpQjtJQTNCN0IsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFO1lBQ1osb0JBQW9CO1lBQ3BCLHVCQUF1QjtZQUN2Qix3QkFBd0I7WUFDeEIsNEJBQTRCO1lBQzVCLHlCQUF5QjtZQUN6QixzQkFBc0I7WUFDdEIsd0JBQXdCO1lBQ3hCLHFCQUFxQjtZQUNyQiwwQkFBMEI7WUFDMUIsc0JBQXNCO1lBQ3RCLHVDQUF1QztZQUN2QywrQkFBK0I7U0FDaEM7UUFDRCxPQUFPLEVBQUU7WUFDUCxvQkFBb0I7WUFDcEIsdUJBQXVCO1lBQ3ZCLHdCQUF3QjtZQUN4Qix1Q0FBdUM7WUFDdkMsbUJBQW1CO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsbUJBQW1CO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUM7S0FDbEMsQ0FBQztHQUNXLGlCQUFpQixDQUM3QjtTQURZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBDVVNUT01fRUxFTUVOVFNfU0NIRU1BIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hUcmVlR3JpZENvbXBvbmVudCB9IGZyb20gJy4vdHJlZS1ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hUcmVlR3JpZFJvd0NvbXBvbmVudCB9IGZyb20gJy4vdHJlZS1ncmlkLXJvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4R3JpZENvbW1vbk1vZHVsZSB9IGZyb20gJy4uL2dyaWQtY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBJZ3hUcmVlR3JpZEhpZXJhcmNoaXppbmdQaXBlLCBJZ3hUcmVlR3JpZE5vcm1hbGl6ZVJlY29yZHNQaXBlIH0gZnJvbSAnLi90cmVlLWdyaWQucGlwZXMnO1xuaW1wb3J0IHsgSWd4VHJlZUdyaWRGbGF0dGVuaW5nUGlwZSwgSWd4VHJlZUdyaWRTb3J0aW5nUGlwZSwgSWd4VHJlZUdyaWRQYWdpbmdQaXBlLCBJZ3hUcmVlR3JpZFRyYW5zYWN0aW9uUGlwZSB9IGZyb20gJy4vdHJlZS1ncmlkLnBpcGVzJztcbmltcG9ydCB7IElneFRyZWVHcmlkQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vdHJlZS1jZWxsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hUcmVlR3JpZEZpbHRlcmluZ1BpcGUgfSBmcm9tICcuL3RyZWUtZ3JpZC5maWx0ZXJpbmcucGlwZSc7XG5pbXBvcnQgeyBJZ3hUcmVlR3JpZFN1bW1hcnlQaXBlIH0gZnJvbSAnLi90cmVlLWdyaWQuc3VtbWFyeS5waXBlJztcbmltcG9ydCB7IElneFJvd0xvYWRpbmdJbmRpY2F0b3JUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vdHJlZS1ncmlkLmRpcmVjdGl2ZXMnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIElneFRyZWVHcmlkQ29tcG9uZW50LFxuICAgIElneFRyZWVHcmlkUm93Q29tcG9uZW50LFxuICAgIElneFRyZWVHcmlkQ2VsbENvbXBvbmVudCxcbiAgICBJZ3hUcmVlR3JpZEhpZXJhcmNoaXppbmdQaXBlLFxuICAgIElneFRyZWVHcmlkRmxhdHRlbmluZ1BpcGUsXG4gICAgSWd4VHJlZUdyaWRTb3J0aW5nUGlwZSxcbiAgICBJZ3hUcmVlR3JpZEZpbHRlcmluZ1BpcGUsXG4gICAgSWd4VHJlZUdyaWRQYWdpbmdQaXBlLFxuICAgIElneFRyZWVHcmlkVHJhbnNhY3Rpb25QaXBlLFxuICAgIElneFRyZWVHcmlkU3VtbWFyeVBpcGUsXG4gICAgSWd4Um93TG9hZGluZ0luZGljYXRvclRlbXBsYXRlRGlyZWN0aXZlLFxuICAgIElneFRyZWVHcmlkTm9ybWFsaXplUmVjb3Jkc1BpcGVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIElneFRyZWVHcmlkQ29tcG9uZW50LFxuICAgIElneFRyZWVHcmlkUm93Q29tcG9uZW50LFxuICAgIElneFRyZWVHcmlkQ2VsbENvbXBvbmVudCxcbiAgICBJZ3hSb3dMb2FkaW5nSW5kaWNhdG9yVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgSWd4R3JpZENvbW1vbk1vZHVsZVxuICBdLFxuICBpbXBvcnRzOiBbXG4gICAgSWd4R3JpZENvbW1vbk1vZHVsZSxcbiAgXSxcbiAgc2NoZW1hczogW0NVU1RPTV9FTEVNRU5UU19TQ0hFTUFdXG59KVxuZXhwb3J0IGNsYXNzIElneFRyZWVHcmlkTW9kdWxlIHtcbn1cbiJdfQ==