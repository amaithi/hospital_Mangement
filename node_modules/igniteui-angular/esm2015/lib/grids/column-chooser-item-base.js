import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
/**
 * @hidden
 */
let ItemPropertyValueChangedDirective = class ItemPropertyValueChangedDirective {
    constructor(propName) {
        this.valueChanged = new EventEmitter();
        this._propName = propName;
    }
    get object() {
        return this._object;
    }
    set object(value) {
        if (value) {
            this._object = value;
        }
    }
    get value() {
        return (this.object) ? this.object[this._propName] : null;
    }
    set value(value) {
        this.onValueChanged(value);
    }
    onValueChanged(value) {
        const currentValue = this.value;
        if (value !== currentValue) {
            this.object[this._propName] = value;
            this.valueChanged.emit({ oldValue: currentValue, newValue: value });
        }
    }
};
ItemPropertyValueChangedDirective.ctorParameters = () => [
    { type: String }
];
__decorate([
    Input()
], ItemPropertyValueChangedDirective.prototype, "value", null);
__decorate([
    Output()
], ItemPropertyValueChangedDirective.prototype, "valueChanged", void 0);
ItemPropertyValueChangedDirective = __decorate([
    Directive()
], ItemPropertyValueChangedDirective);
export { ItemPropertyValueChangedDirective };
/** @hidden */
let ColumnChooserItemBaseDirective = class ColumnChooserItemBaseDirective extends ItemPropertyValueChangedDirective {
    constructor(prop) {
        super(prop);
        this.prop = prop;
        this.indentation = 30;
    }
    get column() {
        return this.object;
    }
    set column(value) {
        if (value) {
            this.object = value;
        }
    }
    get name() {
        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';
    }
    get level() {
        return this.column.level;
    }
    get calcIndent() {
        return this.indentation * this.level;
    }
};
ColumnChooserItemBaseDirective.ctorParameters = () => [
    { type: String }
];
__decorate([
    Input()
], ColumnChooserItemBaseDirective.prototype, "column", null);
__decorate([
    Input()
], ColumnChooserItemBaseDirective.prototype, "indentation", void 0);
__decorate([
    Input()
], ColumnChooserItemBaseDirective.prototype, "container", void 0);
ColumnChooserItemBaseDirective = __decorate([
    Directive()
], ColumnChooserItemBaseDirective);
export { ColumnChooserItemBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItaXRlbS1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9jb2x1bW4tY2hvb3Nlci1pdGVtLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRdkU7O0dBRUc7QUFFSCxJQUFzQixpQ0FBaUMsR0FBdkQsTUFBc0IsaUNBQWlDO0lBMEJuRCxZQUFZLFFBQWdCO1FBRnJCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFHN0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDOUIsQ0FBQztJQXhCRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksTUFBTSxDQUFDLEtBQUs7UUFDWixJQUFJLEtBQUssRUFBRTtZQUNQLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1NBQ3hCO0lBQ0wsQ0FBQztJQUdELElBQUksS0FBSztRQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDOUQsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLEtBQUs7UUFDWCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFTUyxjQUFjLENBQUMsS0FBSztRQUMxQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2hDLElBQUksS0FBSyxLQUFLLFlBQVksRUFBRTtZQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0wsQ0FBQztDQUNKLENBQUE7Ozs7QUF0Qkc7SUFEQyxLQUFLLEVBQUU7OERBR1A7QUFPRDtJQURDLE1BQU0sRUFBRTt1RUFDd0Q7QUF4Qi9DLGlDQUFpQztJQUR0RCxTQUFTLEVBQUU7R0FDVSxpQ0FBaUMsQ0FxQ3REO1NBckNxQixpQ0FBaUM7QUF1Q3ZELGNBQWM7QUFFZCxJQUFhLDhCQUE4QixHQUEzQyxNQUFhLDhCQUErQixTQUFRLGlDQUFpQztJQWtCakYsWUFBbUIsSUFBWTtRQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFERyxTQUFJLEdBQUosSUFBSSxDQUFRO1FBTHhCLGdCQUFXLEdBQUcsRUFBRSxDQUFDO0lBT3hCLENBQUM7SUFsQkQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxLQUFLO1FBQ1osSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztTQUN2QjtJQUNMLENBQUM7SUFZRCxJQUFJLElBQUk7UUFDSixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNoRyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekMsQ0FBQztDQUNKLENBQUE7Ozs7QUEvQkc7SUFEQyxLQUFLLEVBQUU7NERBR1A7QUFTRDtJQURDLEtBQUssRUFBRTttRUFDZ0I7QUFHeEI7SUFEQyxLQUFLLEVBQUU7aUVBQ2M7QUFoQmIsOEJBQThCO0lBRDFDLFNBQVMsRUFBRTtHQUNDLDhCQUE4QixDQWlDMUM7U0FqQ1ksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElCYXNlRXZlbnRBcmdzIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVZhbHVlQ2hhbmdlZEV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICBvbGRWYWx1ZTogYW55O1xuICAgIG5ld1ZhbHVlOiBhbnk7XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJdGVtUHJvcGVydHlWYWx1ZUNoYW5nZWREaXJlY3RpdmUge1xuICAgIHByaXZhdGUgX29iamVjdDogYW55O1xuICAgIHByaXZhdGUgX3Byb3BOYW1lOiBzdHJpbmc7XG5cbiAgICBnZXQgb2JqZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2JqZWN0O1xuICAgIH1cblxuICAgIHNldCBvYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9vYmplY3QgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMub2JqZWN0KSA/IHRoaXMub2JqZWN0W3RoaXMuX3Byb3BOYW1lXSA6IG51bGw7XG4gICAgfVxuXG4gICAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZWQodmFsdWUpO1xuICAgIH1cblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPElWYWx1ZUNoYW5nZWRFdmVudEFyZ3M+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3Byb3BOYW1lID0gcHJvcE5hbWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uVmFsdWVDaGFuZ2VkKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdFt0aGlzLl9wcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQoeyBvbGRWYWx1ZTogY3VycmVudFZhbHVlLCBuZXdWYWx1ZTogdmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKiBAaGlkZGVuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBDb2x1bW5DaG9vc2VySXRlbUJhc2VEaXJlY3RpdmUgZXh0ZW5kcyBJdGVtUHJvcGVydHlWYWx1ZUNoYW5nZWREaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGNvbHVtbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0O1xuICAgIH1cblxuICAgIHNldCBjb2x1bW4odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaW5kZW50YXRpb24gPSAzMDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbnRhaW5lcjogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHByb3A6IHN0cmluZykge1xuICAgICAgICBzdXBlcihwcm9wKTtcbiAgICB9XG5cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNvbHVtbikgPyAoKHRoaXMuY29sdW1uLmhlYWRlcikgPyB0aGlzLmNvbHVtbi5oZWFkZXIgOiB0aGlzLmNvbHVtbi5maWVsZCkgOiAnJztcbiAgICB9XG5cbiAgICBnZXQgbGV2ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5sZXZlbDtcbiAgICB9XG5cbiAgICBnZXQgY2FsY0luZGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZW50YXRpb24gKiB0aGlzLmxldmVsO1xuICAgIH1cbn1cbiJdfQ==