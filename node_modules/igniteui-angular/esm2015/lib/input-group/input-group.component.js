var IgxInputGroupComponent_1;
import { __decorate, __param } from "tslib";
import { CommonModule } from '@angular/common';
import { Component, ContentChild, ContentChildren, ElementRef, HostBinding, HostListener, Input, NgModule, QueryList, Inject, Optional } from '@angular/core';
import { IgxHintDirective } from '../directives/hint/hint.directive';
import { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';
import { IgxLabelDirective } from '../directives/label/label.directive';
import { IgxPrefixModule } from '../directives/prefix/prefix.directive';
import { IgxSuffixModule } from '../directives/suffix/suffix.directive';
import { DisplayDensity, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';
import { IgxInputGroupBase } from './input-group.common';
import { DeprecateProperty } from '../core/deprecateDecorators';
let NEXT_ID = 0;
var IgxInputGroupType;
(function (IgxInputGroupType) {
    IgxInputGroupType[IgxInputGroupType["LINE"] = 0] = "LINE";
    IgxInputGroupType[IgxInputGroupType["BOX"] = 1] = "BOX";
    IgxInputGroupType[IgxInputGroupType["BORDER"] = 2] = "BORDER";
    IgxInputGroupType[IgxInputGroupType["FLUENT"] = 3] = "FLUENT";
    IgxInputGroupType[IgxInputGroupType["BOOTSTRAP"] = 4] = "BOOTSTRAP";
    IgxInputGroupType[IgxInputGroupType["SEARCH"] = 5] = "SEARCH";
    IgxInputGroupType[IgxInputGroupType["FLUENT_SEARCH"] = 6] = "FLUENT_SEARCH";
})(IgxInputGroupType || (IgxInputGroupType = {}));
let IgxInputGroupComponent = IgxInputGroupComponent_1 = class IgxInputGroupComponent extends DisplayDensityBase {
    constructor(_element, _displayDensityOptions) {
        super(_displayDensityOptions);
        this._element = _element;
        this._displayDensityOptions = _displayDensityOptions;
        this._type = IgxInputGroupType.LINE;
        this._filled = false;
        /**
         * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-input-group [id]="'igx-input-group-55'"></igx-input-group>
         * ```
         */
        this.id = `igx-input-group-${NEXT_ID++}`;
        /**
         * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.
         * By default applied the class is applied.
         * ```typescript
         *  @ViewChild("MyInputGroup")
         *  public inputGroup: IgxInputGroupComponent;
         *  ngAfterViewInit(){
         *  this.inputGroup.defaultClass = false;
         * ```
         * }
         */
        this.defaultClass = true;
        /** @hidden */
        this.hasPlaceholder = false;
        /** @hidden */
        this.isRequired = false;
        /** @hidden */
        this.isFocused = false;
        /** @hidden */
        this.isBox = false;
        /** @hidden */
        this.isBorder = false;
        /** @hidden */
        this.isSearch = false;
        /** @hidden */
        this.isFluentSearch = false;
        /** @hidden */
        this.isFluent = false;
        /** @hidden */
        this.isBootstrap = false;
        /**
         * An @Input property that disables the `IgxInputGroupComponent`.
         * ```html
         * <igx-input-group [disabled]="'true'"></igx-input-group>
         * ```
         */
        this.disabled = false;
        /**
         * Prevents automatically focusing the input when clicking on other elements in the input group (e.g. prefix or suffix).
         * @remarks Automatic focus causes software keyboard to show on mobile devices.
         *
         * @example
         * ```html
         * <igx-input-group [suppressInputAutofocus]="true"></igx-input-group>
         * ```
         */
        this.suppressInputAutofocus = false;
        /** @hidden */
        this.hasWarning = false;
        this.element = _element;
    }
    /** @hidden */
    get validClass() {
        return this.input.valid === IgxInputState.VALID;
    }
    /** @hidden */
    get invalidClass() {
        return this.input.valid === IgxInputState.INVALID;
    }
    /** @hidden */
    get isFilled() {
        return this._filled || (this.input && this.input.value);
    }
    /** @hidden */
    get isDisplayDensityCosy() {
        return this.displayDensity === DisplayDensity.cosy;
    }
    /** @hidden */
    get isDisplayDensityComfortable() {
        return this.displayDensity === DisplayDensity.comfortable;
    }
    /** @hidden */
    get isDisplayDensityCompact() {
        return this.displayDensity === DisplayDensity.compact;
    }
    /** @hidden */
    onClick(event) {
        if (!this.isFocused && event.target !== this.input.nativeElement && !this.suppressInputAutofocus) {
            this.input.focus();
        }
    }
    /** @hidden */
    onPointerDown(event) {
        if (this.isFocused && event.target !== this.input.nativeElement) {
            event.preventDefault();
        }
    }
    /**
     * An @Input property that sets how the input will be styled.
     * The allowed values are `line`, `box`, `border`, `fluent`, `search` and `fluentSearch`. The default is `line`.
     * ```html
     * <igx-input-group [type]="'search'">
     * ```
     */
    set type(value) {
        const type = IgxInputGroupType[value.toUpperCase()];
        if (type !== undefined) {
            this.isBox = this.isBootstrap = this.isFluent = this.isFluentSearch = this.isBorder = this.isSearch = false;
            switch (type) {
                case IgxInputGroupType.BOX:
                    this.isBox = true;
                    break;
                case IgxInputGroupType.BORDER:
                    this.isBorder = true;
                    break;
                case IgxInputGroupType.FLUENT:
                    this.isFluent = true;
                    break;
                case IgxInputGroupType.FLUENT_SEARCH:
                    this.isFluentSearch = true;
                    break;
                case IgxInputGroupType.SEARCH:
                    this.isSearch = true;
                    break;
                case IgxInputGroupType.BOOTSTRAP:
                    this.isBootstrap = true;
                    break;
                default: break;
            }
            this._type = type;
        }
    }
    /**
     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.
     * Values are `line` - 0, `box` - 1, `border` - 2,  `fluent` - 3 `fluentSearch` - 4 and `search` - 5. The default is `line`.
     * ```typescript
     * @ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let inputType = this.inputGroup.type;
     * }
     * ```
     */
    get type() {
        return this._type.toString();
    }
    /**
     * @hidden
     * @deprecated Use 'suppressInputAutofocus' instead.
     */
    get supressInputAutofocus() {
        return this.suppressInputAutofocus;
    }
    /**
     * @hidden
     * @deprecated Use 'suppressInputAutofocus' instead.
     */
    set supressInputAutofocus(value) {
        this.suppressInputAutofocus = value;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` has hints.
     * ```typescript
     * @ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let inputHints = this.inputGroup.hasHints;
     * }
     * ```
     */
    get hasHints() {
        return this.hints.length > 0;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` has border.
     * ```typescript
     * @ViewChild("MyInputGroup")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let inputBorder = this.inputGroup.hasBorder;
     * }
     * ```
     */
    get hasBorder() {
        return this._type === IgxInputGroupType.LINE ||
            this._type === IgxInputGroupType.BOX;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is line.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeLine = this.inputGroup.isTypeLine;
     * }
     * ```
     */
    get isTypeLine() {
        return this._type === IgxInputGroupType.LINE;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is box.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeBox = this.inputGroup.isTypeBox;
     * }
     * ```
     */
    get isTypeBox() {
        return this._type === IgxInputGroupType.BOX;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is border.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeBorder = this.inputGroup.isTypeBorder;
     * }
     * ```
     */
    get isTypeBorder() {
        return this._type === IgxInputGroupType.BORDER;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is Fluent.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeFluent = this.inputGroup.isTypeFluent;
     * }
     * ```
     */
    get isTypeFluent() {
        return this._type === IgxInputGroupType.FLUENT;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is Bootstrap.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeBootstrap = this.inputGroup.isTypeBootstrap;
     * }
     * ```
     */
    get isTypeBootstrap() {
        return this._type === IgxInputGroupType.BOOTSTRAP;
    }
    /** @hidden */
    get isNotMaterial() {
        return this._type === IgxInputGroupType.FLUENT || this._type === IgxInputGroupType.BOOTSTRAP;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is search.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeSearch = this.inputGroup.isTypeSearch;
     * }
     * ```
     */
    get isTypeSearch() {
        return this._type === IgxInputGroupType.SEARCH;
    }
    /**
     * Returns whether the `IgxInputGroupComponent` type is fluentSearch.
     * ```typescript
     * @ViewChild("MyInputGroup1")
     * public inputGroup: IgxInputGroupComponent;
     * ngAfterViewInit(){
     *    let isTypeFluentSearch = this.inputGroup.isTypeFluentSearch;
     * }
     * ```
     */
    get isTypeFluentSearch() {
        return this._type === IgxInputGroupType.FLUENT_SEARCH;
    }
    /** @hidden */
    get filled() {
        return this._filled;
    }
    /** @hidden */
    set filled(val) {
        this._filled = val;
    }
};
IgxInputGroupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
__decorate([
    HostBinding('attr.id'),
    Input()
], IgxInputGroupComponent.prototype, "id", void 0);
__decorate([
    HostBinding('class.igx-input-group')
], IgxInputGroupComponent.prototype, "defaultClass", void 0);
__decorate([
    HostBinding('class.igx-input-group--placeholder')
], IgxInputGroupComponent.prototype, "hasPlaceholder", void 0);
__decorate([
    HostBinding('class.igx-input-group--required')
], IgxInputGroupComponent.prototype, "isRequired", void 0);
__decorate([
    HostBinding('class.igx-input-group--focused')
], IgxInputGroupComponent.prototype, "isFocused", void 0);
__decorate([
    HostBinding('class.igx-input-group--box')
], IgxInputGroupComponent.prototype, "isBox", void 0);
__decorate([
    HostBinding('class.igx-input-group--border')
], IgxInputGroupComponent.prototype, "isBorder", void 0);
__decorate([
    HostBinding('class.igx-input-group--search')
], IgxInputGroupComponent.prototype, "isSearch", void 0);
__decorate([
    HostBinding('class.igx-input-group--fluent-search')
], IgxInputGroupComponent.prototype, "isFluentSearch", void 0);
__decorate([
    HostBinding('class.igx-input-group--fluent')
], IgxInputGroupComponent.prototype, "isFluent", void 0);
__decorate([
    HostBinding('class.igx-input-group--bootstrap')
], IgxInputGroupComponent.prototype, "isBootstrap", void 0);
__decorate([
    HostBinding('class.igx-input-group--disabled'),
    Input()
], IgxInputGroupComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], IgxInputGroupComponent.prototype, "suppressInputAutofocus", void 0);
__decorate([
    HostBinding('class.igx-input-group--valid')
], IgxInputGroupComponent.prototype, "validClass", null);
__decorate([
    HostBinding('class.igx-input-group--invalid')
], IgxInputGroupComponent.prototype, "invalidClass", null);
__decorate([
    HostBinding('class.igx-input-group--warning')
], IgxInputGroupComponent.prototype, "hasWarning", void 0);
__decorate([
    HostBinding('class.igx-input-group--filled')
], IgxInputGroupComponent.prototype, "isFilled", null);
__decorate([
    HostBinding('class.igx-input-group--cosy')
], IgxInputGroupComponent.prototype, "isDisplayDensityCosy", null);
__decorate([
    HostBinding('class.igx-input-group--comfortable')
], IgxInputGroupComponent.prototype, "isDisplayDensityComfortable", null);
__decorate([
    HostBinding('class.igx-input-group--compact')
], IgxInputGroupComponent.prototype, "isDisplayDensityCompact", null);
__decorate([
    ContentChildren(IgxHintDirective, { read: IgxHintDirective })
], IgxInputGroupComponent.prototype, "hints", void 0);
__decorate([
    ContentChild(IgxInputDirective, { read: IgxInputDirective, static: true })
], IgxInputGroupComponent.prototype, "input", void 0);
__decorate([
    HostListener('click', ['$event'])
], IgxInputGroupComponent.prototype, "onClick", null);
__decorate([
    HostListener('pointerdown', ['$event'])
], IgxInputGroupComponent.prototype, "onPointerDown", null);
__decorate([
    Input('type')
], IgxInputGroupComponent.prototype, "type", null);
__decorate([
    DeprecateProperty(`Deprecated. Use 'suppressInputAutofocus' instead.`),
    Input()
], IgxInputGroupComponent.prototype, "supressInputAutofocus", null);
IgxInputGroupComponent = IgxInputGroupComponent_1 = __decorate([
    Component({
        selector: 'igx-input-group',
        template: "<div class=\"igx-input-group__wrapper\" *ngIf=\"isTypeBox; else bundle\">\n    <ng-container *ngTemplateOutlet=\"bundle\"></ng-container>\n</div>\n\n<div class=\"igx-input-group__hint\">\n    <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n</div>\n\n<ng-template #label>\n    <ng-content select=\"[igxLabel]\"></ng-content>\n</ng-template>\n\n<ng-template #input>\n    <ng-content select=\"[igxInput]\"></ng-content>\n</ng-template>\n\n<ng-template #inputBundle>\n    <ng-container *ngIf=\"!isNotMaterial\">\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n</ng-template>\n\n<ng-template #bundle>\n    <ng-container *ngIf=\"isNotMaterial\">\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n    </ng-container>\n\n    <div class=\"igx-input-group__bundle\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n\n        <div *ngIf=\"!isTypeBootstrap; else inputBundle\" class=\"igx-input-group__bundle-main\">\n\n            <ng-container *ngIf=\"!isNotMaterial\">\n                <ng-container *ngTemplateOutlet=\"label\"></ng-container>\n            </ng-container>\n\n            <ng-container *ngTemplateOutlet=\"input\"></ng-container>\n        </div>\n\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </div>\n    <div class=\"igx-input-group__border\" *ngIf=\"hasBorder\"></div>\n</ng-template>\n",
        providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent_1 }]
    }),
    __param(1, Optional()), __param(1, Inject(DisplayDensityToken))
], IgxInputGroupComponent);
export { IgxInputGroupComponent };
/** @hidden */
let IgxInputGroupModule = class IgxInputGroupModule {
};
IgxInputGroupModule = __decorate([
    NgModule({
        declarations: [
            IgxInputGroupComponent,
            IgxHintDirective,
            IgxInputDirective,
            IgxLabelDirective
        ],
        exports: [
            IgxInputGroupComponent,
            IgxHintDirective,
            IgxInputDirective,
            IgxLabelDirective,
            IgxPrefixModule,
            IgxSuffixModule
        ],
        imports: [
            CommonModule,
            IgxPrefixModule,
            IgxSuffixModule
        ]
    })
], IgxInputGroupModule);
export { IgxInputGroupModule };
//# sourceMappingURL=data:application/json;base64,