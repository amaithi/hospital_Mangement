import { DateRangePickerResourceStringsEN } from './date-range-picker-resources';
import { GridResourceStringsEN } from './grid-resources';
import { TimePickerResourceStringsEN } from './time-picker-resources';
import { PaginatorResourceStringsEN } from './paginator-resources';
import { cloneValue } from '../utils';
import { CarouselResourceStringsEN } from './carousel-resources';
/**
 * @hidden
 */
export const CurrentResourceStrings = {
    GridResStrings: cloneValue(GridResourceStringsEN),
    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN),
    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),
    DateRangePickerResStrings: cloneValue(DateRangePickerResourceStringsEN),
    CarouselResStrings: cloneValue(CarouselResourceStringsEN),
};
function updateResourceStrings(currentStrings, newStrings) {
    for (const key of Object.keys(newStrings)) {
        if (key in currentStrings) {
            currentStrings[key] = newStrings[key];
        }
    }
}
/**
 * Changes the resource strings for all components in the application
 * ```
 * @param resourceStrings to be applied
 */
export function changei18n(resourceStrings) {
    for (const key of Object.keys(CurrentResourceStrings)) {
        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);
    }
}
/**
 * Returns current resource strings for all components
 */
export function getCurrentResourceStrings() {
    return Object.assign(Object.assign({}, CurrentResourceStrings.GridResStrings), CurrentResourceStrings.TimePickerResStrings);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2kxOG4vcmVzb3VyY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pGLE9BQU8sRUFBd0IscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvRSxPQUFPLEVBQThCLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEcsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQTRCLHlCQUF5QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFJM0Y7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRztJQUNsQyxjQUFjLEVBQUUsVUFBVSxDQUFDLHFCQUFxQixDQUFDO0lBQ2pELG1CQUFtQixFQUFFLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQztJQUMzRCxvQkFBb0IsRUFBRSxVQUFVLENBQUMsMkJBQTJCLENBQUM7SUFDN0QseUJBQXlCLEVBQUUsVUFBVSxDQUFDLGdDQUFnQyxDQUFDO0lBQ3ZFLGtCQUFrQixFQUFFLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQztDQUM1RCxDQUFDO0FBRUYsU0FBUyxxQkFBcUIsQ0FBQyxjQUFnQyxFQUFFLFVBQTRCO0lBQ3pGLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUN2QyxJQUFJLEdBQUcsSUFBSSxjQUFjLEVBQUU7WUFDdkIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QztLQUNKO0FBQ0wsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsVUFBVSxDQUFDLGVBQWlDO0lBQ3hELEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFO1FBQ25ELHFCQUFxQixDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0tBQ3ZFO0FBQ0wsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHlCQUF5QjtJQUNyQyx1Q0FDVyxzQkFBc0IsQ0FBQyxjQUFjLEdBQ3JDLHNCQUFzQixDQUFDLG9CQUFvQixFQUNwRDtBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRlUmFuZ2VQaWNrZXJSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vZGF0ZS1yYW5nZS1waWNrZXItcmVzb3VyY2VzJztcbmltcG9ydCB7IElHcmlkUmVzb3VyY2VTdHJpbmdzLCBHcmlkUmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL2dyaWQtcmVzb3VyY2VzJztcbmltcG9ydCB7IElUaW1lUGlja2VyUmVzb3VyY2VTdHJpbmdzLCBUaW1lUGlja2VyUmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL3RpbWUtcGlja2VyLXJlc291cmNlcyc7XG5pbXBvcnQgeyBQYWdpbmF0b3JSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vcGFnaW5hdG9yLXJlc291cmNlcyc7XG5pbXBvcnQgeyBjbG9uZVZhbHVlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgSUNhcm91c2VsUmVzb3VyY2VTdHJpbmdzLCBDYXJvdXNlbFJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi9jYXJvdXNlbC1yZXNvdXJjZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZXNvdXJjZVN0cmluZ3MgZXh0ZW5kcyBJR3JpZFJlc291cmNlU3RyaW5ncywgSVRpbWVQaWNrZXJSZXNvdXJjZVN0cmluZ3MsIElDYXJvdXNlbFJlc291cmNlU3RyaW5ncyAge31cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjb25zdCBDdXJyZW50UmVzb3VyY2VTdHJpbmdzID0ge1xuICAgIEdyaWRSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKEdyaWRSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgUGFnaW5hdG9yUmVzU3RyaW5nczogY2xvbmVWYWx1ZShQYWdpbmF0b3JSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgVGltZVBpY2tlclJlc1N0cmluZ3M6IGNsb25lVmFsdWUoVGltZVBpY2tlclJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKERhdGVSYW5nZVBpY2tlclJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBDYXJvdXNlbFJlc1N0cmluZ3M6IGNsb25lVmFsdWUoQ2Fyb3VzZWxSZXNvdXJjZVN0cmluZ3NFTiksXG59O1xuXG5mdW5jdGlvbiB1cGRhdGVSZXNvdXJjZVN0cmluZ3MoY3VycmVudFN0cmluZ3M6IElSZXNvdXJjZVN0cmluZ3MsIG5ld1N0cmluZ3M6IElSZXNvdXJjZVN0cmluZ3MgKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMobmV3U3RyaW5ncykpIHtcbiAgICAgICAgaWYgKGtleSBpbiBjdXJyZW50U3RyaW5ncykge1xuICAgICAgICAgICAgY3VycmVudFN0cmluZ3Nba2V5XSA9IG5ld1N0cmluZ3Nba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSByZXNvdXJjZSBzdHJpbmdzIGZvciBhbGwgY29tcG9uZW50cyBpbiB0aGUgYXBwbGljYXRpb25cbiAqIGBgYFxuICogQHBhcmFtIHJlc291cmNlU3RyaW5ncyB0byBiZSBhcHBsaWVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VpMThuKHJlc291cmNlU3RyaW5nczogSVJlc291cmNlU3RyaW5ncykge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKEN1cnJlbnRSZXNvdXJjZVN0cmluZ3MpKSB7XG4gICAgICAgIHVwZGF0ZVJlc291cmNlU3RyaW5ncyhDdXJyZW50UmVzb3VyY2VTdHJpbmdzW2tleV0sIHJlc291cmNlU3RyaW5ncyk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgY3VycmVudCByZXNvdXJjZSBzdHJpbmdzIGZvciBhbGwgY29tcG9uZW50c1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudFJlc291cmNlU3RyaW5ncygpOiBJUmVzb3VyY2VTdHJpbmdzIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5HcmlkUmVzU3RyaW5ncyxcbiAgICAgICAgICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuVGltZVBpY2tlclJlc1N0cmluZ3NcbiAgICB9O1xufVxuIl19