import { __decorate, __param } from "tslib";
import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';
import { IGX_DROPDOWN_BASE } from './drop-down.common';
import { IgxDropDownBaseDirective } from './drop-down.base';
import { DropDownActionKey } from './drop-down.common';
/**
 * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBaseDirective component
 */
var IgxDropDownItemNavigationDirective = /** @class */ (function () {
    function IgxDropDownItemNavigationDirective(dropdown) {
        this.dropdown = dropdown;
        this._target = null;
    }
    Object.defineProperty(IgxDropDownItemNavigationDirective.prototype, "target", {
        /**
         * Gets the target of the navigation directive;
         *
         * ```typescript
         * // Get
         * export class MyComponent {
         *  ...
         *  @ContentChild(IgxDropDownNavigationDirective)
         *  navDirective: IgxDropDownNavigationDirective = null
         *  ...
         *  const navTarget: IgxDropDownBaseDirective = navDirective.navTarget
         * }
         * ```
         */
        get: function () {
            return this._target;
        },
        /**
         * Sets the target of the navigation directive;
         * If no valid target is passed, it falls back to the drop down context
         *
         * ```html
         * <!-- Set -->
         * <input [igxDropDownItemNavigation]="dropdown" />
         * ...
         * <igx-drop-down #dropdown>
         * ...
         * </igx-drop-down>
         * ```
         */
        set: function (target) {
            this._target = target ? target : this.dropdown;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Captures keydown events and calls the appropriate handlers on the target component
     */
    IgxDropDownItemNavigationDirective.prototype.handleKeyDown = function (event) {
        if (event) {
            var key = event.key.toLowerCase();
            if (!this.target.collapsed) { // If dropdown is opened
                var navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',
                    'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];
                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
            }
            else { // If dropdown is closed, do nothing
                return;
            }
            switch (key) {
                case 'esc':
                case 'escape':
                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);
                    break;
                case 'enter':
                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);
                    break;
                case 'space':
                case 'spacebar':
                case ' ':
                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);
                    break;
                case 'arrowup':
                case 'up':
                    this.onArrowUpKeyDown();
                    break;
                case 'arrowdown':
                case 'down':
                    this.onArrowDownKeyDown();
                    break;
                case 'home':
                    this.onHomeKeyDown();
                    break;
                case 'end':
                    this.onEndKeyDown();
                    break;
                default:
                    return;
            }
        }
    };
    /**
     * Navigates to previous item
     */
    IgxDropDownItemNavigationDirective.prototype.onArrowDownKeyDown = function () {
        this.target.navigateNext();
    };
    /**
     * Navigates to previous item
     */
    IgxDropDownItemNavigationDirective.prototype.onArrowUpKeyDown = function () {
        this.target.navigatePrev();
    };
    /**
     * Navigates to target's last item
     */
    IgxDropDownItemNavigationDirective.prototype.onEndKeyDown = function () {
        this.target.navigateLast();
    };
    /**
     * Navigates to target's first item
     */
    IgxDropDownItemNavigationDirective.prototype.onHomeKeyDown = function () {
        this.target.navigateFirst();
    };
    IgxDropDownItemNavigationDirective.ctorParameters = function () { return [
        { type: IgxDropDownBaseDirective, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [IGX_DROPDOWN_BASE,] }] }
    ]; };
    __decorate([
        Input('igxDropDownItemNavigation')
    ], IgxDropDownItemNavigationDirective.prototype, "target", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], IgxDropDownItemNavigationDirective.prototype, "handleKeyDown", null);
    IgxDropDownItemNavigationDirective = __decorate([
        Directive({
            selector: '[igxDropDownItemNavigation]'
        }),
        __param(0, Self()), __param(0, Optional()), __param(0, Inject(IGX_DROPDOWN_BASE))
    ], IgxDropDownItemNavigationDirective);
    return IgxDropDownItemNavigationDirective;
}());
export { IgxDropDownItemNavigationDirective };
//# sourceMappingURL=data:application/json;base64,