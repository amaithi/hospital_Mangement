import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { IgxDropDownComponent } from './drop-down.component';
import { IgxDropDownItemComponent } from './drop-down-item.component';
import { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';
import { CommonModule } from '@angular/common';
import { IgxToggleModule } from '../directives/toggle/toggle.directive';
import { IgxDropDownGroupComponent } from './drop-down-group.component';
import { IgxDropDownBaseDirective } from './drop-down.base';
import { IgxDropDownItemBaseDirective } from './drop-down-item.base';
export * from './drop-down.component';
export * from './drop-down-item.component';
export * from './drop-down-navigation.directive';
export * from './drop-down.base';
export * from './drop-down-item.base';
export * from './drop-down-group.component';
/**
 * @hidden
 */
var IgxDropDownModule = /** @class */ (function () {
    function IgxDropDownModule() {
    }
    IgxDropDownModule = __decorate([
        NgModule({
            declarations: [
                IgxDropDownBaseDirective,
                IgxDropDownComponent,
                IgxDropDownItemBaseDirective,
                IgxDropDownItemComponent,
                IgxDropDownGroupComponent,
                IgxDropDownItemNavigationDirective
            ],
            exports: [
                IgxDropDownComponent,
                IgxDropDownItemComponent,
                IgxDropDownGroupComponent,
                IgxDropDownItemNavigationDirective
            ],
            imports: [
                CommonModule,
                IgxToggleModule
            ]
        })
    ], IgxDropDownModule);
    return IgxDropDownModule;
}());
export { IgxDropDownModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZHJvcC1kb3duL3B1YmxpY19hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUV4RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVyRSxjQUFjLHVCQUF1QixDQUFDO0FBQ3RDLGNBQWMsNEJBQTRCLENBQUM7QUFFM0MsY0FBYyxrQ0FBa0MsQ0FBQztBQUNqRCxjQUFjLGtCQUFrQixDQUFDO0FBQ2pDLGNBQWMsdUJBQXVCLENBQUM7QUFDdEMsY0FBYyw2QkFBNkIsQ0FBQztBQUU1Qzs7R0FFRztBQXFCSDtJQUFBO0lBQWlDLENBQUM7SUFBckIsaUJBQWlCO1FBcEI3QixRQUFRLENBQUM7WUFDTixZQUFZLEVBQUU7Z0JBQ1Ysd0JBQXdCO2dCQUN4QixvQkFBb0I7Z0JBQ3BCLDRCQUE0QjtnQkFDNUIsd0JBQXdCO2dCQUN4Qix5QkFBeUI7Z0JBQ3pCLGtDQUFrQzthQUNyQztZQUNELE9BQU8sRUFBRTtnQkFDTCxvQkFBb0I7Z0JBQ3BCLHdCQUF3QjtnQkFDeEIseUJBQXlCO2dCQUN6QixrQ0FBa0M7YUFDckM7WUFDRCxPQUFPLEVBQUU7Z0JBQ0wsWUFBWTtnQkFDWixlQUFlO2FBQ2xCO1NBQ0osQ0FBQztPQUNXLGlCQUFpQixDQUFJO0lBQUQsd0JBQUM7Q0FBQSxBQUFsQyxJQUFrQztTQUFyQixpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4RHJvcERvd25Db21wb25lbnQgfSBmcm9tICcuL2Ryb3AtZG93bi5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4RHJvcERvd25JdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9kcm9wLWRvd24taXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4RHJvcERvd25JdGVtTmF2aWdhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vZHJvcC1kb3duLW5hdmlnYXRpb24uZGlyZWN0aXZlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJZ3hUb2dnbGVNb2R1bGUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL3RvZ2dsZS90b2dnbGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneFNlbGVjdGlvbkFQSVNlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlbGVjdGlvbic7XG5pbXBvcnQgeyBJZ3hEcm9wRG93bkdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9kcm9wLWRvd24tZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IElneERyb3BEb3duQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vZHJvcC1kb3duLmJhc2UnO1xuaW1wb3J0IHsgSWd4RHJvcERvd25JdGVtQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vZHJvcC1kb3duLWl0ZW0uYmFzZSc7XG5cbmV4cG9ydCAqIGZyb20gJy4vZHJvcC1kb3duLmNvbXBvbmVudCc7XG5leHBvcnQgKiBmcm9tICcuL2Ryb3AtZG93bi1pdGVtLmNvbXBvbmVudCc7XG5leHBvcnQgeyBJU2VsZWN0aW9uRXZlbnRBcmdzLCBJRHJvcERvd25OYXZpZ2F0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi9kcm9wLWRvd24uY29tbW9uJztcbmV4cG9ydCAqIGZyb20gJy4vZHJvcC1kb3duLW5hdmlnYXRpb24uZGlyZWN0aXZlJztcbmV4cG9ydCAqIGZyb20gJy4vZHJvcC1kb3duLmJhc2UnO1xuZXhwb3J0ICogZnJvbSAnLi9kcm9wLWRvd24taXRlbS5iYXNlJztcbmV4cG9ydCAqIGZyb20gJy4vZHJvcC1kb3duLWdyb3VwLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBJZ3hEcm9wRG93bkJhc2VEaXJlY3RpdmUsXG4gICAgICAgIElneERyb3BEb3duQ29tcG9uZW50LFxuICAgICAgICBJZ3hEcm9wRG93bkl0ZW1CYXNlRGlyZWN0aXZlLFxuICAgICAgICBJZ3hEcm9wRG93bkl0ZW1Db21wb25lbnQsXG4gICAgICAgIElneERyb3BEb3duR3JvdXBDb21wb25lbnQsXG4gICAgICAgIElneERyb3BEb3duSXRlbU5hdmlnYXRpb25EaXJlY3RpdmVcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgSWd4RHJvcERvd25Db21wb25lbnQsXG4gICAgICAgIElneERyb3BEb3duSXRlbUNvbXBvbmVudCxcbiAgICAgICAgSWd4RHJvcERvd25Hcm91cENvbXBvbmVudCxcbiAgICAgICAgSWd4RHJvcERvd25JdGVtTmF2aWdhdGlvbkRpcmVjdGl2ZVxuICAgIF0sXG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIElneFRvZ2dsZU1vZHVsZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4RHJvcERvd25Nb2R1bGUgeyB9XG4iXX0=