import { __decorate } from "tslib";
import { Component, OnDestroy, Input, HostBinding, Output, EventEmitter, ElementRef, ChangeDetectorRef } from '@angular/core';
import { Subject } from 'rxjs';
export var Direction;
(function (Direction) {
    Direction[Direction["NONE"] = 0] = "NONE";
    Direction[Direction["NEXT"] = 1] = "NEXT";
    Direction[Direction["PREV"] = 2] = "PREV";
})(Direction || (Direction = {}));
/**
 * A slide component that usually holds an image and/or a caption text.
 * IgxSlideComponent is usually a child component of an IgxCarouselComponent.
 *
 * ```
 * <igx-slide [input bindings] >
 *    <ng-content></ng-content>
 * </igx-slide>
 * ```
 *
 * @export
 */
var IgxSlideComponent = /** @class */ (function () {
    function IgxSlideComponent(elementRef) {
        this.elementRef = elementRef;
        this._active = false;
        this._destroy$ = new Subject();
        /**
         * Returns the class of the slide component.
         * ```typescript
         * let class =  this.slide.cssClass;
         * ```
         * @memberof IgxSlideComponent
         */
        this.cssClass = 'igx-slide';
        this.previous = false;
        /**
         * @hidden
         */
        this.activeChange = new EventEmitter();
    }
    Object.defineProperty(IgxSlideComponent.prototype, "tabIndex", {
        /**
         * Returns the `tabIndex` of the slide component.
         * ```typescript
         * let tabIndex =  this.carousel.tabIndex;
         * ```
         * @memberof IgxSlideComponent
         */
        get: function () {
            return this.active ? 0 : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSlideComponent.prototype, "ariaSelected", {
        /**
         * Returns the `aria-selected` of the slide.
         *
         * ```typescript
         * let slide = this.slide.ariaSelected;
         * ```
         *
         */
        get: function () {
            return this.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSlideComponent.prototype, "ariaLive", {
        /**
         * Returns the `aria-live` of the slide.
         *
         * ```typescript
         * let slide = this.slide.ariaLive;
         * ```
         *
         */
        get: function () {
            return this.active ? 'polite' : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSlideComponent.prototype, "active", {
        /**
         * Gets/sets the `active` state of the slide.
         * ```html
         * <igx-carousel>
         *  <igx-slide [active] ="false"></igx-slide>
         * <igx-carousel>
         * ```
         *
         * Two-way data binding.
         * ```html
         * <igx-carousel>
         *  <igx-slide [(active)] ="model.isActive"></igx-slide>
         * <igx-carousel>
         * ```
         * @memberof IgxSlideComponent
         */
        get: function () {
            return this._active;
        },
        set: function (value) {
            this._active = !!value;
            this.activeChange.emit(this._active);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSlideComponent.prototype, "nativeElement", {
        /**
         * Returns a reference to the carousel element in the DOM.
         * ```typescript
         * let nativeElement =  this.slide.nativeElement;
         * ```
         * @memberof IgxSlideComponent
         */
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSlideComponent.prototype, "isDestroyed", {
        /**
         * @hidden
         */
        get: function () {
            return this._destroy$;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxSlideComponent.prototype.ngOnDestroy = function () {
        this._destroy$.next(true);
        this._destroy$.complete();
    };
    IgxSlideComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], IgxSlideComponent.prototype, "index", void 0);
    __decorate([
        Input()
    ], IgxSlideComponent.prototype, "direction", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxSlideComponent.prototype, "tabIndex", null);
    __decorate([
        HostBinding('attr.aria-selected')
    ], IgxSlideComponent.prototype, "ariaSelected", null);
    __decorate([
        HostBinding('attr.aria-selected')
    ], IgxSlideComponent.prototype, "ariaLive", null);
    __decorate([
        HostBinding('class.igx-slide')
    ], IgxSlideComponent.prototype, "cssClass", void 0);
    __decorate([
        HostBinding('class.igx-slide--current'),
        Input()
    ], IgxSlideComponent.prototype, "active", null);
    __decorate([
        HostBinding('class.igx-slide--previous'),
        Input()
    ], IgxSlideComponent.prototype, "previous", void 0);
    __decorate([
        Output()
    ], IgxSlideComponent.prototype, "activeChange", void 0);
    IgxSlideComponent = __decorate([
        Component({
            selector: 'igx-slide',
            template: "<ng-content></ng-content>\n"
        })
    ], IgxSlideComponent);
    return IgxSlideComponent;
}());
export { IgxSlideComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jYXJvdXNlbC9zbGlkZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUgsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixNQUFNLENBQU4sSUFBWSxTQUE4QjtBQUExQyxXQUFZLFNBQVM7SUFBRyx5Q0FBSSxDQUFBO0lBQUUseUNBQUksQ0FBQTtJQUFFLHlDQUFJLENBQUE7QUFBQyxDQUFDLEVBQTlCLFNBQVMsS0FBVCxTQUFTLFFBQXFCO0FBRTFDOzs7Ozs7Ozs7OztHQVdHO0FBTUg7SUE0R0ksMkJBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUEzR2xDLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUE2RDNDOzs7Ozs7V0FNRztRQUVJLGFBQVEsR0FBRyxXQUFXLENBQUM7UUE4QmQsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQzs7V0FFRztRQUNjLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztJQUVkLENBQUM7SUEzRS9DLHNCQUFJLHVDQUFRO1FBUlo7Ozs7OztXQU1HO2FBRUg7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ2xDLENBQUM7OztPQUFBO0lBV0Qsc0JBQVcsMkNBQVk7UUFUdkI7Ozs7Ozs7V0FPRzthQUVIO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7OztPQUFBO0lBV0Qsc0JBQVcsdUNBQVE7UUFUbkI7Ozs7Ozs7V0FPRzthQUVIO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN6QyxDQUFDOzs7T0FBQTtJQThCRCxzQkFBVyxxQ0FBTTtRQWxCakI7Ozs7Ozs7Ozs7Ozs7OztXQWVHO2FBR0g7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDeEIsQ0FBQzthQUVELFVBQWtCLEtBQUs7WUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxDQUFDOzs7T0FMQTtJQXdCRCxzQkFBVyw0Q0FBYTtRQVB4Qjs7Ozs7O1dBTUc7YUFDSDtZQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7SUFLRCxzQkFBVywwQ0FBVztRQUh0Qjs7V0FFRzthQUNIO1lBQ0EsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3RCLENBQUM7OztPQUFBO0lBRUQ7O09BRUc7SUFDSSx1Q0FBVyxHQUFsQjtRQUNJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7Z0JBMUIrQixVQUFVOztJQWhHakM7UUFBUixLQUFLLEVBQUU7b0RBQXNCO0lBV3JCO1FBQVIsS0FBSyxFQUFFO3dEQUE2QjtJQVVyQztRQURDLFdBQVcsQ0FBQyxlQUFlLENBQUM7cURBRzVCO0lBV0Q7UUFEQyxXQUFXLENBQUMsb0JBQW9CLENBQUM7eURBR2pDO0lBV0Q7UUFEQyxXQUFXLENBQUMsb0JBQW9CLENBQUM7cURBR2pDO0lBVUQ7UUFEQyxXQUFXLENBQUMsaUJBQWlCLENBQUM7dURBQ0Q7SUFvQjlCO1FBRkMsV0FBVyxDQUFDLDBCQUEwQixDQUFDO1FBQ3ZDLEtBQUssRUFBRTttREFHUDtJQVFRO1FBRFIsV0FBVyxDQUFDLDJCQUEyQixDQUFDO1FBQ3hDLEtBQUssRUFBRTt1REFBeUI7SUFLdkI7UUFBVCxNQUFNLEVBQUU7MkRBQW1EO0lBMUduRCxpQkFBaUI7UUFMN0IsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFdBQVc7WUFDckIsdUNBQW1DO1NBQ3RDLENBQUM7T0FFVyxpQkFBaUIsQ0F1STdCO0lBQUQsd0JBQUM7Q0FBQSxBQXZJRCxJQXVJQztTQXZJWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uRGVzdHJveSwgSW5wdXQsIEhvc3RCaW5kaW5nLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGVudW0gRGlyZWN0aW9uIHsgTk9ORSwgTkVYVCwgUFJFViB9XG5cbi8qKlxuICogQSBzbGlkZSBjb21wb25lbnQgdGhhdCB1c3VhbGx5IGhvbGRzIGFuIGltYWdlIGFuZC9vciBhIGNhcHRpb24gdGV4dC5cbiAqIElneFNsaWRlQ29tcG9uZW50IGlzIHVzdWFsbHkgYSBjaGlsZCBjb21wb25lbnQgb2YgYW4gSWd4Q2Fyb3VzZWxDb21wb25lbnQuXG4gKlxuICogYGBgXG4gKiA8aWd4LXNsaWRlIFtpbnB1dCBiaW5kaW5nc10gPlxuICogICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICogPC9pZ3gtc2xpZGU+XG4gKiBgYGBcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LXNsaWRlJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3NsaWRlLmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIElneFNsaWRlQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9hY3RpdmUgPSBmYWxzZTtcbiAgICBwcml2YXRlIF9kZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSBgaW5kZXhgIG9mIHRoZSBzbGlkZSBpbnNpZGUgdGhlIGNhcm91c2VsLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhcm91c2VsPlxuICAgICAqICA8aWd4LXNsaWRlIGluZGV4ID0gXCIxXCI+PC9pZ3gtc2xpZGU+XG4gICAgICogPGlneC1jYXJvdXNlbD5cbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyT2YgSWd4U2xpZGVDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKSBwdWJsaWMgaW5kZXg6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEdldHMvc2V0cyB0aGUgdGFyZ2V0IGBkaXJlY3Rpb25gIGZvciB0aGUgc2xpZGUuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2Fyb3VzZWw+XG4gICAgICogIDxpZ3gtc2xpZGUgZGlyZWN0aW9uPVwiTkVYVFwiPjwvaWd4LXNsaWRlPlxuICAgICAqIDxpZ3gtY2Fyb3VzZWw+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlck9mIElneFNsaWRlQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KCkgcHVibGljIGRpcmVjdGlvbjogRGlyZWN0aW9uO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYHRhYkluZGV4YCBvZiB0aGUgc2xpZGUgY29tcG9uZW50LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgdGFiSW5kZXggPSAgdGhpcy5jYXJvdXNlbC50YWJJbmRleDtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4U2xpZGVDb21wb25lbnRcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIudGFiaW5kZXgnKVxuICAgIGdldCB0YWJJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlID8gMCA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYGFyaWEtc2VsZWN0ZWRgIG9mIHRoZSBzbGlkZS5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgc2xpZGUgPSB0aGlzLnNsaWRlLmFyaWFTZWxlY3RlZDtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLXNlbGVjdGVkJylcbiAgICBwdWJsaWMgZ2V0IGFyaWFTZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBhcmlhLWxpdmVgIG9mIHRoZSBzbGlkZS5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgc2xpZGUgPSB0aGlzLnNsaWRlLmFyaWFMaXZlO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtc2VsZWN0ZWQnKVxuICAgIHB1YmxpYyBnZXQgYXJpYUxpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZSA/ICdwb2xpdGUnIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjbGFzcyBvZiB0aGUgc2xpZGUgY29tcG9uZW50LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY2xhc3MgPSAgdGhpcy5zbGlkZS5jc3NDbGFzcztcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4U2xpZGVDb21wb25lbnRcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZScpXG4gICAgcHVibGljIGNzc0NsYXNzID0gJ2lneC1zbGlkZSc7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL3NldHMgdGhlIGBhY3RpdmVgIHN0YXRlIG9mIHRoZSBzbGlkZS5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYXJvdXNlbD5cbiAgICAgKiAgPGlneC1zbGlkZSBbYWN0aXZlXSA9XCJmYWxzZVwiPjwvaWd4LXNsaWRlPlxuICAgICAqIDxpZ3gtY2Fyb3VzZWw+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUd28td2F5IGRhdGEgYmluZGluZy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYXJvdXNlbD5cbiAgICAgKiAgPGlneC1zbGlkZSBbKGFjdGl2ZSldID1cIm1vZGVsLmlzQWN0aXZlXCI+PC9pZ3gtc2xpZGU+XG4gICAgICogPGlneC1jYXJvdXNlbD5cbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4U2xpZGVDb21wb25lbnRcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZS0tY3VycmVudCcpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGFjdGl2ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSAhIXZhbHVlO1xuICAgICAgICB0aGlzLmFjdGl2ZUNoYW5nZS5lbWl0KHRoaXMuX2FjdGl2ZSk7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGUtLXByZXZpb3VzJylcbiAgICBASW5wdXQoKSBwdWJsaWMgcHJldmlvdXMgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBAT3V0cHV0KCkgcHVibGljIGFjdGl2ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBjYXJvdXNlbCBlbGVtZW50IGluIHRoZSBET00uXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBuYXRpdmVFbGVtZW50ID0gIHRoaXMuc2xpZGUubmF0aXZlRWxlbWVudDtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4U2xpZGVDb21wb25lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG5hdGl2ZUVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGdldCBpc0Rlc3Ryb3llZCgpOiBTdWJqZWN0PGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5fZGVzdHJveSQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveSQubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG59XG4iXX0=