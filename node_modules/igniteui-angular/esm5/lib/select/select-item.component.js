import { __decorate, __extends } from "tslib";
import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';
import { Component, Input } from '@angular/core';
var IgxSelectItemComponent = /** @class */ (function (_super) {
    __extends(IgxSelectItemComponent, _super);
    function IgxSelectItemComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(IgxSelectItemComponent.prototype, "text", {
        /**
         * An @Input property that gets/sets the item's text to be displayed in the select component's input when the item is selected.
         *
         * ```typescript
         *  //get
         *  let mySelectedItem = this.dropDown.selectedItem;
         *  let selectedItemText = mySelectedItem.text;
         * ```
         *
         * ```html
         * // set
         * <igx-select-item [text]="'London'"></igx-select-item>
         * ```
         */
        get: function () {
            return this._text;
        },
        set: function (text) {
            this._text = text;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSelectItemComponent.prototype, "itemText", {
        /** @hidden @internal */
        get: function () {
            if (this._text !== undefined) {
                return this._text;
            }
            // If text @Input is undefined, try extract a meaningful item text out of the item template
            return this.elementRef.nativeElement.textContent.trim();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSelectItemComponent.prototype, "selected", {
        /**
         * Sets/Gets if the item is the currently selected one in the select
         *
         * ```typescript
         *  let mySelectedItem = this.select.selectedItem;
         *  let isMyItemSelected = mySelectedItem.selected; // true
         * ```
         */
        get: function () {
            return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);
        },
        set: function (value) {
            if (value && !this.isHeader && !this.disabled) {
                this.dropDown.selectItem(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxSelectItemComponent.prototype.ngDoCheck = function () {
    };
    __decorate([
        Input()
    ], IgxSelectItemComponent.prototype, "text", null);
    IgxSelectItemComponent = __decorate([
        Component({
            selector: 'igx-select-item',
            template: '<ng-content></ng-content>'
        })
    ], IgxSelectItemComponent);
    return IgxSelectItemComponent;
}(IgxDropDownItemComponent));
export { IgxSelectItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZWxlY3Qvc2VsZWN0LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsU0FBUyxFQUFXLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU0xRDtJQUE0QywwQ0FBd0I7SUFBcEU7O0lBMkRBLENBQUM7SUF4Q0csc0JBQVcsd0NBQUk7UUFmZjs7Ozs7Ozs7Ozs7OztXQWFHO2FBRUg7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQzthQUVELFVBQWdCLElBQVk7WUFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDdEIsQ0FBQzs7O09BSkE7SUFPRCxzQkFBVyw0Q0FBUTtRQURuQix3QkFBd0I7YUFDeEI7WUFDSSxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUMxQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDckI7WUFDRCwyRkFBMkY7WUFDM0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUQsQ0FBQzs7O09BQUE7SUFVRCxzQkFBVyw0Q0FBUTtRQVJuQjs7Ozs7OztXQU9HO2FBQ0g7WUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2RyxDQUFDO2FBRUQsVUFBb0IsS0FBVTtZQUMxQixJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUMzQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNsQztRQUNMLENBQUM7OztPQU5BO0lBV0QsMENBQVMsR0FBVDtJQUNBLENBQUM7SUF2Q0Q7UUFEQyxLQUFLLEVBQUU7c0RBR1A7SUFyQlEsc0JBQXNCO1FBSmxDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsUUFBUSxFQUFFLDJCQUEyQjtTQUN4QyxDQUFDO09BQ1csc0JBQXNCLENBMkRsQztJQUFELDZCQUFDO0NBQUEsQUEzREQsQ0FBNEMsd0JBQXdCLEdBMkRuRTtTQTNEWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZ3hEcm9wRG93bkl0ZW1Db21wb25lbnQgfSBmcm9tICcuLy4uL2Ryb3AtZG93bi9kcm9wLWRvd24taXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBEb0NoZWNrLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC1zZWxlY3QtaXRlbScsXG4gICAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hTZWxlY3RJdGVtQ29tcG9uZW50IGV4dGVuZHMgSWd4RHJvcERvd25JdGVtQ29tcG9uZW50IGltcGxlbWVudHMgRG9DaGVjayB7XG5cbiAgICBwcml2YXRlIF90ZXh0OiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBnZXRzL3NldHMgdGhlIGl0ZW0ncyB0ZXh0IHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgc2VsZWN0IGNvbXBvbmVudCdzIGlucHV0IHdoZW4gdGhlIGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIC8vZ2V0XG4gICAgICogIGxldCBteVNlbGVjdGVkSXRlbSA9IHRoaXMuZHJvcERvd24uc2VsZWN0ZWRJdGVtO1xuICAgICAqICBsZXQgc2VsZWN0ZWRJdGVtVGV4dCA9IG15U2VsZWN0ZWRJdGVtLnRleHQ7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogLy8gc2V0XG4gICAgICogPGlneC1zZWxlY3QtaXRlbSBbdGV4dF09XCInTG9uZG9uJ1wiPjwvaWd4LXNlbGVjdC1pdGVtPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCB0ZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl90ZXh0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgdGV4dCh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fdGV4dCA9IHRleHQ7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIGdldCBpdGVtVGV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGV4dCBASW5wdXQgaXMgdW5kZWZpbmVkLCB0cnkgZXh0cmFjdCBhIG1lYW5pbmdmdWwgaXRlbSB0ZXh0IG91dCBvZiB0aGUgaXRlbSB0ZW1wbGF0ZVxuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudGV4dENvbnRlbnQudHJpbSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMvR2V0cyBpZiB0aGUgaXRlbSBpcyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIG9uZSBpbiB0aGUgc2VsZWN0XG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIGxldCBteVNlbGVjdGVkSXRlbSA9IHRoaXMuc2VsZWN0LnNlbGVjdGVkSXRlbTtcbiAgICAgKiAgbGV0IGlzTXlJdGVtU2VsZWN0ZWQgPSBteVNlbGVjdGVkSXRlbS5zZWxlY3RlZDsgLy8gdHJ1ZVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc0hlYWRlciAmJiAhdGhpcy5kaXNhYmxlZCAmJiB0aGlzLnNlbGVjdGlvbi5pc19pdGVtX3NlbGVjdGVkKHRoaXMuZHJvcERvd24uaWQsIHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgc2VsZWN0ZWQodmFsdWU6IGFueSkge1xuICAgICAgICBpZiAodmFsdWUgJiYgIXRoaXMuaXNIZWFkZXIgJiYgIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZHJvcERvd24uc2VsZWN0SXRlbSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyBpc0hlYWRlcjogYm9vbGVhbjtcblxuICAgIG5nRG9DaGVjaygpOiB2b2lkIHtcbiAgICB9XG59XG4iXX0=