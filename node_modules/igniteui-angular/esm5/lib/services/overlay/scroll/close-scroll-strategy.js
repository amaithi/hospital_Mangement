import { __extends } from "tslib";
import { ScrollStrategy } from './scroll-strategy';
/**
 * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded
 */
var CloseScrollStrategy = /** @class */ (function (_super) {
    __extends(CloseScrollStrategy, _super);
    function CloseScrollStrategy(scrollContainer) {
        var _this = _super.call(this, scrollContainer) || this;
        _this._initialized = false;
        _this.onScroll = function (ev) {
            if (!_this._sourceElement) {
                return;
            }
            _this.cumulativeScrollTop += _this._sourceElement.scrollTop;
            _this.cumulativeScrollLeft += _this._sourceElement.scrollLeft;
            if (Math.abs(_this.cumulativeScrollTop - _this.initialScrollTop) > _this._threshold ||
                Math.abs(_this.cumulativeScrollLeft - _this.initialScrollLeft) > _this._threshold) {
                _this._document.removeEventListener('scroll', _this.onScroll, true);
                _this._overlayService.hide(_this._id);
            }
        };
        _this._scrollContainer = scrollContainer;
        _this._threshold = 10;
        _this.cumulativeScrollTop = 0;
        _this.cumulativeScrollLeft = 0;
        return _this;
    }
    /** @inheritdoc */
    CloseScrollStrategy.prototype.initialize = function (document, overlayService, id) {
        if (this._initialized) {
            return;
        }
        this._overlayService = overlayService;
        this._id = id;
        this._document = document;
        this._initialized = true;
    };
    /** @inheritdoc */
    CloseScrollStrategy.prototype.attach = function () {
        if (this._scrollContainer) {
            this._scrollContainer.addEventListener('scroll', this.onScroll);
            this._sourceElement = this._scrollContainer;
        }
        else {
            this._document.addEventListener('scroll', this.onScroll);
            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {
                this._sourceElement = document.documentElement;
            }
            else if (document.body.scrollHeight > document.body.clientHeight) {
                this._sourceElement = document.body;
            }
        }
        if (!this._sourceElement) {
            return;
        }
        this.cumulativeScrollTop = 0;
        this.cumulativeScrollLeft = 0;
        this.initialScrollTop = this._sourceElement.scrollTop;
        this.initialScrollLeft = this._sourceElement.scrollLeft;
    };
    /** @inheritdoc */
    CloseScrollStrategy.prototype.detach = function () {
        // TODO: check why event listener removes only on first call and remains on each next!!!
        if (this._scrollContainer) {
            this._scrollContainer.removeEventListener('scroll', this.onScroll);
        }
        else {
            this._document.removeEventListener('scroll', this.onScroll);
        }
        this._sourceElement = null;
        this.cumulativeScrollTop = 0;
        this.cumulativeScrollLeft = 0;
        this.initialScrollTop = 0;
        this.initialScrollLeft = 0;
        this._initialized = false;
    };
    return CloseScrollStrategy;
}(ScrollStrategy));
export { CloseScrollStrategy };
//# sourceMappingURL=data:application/json;base64,