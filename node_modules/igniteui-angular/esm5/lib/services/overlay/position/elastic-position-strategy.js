import { __extends } from "tslib";
import { BaseFitPositionStrategy } from './base-fit-position-strategy';
import { HorizontalAlignment, VerticalAlignment } from '../utilities';
/**
 * Positions the element as in **Connected** positioning strategy and resize the element
 * to fit in the view port in case the element is partially getting out of view
 */
var ElasticPositionStrategy = /** @class */ (function (_super) {
    __extends(ElasticPositionStrategy, _super);
    function ElasticPositionStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @inheritdoc */
    ElasticPositionStrategy.prototype.fitInViewport = function (element, connectedFit) {
        element.classList.add('igx-overlay__content--elastic');
        var transformString = [];
        if (connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0) {
            var maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);
            var leftExtend = Math.max(0, -connectedFit.fitHorizontal.back);
            var rightExtend = Math.max(0, -connectedFit.fitHorizontal.forward);
            var reduction = Math.min(maxReduction, leftExtend + rightExtend);
            element.style.width = connectedFit.contentElementRect.width - reduction + "px";
            //  if direction is center and element goes off the screen in left direction we should push the
            //  element to the right. Prevents left still going out of view when normally positioned
            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {
                //  the amount of translation depends on whether element goes off the screen to the left,
                //  to the right or in both directions, as well as how much it goes of the screen and finally
                //  on the minSize. The translation should be proportional between left and right extend
                //  taken from the reduction
                var translation = leftExtend * reduction / (leftExtend + rightExtend);
                if (translation > 0) {
                    transformString.push("translateX(" + translation + "px)");
                }
            }
        }
        if (connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0) {
            var maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);
            var topExtend = Math.max(0, -connectedFit.fitVertical.back);
            var bottomExtend = Math.max(0, -connectedFit.fitVertical.forward);
            var reduction = Math.min(maxReduction, topExtend + bottomExtend);
            element.style.height = connectedFit.contentElementRect.height - reduction + "px";
            //  if direction is middle and element goes off the screen in top direction we should push the
            //  element to the bottom. Prevents top still going out of view when normally positioned
            if (this.settings.verticalDirection === VerticalAlignment.Middle) {
                //  the amount of translation depends on whether element goes off the screen to the top,
                //  to the bottom or in both directions, as well as how much it goes of the screen and finally
                //  on the minSize. The translation should be proportional between top and bottom extend
                //  taken from the reduction
                var translation = topExtend * reduction / (topExtend + bottomExtend);
                if (translation > 0) {
                    transformString.push("translateY(" + translation + "px)");
                }
            }
        }
        element.style.transform = transformString.join(' ').trim();
    };
    return ElasticPositionStrategy;
}(BaseFitPositionStrategy));
export { ElasticPositionStrategy };
//# sourceMappingURL=data:application/json;base64,