import { __decorate } from "tslib";
/**
 * This file contains all the directives used by the @link IgxCalendarComponent.
 * Except for the directives which are used for templating the calendar itself
 * you should generally not use them directly.
 * @preferred
 */
import { Directive, EventEmitter, HostBinding, HostListener, Input, Output, TemplateRef, ElementRef, AfterViewInit, OnDestroy, NgZone } from '@angular/core';
import { fromEvent, Subject, interval } from 'rxjs';
import { takeUntil, debounce, tap } from 'rxjs/operators';
/**
 * @hidden
 */
var IgxCalendarYearDirective = /** @class */ (function () {
    function IgxCalendarYearDirective() {
        this.onYearSelection = new EventEmitter();
    }
    Object.defineProperty(IgxCalendarYearDirective.prototype, "defaultCSS", {
        get: function () {
            return !this.isCurrentYear;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarYearDirective.prototype, "currentCSS", {
        get: function () {
            return this.isCurrentYear;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarYearDirective.prototype, "isCurrentYear", {
        get: function () {
            return this.date.getFullYear() === this.value.getFullYear();
        },
        enumerable: true,
        configurable: true
    });
    IgxCalendarYearDirective.prototype.onClick = function () {
        this.onYearSelection.emit(this.value);
    };
    __decorate([
        Input('igxCalendarYear')
    ], IgxCalendarYearDirective.prototype, "value", void 0);
    __decorate([
        Input()
    ], IgxCalendarYearDirective.prototype, "date", void 0);
    __decorate([
        Output()
    ], IgxCalendarYearDirective.prototype, "onYearSelection", void 0);
    __decorate([
        HostBinding('class.igx-calendar__year')
    ], IgxCalendarYearDirective.prototype, "defaultCSS", null);
    __decorate([
        HostBinding('class.igx-calendar__year--current')
    ], IgxCalendarYearDirective.prototype, "currentCSS", null);
    __decorate([
        HostListener('click')
    ], IgxCalendarYearDirective.prototype, "onClick", null);
    IgxCalendarYearDirective = __decorate([
        Directive({
            selector: '[igxCalendarYear]'
        })
    ], IgxCalendarYearDirective);
    return IgxCalendarYearDirective;
}());
export { IgxCalendarYearDirective };
var IgxCalendarMonthDirective = /** @class */ (function () {
    function IgxCalendarMonthDirective(elementRef) {
        this.elementRef = elementRef;
        this.onMonthSelection = new EventEmitter();
        this.tabindex = 0;
    }
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "defaultCSS", {
        get: function () {
            return !this.isCurrentMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "currentCSS", {
        get: function () {
            return this.isCurrentMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "isCurrentMonth", {
        get: function () {
            return this.date.getMonth() === this.value.getMonth();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "nativeElement", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    IgxCalendarMonthDirective.prototype.onClick = function () {
        var date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());
        this.onMonthSelection.emit(date);
    };
    IgxCalendarMonthDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input('igxCalendarMonth')
    ], IgxCalendarMonthDirective.prototype, "value", void 0);
    __decorate([
        Input()
    ], IgxCalendarMonthDirective.prototype, "date", void 0);
    __decorate([
        Input()
    ], IgxCalendarMonthDirective.prototype, "index", void 0);
    __decorate([
        Output()
    ], IgxCalendarMonthDirective.prototype, "onMonthSelection", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxCalendarMonthDirective.prototype, "tabindex", void 0);
    __decorate([
        HostBinding('class.igx-calendar__month')
    ], IgxCalendarMonthDirective.prototype, "defaultCSS", null);
    __decorate([
        HostBinding('class.igx-calendar__month--current')
    ], IgxCalendarMonthDirective.prototype, "currentCSS", null);
    __decorate([
        HostListener('click')
    ], IgxCalendarMonthDirective.prototype, "onClick", null);
    IgxCalendarMonthDirective = __decorate([
        Directive({
            selector: '[igxCalendarMonth]'
        })
    ], IgxCalendarMonthDirective);
    return IgxCalendarMonthDirective;
}());
export { IgxCalendarMonthDirective };
/**
 * @hidden
 */
var IgxCalendarHeaderTemplateDirective = /** @class */ (function () {
    function IgxCalendarHeaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCalendarHeaderTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxCalendarHeaderTemplateDirective = __decorate([
        Directive({
            selector: '[igxCalendarHeader]'
        })
    ], IgxCalendarHeaderTemplateDirective);
    return IgxCalendarHeaderTemplateDirective;
}());
export { IgxCalendarHeaderTemplateDirective };
/**
 * @hidden
 */
var IgxCalendarSubheaderTemplateDirective = /** @class */ (function () {
    function IgxCalendarSubheaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCalendarSubheaderTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxCalendarSubheaderTemplateDirective = __decorate([
        Directive({
            selector: '[igxCalendarSubheader]'
        })
    ], IgxCalendarSubheaderTemplateDirective);
    return IgxCalendarSubheaderTemplateDirective;
}());
export { IgxCalendarSubheaderTemplateDirective };
/**
 * @hidden
 */
var IgxCalendarScrollMonthDirective = /** @class */ (function () {
    function IgxCalendarScrollMonthDirective(element, zone) {
        this.element = element;
        this.zone = zone;
        /**
         * @hidden
         */
        this.destroy$ = new Subject();
    }
    /**
     * @hidden
     */
    IgxCalendarScrollMonthDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        fromEvent(this.element.nativeElement, 'keyup').pipe(debounce(function () { return interval(100); }), takeUntil(this.destroy$)).subscribe(function (event) {
            _this.stopScroll(event);
        });
        this.zone.runOutsideAngular(function () {
            fromEvent(_this.element.nativeElement, 'keydown').pipe(tap(function (event) {
                if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            }), debounce(function () { return interval(100); }), takeUntil(_this.destroy$)).subscribe(function (event) {
                if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
                    _this.zone.run(function () { return _this.startScroll(true); });
                }
            });
        });
    };
    /**
     * @hidden
     */
    IgxCalendarScrollMonthDirective.prototype.ngOnDestroy = function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    /**
     * @hidden
     */
    IgxCalendarScrollMonthDirective.prototype.onMouseDown = function () {
        this.startScroll();
    };
    /**
     * @hidden
     */
    IgxCalendarScrollMonthDirective.prototype.onMouseUp = function (event) {
        this.stopScroll(event);
    };
    IgxCalendarScrollMonthDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    __decorate([
        Input()
    ], IgxCalendarScrollMonthDirective.prototype, "startScroll", void 0);
    __decorate([
        Input()
    ], IgxCalendarScrollMonthDirective.prototype, "stopScroll", void 0);
    __decorate([
        HostListener('mousedown')
    ], IgxCalendarScrollMonthDirective.prototype, "onMouseDown", null);
    __decorate([
        HostListener('mouseup', ['$event'])
    ], IgxCalendarScrollMonthDirective.prototype, "onMouseUp", null);
    IgxCalendarScrollMonthDirective = __decorate([
        Directive({
            selector: '[igxCalendarScrollMonth]'
        })
    ], IgxCalendarScrollMonthDirective);
    return IgxCalendarScrollMonthDirective;
}());
export { IgxCalendarScrollMonthDirective };
//# sourceMappingURL=data:application/json;base64,