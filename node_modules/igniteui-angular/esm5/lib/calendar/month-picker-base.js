import { __decorate, __extends } from "tslib";
import { IgxCalendarBaseDirective } from './calendar-base';
import { HostBinding, Directive, ViewChildren } from '@angular/core';
/**
 * Sets the calender view - days, months or years.
 */
export var CalendarView;
(function (CalendarView) {
    CalendarView[CalendarView["DEFAULT"] = 0] = "DEFAULT";
    CalendarView[CalendarView["YEAR"] = 1] = "YEAR";
    CalendarView[CalendarView["DECADE"] = 2] = "DECADE";
})(CalendarView || (CalendarView = {}));
var IgxMonthPickerBaseDirective = /** @class */ (function (_super) {
    __extends(IgxMonthPickerBaseDirective, _super);
    function IgxMonthPickerBaseDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Holds month view index we are operating on.
         */
        _this.activeViewIdx = 0;
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         */
        _this.tabindex = 0;
        /**
         * @hidden
         */
        _this._activeView = CalendarView.DEFAULT;
        return _this;
    }
    Object.defineProperty(IgxMonthPickerBaseDirective.prototype, "activeView", {
        /**
         * Gets the current active view.
         */
        get: function () {
            return this._activeView;
        },
        /**
         * Sets the current active view.
         */
        set: function (val) {
            this._activeView = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMonthPickerBaseDirective.prototype, "isDefaultView", {
        /**
         * @hidden
         */
        get: function () {
            return this._activeView === CalendarView.DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMonthPickerBaseDirective.prototype, "isDecadeView", {
        /**
         * @hidden
         */
        get: function () {
            return this._activeView === CalendarView.DECADE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxMonthPickerBaseDirective.prototype.changeYear = function (event) {
        var _this = this;
        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);
        this.activeView = CalendarView.DEFAULT;
        requestAnimationFrame(function () {
            if (_this.yearsBtns && _this.yearsBtns.length) {
                _this.yearsBtns.find(function (e, idx) { return idx === _this.activeViewIdx; }).nativeElement.focus();
            }
        });
    };
    /**
     * @hidden
     */
    IgxMonthPickerBaseDirective.prototype.activeViewDecade = function (activeViewIdx) {
        if (activeViewIdx === void 0) { activeViewIdx = 0; }
        this._activeView = CalendarView.DECADE;
        this.activeViewIdx = activeViewIdx;
    };
    /**
     * @hidden
     */
    IgxMonthPickerBaseDirective.prototype.activeViewDecadeKB = function (event, activeViewIdx) {
        if (activeViewIdx === void 0) { activeViewIdx = 0; }
        if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
            event.preventDefault();
            this.activeViewDecade(activeViewIdx);
        }
    };
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     */
    IgxMonthPickerBaseDirective.prototype.formattedYear = function (value) {
        if (this.formatViews.year) {
            return this.formatterYear.format(value);
        }
        return "" + value.getFullYear();
    };
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxMonthPickerBaseDirective.prototype, "tabindex", void 0);
    __decorate([
        ViewChildren('yearsBtn')
    ], IgxMonthPickerBaseDirective.prototype, "yearsBtns", void 0);
    IgxMonthPickerBaseDirective = __decorate([
        Directive({
            selector: '[igxMonthPickerBase]'
        })
    ], IgxMonthPickerBaseDirective);
    return IgxMonthPickerBaseDirective;
}(IgxCalendarBaseDirective));
export { IgxMonthPickerBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtcGlja2VyLWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2NhbGVuZGFyL21vbnRoLXBpY2tlci1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBRzVGOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksWUFJWDtBQUpELFdBQVksWUFBWTtJQUNwQixxREFBTyxDQUFBO0lBQ1AsK0NBQUksQ0FBQTtJQUNKLG1EQUFNLENBQUE7QUFDVixDQUFDLEVBSlcsWUFBWSxLQUFaLFlBQVksUUFJdkI7QUFLRDtJQUFpRCwrQ0FBd0I7SUFBekU7UUFBQSxxRUFtR0M7UUFqR0c7O1dBRUc7UUFDTyxtQkFBYSxHQUFHLENBQUMsQ0FBQztRQUU1Qjs7OztXQUlHO1FBRUksY0FBUSxHQUFHLENBQUMsQ0FBQztRQXFDcEI7O1dBRUc7UUFDSyxpQkFBVyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7O0lBOEMvQyxDQUFDO0lBMUVHLHNCQUFXLG1EQUFVO1FBSHJCOztXQUVHO2FBQ0g7WUFDSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDNUIsQ0FBQztRQUVEOztXQUVHO2FBQ0gsVUFBc0IsR0FBaUI7WUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7UUFDM0IsQ0FBQzs7O09BUEE7SUFZRCxzQkFBVyxzREFBYTtRQUh4Qjs7V0FFRzthQUNIO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDckQsQ0FBQzs7O09BQUE7SUFLRCxzQkFBVyxxREFBWTtRQUh2Qjs7V0FFRzthQUNIO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDcEQsQ0FBQzs7O09BQUE7SUFPRDs7T0FFRztJQUNJLGdEQUFVLEdBQWpCLFVBQWtCLEtBQVc7UUFBN0IsaUJBU0M7UUFSRyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEYsSUFBSSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBRXZDLHFCQUFxQixDQUFDO1lBQ2xCLElBQUksS0FBSSxDQUFDLFNBQVMsSUFBSSxLQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDekMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFhLEVBQUUsR0FBVyxJQUFLLE9BQUEsR0FBRyxLQUFLLEtBQUksQ0FBQyxhQUFhLEVBQTFCLENBQTBCLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDekc7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7T0FFRztJQUNJLHNEQUFnQixHQUF2QixVQUF3QixhQUFpQjtRQUFqQiw4QkFBQSxFQUFBLGlCQUFpQjtRQUNyQyxJQUFJLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0RBQWtCLEdBQXpCLFVBQTBCLEtBQUssRUFBRSxhQUFpQjtRQUFqQiw4QkFBQSxFQUFBLGlCQUFpQjtRQUM5QyxJQUFJLEtBQUssQ0FBQyxHQUFHLG9CQUFlLElBQUksS0FBSyxDQUFDLEdBQUcsOEJBQWtCLElBQUksS0FBSyxDQUFDLEdBQUcsd0JBQWUsRUFBRTtZQUNyRixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksbURBQWEsR0FBcEIsVUFBcUIsS0FBVztRQUM1QixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLEtBQUcsS0FBSyxDQUFDLFdBQVcsRUFBSSxDQUFDO0lBQ3BDLENBQUM7SUFyRkQ7UUFEQyxXQUFXLENBQUMsZUFBZSxDQUFDO2lFQUNUO0lBTXBCO1FBREMsWUFBWSxDQUFDLFVBQVUsQ0FBQztrRUFDZTtJQW5CL0IsMkJBQTJCO1FBSHZDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxzQkFBc0I7U0FDbkMsQ0FBQztPQUNXLDJCQUEyQixDQW1HdkM7SUFBRCxrQ0FBQztDQUFBLEFBbkdELENBQWlELHdCQUF3QixHQW1HeEU7U0FuR1ksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWd4Q2FsZW5kYXJCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9jYWxlbmRhci1iYXNlJztcbmltcG9ydCB7IEhvc3RCaW5kaW5nLCBEaXJlY3RpdmUsIFZpZXdDaGlsZHJlbiwgRWxlbWVudFJlZiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBLRVlTIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5cbi8qKlxuICogU2V0cyB0aGUgY2FsZW5kZXIgdmlldyAtIGRheXMsIG1vbnRocyBvciB5ZWFycy5cbiAqL1xuZXhwb3J0IGVudW0gQ2FsZW5kYXJWaWV3IHtcbiAgICBERUZBVUxULFxuICAgIFlFQVIsXG4gICAgREVDQURFXG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneE1vbnRoUGlja2VyQmFzZV0nXG59KVxuZXhwb3J0IGNsYXNzIElneE1vbnRoUGlja2VyQmFzZURpcmVjdGl2ZSBleHRlbmRzIElneENhbGVuZGFyQmFzZURpcmVjdGl2ZSB7XG5cbiAgICAvKipcbiAgICAgKiBIb2xkcyBtb250aCB2aWV3IGluZGV4IHdlIGFyZSBvcGVyYXRpbmcgb24uXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFjdGl2ZVZpZXdJZHggPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgYHRhYmluZGV4YCBhdHRyaWJ1dGUgZm9yIHRoZSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnRhYmluZGV4JylcbiAgICBwdWJsaWMgdGFiaW5kZXggPSAwO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGRyZW4oJ3llYXJzQnRuJylcbiAgICBwdWJsaWMgeWVhcnNCdG5zOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj47XG5cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgYWN0aXZlIHZpZXcuXG4gICAgICovXG4gICAgcHVibGljIGdldCBhY3RpdmVWaWV3KCk6IENhbGVuZGFyVmlldyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVWaWV3O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgYWN0aXZlIHZpZXcuXG4gICAgICovXG4gICAgcHVibGljIHNldCBhY3RpdmVWaWV3KHZhbDogQ2FsZW5kYXJWaWV3KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVZpZXcgPSB2YWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaXNEZWZhdWx0VmlldygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVZpZXcgPT09IENhbGVuZGFyVmlldy5ERUZBVUxUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGlzRGVjYWRlVmlldygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVZpZXcgPT09IENhbGVuZGFyVmlldy5ERUNBREU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX2FjdGl2ZVZpZXcgPSBDYWxlbmRhclZpZXcuREVGQVVMVDtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2hhbmdlWWVhcihldmVudDogRGF0ZSkge1xuICAgICAgICB0aGlzLnZpZXdEYXRlID0gdGhpcy5jYWxlbmRhck1vZGVsLmdldEZpcnN0Vmlld0RhdGUoZXZlbnQsICdtb250aCcsIHRoaXMuYWN0aXZlVmlld0lkeCk7XG4gICAgICAgIHRoaXMuYWN0aXZlVmlldyA9IENhbGVuZGFyVmlldy5ERUZBVUxUO1xuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy55ZWFyc0J0bnMgJiYgdGhpcy55ZWFyc0J0bnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy55ZWFyc0J0bnMuZmluZCgoZTogRWxlbWVudFJlZiwgaWR4OiBudW1iZXIpID0+IGlkeCA9PT0gdGhpcy5hY3RpdmVWaWV3SWR4KS5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZlVmlld0RlY2FkZShhY3RpdmVWaWV3SWR4ID0gMCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hY3RpdmVWaWV3ID0gQ2FsZW5kYXJWaWV3LkRFQ0FERTtcbiAgICAgICAgdGhpcy5hY3RpdmVWaWV3SWR4ID0gYWN0aXZlVmlld0lkeDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGFjdGl2ZVZpZXdEZWNhZGVLQihldmVudCwgYWN0aXZlVmlld0lkeCA9IDApIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gS0VZUy5TUEFDRSB8fCBldmVudC5rZXkgPT09IEtFWVMuU1BBQ0VfSUUgfHwgZXZlbnQua2V5ID09PSBLRVlTLkVOVEVSKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVWaWV3RGVjYWRlKGFjdGl2ZVZpZXdJZHgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbG9jYWxlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB5ZWFyIGluIHRoZSB5ZWFyIHZpZXcgaWYgZW5hYmxlZCxcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJucyB0aGUgZGVmYXVsdCBgRGF0ZS5nZXRGdWxsWWVhcigpYCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZm9ybWF0dGVkWWVhcih2YWx1ZTogRGF0ZSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdFZpZXdzLnllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlclllYXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dmFsdWUuZ2V0RnVsbFllYXIoKX1gO1xuICAgIH1cbn1cbiJdfQ==