import { __decorate, __extends, __values } from "tslib";
import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable } from '@angular/core';
import { range, Calendar } from '../calendar';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';
var NEXT_ID = 0;
var CalendarHammerConfig = /** @class */ (function (_super) {
    __extends(CalendarHammerConfig, _super);
    function CalendarHammerConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.overrides = {
            pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }
        };
        return _this;
    }
    CalendarHammerConfig = __decorate([
        Injectable()
    ], CalendarHammerConfig);
    return CalendarHammerConfig;
}(HammerGestureConfig));
export { CalendarHammerConfig };
var IgxYearsViewComponent = /** @class */ (function () {
    function IgxYearsViewComponent(el) {
        this.el = el;
        /**
         * Sets/gets the `id` of the years view.
         * If not set, the `id` will have value `"igx-years-view-0"`.
         * ```html
         * <igx-years-view id = "my-years-view"></igx-years-view>
         * ```
         * ```typescript
         * let yearsViewId =  this.yearsView.id;
         * ```
         * @memberof IgxCalendarComponent
         */
        this.id = "igx-years-view-" + NEXT_ID++;
        /**
         * Gets/sets the selected date of the years view.
         * By default it is the current date.
         * ```html
         * <igx-years-view [date]="myDate"></igx-years-view>
         * ```
         * ```typescript
         * let date =  this.yearsView.date;
         * ```
         * @memberof IgxYearsViewComponent
         */
        this.date = new Date();
        /**
         * Emits an event when a selection is made in the years view.
         * Provides reference the `date` property in the `IgxYearsViewComponent`.
         * ```html
         * <igx-years-view (onSelection)="onSelection($event)"></igx-years-view>
         * ```
         * @memberof IgxYearsViewComponent
         */
        this.onSelection = new EventEmitter();
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this._locale = 'en';
        /**
         * @hidden
         */
        this._yearFormat = 'numeric';
        /**
         * @hidden
         */
        this._onTouchedCallback = function () { };
        /**
         * @hidden
         */
        this._onChangeCallback = function () { };
        this.initYearFormatter();
        this._calendarModel = new Calendar();
    }
    IgxYearsViewComponent_1 = IgxYearsViewComponent;
    Object.defineProperty(IgxYearsViewComponent.prototype, "yearFormat", {
        /**
         * Gets the year format option of the years view.
         * ```typescript
         * let yearFormat = this.yearsView.yearFormat.
         * ```
         */
        get: function () {
            return this._yearFormat;
        },
        /**
         * Sets the year format option of the years view.
         * ```html
         * <igx-years-view [yearFormat]="numeric"></igx-years-view>
         * ```
         * @memberof IgxYearsViewComponent
         */
        set: function (value) {
            this._yearFormat = value;
            this.initYearFormatter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxYearsViewComponent.prototype, "locale", {
        /**
         * Gets the `locale` of the years view.
         * Default value is `"en"`.
         * ```typescript
         * let locale =  this.yearsView.locale;
         * ```
         * @memberof IgxYearsViewComponent
         */
        get: function () {
            return this._locale;
        },
        /**
         * Sets the `locale` of the years view.
         * Expects a valid BCP 47 language tag.
         * Default value is `"en"`.
         * ```html
         * <igx-years-view [locale]="de"></igx-years-view>
         * ```
         * @memberof IgxYearsViewComponent
         */
        set: function (value) {
            this._locale = value;
            this.initYearFormatter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxYearsViewComponent.prototype, "decade", {
        /**
         * Returns an array of date objects which are then used to properly
         * render the years.
         *
         * Used in the template of the component.
         *
         * @hidden
         */
        get: function () {
            var e_1, _a;
            var result = [];
            var start = this.date.getFullYear() - 3;
            var end = this.date.getFullYear() + 4;
            try {
                for (var _b = __values(range(start, end)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var year = _c.value;
                    result.push(new Date(year, this.date.getMonth(), this.date.getDate()));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the locale representation of the year in the years view.
     *
     * @hidden
     */
    IgxYearsViewComponent.prototype.formattedYear = function (value) {
        if (this.formatView) {
            return this._formatterYear.format(value);
        }
        return "" + value.getFullYear();
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.selectYear = function (event) {
        this.date = event;
        this.onSelection.emit(this.date);
        this._onChangeCallback(this.date);
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.scroll = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var delta = event.deltaY < 0 ? -1 : 1;
        this.generateYearRange(delta);
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.pan = function (event) {
        var delta = event.deltaY < 0 ? 1 : -1;
        this.generateYearRange(delta);
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.registerOnChange = function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.registerOnTouched = function (fn) {
        this._onTouchedCallback = fn;
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.yearTracker = function (index, item) {
        return item.getFullYear() + "}";
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.writeValue = function (value) {
        if (value) {
            this.date = value;
        }
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.onKeydownArrowDown = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.generateYearRange(1);
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.onKeydownArrowUp = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.generateYearRange(-1);
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.onKeydownEnter = function () {
        this.onSelection.emit(this.date);
        this._onChangeCallback(this.date);
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.initYearFormatter = function () {
        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });
    };
    /**
     * @hidden
     */
    IgxYearsViewComponent.prototype.generateYearRange = function (delta) {
        var currentYear = new Date().getFullYear();
        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||
            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {
            return;
        }
        this.date = this._calendarModel.timedelta(this.date, 'year', delta);
    };
    var IgxYearsViewComponent_1;
    IgxYearsViewComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxYearsViewComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxYearsViewComponent.prototype, "date", void 0);
    __decorate([
        Input()
    ], IgxYearsViewComponent.prototype, "yearFormat", null);
    __decorate([
        Input()
    ], IgxYearsViewComponent.prototype, "locale", null);
    __decorate([
        Input()
    ], IgxYearsViewComponent.prototype, "formatView", void 0);
    __decorate([
        Output()
    ], IgxYearsViewComponent.prototype, "onSelection", void 0);
    __decorate([
        HostBinding('class.igx-calendar')
    ], IgxYearsViewComponent.prototype, "styleClass", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxYearsViewComponent.prototype, "tabindex", void 0);
    __decorate([
        HostListener('keydown.arrowdown', ['$event'])
    ], IgxYearsViewComponent.prototype, "onKeydownArrowDown", null);
    __decorate([
        HostListener('keydown.arrowup', ['$event'])
    ], IgxYearsViewComponent.prototype, "onKeydownArrowUp", null);
    __decorate([
        HostListener('keydown.enter')
    ], IgxYearsViewComponent.prototype, "onKeydownEnter", null);
    IgxYearsViewComponent = IgxYearsViewComponent_1 = __decorate([
        Component({
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: IgxYearsViewComponent_1,
                    multi: true
                },
                {
                    provide: HAMMER_GESTURE_CONFIG,
                    useClass: CalendarHammerConfig
                }
            ],
            selector: 'igx-years-view',
            template: "<div class=\"igx-calendar__body\">\n    <div class=\"igx-calendar__body-column\" (wheel)=\"scroll($event)\" (pan)=\"pan($event)\">\n        <span [igxCalendarYear]=\"year\" [date]=\"date\" (onYearSelection)=\"selectYear($event)\" *ngFor=\"let year of decade; trackBy: yearTracker\">\n            {{ formattedYear(year) }}\n        </span>\n    </div>\n</div>\n"
        })
    ], IgxYearsViewComponent);
    return IgxYearsViewComponent;
}());
export { IgxYearsViewComponent };
//# sourceMappingURL=data:application/json;base64,