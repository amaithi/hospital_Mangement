import { __decorate } from "tslib";
import { transition, trigger, useAnimation } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, HostBinding, Input, NgModule, NgZone, Output } from '@angular/core';
import { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';
var NEXT_ID = 0;
/**
 * **Ignite UI for Angular Snackbar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)
 *
 * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can
 * include a link to an action such as Undo.
 *
 * Example:
 * ```html
 * <button (click)="snackbar.show()">Send message</button>
 * <div>
 *   <igx-snackbar #snackbar message="Message sent">
 *   </igx-snackbar>
 * </div>
 * ```
 */
var IgxSnackbarComponent = /** @class */ (function () {
    function IgxSnackbarComponent(zone) {
        this.zone = zone;
        /**
         * Sets/gets the `id` of the snackbar.
         * If not set, the `id` of the first snackbar component  will be `"igx-snackbar-0"`;
         * ```html
         * <igx-snackbar id = "Snackbar1"></igx-snackbar>
         * ```
         * ```typescript
         * let snackbarId = this.snackbar.id;
         * ```
         * @memberof IgxSnackbarComponent
         */
        this.id = "igx-snackbar-" + NEXT_ID++;
        /**
         * Enables/Disables the visibility of the snackbar.
         * If not set, the `isVisible` attribute will have value `false`.
         * ```html
         * <igx-snackbar [isVisible] = "true"></igx-snackbar>
         * ```
         * ```typescript
         * let isVisible =  this.snackbar.isVisible;
         * ```
         */
        this.isVisible = false;
        /**
         * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.
         * Default value is `true`.
         * ```html
         * <igx-snackbar [autoHide] = "false"></igx-snackbar>
         * ```
         * ```typescript
         * let autoHide =  this.snackbar.autoHide;
         * ```
         */
        this.autoHide = true;
        /**
         * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.
         * Default value is 4000.
         * ```html
         * <igx-snackbar [displayTime] = "2000"></igx-snackbar>
         * ```
         * ```typescript
         * let displayTime = this.snackbar.displayTime;
         * ```
         */
        this.displayTime = 4000;
        /**
         * An event that will be emitted when the action is executed.
         * Provides reference to the `IgxSnackbarComponent` as an argument.
         * ```html
         * <igx-snackbar (onAction) = "onAction($event)"></igx-snackbar>
         * ```
         */
        this.onAction = new EventEmitter();
        /**
         * An event that will be emitted when the snackbar animation starts.
         * Provides reference to the `AnimationEvent` interface as an argument.
         * ```html
         * <igx-snackbar (animationStarted) = "animationStarted($event)"></igx-snackbar>
         * ```
         */
        this.animationStarted = new EventEmitter();
        /**
         * An event that will be emitted when the snackbar animation ends.
         * Provides reference to the `AnimationEvent` interface as an argument.
         * ```html
         * <igx-snackbar (animationDone) = "animationDone($event)"></igx-snackbar>
         * ```
         */
        this.animationDone = new EventEmitter();
    }
    /**
     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.
     * ```typescript
     * this.snackbar.show();
     * ```
     */
    IgxSnackbarComponent.prototype.show = function () {
        var _this = this;
        clearTimeout(this.timeoutId);
        setTimeout(this.timeoutId);
        this.isVisible = true;
        if (this.autoHide) {
            this.timeoutId = setTimeout(function () {
                _this.hide();
            }, this.displayTime);
        }
    };
    /**
     * Hides the snackbar.
     * ```typescript
     * this.snackbar.hide();
     * ```
     */
    IgxSnackbarComponent.prototype.hide = function () {
        this.isVisible = false;
        clearTimeout(this.timeoutId);
    };
    /**
     * @hidden
     */
    IgxSnackbarComponent.prototype.triggerAction = function () {
        this.onAction.emit(this);
    };
    /**
     * @hidden
     * @memberof IgxSnackbarComponent
     */
    IgxSnackbarComponent.prototype.snackbarAnimationStarted = function (evt) {
        if (evt.fromState === 'void') {
            this.animationStarted.emit(evt);
        }
    };
    /**
     * @hidden
     * @memberof IgxSnackbarComponent
     */
    IgxSnackbarComponent.prototype.snackbarAnimationDone = function (evt) {
        if (evt.fromState === 'show') {
            this.animationDone.emit(evt);
        }
    };
    IgxSnackbarComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxSnackbarComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxSnackbarComponent.prototype, "message", void 0);
    __decorate([
        Input()
    ], IgxSnackbarComponent.prototype, "isVisible", void 0);
    __decorate([
        Input()
    ], IgxSnackbarComponent.prototype, "autoHide", void 0);
    __decorate([
        Input()
    ], IgxSnackbarComponent.prototype, "displayTime", void 0);
    __decorate([
        Input()
    ], IgxSnackbarComponent.prototype, "actionText", void 0);
    __decorate([
        Output()
    ], IgxSnackbarComponent.prototype, "onAction", void 0);
    __decorate([
        Output()
    ], IgxSnackbarComponent.prototype, "animationStarted", void 0);
    __decorate([
        Output()
    ], IgxSnackbarComponent.prototype, "animationDone", void 0);
    IgxSnackbarComponent = __decorate([
        Component({
            animations: [
                trigger('slideInOut', [
                    transition('void => *', [
                        useAnimation(slideInBottom, {
                            params: {
                                duration: '.35s',
                                easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',
                                fromPosition: 'translateY(100%)',
                                toPosition: 'translateY(0)'
                            }
                        })
                    ]),
                    transition('* => void', [
                        useAnimation(slideOutBottom, {
                            params: {
                                duration: '.2s',
                                easing: 'cubic-bezier(0.4, 0.0, 1, 1)',
                                fromPosition: 'translateY(0)',
                                toOpacity: 1,
                                toPosition: 'translateY(100%)'
                            }
                        })
                    ])
                ]),
                trigger('fadeInOut', [
                    transition('void => *', [
                        useAnimation(fadeIn, {
                            params: {
                                duration: '.35s',
                                easing: 'ease-out'
                            }
                        })
                    ]),
                    transition('* => void', [
                        useAnimation(fadeOut, {
                            params: {
                                duration: '.2s',
                                easing: 'ease-out'
                            }
                        })
                    ])
                ])
            ],
            selector: 'igx-snackbar',
            template: "<div class=\"igx-snackbar\" *ngIf=\"isVisible\" (@slideInOut.start)=\"snackbarAnimationStarted($event)\" (@slideInOut.done)=\"snackbarAnimationDone($event)\"\n    [@slideInOut]=\"isVisible\">\n    <div class=\"igx-snackbar__message\" [@fadeInOut]=\"isVisible\">\n        {{ message }}\n        <ng-content></ng-content>\n    </div>\n    <button class=\"igx-snackbar__button\" igxRipple=\"white\" *ngIf=\"actionText\" [@fadeInOut] (click)=\"triggerAction()\">\n        {{ actionText }}\n    </button>\n</div>\n",
            styles: ["\n        :host {\n            display: block;\n        }\n    "]
        })
    ], IgxSnackbarComponent);
    return IgxSnackbarComponent;
}());
export { IgxSnackbarComponent };
/**
 * @hidden
 */
var IgxSnackbarModule = /** @class */ (function () {
    function IgxSnackbarModule() {
    }
    IgxSnackbarModule = __decorate([
        NgModule({
            declarations: [IgxSnackbarComponent],
            exports: [IgxSnackbarComponent],
            imports: [CommonModule]
        })
    ], IgxSnackbarModule);
    return IgxSnackbarModule;
}());
export { IgxSnackbarModule };
//# sourceMappingURL=data:application/json;base64,