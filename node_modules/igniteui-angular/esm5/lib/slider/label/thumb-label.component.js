import { __decorate } from "tslib";
import { Component, Input, TemplateRef, HostBinding, ElementRef } from '@angular/core';
import { SliderHandle } from '../slider.common';
var IgxThumbLabelComponent = /** @class */ (function () {
    function IgxThumbLabelComponent(_elementRef) {
        this._elementRef = _elementRef;
    }
    Object.defineProperty(IgxThumbLabelComponent.prototype, "thumbFromClass", {
        get: function () {
            return this.type === SliderHandle.FROM;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxThumbLabelComponent.prototype, "thumbToClass", {
        get: function () {
            return this.type === SliderHandle.TO;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxThumbLabelComponent.prototype, "thumbFromActiveClass", {
        get: function () {
            return this.type === SliderHandle.FROM && this.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxThumbLabelComponent.prototype, "thumbToActiveClass", {
        get: function () {
            return this.type === SliderHandle.TO && this.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxThumbLabelComponent.prototype, "nativeElement", {
        get: function () {
            return this._elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxThumbLabelComponent.prototype, "active", {
        get: function () {
            return this._active;
        },
        set: function (val) {
            if (this.continuous || this.deactiveState) {
                this._active = false;
            }
            else {
                this._active = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxThumbLabelComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], IgxThumbLabelComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], IgxThumbLabelComponent.prototype, "templateRef", void 0);
    __decorate([
        Input()
    ], IgxThumbLabelComponent.prototype, "context", void 0);
    __decorate([
        Input()
    ], IgxThumbLabelComponent.prototype, "type", void 0);
    __decorate([
        Input()
    ], IgxThumbLabelComponent.prototype, "continuous", void 0);
    __decorate([
        Input()
    ], IgxThumbLabelComponent.prototype, "deactiveState", void 0);
    __decorate([
        HostBinding('class.igx-slider__label-from')
    ], IgxThumbLabelComponent.prototype, "thumbFromClass", null);
    __decorate([
        HostBinding('class.igx-slider__label-to')
    ], IgxThumbLabelComponent.prototype, "thumbToClass", null);
    __decorate([
        HostBinding('class.igx-slider__label-from--active')
    ], IgxThumbLabelComponent.prototype, "thumbFromActiveClass", null);
    __decorate([
        HostBinding('class.igx-slider__label-to--active')
    ], IgxThumbLabelComponent.prototype, "thumbToActiveClass", null);
    IgxThumbLabelComponent = __decorate([
        Component({
            selector: 'igx-thumb-label',
            template: "<div class=\"label\">\n    <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : thumbFromDefaultTemplate; context: context\"></ng-container>\n</div>\n\n<ng-template #thumbFromDefaultTemplate>\n    {{ value }}\n</ng-template>\n"
        })
    ], IgxThumbLabelComponent);
    return IgxThumbLabelComponent;
}());
export { IgxThumbLabelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWItbGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zbGlkZXIvbGFiZWwvdGh1bWItbGFiZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFNaEQ7SUF5Q0ksZ0NBQW9CLFdBQXVCO1FBQXZCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO0lBQUksQ0FBQztJQW5CaEQsc0JBQVcsa0RBQWM7YUFBekI7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLElBQUksQ0FBQztRQUMzQyxDQUFDOzs7T0FBQTtJQUdELHNCQUFXLGdEQUFZO2FBQXZCO1lBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxFQUFFLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7SUFHRCxzQkFBVyx3REFBb0I7YUFBL0I7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFELENBQUM7OztPQUFBO0lBR0Qsc0JBQVcsc0RBQWtCO2FBQTdCO1lBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN4RCxDQUFDOzs7T0FBQTtJQUlELHNCQUFXLGlEQUFhO2FBQXhCO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztRQUMxQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFXLDBDQUFNO2FBQWpCO1lBQ0ksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hCLENBQUM7YUFFRCxVQUFrQixHQUFZO1lBQzFCLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUN2QyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQzthQUN4QjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQzthQUN0QjtRQUNMLENBQUM7OztPQVJBOztnQkFSZ0MsVUFBVTs7SUFyQzNDO1FBREMsS0FBSyxFQUFFO3lEQUNhO0lBR3JCO1FBREMsS0FBSyxFQUFFOytEQUM2QjtJQUdyQztRQURDLEtBQUssRUFBRTsyREFDWTtJQUdwQjtRQURDLEtBQUssRUFBRTt3REFDa0I7SUFHMUI7UUFEQyxLQUFLLEVBQUU7OERBQ21CO0lBRzNCO1FBREMsS0FBSyxFQUFFO2lFQUNzQjtJQUc5QjtRQURDLFdBQVcsQ0FBQyw4QkFBOEIsQ0FBQztnRUFHM0M7SUFHRDtRQURDLFdBQVcsQ0FBQyw0QkFBNEIsQ0FBQzs4REFHekM7SUFHRDtRQURDLFdBQVcsQ0FBQyxzQ0FBc0MsQ0FBQztzRUFHbkQ7SUFHRDtRQURDLFdBQVcsQ0FBQyxvQ0FBb0MsQ0FBQztvRUFHakQ7SUF2Q1Esc0JBQXNCO1FBSmxDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsdVBBQXlDO1NBQzVDLENBQUM7T0FDVyxzQkFBc0IsQ0EwRGxDO0lBQUQsNkJBQUM7Q0FBQSxBQTFERCxJQTBEQztTQTFEWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZiwgSG9zdEJpbmRpbmcsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNsaWRlckhhbmRsZSB9IGZyb20gJy4uL3NsaWRlci5jb21tb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC10aHVtYi1sYWJlbCcsXG4gICAgdGVtcGxhdGVVcmw6ICd0aHVtYi1sYWJlbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4VGh1bWJMYWJlbENvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfYWN0aXZlOiBib29sZWFuO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdmFsdWU6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29udGV4dDogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdHlwZTogU2xpZGVySGFuZGxlO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29udGludW91czogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGRlYWN0aXZlU3RhdGU6IGJvb2xlYW47XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX2xhYmVsLWZyb20nKVxuICAgIHB1YmxpYyBnZXQgdGh1bWJGcm9tQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IFNsaWRlckhhbmRsZS5GUk9NO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXNsaWRlcl9fbGFiZWwtdG8nKVxuICAgIHB1YmxpYyBnZXQgdGh1bWJUb0NsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBTbGlkZXJIYW5kbGUuVE87XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGVyX19sYWJlbC1mcm9tLS1hY3RpdmUnKVxuICAgIHB1YmxpYyBnZXQgdGh1bWJGcm9tQWN0aXZlQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IFNsaWRlckhhbmRsZS5GUk9NICYmIHRoaXMuYWN0aXZlO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXNsaWRlcl9fbGFiZWwtdG8tLWFjdGl2ZScpXG4gICAgcHVibGljIGdldCB0aHVtYlRvQWN0aXZlQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IFNsaWRlckhhbmRsZS5UTyAmJiB0aGlzLmFjdGl2ZTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuICAgIHB1YmxpYyBnZXQgbmF0aXZlRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGFjdGl2ZSh2YWw6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGludW91cyB8fCB0aGlzLmRlYWN0aXZlU3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19