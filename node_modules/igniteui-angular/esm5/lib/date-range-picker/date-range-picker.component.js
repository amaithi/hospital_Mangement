import { __decorate, __extends, __param } from "tslib";
import { AfterViewInit, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, Inject, Injector, Input, LOCALE_ID, OnChanges, OnDestroy, OnInit, Optional, Output, QueryList, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';
import { NgControl, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { fadeIn, fadeOut } from '../animations/fade';
import { IgxCalendarComponent, WEEKDAYS } from '../calendar/public_api';
import { DateRangeType } from '../core/dates';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import { InteractionMode } from '../core/enums';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { DatePickerUtil } from '../date-picker/date-picker.utils';
import { IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { IgxInputDirective, IgxInputGroupComponent, IgxInputState, IgxLabelDirective } from '../input-group/public_api';
import { AutoPositionStrategy } from '../services/public_api';
import { IgxDateRangeEndComponent, IgxDateRangeInputsBaseComponent, IgxDateRangeSeparatorDirective, IgxDateRangeStartComponent, IgxPickerToggleComponent } from './date-range-picker-inputs.common';
/**
 * Provides the ability to select a range of dates from a calendar UI or editable inputs.
 *
 * @igxModule IgxDateRangeModule
 *
 * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme
 *
 * @igxKeywords date, range, date range, date picker
 *
 * @igxGroup scheduling
 *
 * @remarks
 * It displays the range selection in a single or two input fields.
 * The default template displays a single *readonly* input field
 * while projecting `igx-date-range-start` and `igx-date-range-end`
 * displays two *editable* input fields.
 *
 * @example
 * ```html
 * <igx-date-range-picker mode="dropdown"></igx-date-range-picker>
 * ```
 */
var IgxDateRangePickerComponent = /** @class */ (function (_super) {
    __extends(IgxDateRangePickerComponent, _super);
    function IgxDateRangePickerComponent(element, _displayDensityOptions, _locale, _injector) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.element = element;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._locale = _locale;
        _this._injector = _injector;
        /**
         * Display calendar in either `dialog` or `dropdown` mode.
         * @remarks
         * Default mode is `dialog`
         *
         * @example
         * ```html
         * <igx-date-range-picker mode="dropdown"></igx-date-range-picker>
         * ```
         */
        _this.mode = InteractionMode.Dialog;
        /**
         * The number of displayed month views.
         *
         * @remarks
         * Default is `2`.
         *
         * @example
         * ```html
         * <igx-date-range-picker [monthsViewNumber]="3"></igx-date-range-picker>
         * ```
         */
        _this.monthsViewNumber = 2;
        /**
         * The start day of the week.
         *
         * @remarks
         * Can be assigned to a numeric value or to `WEEKDAYS` enum value.
         *
         * @example
         * ```html
         * <igx-date-range-picker [weekStart]="1"></igx-date-range-picker>
         * ```
         */
        _this.weekStart = WEEKDAYS.SUNDAY;
        /**
         * The default text of the calendar dialog `done` button.
         *
         * @remarks
         * Default value is `Done`.
         * The button will only show up in `dialog` mode.
         *
         * @example
         * ```html
         * <igx-date-range-picker doneButtonText="完了"></igx-date-range-picker>
         * ```
         */
        _this.doneButtonText = 'Done';
        /**
         * Sets the `placeholder` for single-input `IgxDateRangePickerComponent`.
         *   @example
         * ```html
         * <igx-date-range-picker [placeholder]="'Choose your dates'"></igx-date-range-picker>
         * ```
         */
        _this.placeholder = '';
        /**
         * Emitted when a range is selected.
         *
         * @example
         * ```html
         * <igx-date-range-picker (rangeSelected)="handleSelected($event)"></igx-date-range-picker>
         * ```
         */
        _this.rangeSelected = new EventEmitter();
        /**
         * Emitted when the calendar starts opening, cancelable.
         *
         * @example
         * ```html
         * <igx-date-range-picker (onOpening)="handleOpening($event)"></igx-date-range-picker>
         * ```
         */
        _this.onOpening = new EventEmitter();
        /**
         * Emitted when the `IgxDateRangeComponent` is opened.
         *
         * @example
         * ```html
         * <igx-date-range-picker (onOpened)="handleOpened($event)"></igx-date-range-picker>
         * ```
         */
        _this.onOpened = new EventEmitter();
        /**
         * Emitted when the calendar starts closing, cancelable.
         *
         * @example
         * ```html
         * <igx-date-range-picker (onClosing)="handleClosing($event)"></igx-date-range-picker>
         * ```
         */
        _this.onClosing = new EventEmitter();
        /**
         * Emitted when the `IgxDateRangeComponent` is closed.
         *
         * @example
         * ```html
         * <igx-date-range-picker (onClosed)="handleClosed($event)"></igx-date-range-picker>
         * ```
         */
        _this.onClosed = new EventEmitter();
        /** @hidden @internal */
        _this.cssClass = 'igx-date-range-picker';
        /** @hidden @internal */
        _this.dateSeparator = CurrentResourceStrings.DateRangePickerResStrings.igx_date_range_picker_date_separator;
        _this._collapsed = true;
        _this.$destroy = new Subject();
        _this.$toggleClickNotifier = new Subject();
        _this._dialogOverlaySettings = {
            closeOnOutsideClick: true,
            modal: true
        };
        _this._dropDownOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false
        };
        _this.onChangeCallback = function (dateRange) { };
        _this.onTouchCallback = function () { };
        _this.onValidatorChange = function () { };
        _this.onStatusChanged = function () {
            if ((_this._ngControl.control.touched || _this._ngControl.control.dirty) &&
                (_this._ngControl.control.validator || _this._ngControl.control.asyncValidator)) {
                if (_this.inputGroup) {
                    _this.inputDirective.valid = _this.getInputState(_this.inputGroup.isFocused);
                }
                else if (_this.hasProjectedInputs) {
                    _this.projectedInputs
                        .forEach(function (i) { i.inputDirective.valid = _this.getInputState(i.isFocused); });
                }
            }
            _this.setRequiredToInputs();
        };
        _this.locale = _this.locale || _this._locale;
        return _this;
    }
    IgxDateRangePickerComponent_1 = IgxDateRangePickerComponent;
    Object.defineProperty(IgxDateRangePickerComponent.prototype, "minValue", {
        get: function () {
            return this._minValue;
        },
        /**
         * The minimum value in a valid range.
         *
         * @example
         * <igx-date-range-picker [minValue]="minDate"></igx-date-range-picker>
         */
        set: function (value) {
            this._minValue = value;
            this.onValidatorChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateRangePickerComponent.prototype, "maxValue", {
        get: function () {
            return this._maxValue;
        },
        /**
         * The maximum value in a valid range.
         *
         * @example
         * <igx-date-range-picker [maxValue]="maxDate"></igx-date-range-picker>
         */
        set: function (value) {
            this._maxValue = value;
            this.onValidatorChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateRangePickerComponent.prototype, "appliedFormat", {
        /** @hidden @internal */
        get: function () {
            if (this.formatter) {
                return this.formatter(this.value);
            }
            if (!this.hasProjectedInputs) {
                if (this.placeholder !== '') {
                    return this.placeholder;
                }
                // TODO: use displayFormat - see how shortDate, longDate can be defined
                return this.inputFormat
                    ? this.inputFormat + " - " + this.inputFormat
                    : DatePickerUtil.DEFAULT_INPUT_FORMAT + " - " + DatePickerUtil.DEFAULT_INPUT_FORMAT;
            }
            else {
                return this.inputFormat || DatePickerUtil.DEFAULT_INPUT_FORMAT;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateRangePickerComponent.prototype, "hasProjectedInputs", {
        /** @hidden @internal */
        get: function () {
            var _a;
            return ((_a = this.projectedInputs) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateRangePickerComponent.prototype, "dropdownOverlaySettings", {
        get: function () {
            return Object.assign({}, this._dropDownOverlaySettings, this.overlaySettings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateRangePickerComponent.prototype, "dialogOverlaySettings", {
        get: function () {
            return Object.assign({}, this._dialogOverlaySettings, this.overlaySettings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateRangePickerComponent.prototype, "required", {
        get: function () {
            if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {
                var error = this._ngControl.control.validator({});
                return (error && error.required) ? true : false;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens the date range picker's dropdown or dialog.
     *
     * @example
     * ```html
     * <igx-date-range-picker #dateRange></igx-date-range-picker>
     *
     * <button (click)="dateRange.open()">Open Dialog</button
     * ```
     */
    IgxDateRangePickerComponent.prototype.open = function (overlaySettings) {
        if (!this.collapsed) {
            return;
        }
        this.updateCalendar();
        var settings = this.mode === InteractionMode.Dialog ? this.dialogOverlaySettings : this.dropdownOverlaySettings;
        this.toggleDirective.open(Object.assign(settings, overlaySettings));
    };
    /**
     * Closes the date range picker's dropdown or dialog.
     *
     * @example
     * html```
     * <igx-date-range-picker #dateRange></igx-date-range-picker>
     *
     * <button (click)="dateRange.close()">Close Dialog</button>
     * ```
     */
    IgxDateRangePickerComponent.prototype.close = function () {
        if (!this.collapsed) {
            this.toggleDirective.close();
        }
    };
    /**
     * Toggles the date range picker's dropdown or dialog
     *
     * @example
     * html```
     * <igx-date-range-picker #dateRange></igx-date-range-picker>
     *
     * <button (click)="dateRange.toggle()">Toggle Dialog</button>
     * ```
     */
    IgxDateRangePickerComponent.prototype.toggle = function (overlaySettings) {
        if (!this.collapsed) {
            this.close();
        }
        else {
            this.open(overlaySettings);
        }
    };
    Object.defineProperty(IgxDateRangePickerComponent.prototype, "collapsed", {
        /**
         * Gets calendar state.
         *
         * ```typescript
         * let state = this.dateRange.collapsed;
         * ```
         */
        get: function () {
            return this._collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDateRangePickerComponent.prototype, "value", {
        /**
         * The currently selected value / range from the calendar
         *
         * @remarks
         * The current value is of type `DateRange`
         *
         * @example
         * ```typescript
         * const newValue: DateRange = { start: new Date("2/2/2012"), end: new Date("3/3/2013")};
         * this.dateRangePicker.value = newValue;
         * ```
         */
        get: function () {
            return this._value;
        },
        set: function (value) {
            this.updateValue(value);
            this.onChangeCallback(value);
        },
        enumerable: true,
        configurable: true
    });
    IgxDateRangePickerComponent.prototype.updateValue = function (value) {
        this._value = value ? value : null;
        this.updateInputs();
    };
    /**
     * Selects a range of dates. If no `endDate` is passed, range is 1 day (only `startDate`)
     *
     * @example
     * ```typescript
     * public selectFiveDayRange() {
     *  const inFiveDays = new Date(new Date().setDate(today.getDate() + 5));
     *  const today = new Date();
     *  this.dateRange.selectRange(today, inFiveDays);
     * }
     * ```
     */
    IgxDateRangePickerComponent.prototype.selectRange = function (startDate, endDate) {
        endDate = endDate !== null && endDate !== void 0 ? endDate : startDate;
        var dateRange = [startDate, endDate];
        this.calendar.selectDate(dateRange);
        this.handleSelection(dateRange);
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.writeValue = function (value) {
        this.updateValue(value);
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchCallback = fn;
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.validate = function (control) {
        var value = control.value;
        if (value) {
            var min = DatePickerUtil.parseDate(this.minValue);
            var max = DatePickerUtil.parseDate(this.maxValue);
            var start = DatePickerUtil.parseDate(value.start);
            var end = DatePickerUtil.parseDate(value.end);
            if (min && start && DatePickerUtil.lessThanMinValue(start, min, false)) {
                return { 'minValue': true };
            }
            if (min && end && DatePickerUtil.lessThanMinValue(end, min, false)) {
                return { 'minValue': true };
            }
            if (max && start && DatePickerUtil.greaterThanMaxValue(start, max, false)) {
                return { 'maxValue': true };
            }
            if (max && end && DatePickerUtil.greaterThanMaxValue(end, max, false)) {
                return { 'maxValue': true };
            }
        }
        // TODO: fix what happens on blur and ensure on blur the value is either null or with both start and end filled
        return null;
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.registerOnValidatorChange = function (fn) {
        this.onValidatorChange = fn;
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    Object.defineProperty(IgxDateRangePickerComponent.prototype, "separatorClass", {
        /** @hidden @internal */
        get: function () {
            return this.getComponentDensityClass('igx-date-range-picker__label');
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    IgxDateRangePickerComponent.prototype.ngOnInit = function () {
        this._ngControl = this._injector.get(NgControl, null);
    };
    /** @hidden */
    IgxDateRangePickerComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.mode === InteractionMode.DropDown) {
            this.attachOnKeydown();
        }
        this.subscribeToDateEditorEvents();
        this.configPositionStrategy();
        this.configOverlaySettings();
        this.attachOnTouched();
        var subsToClicked = function () {
            _this.$toggleClickNotifier.next();
            _this.toggleComponents.forEach(function (toggle) {
                toggle.clicked.pipe(takeUntil(_this.$toggleClickNotifier)).subscribe(function () { return _this.open(); });
            });
        };
        this.toggleComponents.changes.pipe(takeUntil(this.$destroy)).subscribe(function () { return subsToClicked(); });
        subsToClicked();
        this.setRequiredToInputs();
        if (this._ngControl) {
            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
        }
        this.initialSetValue();
        this.updateInputs();
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.ngOnChanges = function (changes) {
        if (changes['locale']) {
            this.inputFormat = DatePickerUtil.getDefaultInputFormat(this.locale || 'en') || DatePickerUtil.DEFAULT_INPUT_FORMAT;
        }
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.ngOnDestroy = function () {
        this.$destroy.next();
        this.$destroy.complete();
        this.$toggleClickNotifier.next();
        this.$toggleClickNotifier.complete();
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.handleOpening = function (event) {
        this.onOpening.emit(event);
        this._collapsed = false;
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.handleOpened = function () {
        this.calendar.daysView.focusActiveDate();
        this.onOpened.emit({ owner: this });
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.handleClosing = function (event) {
        this.onClosing.emit(event);
        if (this.value && this.value.start && !this.value.end) {
            this.value = { start: this.value.start, end: this.value.start };
        }
        if (this.value && !this.value.start && !this.value.end) {
            this.value = null;
        }
        if (this.mode === InteractionMode.DropDown && event.event && !this.element.nativeElement.contains(event.event.target)) {
            // outside click
            this.updateValidityOnBlur();
        }
        else {
            // input click
            this.focusInput();
        }
    };
    IgxDateRangePickerComponent.prototype.updateValidityOnBlur = function () {
        var _this = this;
        this.onTouchCallback();
        if (this._ngControl) {
            if (this.hasProjectedInputs) {
                this.projectedInputs.forEach(function (i) {
                    if (!_this._ngControl.valid) {
                        i.updateInputValidity(IgxInputState.INVALID);
                    }
                    else {
                        i.updateInputValidity(IgxInputState.INITIAL);
                    }
                });
            }
            if (this.inputDirective) {
                if (!this._ngControl.valid) {
                    this.inputDirective.valid = IgxInputState.INVALID;
                }
                else {
                    this.inputDirective.valid = IgxInputState.INITIAL;
                }
            }
        }
    };
    IgxDateRangePickerComponent.prototype.focusInput = function () {
        var _a;
        // TODO: should we always focus start input?
        (_a = this.projectedInputs
            .find(function (i) { return i instanceof IgxDateRangeStartComponent; })) === null || _a === void 0 ? void 0 : _a.setFocus();
        if (this.inputDirective) {
            this.inputDirective.focus();
        }
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.handleClosed = function () {
        this._collapsed = true;
        this.onClosed.emit({ owner: this });
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.onKeyDown = function (event) {
        switch (event.key) {
            case "ArrowUp" /* UP_ARROW */:
            case "Up" /* UP_ARROW_IE */:
                if (event.altKey) {
                    this.close();
                }
                break;
            case "ArrowDown" /* DOWN_ARROW */:
            case "Down" /* DOWN_ARROW_IE */:
                if (event.altKey) {
                    this.open();
                }
                break;
            case "Escape" /* ESCAPE */:
            case "Esc" /* ESCAPE_IE */:
                this.close();
                break;
        }
    };
    /** @hidden @internal */
    IgxDateRangePickerComponent.prototype.handleSelection = function (selectionData) {
        this.value = this.extractRange(selectionData);
        this.rangeSelected.emit(this.value);
    };
    IgxDateRangePickerComponent.prototype.getInputState = function (focused) {
        if (focused) {
            return this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;
        }
        else {
            return this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;
        }
    };
    IgxDateRangePickerComponent.prototype.setRequiredToInputs = function () {
        var _this = this;
        // workaround for igxInput setting required
        Promise.resolve().then(function () {
            var isRequired = _this.required;
            if (_this.inputGroup && _this.inputGroup.isRequired !== isRequired) {
                _this.inputGroup.isRequired = isRequired;
            }
            else if (_this.hasProjectedInputs && _this._ngControl) {
                _this.projectedInputs.forEach(function (i) { return i.isRequired = isRequired; });
            }
        });
    };
    IgxDateRangePickerComponent.prototype.updateCalendar = function () {
        this.calendar.disabledDates = [];
        var minValue = DatePickerUtil.parseDate(this.minValue);
        if (!minValue && this.hasProjectedInputs) {
            var start = this.projectedInputs.filter(function (i) { return i instanceof IgxDateRangeStartComponent; })[0];
            if (start) {
                minValue = DatePickerUtil.parseDate(start.dateTimeEditor.minValue);
            }
        }
        if (minValue) {
            this.calendar.disabledDates.push({ type: DateRangeType.Before, dateRange: [minValue] });
        }
        var maxValue = DatePickerUtil.parseDate(this.maxValue);
        if (!maxValue && this.hasProjectedInputs) {
            var end = this.projectedInputs.filter(function (i) { return i instanceof IgxDateRangeEndComponent; })[0];
            if (end) {
                maxValue = DatePickerUtil.parseDate(end.dateTimeEditor.maxValue);
            }
        }
        if (maxValue) {
            this.calendar.disabledDates.push({ type: DateRangeType.After, dateRange: [maxValue] });
        }
        var range = [];
        if (this.value) {
            if (this.value.start) {
                range.push(this.value.start);
            }
            if (this.value.end) {
                range.push(this.value.end);
            }
        }
        if (range.length > 0) {
            this.calendar.selectDate(range);
            this.calendar.viewDate = range[0];
        }
        else {
            this.calendar.deselectDate();
        }
    };
    IgxDateRangePickerComponent.prototype.extractRange = function (selection) {
        return {
            start: selection[0],
            end: selection.length > 0 ? selection[selection.length - 1] : null
        };
    };
    IgxDateRangePickerComponent.prototype.attachOnKeydown = function () {
        var _this = this;
        fromEvent(this.element.nativeElement, 'keydown')
            .pipe(takeUntil(this.$destroy))
            .subscribe(function (evt) { return _this.onKeyDown(evt); });
    };
    IgxDateRangePickerComponent.prototype.subscribeToDateEditorEvents = function () {
        var _this = this;
        if (this.hasProjectedInputs) {
            var start = this.projectedInputs.find(function (i) { return i instanceof IgxDateRangeStartComponent; });
            var end = this.projectedInputs.find(function (i) { return i instanceof IgxDateRangeEndComponent; });
            if (start && end) {
                start.dateTimeEditor.valueChange
                    .pipe(takeUntil(this.$destroy))
                    .subscribe(function (value) {
                    if (_this.value) {
                        _this.value = { start: value, end: _this.value.end };
                    }
                    else {
                        _this.value = { start: value, end: null };
                    }
                    // TODO: should we check start and reset end value
                });
                end.dateTimeEditor.valueChange
                    .pipe(takeUntil(this.$destroy))
                    .subscribe(function (value) {
                    if (_this.value) {
                        _this.value = { start: _this.value.start, end: value };
                    }
                    else {
                        _this.value = { start: null, end: value };
                    }
                });
            }
        }
    };
    IgxDateRangePickerComponent.prototype.attachOnTouched = function () {
        var _this = this;
        if (this.hasProjectedInputs) {
            this.projectedInputs.forEach(function (i) {
                fromEvent(i.dateTimeEditor.nativeElement, 'blur')
                    .pipe(takeUntil(_this.$destroy))
                    .subscribe(function () {
                    if (_this.collapsed) {
                        _this.updateValidityOnBlur();
                    }
                    if (_this.value && !_this.value.start) {
                        _this.value = null;
                    }
                    // TODO: if we have start and have no end should we fill end
                    // as we do on calendar close
                });
            });
        }
        else {
            fromEvent(this.inputDirective.nativeElement, 'blur')
                .pipe(takeUntil(this.$destroy))
                .subscribe(function () {
                if (_this.collapsed) {
                    _this.updateValidityOnBlur();
                }
            });
        }
    };
    IgxDateRangePickerComponent.prototype.configPositionStrategy = function () {
        this._positionSettings = {
            openAnimation: fadeIn,
            closeAnimation: fadeOut,
            target: this.element.nativeElement
        };
        this._dropDownOverlaySettings.positionStrategy = new AutoPositionStrategy(this._positionSettings);
    };
    IgxDateRangePickerComponent.prototype.configOverlaySettings = function () {
        if (this.overlaySettings !== null) {
            this._dropDownOverlaySettings = Object.assign({}, this._dropDownOverlaySettings, this.overlaySettings);
            this._dialogOverlaySettings = Object.assign({}, this._dialogOverlaySettings, this.overlaySettings);
        }
    };
    IgxDateRangePickerComponent.prototype.initialSetValue = function () {
        // if there is no value, no ngControl but we have inputs we may have value set trough
        // inputs' ngModels - we should generate our initial control value
        if (!this.value && this.hasProjectedInputs && !this._ngControl) {
            var start = this.projectedInputs.find(function (i) { return i instanceof IgxDateRangeStartComponent; }).dateTimeEditor.value;
            var end = this.projectedInputs.find(function (i) { return i instanceof IgxDateRangeEndComponent; }).dateTimeEditor.value;
            this.updateValue({ start: start, end: end });
        }
    };
    IgxDateRangePickerComponent.prototype.updateInputs = function () {
        var _a, _b;
        var start = (_a = this.projectedInputs) === null || _a === void 0 ? void 0 : _a.find(function (i) { return i instanceof IgxDateRangeStartComponent; });
        var end = (_b = this.projectedInputs) === null || _b === void 0 ? void 0 : _b.find(function (i) { return i instanceof IgxDateRangeEndComponent; });
        if (start && end && this.value) {
            start.updateInputValue(this.value.start);
            end.updateInputValue(this.value.end);
        }
    };
    var IgxDateRangePickerComponent_1;
    IgxDateRangePickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: Injector }
    ]; };
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "mode", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "monthsViewNumber", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "hideOutsideDays", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "weekStart", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "locale", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "formatter", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "doneButtonText", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "overlaySettings", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "displayFormat", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "inputFormat", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "minValue", null);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "maxValue", null);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "placeholder", void 0);
    __decorate([
        Output()
    ], IgxDateRangePickerComponent.prototype, "rangeSelected", void 0);
    __decorate([
        Output()
    ], IgxDateRangePickerComponent.prototype, "onOpening", void 0);
    __decorate([
        Output()
    ], IgxDateRangePickerComponent.prototype, "onOpened", void 0);
    __decorate([
        Output()
    ], IgxDateRangePickerComponent.prototype, "onClosing", void 0);
    __decorate([
        Output()
    ], IgxDateRangePickerComponent.prototype, "onClosed", void 0);
    __decorate([
        HostBinding('class.igx-date-range-picker')
    ], IgxDateRangePickerComponent.prototype, "cssClass", void 0);
    __decorate([
        ViewChild(IgxCalendarComponent)
    ], IgxDateRangePickerComponent.prototype, "calendar", void 0);
    __decorate([
        ViewChild(IgxInputGroupComponent)
    ], IgxDateRangePickerComponent.prototype, "inputGroup", void 0);
    __decorate([
        ViewChild(IgxInputDirective)
    ], IgxDateRangePickerComponent.prototype, "inputDirective", void 0);
    __decorate([
        ViewChild(IgxToggleDirective)
    ], IgxDateRangePickerComponent.prototype, "toggleDirective", void 0);
    __decorate([
        ContentChildren(IgxPickerToggleComponent, { descendants: true })
    ], IgxDateRangePickerComponent.prototype, "toggleComponents", void 0);
    __decorate([
        ContentChildren(IgxDateRangeInputsBaseComponent)
    ], IgxDateRangePickerComponent.prototype, "projectedInputs", void 0);
    __decorate([
        ContentChild(IgxLabelDirective)
    ], IgxDateRangePickerComponent.prototype, "label", void 0);
    __decorate([
        ContentChild(IgxDateRangeSeparatorDirective, { read: TemplateRef })
    ], IgxDateRangePickerComponent.prototype, "dateSeparatorTemplate", void 0);
    __decorate([
        Input()
    ], IgxDateRangePickerComponent.prototype, "value", null);
    IgxDateRangePickerComponent = IgxDateRangePickerComponent_1 = __decorate([
        Component({
            selector: 'igx-date-range-picker',
            template: "<div #toggle=\"toggle\" igxToggle class=\"igx-date-picker\" [class.igx-date-picker--dropdown]=\"mode === 'dropdown'\"\n    (onOpening)=\"handleOpening($event)\" (onOpened)=\"handleOpened()\"\n    (onClosing)=\"handleClosing($event)\" (onClosed)=\"handleClosed()\"\n    [style.flex-basis]=\"monthsViewNumber * 320 + 'px'\"\n    [style.width]=\"monthsViewNumber * 320 + 'px'\"\n    [style.max-width]=\"'90vw'\"\n>\n    <!-- TODO: use IgxCalendarContainerComponent instead -->\n    <igx-calendar #calendar (keydown)=\"onKeyDown($event)\" selection=\"range\" [weekStart]=\"weekStart\"\n        [hideOutsideDays]=\"hideOutsideDays\" [monthsViewNumber]=\"monthsViewNumber\" [locale]=\"locale\"\n        (onSelection)=\"handleSelection($event)\"></igx-calendar>\n    <div class=\"igx-date-range-picker-buttons\">\n        <ng-container *ngIf=\"mode === 'dialog'\">\n            <button igxButton type=\"button\" (click)=\"close()\">{{ doneButtonText }}</button>\n        </ng-container>\n    </div>\n</div>\n\n<ng-container *ngTemplateOutlet=\"this.hasProjectedInputs ? startEndTemplate : defTemplate\"></ng-container>\n\n<ng-template #singleTemplate>\n    <div (click)=\"open()\" class=\"content-wrap\">\n        <ng-content select=\"igx-date-single\"></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #startEndTemplate>\n    <ng-content select=\"igx-date-range-start\"></ng-content>\n    <div [className]=\"separatorClass\">\n        <ng-container *ngTemplateOutlet=\"dateSeparatorTemplate ? dateSeparatorTemplate : defDateSeparatorTemplate;\"></ng-container>\n    </div>\n    <ng-content select=\"igx-date-range-end\"></ng-content>\n</ng-template>\n\n<ng-template #defIcon>\n    <igx-icon>\n        calendar_today\n    </igx-icon>\n</ng-template>\n\n<ng-template #defDateSeparatorTemplate>{{ dateSeparator }}</ng-template>\n\n<ng-template #defTemplate>\n    <igx-input-group (click)=\"open()\">\n        <input #singleInput igxInput type=\"text\" readonly\n            [placeholder]=\"this.value ? '' : appliedFormat\"\n            role=\"combobox\"\n            aria-haspopup=\"grid\"\n            [attr.aria-expanded]=\"!toggle.collapsed\"\n            [attr.aria-labelledby]=\"this.label?.id\"\n            [value]=\"this.value | dateRange: this.inputFormat : this.locale\"\n        />\n\n        <igx-prefix *ngIf=\"!this.toggleComponents.length\">\n            <ng-container *ngTemplateOutlet=\"defIcon\"></ng-container>\n        </igx-prefix>\n\n        <ng-container ngProjectAs=\"[igxLabel]\">\n            <ng-content select=\"[igxLabel]\"></ng-content>\n        </ng-container>\n        <ng-container ngProjectAs=\"igx-prefix\">\n            <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n        </ng-container>\n        <ng-container ngProjectAs=\"igx-suffix\">\n            <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n        </ng-container>\n        <ng-container ngProjectAs=\"igx-hint\">\n            <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n        </ng-container>\n    </igx-input-group>\n</ng-template>\n",
            providers: [
                { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateRangePickerComponent_1, multi: true },
                { provide: NG_VALIDATORS, useExisting: IgxDateRangePickerComponent_1, multi: true }
            ]
        }),
        __param(1, Optional()), __param(1, Inject(DisplayDensityToken)),
        __param(2, Inject(LOCALE_ID))
    ], IgxDateRangePickerComponent);
    return IgxDateRangePickerComponent;
}(DisplayDensityBase));
export { IgxDateRangePickerComponent };
//# sourceMappingURL=data:application/json;base64,