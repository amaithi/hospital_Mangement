import { __assign } from "tslib";
import { animate, animation, keyframes, style } from '@angular/animations';
import { EaseInOut } from '../easings';
var baseRecipe = [
    animate("{{duration}} {{delay}} {{easing}}", keyframes([
        style({
            offset: 0,
            transform: "rotate(0deg) translate{{direction}}(0)",
            transformOrigin: "{{xPos}} {{yPos}}"
        }),
        style({
            offset: 0.1,
            transform: "rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})"
        }),
        style({
            offset: 0.2,
            transform: "rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})"
        }),
        style({
            offset: 0.3,
            transform: "rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})"
        }),
        style({
            offset: 0.4,
            transform: "rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})"
        }),
        style({
            offset: 0.5,
            transform: "rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})"
        }),
        style({
            offset: 0.6,
            transform: "rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})"
        }),
        style({
            offset: 0.7,
            transform: "rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})"
        }),
        style({
            offset: 0.8,
            transform: "rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})"
        }),
        style({
            offset: 0.9,
            transform: "rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})"
        }),
        style({
            offset: 1,
            transform: "rotate(0deg) translate{{direction}}(0)",
            transformOrigin: "{{xPos}} {{yPos}}"
        })
    ]))
];
var baseParams = {
    delay: '0s',
    direction: 'X',
    duration: '800ms',
    easing: EaseInOut.quad,
    endAngle: 0,
    endDistance: '8px',
    startAngle: 0,
    startDistance: '10px',
    xPos: 'center',
    yPos: 'center'
};
var shakeHor = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { direction: 'X' })
});
var shakeVer = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { direction: 'Y' })
});
var shakeTop = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', yPos: 'top' })
});
var shakeBottom = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', yPos: 'bottom' })
});
var shakeRight = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'right', yPos: 'center' })
});
var shakeLeft = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'left', yPos: 'center' })
});
var shakeCenter = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { direction: 'Y', endAngle: 8, endDistance: '0', startAngle: 10, startDistance: '0', xPos: 'center', yPos: 'center' })
});
var shakeTr = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'right', yPos: 'top' })
});
var shakeBr = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'right', yPos: 'bottom' })
});
var shakeBl = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'left', yPos: 'bottom' })
});
var shakeTl = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { direction: 'Y', endAngle: 2, endDistance: '0', startAngle: 4, startDistance: '0', xPos: 'left', yPos: 'top' })
});
export { shakeHor, shakeVer, shakeTop, shakeBottom, shakeRight, shakeLeft, shakeCenter, shakeTr, shakeBr, shakeBl, shakeTl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hha2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbnMvbWlzYy9zaGFrZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILE9BQU8sRUFDUCxTQUFTLEVBR1QsU0FBUyxFQUNULEtBQUssRUFDUixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHdkMsSUFBTSxVQUFVLEdBQXdCO0lBQ3BDLE9BQU8sQ0FDSCxtQ0FBbUMsRUFDbkMsU0FBUyxDQUFDO1FBQ04sS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLENBQUM7WUFDVCxTQUFTLEVBQUUsd0NBQXdDO1lBQ25ELGVBQWUsRUFBRSxtQkFBbUI7U0FDdkMsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLG9FQUFvRTtTQUNsRixDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsc0VBQXNFO1NBQ3BGLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsR0FBRztZQUNYLFNBQVMsRUFBRSxzRUFBc0U7U0FDcEYsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLHNFQUFzRTtTQUVwRixDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsc0VBQXNFO1NBQ3BGLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsR0FBRztZQUNYLFNBQVMsRUFBRSxzRUFBc0U7U0FFcEYsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLHNFQUFzRTtTQUNwRixDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsTUFB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V0FBVyxFQUNYLFVBQVUsRUFDVixTQUFTLEVBQ1QsV0FBVyxFQUNYLE9BQU8sRUFDUCxPQUFPLEVBQ1AsT0FBTyxFQUNQLE9BQU8sRUFDVixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBhbmltYXRlLFxuICAgIGFuaW1hdGlvbixcbiAgICBBbmltYXRpb25NZXRhZGF0YSxcbiAgICBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSxcbiAgICBrZXlmcmFtZXMsXG4gICAgc3R5bGVcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBFYXNlSW5PdXQgfSBmcm9tICcuLi9lYXNpbmdzJztcbmltcG9ydCB7IElBbmltYXRpb25QYXJhbXMgfSBmcm9tICcuLi9pbnRlcmZhY2UnO1xuXG5jb25zdCBiYXNlUmVjaXBlOiBBbmltYXRpb25NZXRhZGF0YVtdID0gW1xuICAgIGFuaW1hdGUoXG4gICAgICAgIGB7e2R1cmF0aW9ufX0ge3tkZWxheX19IHt7ZWFzaW5nfX1gLFxuICAgICAgICBrZXlmcmFtZXMoW1xuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGByb3RhdGUoMGRlZykgdHJhbnNsYXRle3tkaXJlY3Rpb259fSgwKWAsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBge3t4UG9zfX0ge3t5UG9zfX1gXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAuMSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGByb3RhdGUoe3tlbmRBbmdsZX19ZGVnKSB0cmFuc2xhdGV7e2RpcmVjdGlvbn19KC17e3N0YXJ0RGlzdGFuY2V9fSlgXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAuMixcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGByb3RhdGUoLXt7c3RhcnRBbmdsZX19ZGVnKSB0cmFuc2xhdGV7e2RpcmVjdGlvbn19KHt7c3RhcnREaXN0YW5jZX19KWBcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogMC4zLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHJvdGF0ZSh7e3N0YXJ0QW5nbGV9fWRlZykgdHJhbnNsYXRle3tkaXJlY3Rpb259fSgte3tzdGFydERpc3RhbmNlfX0pYFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLjQsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKC17e3N0YXJ0QW5nbGV9fWRlZykgdHJhbnNsYXRle3tkaXJlY3Rpb259fSh7e3N0YXJ0RGlzdGFuY2V9fSlgXG5cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogMC41LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHJvdGF0ZSh7e3N0YXJ0QW5nbGV9fWRlZykgdHJhbnNsYXRle3tkaXJlY3Rpb259fSgte3tzdGFydERpc3RhbmNlfX0pYFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLjYsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKC17e3N0YXJ0QW5nbGV9fWRlZykgdHJhbnNsYXRle3tkaXJlY3Rpb259fSh7e3N0YXJ0RGlzdGFuY2V9fSlgXG5cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogMC43LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHJvdGF0ZSh7e3N0YXJ0QW5nbGV9fWRlZykgdHJhbnNsYXRle3tkaXJlY3Rpb259fSgte3tzdGFydERpc3RhbmNlfX0pYFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLjgsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKC17e2VuZEFuZ2xlfX1kZWcpIHRyYW5zbGF0ZXt7ZGlyZWN0aW9ufX0oe3tlbmREaXN0YW5jZX19KWBcblxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLjksXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKHt7ZW5kQW5nbGV9fWRlZykgdHJhbnNsYXRle3tkaXJlY3Rpb259fSgte3tlbmREaXN0YW5jZX19KWBcblxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHJvdGF0ZSgwZGVnKSB0cmFuc2xhdGV7e2RpcmVjdGlvbn19KDApYCxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IGB7e3hQb3N9fSB7e3lQb3N9fWBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgKVxuXTtcblxuY29uc3QgYmFzZVBhcmFtczogSUFuaW1hdGlvblBhcmFtcyA9IHtcbiAgICBkZWxheTogJzBzJyxcbiAgICBkaXJlY3Rpb246ICdYJyxcbiAgICBkdXJhdGlvbjogJzgwMG1zJyxcbiAgICBlYXNpbmc6IEVhc2VJbk91dC5xdWFkLFxuICAgIGVuZEFuZ2xlOiAwLFxuICAgIGVuZERpc3RhbmNlOiAnOHB4JyxcbiAgICBzdGFydEFuZ2xlOiAwLFxuICAgIHN0YXJ0RGlzdGFuY2U6ICcxMHB4JyxcbiAgICB4UG9zOiAnY2VudGVyJyxcbiAgICB5UG9zOiAnY2VudGVyJ1xufTtcblxuY29uc3Qgc2hha2VIb3I6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZGlyZWN0aW9uOiAnWCdcbiAgICB9XG59KTtcblxuY29uc3Qgc2hha2VWZXI6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZGlyZWN0aW9uOiAnWSdcbiAgICB9XG59KTtcblxuY29uc3Qgc2hha2VUb3A6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZW5kQW5nbGU6IDIsXG4gICAgICAgIGVuZERpc3RhbmNlOiAnMCcsXG4gICAgICAgIHN0YXJ0QW5nbGU6IDQsXG4gICAgICAgIHN0YXJ0RGlzdGFuY2U6ICcwJyxcbiAgICAgICAgeVBvczogJ3RvcCdcbiAgICB9XG59KTtcblxuY29uc3Qgc2hha2VCb3R0b206IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZGlyZWN0aW9uOiAnWScsXG4gICAgICAgIGVuZEFuZ2xlOiAyLFxuICAgICAgICBlbmREaXN0YW5jZTogJzAnLFxuICAgICAgICBzdGFydEFuZ2xlOiA0LFxuICAgICAgICBzdGFydERpc3RhbmNlOiAnMCcsXG4gICAgICAgIHlQb3M6ICdib3R0b20nXG4gICAgfVxufSk7XG5cbmNvbnN0IHNoYWtlUmlnaHQ6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZGlyZWN0aW9uOiAnWScsXG4gICAgICAgIGVuZEFuZ2xlOiAyLFxuICAgICAgICBlbmREaXN0YW5jZTogJzAnLFxuICAgICAgICBzdGFydEFuZ2xlOiA0LFxuICAgICAgICBzdGFydERpc3RhbmNlOiAnMCcsXG4gICAgICAgIHhQb3M6ICdyaWdodCcsXG4gICAgICAgIHlQb3M6ICdjZW50ZXInXG4gICAgfVxufSk7XG5cbmNvbnN0IHNoYWtlTGVmdDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICBkaXJlY3Rpb246ICdZJyxcbiAgICAgICAgZW5kQW5nbGU6IDIsXG4gICAgICAgIGVuZERpc3RhbmNlOiAnMCcsXG4gICAgICAgIHN0YXJ0QW5nbGU6IDQsXG4gICAgICAgIHN0YXJ0RGlzdGFuY2U6ICcwJyxcbiAgICAgICAgeFBvczogJ2xlZnQnLFxuICAgICAgICB5UG9zOiAnY2VudGVyJ1xuICAgIH1cbn0pO1xuXG5jb25zdCBzaGFrZUNlbnRlcjogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICBkaXJlY3Rpb246ICdZJyxcbiAgICAgICAgZW5kQW5nbGU6IDgsXG4gICAgICAgIGVuZERpc3RhbmNlOiAnMCcsXG4gICAgICAgIHN0YXJ0QW5nbGU6IDEwLFxuICAgICAgICBzdGFydERpc3RhbmNlOiAnMCcsXG4gICAgICAgIHhQb3M6ICdjZW50ZXInLFxuICAgICAgICB5UG9zOiAnY2VudGVyJ1xuICAgIH1cbn0pO1xuXG5jb25zdCBzaGFrZVRyOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXG4gICAgICAgIGRpcmVjdGlvbjogJ1knLFxuICAgICAgICBlbmRBbmdsZTogMixcbiAgICAgICAgZW5kRGlzdGFuY2U6ICcwJyxcbiAgICAgICAgc3RhcnRBbmdsZTogNCxcbiAgICAgICAgc3RhcnREaXN0YW5jZTogJzAnLFxuICAgICAgICB4UG9zOiAncmlnaHQnLFxuICAgICAgICB5UG9zOiAndG9wJ1xuICAgIH1cbn0pO1xuXG5jb25zdCBzaGFrZUJyOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXG4gICAgICAgIGRpcmVjdGlvbjogJ1knLFxuICAgICAgICBlbmRBbmdsZTogMixcbiAgICAgICAgZW5kRGlzdGFuY2U6ICcwJyxcbiAgICAgICAgc3RhcnRBbmdsZTogNCxcbiAgICAgICAgc3RhcnREaXN0YW5jZTogJzAnLFxuICAgICAgICB4UG9zOiAncmlnaHQnLFxuICAgICAgICB5UG9zOiAnYm90dG9tJ1xuICAgIH1cbn0pO1xuXG5jb25zdCBzaGFrZUJsOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXG4gICAgICAgIGRpcmVjdGlvbjogJ1knLFxuICAgICAgICBlbmRBbmdsZTogMixcbiAgICAgICAgZW5kRGlzdGFuY2U6ICcwJyxcbiAgICAgICAgc3RhcnRBbmdsZTogNCxcbiAgICAgICAgc3RhcnREaXN0YW5jZTogJzAnLFxuICAgICAgICB4UG9zOiAnbGVmdCcsXG4gICAgICAgIHlQb3M6ICdib3R0b20nXG4gICAgfVxufSk7XG5cbmNvbnN0IHNoYWtlVGw6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZGlyZWN0aW9uOiAnWScsXG4gICAgICAgIGVuZEFuZ2xlOiAyLFxuICAgICAgICBlbmREaXN0YW5jZTogJzAnLFxuICAgICAgICBzdGFydEFuZ2xlOiA0LFxuICAgICAgICBzdGFydERpc3RhbmNlOiAnMCcsXG4gICAgICAgIHhQb3M6ICdsZWZ0JyxcbiAgICAgICAgeVBvczogJ3RvcCdcbiAgICB9XG59KTtcblxuZXhwb3J0IHtcbiAgICBzaGFrZUhvcixcbiAgICBzaGFrZVZlcixcbiAgICBzaGFrZVRvcCxcbiAgICBzaGFrZUJvdHRvbSxcbiAgICBzaGFrZVJpZ2h0LFxuICAgIHNoYWtlTGVmdCxcbiAgICBzaGFrZUNlbnRlcixcbiAgICBzaGFrZVRyLFxuICAgIHNoYWtlQnIsXG4gICAgc2hha2VCbCxcbiAgICBzaGFrZVRsXG59O1xuIl19