import { __assign } from "tslib";
import { animate, animation, keyframes, style } from '@angular/animations';
import { EaseOut } from '../easings';
var baseRecipe = [
    style({
        backfaceVisibility: 'hidden',
        transformStyle: 'preserve-3d'
    }),
    animate("{{duration}} {{delay}} {{easing}}", keyframes([
        style({
            offset: 0,
            transform: "translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)"
        }),
        style({
            offset: 1,
            transform: "translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)"
        })
    ]))
];
var baseParams = {
    delay: '0s',
    duration: '600ms',
    easing: EaseOut.quad,
    endAngle: 180,
    endDistance: '0px',
    rotateX: 1,
    rotateY: 0,
    rotateZ: 0,
    startAngle: 0,
    startDistance: '0px'
};
var flipTop = animation(baseRecipe, {
    params: __assign({}, baseParams)
});
var flipBottom = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { endAngle: -180 })
});
var flipLeft = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { rotateX: 0, rotateY: 1 })
});
var flipRight = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { endAngle: -180, rotateX: 0, rotateY: 1 })
});
var flipHorFwd = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { endDistance: '170px' })
});
var flipHorBck = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { endDistance: '-170px' })
});
var flipVerFwd = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { endDistance: '170px', rotateX: 0, rotateY: 1 })
});
var flipVerBck = animation(baseRecipe, {
    params: __assign(__assign({}, baseParams), { endDistance: '-170px', rotateX: 0, rotateY: 1 })
});
export { flipTop, flipRight, flipBottom, flipLeft, flipHorFwd, flipHorBck, flipVerFwd, flipVerBck };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbnMvZmxpcC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILE9BQU8sRUFDUCxTQUFTLEVBR1QsU0FBUyxFQUNULEtBQUssRUFDUixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHckMsSUFBTSxVQUFVLEdBQXdCO0lBQ3BDLEtBQUssQ0FBQztRQUNGLGtCQUFrQixFQUFFLFFBQVE7UUFDNUIsY0FBYyxFQUFFLGFBQWE7S0FDaEMsQ0FBQztJQUNGLE9BQU8sQ0FDSCxtQ0FBbUMsRUFDbkMsU0FBUyxDQUFDO1FBQ04sS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLENBQUM7WUFDVCxTQUFTLEVBQUUsbUhBQ3dEO1NBQ3RFLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSwrR0FDc0Q7U0FDcEUsQ0FBQztLQUNMLENBQUMsQ0FDTDtDQUNKLENBQUM7QUFFRixJQUFNLFVBQVUsR0FBcUI7SUFDakMsS0FBSyxFQUFFLElBQUk7SUFDWCxRQUFRLEVBQUUsT0FBTztJQUNqQixNQUFNLEVBQUUsT0FBTyxDQUFDLElBQUk7SUFDcEIsUUFBUSxFQUFFLEdBQUc7SUFDYixXQUFXLEVBQUUsS0FBSztJQUNsQixPQUFPLEVBQUUsQ0FBQztJQUNWLE9BQU8sRUFBRSxDQUFDO0lBQ1YsT0FBTyxFQUFFLENBQUM7SUFDVixVQUFVLEVBQUUsQ0FBQztJQUNiLGFBQWEsRUFBRSxLQUFLO0NBQ3ZCLENBQUM7QUFFRixJQUFNLE9BQU8sR0FBK0IsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUM5RCxNQUFNLGVBQ0MsVUFBVSxDQUNoQjtDQUNKLENBQUMsQ0FBQztBQUVILElBQU0sVUFBVSxHQUErQixTQUFTLENBQUMsVUFBVSxFQUFFO0lBQ2pFLE1BQU0sd0JBQ0MsVUFBVSxLQUNiLFFBQVEsRUFBRSxDQUFDLEdBQUcsR0FDakI7Q0FDSixDQUFDLENBQUM7QUFFSCxJQUFNLFFBQVEsR0FBK0IsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUMvRCxNQUFNLHdCQUNDLFVBQVUsS0FDYixPQUFPLEVBQUUsQ0FBQyxFQUNWLE9BQU8sRUFBRSxDQUFDLEdBQ2I7Q0FDSixDQUFDLENBQUM7QUFFSCxJQUFNLFNBQVMsR0FBK0IsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUNoRSxNQUFNLHdCQUNDLFVBQVUsS0FDYixRQUFRLEVBQUUsQ0FBQyxHQUFHLEVBQ2QsT0FBTyxFQUFFLENBQUMsRUFDVixPQUFPLEVBQUUsQ0FBQyxHQUNiO0NBQ0osQ0FBQyxDQUFDO0FBRUgsSUFBTSxVQUFVLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDakUsTUFBTSx3QkFDQyxVQUFVLEtBQ2IsV0FBVyxFQUFFLE9BQU8sR0FDdkI7Q0FDSixDQUFDLENBQUM7QUFFSCxJQUFNLFVBQVUsR0FBK0IsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUNqRSxNQUFNLHdCQUNDLFVBQVUsS0FDYixXQUFXLEVBQUUsUUFBUSxHQUN4QjtDQUNKLENBQUMsQ0FBQztBQUVILElBQU0sVUFBVSxHQUErQixTQUFTLENBQUMsVUFBVSxFQUFFO0lBQ2pFLE1BQU0sd0JBQ0MsVUFBVSxLQUNiLFdBQVcsRUFBRSxPQUFPLEVBQ3BCLE9BQU8sRUFBRSxDQUFDLEVBQ1YsT0FBTyxFQUFFLENBQUMsR0FDYjtDQUNKLENBQUMsQ0FBQztBQUVILElBQU0sVUFBVSxHQUErQixTQUFTLENBQUMsVUFBVSxFQUFFO0lBQ2pFLE1BQU0sd0JBQ0MsVUFBVSxLQUNiLFdBQVcsRUFBRSxRQUFRLEVBQ3JCLE9BQU8sRUFBRSxDQUFDLEVBQ1YsT0FBTyxFQUFFLENBQUMsR0FDYjtDQUNKLENBQUMsQ0FBQztBQUVILE9BQU8sRUFDSCxPQUFPLEVBQ1AsU0FBUyxFQUNULFVBQVUsRUFDVixRQUFRLEVBQ1IsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBQ1YsVUFBVSxFQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIGFuaW1hdGUsXG4gICAgYW5pbWF0aW9uLFxuICAgIEFuaW1hdGlvbk1ldGFkYXRhLFxuICAgIEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhLFxuICAgIGtleWZyYW1lcyxcbiAgICBzdHlsZVxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IEVhc2VPdXQgfSBmcm9tICcuLi9lYXNpbmdzJztcbmltcG9ydCB7IElBbmltYXRpb25QYXJhbXMgfSBmcm9tICcuLi9pbnRlcmZhY2UnO1xuXG5jb25zdCBiYXNlUmVjaXBlOiBBbmltYXRpb25NZXRhZGF0YVtdID0gW1xuICAgIHN0eWxlKHtcbiAgICAgICAgYmFja2ZhY2VWaXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgICAgdHJhbnNmb3JtU3R5bGU6ICdwcmVzZXJ2ZS0zZCdcbiAgICB9KSxcbiAgICBhbmltYXRlKFxuICAgICAgICBge3tkdXJhdGlvbn19IHt7ZGVsYXl9fSB7e2Vhc2luZ319YCxcbiAgICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWih7e3N0YXJ0RGlzdGFuY2V9fSlcbiAgICAgICAgICAgICAgICByb3RhdGUzZCh7e3JvdGF0ZVh9fSwge3tyb3RhdGVZfX0sIHt7cm90YXRlWn19LCB7e3N0YXJ0QW5nbGV9fWRlZylgXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWih7e2VuZERpc3RhbmNlfX0pXG4gICAgICAgICAgICAgICAgcm90YXRlM2Qoe3tyb3RhdGVYfX0sIHt7cm90YXRlWX19LCB7e3JvdGF0ZVp9fSwge3tlbmRBbmdsZX19ZGVnKWBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgKVxuXTtcblxuY29uc3QgYmFzZVBhcmFtczogSUFuaW1hdGlvblBhcmFtcyA9IHtcbiAgICBkZWxheTogJzBzJyxcbiAgICBkdXJhdGlvbjogJzYwMG1zJyxcbiAgICBlYXNpbmc6IEVhc2VPdXQucXVhZCxcbiAgICBlbmRBbmdsZTogMTgwLFxuICAgIGVuZERpc3RhbmNlOiAnMHB4JyxcbiAgICByb3RhdGVYOiAxLFxuICAgIHJvdGF0ZVk6IDAsXG4gICAgcm90YXRlWjogMCxcbiAgICBzdGFydEFuZ2xlOiAwLFxuICAgIHN0YXJ0RGlzdGFuY2U6ICcwcHgnXG59O1xuXG5jb25zdCBmbGlwVG9wOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXNcbiAgICB9XG59KTtcblxuY29uc3QgZmxpcEJvdHRvbTogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICBlbmRBbmdsZTogLTE4MFxuICAgIH1cbn0pO1xuXG5jb25zdCBmbGlwTGVmdDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICByb3RhdGVYOiAwLFxuICAgICAgICByb3RhdGVZOiAxXG4gICAgfVxufSk7XG5cbmNvbnN0IGZsaXBSaWdodDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICBlbmRBbmdsZTogLTE4MCxcbiAgICAgICAgcm90YXRlWDogMCxcbiAgICAgICAgcm90YXRlWTogMVxuICAgIH1cbn0pO1xuXG5jb25zdCBmbGlwSG9yRndkOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXG4gICAgICAgIGVuZERpc3RhbmNlOiAnMTcwcHgnXG4gICAgfVxufSk7XG5cbmNvbnN0IGZsaXBIb3JCY2s6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZW5kRGlzdGFuY2U6ICctMTcwcHgnXG4gICAgfVxufSk7XG5cbmNvbnN0IGZsaXBWZXJGd2Q6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZW5kRGlzdGFuY2U6ICcxNzBweCcsXG4gICAgICAgIHJvdGF0ZVg6IDAsXG4gICAgICAgIHJvdGF0ZVk6IDFcbiAgICB9XG59KTtcblxuY29uc3QgZmxpcFZlckJjazogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICBlbmREaXN0YW5jZTogJy0xNzBweCcsXG4gICAgICAgIHJvdGF0ZVg6IDAsXG4gICAgICAgIHJvdGF0ZVk6IDFcbiAgICB9XG59KTtcblxuZXhwb3J0IHtcbiAgICBmbGlwVG9wLFxuICAgIGZsaXBSaWdodCxcbiAgICBmbGlwQm90dG9tLFxuICAgIGZsaXBMZWZ0LFxuICAgIGZsaXBIb3JGd2QsXG4gICAgZmxpcEhvckJjayxcbiAgICBmbGlwVmVyRndkLFxuICAgIGZsaXBWZXJCY2tcbn07XG4iXX0=