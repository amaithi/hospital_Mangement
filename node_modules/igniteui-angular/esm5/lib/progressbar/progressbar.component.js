import { __decorate, __extends } from "tslib";
import { CommonModule } from '@angular/common';
import { Component, ElementRef, EventEmitter, HostBinding, Input, NgModule, Output, Renderer2, ViewChild, ContentChild, AfterViewInit, AfterContentInit } from '@angular/core';
import { IgxProcessBarTextTemplateDirective, IgxProgressBarGradientDirective, } from './progressbar.common';
import { IgxDirectionality } from '../services/direction/directionality';
var ONE_PERCENT = 0.01;
var MIN_VALUE = 0;
export var IgxTextAlign;
(function (IgxTextAlign) {
    IgxTextAlign["START"] = "start";
    IgxTextAlign["CENTER"] = "center";
    IgxTextAlign["END"] = "end";
})(IgxTextAlign || (IgxTextAlign = {}));
export var IgxProgressType;
(function (IgxProgressType) {
    IgxProgressType["ERROR"] = "error";
    IgxProgressType["INFO"] = "info";
    IgxProgressType["WARNING"] = "warning";
    IgxProgressType["SUCCESS"] = "success";
})(IgxProgressType || (IgxProgressType = {}));
/**
 * @hidden
 */
var BaseProgress = /** @class */ (function () {
    function BaseProgress() {
        this.requestAnimationId = undefined;
        this._initValue = 0;
        this._contentInit = false;
        this._valueInPercent = MIN_VALUE;
        this._max = 100;
        this._value = MIN_VALUE;
        this._newVal = MIN_VALUE;
        this._animate = true;
        /**
         * An event, which is triggered after a progress is changed.
         * ```typescript
         * public progressChange(event) {
         *     alert("Progress made!");
         * }
         *  //...
         * ```
         * ```html
         * <igx-circular-bar [value]="currentValue" (onProgressChanged)="progressChange($event)"></igx-circular-bar>
         * <igx-linear-bar [value]="currentValue" (onProgressChanged)="progressChange($event)"></igx-linear-bar>
         * ```
         */
        this.onProgressChanged = new EventEmitter();
    }
    Object.defineProperty(BaseProgress.prototype, "step", {
        /**
         * Returns the value which update the progress indicator of the `progress bar`.
         * ```typescript
         *  @ViewChild("MyProgressBar")
         * public progressBar: IgxLinearProgressBarComponent | IgxCircularBarComponent;
         * public stepValue(event) {
         *     let step = this.progressBar.step;
         *     alert(step);
         * }
         * ```
         */
        get: function () {
            if (this._step) {
                return this._step;
            }
            return this._max * ONE_PERCENT;
        },
        /**
         * Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.
         * ```html
         * <igx-linear-bar [max]="200" [value]="0" [step]="1"></igx-linear-bar>
         * <igx-circular-bar [max]="200" [value]="0" [step]="1"></igx-circular-bar>
         * ```
         */
        set: function (val) {
            this._step = Number(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProgress.prototype, "animate", {
        /**
         * Returns whether the `progress bar` has animation true/false.
         * ```typescript
         *  @ViewChild("MyProgressBar")
         * public progressBar: IgxLinearProgressBarComponent | IgxCircularBarComponent;
         * public animationStatus(event) {
         *     let animationStatus = this.progressBar.animate;
         *     alert(animationStatus);
         * }
         * ```
         */
        get: function () {
            return this._animate;
        },
        /**
         * Animating the progress. By default it is set to true.
         * ```html
         * <igx-linear-bar [animate]="false" [max]="200" [value]="50"></igx-linear-bar>
         * <igx-circular-bar [animate]="false" [max]="200" [value]="50"></igx-circular-bar>
         * ```
         */
        set: function (animate) {
            this._animate = animate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProgress.prototype, "max", {
        /**
         * Returns the the maximum progress value of the `progress bar`.
         * ```typescript
         *  @ViewChild("MyProgressBar")
         * public progressBar: IgxLinearProgressBarComponent | IgxCircularBarComponent;
         * public maxValue(event) {
         *     let max = this.progressBar.max;
         *     alert(max);
         * }
         * ```
         */
        get: function () {
            return this._max;
        },
        /**
         * Set maximum value that can be passed. By default it is set to 100.
         * ```html
         * <igx-linear-bar [max]="200" [value]="0"></igx-linear-bar>
         * <igx-circular-bar [max]="200" [value]="0"></igx-circular-bar>
         * ```
         */
        set: function (maxNum) {
            this._max = maxNum;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProgress.prototype, "valueInPercent", {
        /**
         * Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.
         * ```typescript
         *  @ViewChild("MyProgressBar")
         * public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent
         * public valuePercent(event){
         *     let percentValue = this.progressBar.valueInPercent;
         *     alert(percentValue);
         * }
         * ```
         */
        get: function () {
            return this._valueInPercent;
        },
        /**
         * Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.
         * ```typescript
         *  @ViewChild("MyProgressBar")
         * public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent
         *     public setValue(event){
         *     this.progressBar.valueInPercent = 56;
         * }
         * ```
         */
        set: function (value) {
            this._valueInPercent = value;
        },
        enumerable: true,
        configurable: true
    });
    BaseProgress.prototype.triggerProgressTransition = function (oldVal, newVal) {
        if (oldVal === newVal) {
            return;
        }
        var changedValues = {
            currentValue: newVal,
            previousValue: oldVal
        };
        var stepDirection = this.directionFlow(oldVal, newVal);
        if (this._animate) {
            this.runAnimation(newVal, stepDirection);
        }
        else {
            this.updateProgressDirectly(newVal);
        }
        this.onProgressChanged.emit(changedValues);
    };
    /**
     * @hidden
     */
    BaseProgress.prototype.runAnimation = function (val, step) {
        var _this = this;
        this.requestAnimationId = requestAnimationFrame(function () { return _this.updateProgressSmoothly.call(_this, val, step); });
    };
    /**
     * @hidden
     */
    BaseProgress.prototype.updateProgressSmoothly = function (val, step) {
        var _this = this;
        this._value = valueInRange(this._value, this._max) + step;
        var passedValue = toPercent(val, this._max);
        var progressValue = toPercent(this._value, this._max);
        if (this.valueInPercent === passedValue) {
            this.updateProgress(val);
            cancelAnimationFrame(this.requestAnimationId);
        }
        else if (this.isInLimitRange(progressValue, passedValue, step)) {
            this.updateProgress(val);
            cancelAnimationFrame(this.requestAnimationId);
        }
        else {
            this.valueInPercent = progressValue;
            this.requestAnimationId = requestAnimationFrame(function () { return _this.updateProgressSmoothly.call(_this, val, step); });
        }
    };
    /**
     * @hidden
     */
    BaseProgress.prototype.updateProgressDirectly = function (val) {
        this._value = valueInRange(val, this._max);
        this.valueInPercent = toPercent(this._value, this._max);
    };
    /**
     * @hidden
     */
    BaseProgress.prototype.directionFlow = function (currentValue, prevValue) {
        return currentValue < prevValue ? this.step : -this.step;
    };
    /**
     * @hidden
     */
    BaseProgress.prototype.isInLimitRange = function (val, comparator, step) {
        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);
    };
    /**
     * @hidden
     *
     *
     * @param val
     * @param comparator
     * @param step
     */
    BaseProgress.prototype.isExceedingUpperLimit = function (val, comparator, step) {
        return val > comparator && step > 0;
    };
    /**
     * @hidden
     *
     * @param val
     * @param comparator
     * @param step
     */
    BaseProgress.prototype.isExceedingLowerLimit = function (val, comparator, step) {
        return val < comparator && step < 0;
    };
    /**
     * @hidden
     * @param step
     */
    BaseProgress.prototype.updateProgress = function (val) {
        this._value = valueInRange(val, this._max);
        this.valueInPercent = toPercent(this._value, this._max);
    };
    __decorate([
        Output()
    ], BaseProgress.prototype, "onProgressChanged", void 0);
    __decorate([
        Input()
    ], BaseProgress.prototype, "step", null);
    __decorate([
        Input()
    ], BaseProgress.prototype, "animate", null);
    __decorate([
        HostBinding('attr.aria-valuemax'),
        Input()
    ], BaseProgress.prototype, "max", null);
    return BaseProgress;
}());
export { BaseProgress };
var NEXT_LINEAR_ID = 0;
var NEXT_CIRCULAR_ID = 0;
var NEXT_GRADIENT_ID = 0;
var IgxLinearProgressBarComponent = /** @class */ (function (_super) {
    __extends(IgxLinearProgressBarComponent, _super);
    function IgxLinearProgressBarComponent() {
        var _this = _super.call(this) || this;
        _this.valueMin = 0;
        _this.cssClass = 'igx-linear-bar';
        /**
         * Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.
         * ```html
         * <igx-linear-bar [striped]="true" [max]="200" [value]="50"></igx-linear-bar>
         * ```
         */
        _this.striped = false;
        /**
         * Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.
         * ```html
         * <igx-linear-bar [indeterminate]="true"></igx-linear-bar>
         * ```
         */
        _this.indeterminate = false;
        /**
         * An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.
         * ```html
         * <igx-linear-bar role="progressbar"></igx-linear-bar>
         * ```
         */
        _this.role = 'progressbar';
        /**
         * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-linear-bar [id]="'igx-linear-bar-55'" [striped]="true" [max]="200" [value]="50"></igx-linear-bar>
         * ```
         */
        _this.id = "igx-linear-bar-" + NEXT_LINEAR_ID++;
        /**
         * Set the position that defines where the text is aligned.
         * Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.
         * ```typescript
         * public positionCenter: IgxTextAlign;
         * public ngOnInit() {
         *     this.positionCenter = IgxTextAlign.CENTER;
         * }
         *  //...
         * ```
         *  ```html
         * <igx-linear-bar type="warning" [text]="'Custom text'" [textAlign]="positionCenter" [striped]="true"></igx-linear-bar>
         * ```
         */
        _this.textAlign = IgxTextAlign.START;
        /**
         * Set the text to be visible. By default it is set to true.
         * ```html
         *  <igx-linear-bar type="default" [textVisibility]="false"></igx-linear-bar>
         * ```
         */
        _this.textVisibility = true;
        /**
         * Set the position that defines if the text should be aligned above the progress line. By default is set to false.
         * ```html
         *  <igx-linear-bar type="error" [textTop]="true"></igx-linear-bar>
         * ```
         */
        _this.textTop = false;
        /**
         * Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `error`.
         * ```html
         * <igx-linear-bar [striped]="false" [max]="100" [value]="0" type="error"></igx-linear-bar>
         * ```
         */
        _this.type = 'default';
        return _this;
    }
    Object.defineProperty(IgxLinearProgressBarComponent.prototype, "value", {
        /**
         * Returns value that indicates the current `IgxLinearProgressBarComponent` position.
         * ```typescript
         *  @ViewChild("MyProgressBar")
         * public progressBar: IgxLinearProgressBarComponent;
         * public getValue(event) {
         *     let value = this.progressBar.value;
         *     alert(value);
         * }
         * ```
         */
        get: function () {
            return this._value;
        },
        /**
         * Set value that indicates the current `IgxLinearProgressBarComponent` position.
         * ```html
         * <igx-linear-bar [striped]="false" [max]="200" [value]="50"></igx-linear-bar>
         * ```
         */
        set: function (val) {
            var valInRange = valueInRange(val, this.max);
            if (isNaN(valInRange) || this._value === val || this.indeterminate) {
                return;
            }
            if (this._contentInit) {
                this.triggerProgressTransition(this._value, valInRange);
            }
            else {
                this._initValue = valInRange;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLinearProgressBarComponent.prototype, "error", {
        /**
         * @hidden
         */
        get: function () {
            return this.type === IgxProgressType.ERROR;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLinearProgressBarComponent.prototype, "info", {
        /**
         * @hidden
         */
        get: function () {
            return this.type === IgxProgressType.INFO;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLinearProgressBarComponent.prototype, "warning", {
        /**
         * @hidden
         */
        get: function () {
            return this.type === IgxProgressType.WARNING;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLinearProgressBarComponent.prototype, "success", {
        /**
         * @hidden
         */
        get: function () {
            return this.type === IgxProgressType.SUCCESS;
        },
        enumerable: true,
        configurable: true
    });
    IgxLinearProgressBarComponent.prototype.ngAfterContentInit = function () {
        this.triggerProgressTransition(MIN_VALUE, this._initValue);
        this._contentInit = true;
    };
    __decorate([
        HostBinding('attr.aria-valuemin')
    ], IgxLinearProgressBarComponent.prototype, "valueMin", void 0);
    __decorate([
        HostBinding('class.igx-linear-bar')
    ], IgxLinearProgressBarComponent.prototype, "cssClass", void 0);
    __decorate([
        HostBinding('class.igx-linear-bar--striped'),
        Input()
    ], IgxLinearProgressBarComponent.prototype, "striped", void 0);
    __decorate([
        HostBinding('class.igx-linear-bar--indeterminate'),
        Input()
    ], IgxLinearProgressBarComponent.prototype, "indeterminate", void 0);
    __decorate([
        HostBinding('attr.role'),
        Input()
    ], IgxLinearProgressBarComponent.prototype, "role", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxLinearProgressBarComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxLinearProgressBarComponent.prototype, "textAlign", void 0);
    __decorate([
        Input()
    ], IgxLinearProgressBarComponent.prototype, "textVisibility", void 0);
    __decorate([
        Input()
    ], IgxLinearProgressBarComponent.prototype, "textTop", void 0);
    __decorate([
        Input()
    ], IgxLinearProgressBarComponent.prototype, "text", void 0);
    __decorate([
        Input()
    ], IgxLinearProgressBarComponent.prototype, "type", void 0);
    __decorate([
        HostBinding('attr.aria-valuenow'),
        Input()
    ], IgxLinearProgressBarComponent.prototype, "value", null);
    __decorate([
        HostBinding('class.igx-linear-bar--danger')
    ], IgxLinearProgressBarComponent.prototype, "error", null);
    __decorate([
        HostBinding('class.igx-linear-bar--info')
    ], IgxLinearProgressBarComponent.prototype, "info", null);
    __decorate([
        HostBinding('class.igx-linear-bar--warning')
    ], IgxLinearProgressBarComponent.prototype, "warning", null);
    __decorate([
        HostBinding('class.igx-linear-bar--success')
    ], IgxLinearProgressBarComponent.prototype, "success", null);
    IgxLinearProgressBarComponent = __decorate([
        Component({
            selector: 'igx-linear-bar',
            template: "<div class=\"igx-linear-bar__base\">\n    <div class=\"igx-linear-bar__indicator\" [style.width.%]=\"valueInPercent\"></div>\n</div>\n\n<span\n    class=\"igx-linear-bar__value\"\n    [ngClass]=\"{\n        'igx-linear-bar__value--start': textAlign === 'start',\n        'igx-linear-bar__value--center': textAlign === 'center',\n        'igx-linear-bar__value--end': textAlign === 'end',\n        'igx-linear-bar__value--top': textTop,\n        'igx-linear-bar__value--hidden': !textVisibility\n    }\">\n        {{text ? text : valueInPercent + '%'}}\n</span>\n"
        })
    ], IgxLinearProgressBarComponent);
    return IgxLinearProgressBarComponent;
}(BaseProgress));
export { IgxLinearProgressBarComponent };
var IgxCircularProgressBarComponent = /** @class */ (function (_super) {
    __extends(IgxCircularProgressBarComponent, _super);
    function IgxCircularProgressBarComponent(renderer, _directionality) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this._directionality = _directionality;
        _this.STROKE_OPACITY_DVIDER = 100;
        _this.STROKE_OPACITY_ADDITION = .2;
        /** @hidden */
        _this.cssClass = 'igx-circular-bar';
        /**
         * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-circular-bar [id]="'igx-circular-bar-55'" [value]="50"></igx-circular-bar>
         * ```
         */
        _this.id = "igx-circular-bar-" + NEXT_CIRCULAR_ID++;
        /**
         * @hidden
         */
        _this.gradientId = "igx-circular-gradient-" + NEXT_GRADIENT_ID++;
        /**
         * An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.
         * ```html
         * <igx-circular-bar [indeterminate]="true"></igx-circular-bar>
         * ```
         */
        _this.indeterminate = false;
        /**
         * Sets the text visibility. By default it is set to true.
         * ```html
         * <igx-circular-bar [textVisibility]="false"></igx-circular-bar>
         * ```
         */
        _this.textVisibility = true;
        _this._circleRadius = 46;
        _this._circumference = 2 * Math.PI * _this._circleRadius;
        return _this;
    }
    Object.defineProperty(IgxCircularProgressBarComponent.prototype, "context", {
        /**
         * @hidden
         */
        get: function () {
            return {
                $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCircularProgressBarComponent.prototype, "value", {
        /**
         * Returns value that indicates the current `IgxCircularProgressBarComponent` position.
         * ```typescript
         *  @ViewChild("MyProgressBar")
         * public progressBar: IgxCircularProgressBarComponent;
         * public getValue(event) {
         *     let value = this.progressBar.value;
         *     alert(value);
         * }
         * ```
         * ```html
         * <button igxButton="fab" igxRipple="" (click)="getValue()">Click</button>
         * ```
         */
        get: function () {
            return this._value;
        },
        /**
         * Set value that indicates the current `IgxCircularProgressBarComponent` position.
         * ```html
         * <igx-circular-bar [value]="50"></igx-circular-bar>
         * ```
         */
        set: function (val) {
            var valInRange = valueInRange(val, this.max);
            if (isNaN(valInRange) || this._value === val || this.indeterminate) {
                return;
            }
            if (this._contentInit) {
                this.triggerProgressTransition(this._value, valInRange);
            }
            else {
                this._initValue = valInRange;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxCircularProgressBarComponent.prototype.ngAfterContentInit = function () {
        this.triggerProgressTransition(MIN_VALUE, this._initValue);
        this._contentInit = true;
    };
    IgxCircularProgressBarComponent.prototype.ngAfterViewInit = function () {
        this.renderer.setStyle(this._svgCircle.nativeElement, 'stroke', "url(#" + this.gradientId + ")");
    };
    /**
     * @hidden
     */
    IgxCircularProgressBarComponent.prototype.updateProgressSmoothly = function (val, step) {
        // Set frames for the animation
        var FRAMES = [{
                strokeDashoffset: this.getProgress(this._value),
                strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION
            }, {
                strokeDashoffset: this.getProgress(this.valueInPercent),
                strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION
            }];
        this._svgCircle.nativeElement.animate(FRAMES, {
            easing: 'ease-out',
            fill: 'forwards'
        });
        _super.prototype.updateProgressSmoothly.call(this, val, step);
    };
    Object.defineProperty(IgxCircularProgressBarComponent.prototype, "textContent", {
        /**
         * @hidden
         */
        get: function () {
            return this.text;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxCircularProgressBarComponent.prototype.updateProgressDirectly = function (val) {
        _super.prototype.updateProgressDirectly.call(this, val);
        this.renderer.setStyle(this._svgCircle.nativeElement, 'stroke-dashoffset', this.getProgress(this.valueInPercent));
        this.renderer.setStyle(this._svgCircle.nativeElement, 'stroke-opacity', (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);
    };
    IgxCircularProgressBarComponent.prototype.getProgress = function (percentage) {
        return this._directionality.rtl ?
            this._circumference + (percentage * this._circumference / 100) :
            this._circumference - (percentage * this._circumference / 100);
    };
    IgxCircularProgressBarComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: IgxDirectionality }
    ]; };
    __decorate([
        HostBinding('class.igx-circular-bar')
    ], IgxCircularProgressBarComponent.prototype, "cssClass", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxCircularProgressBarComponent.prototype, "id", void 0);
    __decorate([
        HostBinding('class.igx-circular-bar--indeterminate'),
        Input()
    ], IgxCircularProgressBarComponent.prototype, "indeterminate", void 0);
    __decorate([
        Input()
    ], IgxCircularProgressBarComponent.prototype, "textVisibility", void 0);
    __decorate([
        Input()
    ], IgxCircularProgressBarComponent.prototype, "text", void 0);
    __decorate([
        ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective })
    ], IgxCircularProgressBarComponent.prototype, "textTemplate", void 0);
    __decorate([
        ContentChild(IgxProgressBarGradientDirective, { read: IgxProgressBarGradientDirective })
    ], IgxCircularProgressBarComponent.prototype, "gradientTemplate", void 0);
    __decorate([
        Input()
    ], IgxCircularProgressBarComponent.prototype, "value", null);
    __decorate([
        ViewChild('circle', { static: true })
    ], IgxCircularProgressBarComponent.prototype, "_svgCircle", void 0);
    IgxCircularProgressBarComponent = __decorate([
        Component({
            selector: 'igx-circular-bar',
            template: "<svg #svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"\n    viewBox=\"0 0 100 100\"\n    preserveAspectRatio=\"xMidYMid meet\"\n    role=\"progressbar\"\n    aria-valuemin=\"0\"\n    [attr.aria-valuemax]=\"max\"\n    [attr.aria-valuenow]=\"value\">\n    <svg:circle class=\"igx-circular-bar__inner\" cx=\"50\" cy=\"50\" r=\"46\" />\n    <svg:circle #circle class=\"igx-circular-bar__outer\" cx=\"50\" cy=\"50\" r=\"46\" />\n    <svg:text *ngIf=\"textVisibility\" text-anchor=\"middle\" x=\"50\" y=\"60\">\n        <ng-container *ngTemplateOutlet=\"textTemplate ? textTemplate.template : defaultTextTemplate;\n            context: context\">\n        </ng-container>\n    </svg:text>\n\n    <svg:defs>\n        <ng-container\n            *ngTemplateOutlet=\"gradientTemplate ? gradientTemplate.template : defaultGradientTemplate;\n            context: { $implicit: gradientId }\">\n        </ng-container>\n    </svg:defs>\n\n    <ng-template #defaultTextTemplate>\n        <svg:tspan class=\"igx-circular-bar__text\">\n            {{textContent ? textContent: valueInPercent + '%'}}\n        </svg:tspan>\n    </ng-template>\n\n    <ng-template #defaultGradientTemplate>\n        <svg:linearGradient [id]=\"gradientId\" gradientTransform=\"rotate(90)\">\n          <stop offset=\"0%\"   class=\"igx-circular-bar__gradient-start\" />\n          <stop offset=\"100%\" class=\"igx-circular-bar__gradient-end\" />\n        </svg:linearGradient>\n    </ng-template>\n</svg>\n\n"
        })
    ], IgxCircularProgressBarComponent);
    return IgxCircularProgressBarComponent;
}(BaseProgress));
export { IgxCircularProgressBarComponent };
export function valueInRange(value, max, min) {
    if (min === void 0) { min = 0; }
    return Math.max(Math.min(value, max), min);
}
export function toPercent(value, max) {
    return Math.floor(100 * value / max);
}
/**
 * @hidden
 */
var IgxProgressBarModule = /** @class */ (function () {
    function IgxProgressBarModule() {
    }
    IgxProgressBarModule = __decorate([
        NgModule({
            declarations: [
                IgxLinearProgressBarComponent,
                IgxCircularProgressBarComponent,
                IgxProcessBarTextTemplateDirective,
                IgxProgressBarGradientDirective,
            ],
            exports: [
                IgxLinearProgressBarComponent,
                IgxCircularProgressBarComponent,
                IgxProcessBarTextTemplateDirective,
                IgxProgressBarGradientDirective,
            ],
            imports: [CommonModule]
        })
    ], IgxProgressBarModule);
    return IgxProgressBarModule;
}());
export { IgxProgressBarModule };
//# sourceMappingURL=data:application/json;base64,