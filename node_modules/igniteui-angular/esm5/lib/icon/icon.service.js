import { __decorate, __param } from "tslib";
import { Injectable, SecurityContext, Inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { DOCUMENT } from '@angular/common';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/common";
/**
 * **Ignite UI for Angular Icon Service** -
 *
 * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.
 * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.
 *
 * Example:
 * ```typescript
 * this.iconService.registerFontSetAlias('material', 'material-icons');
 * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
 * ```
 */
var IgxIconService = /** @class */ (function () {
    function IgxIconService(_sanitizer, _document) {
        this._sanitizer = _sanitizer;
        this._document = _document;
        this._fontSet = 'material-icons';
        this._fontSetAliases = new Map();
        this._cachedSvgIcons = new Set();
        this._iconLoaded = new Subject();
        /**
         * Observable that emits when an icon is successfully loaded
         * through a HTTP request.
         * @example
         * ```typescript
         * this.service.iconLoaded.subscribe((ev: IgxIconLoadedEvent) => ...);
         * ```
         */
        this.iconLoaded = this._iconLoaded.asObservable();
    }
    Object.defineProperty(IgxIconService.prototype, "defaultFontSet", {
        /**
         *  Returns the default font set.
         * ```typescript
         *   const defaultFontSet = this.iconService.defaultFontSet;
         * ```
         */
        get: function () {
            return this._fontSet;
        },
        /**
         *  Sets the default font set.
         * ```typescript
         *   this.iconService.defaultFontSet = 'svg-flags';
         * ```
         */
        set: function (className) {
            this._fontSet = className;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.
     * ```typescript
     *   this.iconService.registerFontSetAlias('material', 'material-icons');
     * ```
     */
    IgxIconService.prototype.registerFontSetAlias = function (alias, className) {
        if (className === void 0) { className = alias; }
        this._fontSetAliases.set(alias, className);
        return this;
    };
    /**
     *  Returns the custom class, if any, associated to a given fontSet.
     * ```typescript
     *   const fontSetClass = this.iconService.fontSetClassName('material');
     * ```
     */
    IgxIconService.prototype.fontSetClassName = function (alias) {
        return this._fontSetAliases.get(alias) || alias;
    };
    /**
     *  Adds an SVG image to the cache. SVG source is an url.
     * ```typescript
     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
     * ```
     */
    IgxIconService.prototype.addSvgIcon = function (iconName, url, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        if (iconName && url) {
            var safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);
            if (!safeUrl) {
                throw new Error("The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"" + url + "\".");
            }
            var sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);
            if (!sanitizedUrl) {
                throw new Error("The URL provided was not trusted as a resource URL: \"" + url + "\".");
            }
            this.fetchSvg(iconName, url, fontSet);
        }
        else {
            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');
        }
    };
    /**
     *  Adds an SVG image to the cache. SVG source is its text.
     * ```typescript
     *   this.iconService.addSvgIcon('simple', '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
     *   <path d="M74 74h54v54H74" /></svg>', 'svg-flags');
     * ```
     */
    IgxIconService.prototype.addSvgIconFromText = function (iconName, iconText, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        if (iconName && iconText) {
            this.cacheSvgIcon(iconName, iconText, fontSet);
        }
        else {
            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');
        }
    };
    /**
     *  Returns whether a given SVG image is present in the cache.
     * ```typescript
     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');
     * ```
     */
    IgxIconService.prototype.isSvgIconCached = function (iconName, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        var iconKey = this.getSvgIconKey(iconName, fontSet);
        return this._cachedSvgIcons.has(iconKey);
    };
    /**
     *  Returns the key of a cached SVG image.
     * ```typescript
     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');
     * ```
     */
    IgxIconService.prototype.getSvgIconKey = function (iconName, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        return fontSet + '_' + iconName;
    };
    /**
     * @hidden
     */
    IgxIconService.prototype.fetchSvg = function (iconName, url, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        var instance = this;
        var httpRequest = new XMLHttpRequest();
        httpRequest.open('GET', url, true);
        httpRequest.responseType = 'text';
        // load – when the result is ready, that includes HTTP errors like 404.
        httpRequest.onload = function (event) {
            if (event) {
                var request = event.target;
                if (request.status === 200) {
                    instance.cacheSvgIcon(iconName, request.responseText, fontSet);
                    instance._iconLoaded.next({ name: iconName, value: request.responseText, fontSet: fontSet });
                }
                else {
                    throw new Error("Could not fetch SVG from url: " + url + "; error: " + request.status + " (" + request.statusText + ")");
                }
            }
            else {
                throw new Error("Could not fetch SVG from url: " + url + ";");
            }
        };
        // error – when the request couldn’t be made, e.g.network down or invalid URL.
        httpRequest.onerror = function (event) {
            if (event) {
                var request = event.target;
                throw new Error("Could not fetch SVG from url: " + url + "; error status code: " + request.status + " (" + request.statusText + ")");
            }
            throw new Error("Could not fetch SVG from url: " + url + ";");
        };
        httpRequest.send();
    };
    /**
     * @hidden
     */
    IgxIconService.prototype.cacheSvgIcon = function (iconName, value, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        if (iconName && value) {
            this.ensureSvgContainerCreated();
            var div = this._document.createElement('DIV');
            div.innerHTML = value;
            var svg = div.querySelector('svg');
            if (svg) {
                var iconKey = this.getSvgIconKey(iconName, fontSet);
                svg.setAttribute('id', iconKey);
                svg.setAttribute('fit', '');
                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.
                if (this._cachedSvgIcons.has(iconKey)) {
                    var oldChild = this._svgContainer.querySelector("svg[id='" + iconKey + "']");
                    this._svgContainer.removeChild(oldChild);
                }
                this._svgContainer.appendChild(svg);
                this._cachedSvgIcons.add(iconKey);
            }
        }
    };
    /**
     * @hidden
     */
    IgxIconService.prototype.ensureSvgContainerCreated = function () {
        if (!this._svgContainer) {
            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');
            if (!this._svgContainer) {
                this._svgContainer = this._document.createElement('DIV');
                this._svgContainer.classList.add('igx-svg-container');
                this._document.documentElement.appendChild(this._svgContainer);
            }
        }
    };
    IgxIconService.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    IgxIconService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxIconService_Factory() { return new IgxIconService(i0.ɵɵinject(i1.DomSanitizer), i0.ɵɵinject(i2.DOCUMENT)); }, token: IgxIconService, providedIn: "root" });
    IgxIconService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(1, Inject(DOCUMENT))
    ], IgxIconService);
    return IgxIconService;
}());
export { IgxIconService };
//# sourceMappingURL=data:application/json;base64,