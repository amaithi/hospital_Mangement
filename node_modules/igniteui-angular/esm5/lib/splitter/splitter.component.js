import { __decorate } from "tslib";
import { Component, Input, ContentChildren, HostBinding } from '@angular/core';
import { IgxSplitterPaneComponent } from './splitter-pane/splitter-pane.component';
/**
 * An enumeration that defines the `SplitterComponent` panes orientation.
 */
export var SplitterType;
(function (SplitterType) {
    SplitterType[SplitterType["Horizontal"] = 0] = "Horizontal";
    SplitterType[SplitterType["Vertical"] = 1] = "Vertical";
})(SplitterType || (SplitterType = {}));
/**
 * Provides a framework for a simple layout, splitting the view horizontally or vertically
 * into multiple smaller resizable and collapsible areas.
 * @igxModule IgxSplitterModule
 *
 * @igxParent Layouts
 *
 * @igxTheme igx-splitter-theme
 *
 * @igxKeywords splitter panes layout
 *
 * @igxGroup presentation
 *
 * @example
 * ```html
 * <igx-splitter>
 *  <igx-splitter-pane>
 *      ...
 *  </igx-splitter-pane>
 *  <igx-splitter-pane>
 *      ...
 *  </igx-splitter-pane>
 * </igx-splitter>
 * ```
 */
var IgxSplitterComponent = /** @class */ (function () {
    function IgxSplitterComponent() {
        this._type = SplitterType.Horizontal;
        /**
         * @hidden @internal
         * Gets/Sets the `overflow` property of the current splitter.
         */
        this.overflow = 'hidden';
        /**
         * @hidden @internal
         * Sets/Gets the `display` property of the current splitter.
         */
        this.display = 'flex';
    }
    Object.defineProperty(IgxSplitterComponent.prototype, "type", {
        /**
         * Gets/Sets the splitter orientation.
         * @example
         * ```html
         * <igx-splitter [type]="type">...</igx-splitter>
         * ```
         */
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
            if (this.panes) {
                // if type is changed runtime, should reset sizes.
                this.panes.forEach(function (x) { return x.size = 'auto'; });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSplitterComponent.prototype, "direction", {
        /**
         * @hidden @internal
         * Gets the `flex-direction` property of the current `SplitterComponent`.
         */
        get: function () {
            return this.type === SplitterType.Horizontal ? 'row' : 'column';
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden @internal */
    IgxSplitterComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.panes.forEach(function (pane) { return pane.owner = _this; });
        this.assignFlexOrder();
        this.panes.changes.subscribe(function () {
            _this.panes.forEach(function (pane) { return pane.owner = _this; });
            _this.assignFlexOrder();
        });
    };
    /**
     * @hidden @internal
     * This method performs  initialization logic when the user starts dragging the splitter bar between each pair of panes.
     * @param pane - the main pane associated with the currently dragged bar.
     */
    IgxSplitterComponent.prototype.onMoveStart = function (pane) {
        var panes = this.panes.toArray();
        this.pane = pane;
        this.sibling = panes[panes.indexOf(this.pane) + 1];
        var paneRect = this.pane.element.getBoundingClientRect();
        this.initialPaneSize = this.type === SplitterType.Horizontal ? paneRect.width : paneRect.height;
        if (this.pane.size === 'auto') {
            this.pane.size = this.type === SplitterType.Horizontal ? paneRect.width : paneRect.height;
        }
        var siblingRect = this.sibling.element.getBoundingClientRect();
        this.initialSiblingSize = this.type === SplitterType.Horizontal ? siblingRect.width : siblingRect.height;
        if (this.sibling.size === 'auto') {
            this.sibling.size = this.type === SplitterType.Horizontal ? siblingRect.width : siblingRect.height;
        }
    };
    /**
     * @hidden @internal
     * This method performs calculations concerning the sizes of each pair of panes when the bar between them is dragged.
     * @param delta - The difference along the X (or Y) axis between the initial and the current point when dragging the bar.
     */
    IgxSplitterComponent.prototype.onMoving = function (delta) {
        var min = parseInt(this.pane.minSize, 10) || 0;
        var max = parseInt(this.pane.maxSize, 10) || this.initialPaneSize + this.initialSiblingSize;
        var minSibling = parseInt(this.sibling.minSize, 10) || 0;
        var maxSibling = parseInt(this.sibling.maxSize, 10) || this.initialPaneSize + this.initialSiblingSize;
        var paneSize = this.initialPaneSize - delta;
        var siblingSize = this.initialSiblingSize + delta;
        if (paneSize < min || paneSize > max || siblingSize < minSibling || siblingSize > maxSibling) {
            return;
        }
        this.pane.size = paneSize + 'px';
        this.sibling.size = siblingSize + 'px';
    };
    /**
     * @hidden @internal
     * This method assigns the order of each pane.
     */
    IgxSplitterComponent.prototype.assignFlexOrder = function () {
        var k = 0;
        this.panes.forEach(function (pane) {
            pane.order = k;
            k += 2;
        });
    };
    /** @hidden @internal */
    IgxSplitterComponent.prototype.getPaneSiblingsByOrder = function (order, barIndex) {
        var panes = this.panes.toArray();
        var prevPane = panes[order - barIndex - 1];
        var nextPane = panes[order - barIndex];
        var siblings = [prevPane, nextPane];
        return siblings;
    };
    __decorate([
        Input()
    ], IgxSplitterComponent.prototype, "type", null);
    __decorate([
        ContentChildren(IgxSplitterPaneComponent, { read: IgxSplitterPaneComponent })
    ], IgxSplitterComponent.prototype, "panes", void 0);
    __decorate([
        HostBinding('style.flex-direction')
    ], IgxSplitterComponent.prototype, "direction", null);
    __decorate([
        HostBinding('style.overflow')
    ], IgxSplitterComponent.prototype, "overflow", void 0);
    __decorate([
        HostBinding('style.display')
    ], IgxSplitterComponent.prototype, "display", void 0);
    IgxSplitterComponent = __decorate([
        Component({
            selector: 'igx-splitter',
            template: "<ng-content select=\"igx-splitter-pane\"></ng-content>\n<ng-container *ngFor=\"let pane of panes; let last = last; let index= index;\">\n    <igx-splitter-bar *ngIf=\"!last\" [order]='pane.order + 1' role='separator'\n                    [type]=\"type\"\n                    [pane]=\"pane\"\n                    [siblings]='getPaneSiblingsByOrder(pane.order + 1, index)'\n                    (moveStart)=\"onMoveStart($event)\"\n                    (moving)=\"onMoving($event)\">\n    </igx-splitter-bar>\n</ng-container>\n"
        })
    ], IgxSplitterComponent);
    return IgxSplitterComponent;
}());
export { IgxSplitterComponent };
//# sourceMappingURL=data:application/json;base64,