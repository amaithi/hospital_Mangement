import { __decorate } from "tslib";
import { Component, HostBinding, Input, ElementRef, Output, EventEmitter } from '@angular/core';
/**
 * Represents individual resizable/collapsible panes.
 * @igxModule IgxSplitterModule
 *
 * @igxParent IgxSplitterComponent
 *
 * @igxKeywords pane
 *
 * @igxGroup presentation
 *
 * @remarks
 *  Users can control the resize behavior via the min and max size properties.
 */
var IgxSplitterPaneComponent = /** @class */ (function () {
    function IgxSplitterPaneComponent(el) {
        this.el = el;
        this._size = 'auto';
        this._collapsed = false;
        /**
         * Gets/Sets whether pane is resizable.
         * @example
         * ```html
         * <igx-splitter>
         *  <igx-splitter-pane [resizable]='false'>...</igx-splitter-pane>
         * </igx-splitter>
         * ```
         * @remarks
         * If pane is not resizable its related splitter bar cannot be dragged.
         */
        this.resizable = true;
        /**
         * Event fired when collapsed state of pane is changed.
         * @example
         * ```html
         * <igx-splitter>
         *  <igx-splitter-pane (onToggle)='onPaneToggle($event)'>...</igx-splitter-pane>
         * </igx-splitter>
         * ```
         */
        this.onToggle = new EventEmitter();
        /**
         * @hidden @internal
         * Gets/Sets the `overflow`.
         */
        this.overflow = 'auto';
        /**
         * @hidden @internal
         * Gets/Sets the `minHeight` and `minWidth` properties of the current pane.
         */
        this.minHeight = 0;
        /**
         * @hidden @internal
         * Gets/Sets the `maxHeight` and `maxWidth` properties of the current `IgxSplitterPaneComponent`.
         */
        this.maxHeight = '100%';
        /**
         * @hidden @internal
         * Gets/Sets the 'display' property of the current pane.
         */
        this.display = 'flex';
    }
    Object.defineProperty(IgxSplitterPaneComponent.prototype, "size", {
        /**
         * Gets/Sets the size of the current pane.
         *  * @example
         * ```html
         * <igx-splitter>
         *  <igx-splitter-pane [size]='size'>...</igx-splitter-pane>
         * </igx-splitter>
         * ```
         */
        get: function () {
            return this._size;
        },
        set: function (value) {
            this._size = value;
            this.el.nativeElement.style.flex = this.flex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSplitterPaneComponent.prototype, "element", {
        /**
         *
         * @hidden @internal
         * Gets the host native element.
         */
        get: function () {
            return this.el.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSplitterPaneComponent.prototype, "flex", {
        /**
         * @hidden @internal
         * Gets the `flex` property of the current `IgxSplitterPaneComponent`.
         */
        get: function () {
            var grow = this.size !== 'auto' ? 0 : 1;
            var shrink = this.size !== 'auto' ? 0 : 1;
            return grow + " " + shrink + " " + this.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSplitterPaneComponent.prototype, "collapsed", {
        get: function () {
            return this._collapsed;
        },
        /**
         * Gets/Sets whether current pane is collapsed.
         * @example
         * ```typescript
         * const isCollapsed = pane.collapsed;
         * ```
         */
        set: function (value) {
            this._collapsed = value;
            this.display = this._collapsed ? 'none' : 'flex';
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden @internal */
    IgxSplitterPaneComponent.prototype._getSiblings = function () {
        var panes = this.owner.panes.toArray();
        var index = panes.indexOf(this);
        var siblings = [];
        if (index !== 0) {
            siblings.push(panes[index - 1]);
        }
        if (index !== panes.length - 1) {
            siblings.push(panes[index + 1]);
        }
        return siblings;
    };
    /**
     * Toggles the collapsed state of the pane.
     * @example
     * ```typescript
     * pane.toggle();
     * ```
     */
    IgxSplitterPaneComponent.prototype.toggle = function () {
        // reset sibling sizes when pane collapse state changes.
        this._getSiblings().forEach(function (sibling) { return sibling.size = 'auto'; });
        this.collapsed = !this.collapsed;
        this.onToggle.emit(this);
    };
    IgxSplitterPaneComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], IgxSplitterPaneComponent.prototype, "size", null);
    __decorate([
        Input()
    ], IgxSplitterPaneComponent.prototype, "minSize", void 0);
    __decorate([
        Input()
    ], IgxSplitterPaneComponent.prototype, "maxSize", void 0);
    __decorate([
        Input()
    ], IgxSplitterPaneComponent.prototype, "resizable", void 0);
    __decorate([
        Output()
    ], IgxSplitterPaneComponent.prototype, "onToggle", void 0);
    __decorate([
        HostBinding('style.order')
    ], IgxSplitterPaneComponent.prototype, "order", void 0);
    __decorate([
        HostBinding('style.overflow')
    ], IgxSplitterPaneComponent.prototype, "overflow", void 0);
    __decorate([
        HostBinding('style.min-height'),
        HostBinding('style.min-width')
    ], IgxSplitterPaneComponent.prototype, "minHeight", void 0);
    __decorate([
        HostBinding('style.max-height'),
        HostBinding('style.max-width')
    ], IgxSplitterPaneComponent.prototype, "maxHeight", void 0);
    __decorate([
        HostBinding('style.flex')
    ], IgxSplitterPaneComponent.prototype, "flex", null);
    __decorate([
        HostBinding('style.display')
    ], IgxSplitterPaneComponent.prototype, "display", void 0);
    __decorate([
        Input()
    ], IgxSplitterPaneComponent.prototype, "collapsed", null);
    IgxSplitterPaneComponent = __decorate([
        Component({
            selector: 'igx-splitter-pane',
            template: "<ng-content></ng-content>"
        })
    ], IgxSplitterPaneComponent);
    return IgxSplitterPaneComponent;
}());
export { IgxSplitterPaneComponent };
//# sourceMappingURL=data:application/json;base64,