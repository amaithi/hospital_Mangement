import { __decorate, __param } from "tslib";
import { Directive, Inject } from '@angular/core';
import { IgxActionStripComponent } from '../action-strip.component';
import { IgxRowDirective } from '../../grids/public_api';
var IgxGridActionsBaseDirective = /** @class */ (function () {
    function IgxGridActionsBaseDirective(strip) {
        this.strip = strip;
    }
    Object.defineProperty(IgxGridActionsBaseDirective.prototype, "isRowContext", {
        /**
         * Getter to be used in template
         * @hidden
         * @internal
         */
        get: function () {
            return this.isRow(this.strip.context);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Check if the param is a row from a grid
     * @hidden
     * @internal
     * @param context
     */
    IgxGridActionsBaseDirective.prototype.isRow = function (context) {
        return context && context instanceof IgxRowDirective;
    };
    IgxGridActionsBaseDirective.ctorParameters = function () { return [
        { type: IgxActionStripComponent, decorators: [{ type: Inject, args: [IgxActionStripComponent,] }] }
    ]; };
    IgxGridActionsBaseDirective = __decorate([
        Directive({
            selector: '[igxGridActionsBase]'
        }),
        __param(0, Inject(IgxActionStripComponent))
    ], IgxGridActionsBaseDirective);
    return IgxGridActionsBaseDirective;
}());
export { IgxGridActionsBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9hY3Rpb24tc3RyaXAvZ3JpZC1hY3Rpb25zL2dyaWQtYWN0aW9ucy1iYXNlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBS3pEO0lBQ0kscUNBQXVELEtBQThCO1FBQTlCLFVBQUssR0FBTCxLQUFLLENBQXlCO0lBQUksQ0FBQztJQU8xRixzQkFBSSxxREFBWTtRQUxoQjs7OztXQUlHO2FBQ0g7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxDQUFDOzs7T0FBQTtJQUVEOzs7OztPQUtHO0lBQ08sMkNBQUssR0FBZixVQUFnQixPQUFPO1FBQ25CLE9BQU8sT0FBTyxJQUFJLE9BQU8sWUFBWSxlQUFlLENBQUM7SUFDekQsQ0FBQzs7Z0JBbkI2RCx1QkFBdUIsdUJBQXhFLE1BQU0sU0FBQyx1QkFBdUI7O0lBRGxDLDJCQUEyQjtRQUh2QyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsc0JBQXNCO1NBQ25DLENBQUM7UUFFZSxXQUFBLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO09BRG5DLDJCQUEyQixDQXFCdkM7SUFBRCxrQ0FBQztDQUFBLEFBckJELElBcUJDO1NBckJZLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hBY3Rpb25TdHJpcENvbXBvbmVudCB9IGZyb20gJy4uL2FjdGlvbi1zdHJpcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4Um93RGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZ3JpZHMvcHVibGljX2FwaSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEdyaWRBY3Rpb25zQmFzZV0nXG59KVxuZXhwb3J0IGNsYXNzIElneEdyaWRBY3Rpb25zQmFzZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IoQEluamVjdChJZ3hBY3Rpb25TdHJpcENvbXBvbmVudCkgcHJvdGVjdGVkIHN0cmlwOiBJZ3hBY3Rpb25TdHJpcENvbXBvbmVudCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgdG8gYmUgdXNlZCBpbiB0ZW1wbGF0ZVxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgaXNSb3dDb250ZXh0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1Jvdyh0aGlzLnN0cmlwLmNvbnRleHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBwYXJhbSBpcyBhIHJvdyBmcm9tIGEgZ3JpZFxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gY29udGV4dFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBpc1Jvdyhjb250ZXh0KTogY29udGV4dCBpcyBJZ3hSb3dEaXJlY3RpdmU8YW55PiB7XG4gICAgICAgIHJldHVybiBjb250ZXh0ICYmIGNvbnRleHQgaW5zdGFuY2VvZiBJZ3hSb3dEaXJlY3RpdmU7XG4gICAgfVxufVxuIl19