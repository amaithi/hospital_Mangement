import { __decorate, __extends } from "tslib";
import { Component, HostBinding } from '@angular/core';
import { IgxGridActionsBaseDirective } from './grid-actions-base.directive';
var IgxGridPinningActionsComponent = /** @class */ (function (_super) {
    __extends(IgxGridPinningActionsComponent, _super);
    function IgxGridPinningActionsComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Host `class.igx-action-strip` binding.
         * @hidden
         * @internal
         */
        _this.cssClass = 'igx-action-strip__pining-actions';
        _this.iconsRendered = false;
        return _this;
    }
    IgxGridPinningActionsComponent_1 = IgxGridPinningActionsComponent;
    Object.defineProperty(IgxGridPinningActionsComponent.prototype, "pinned", {
        /**
         * Getter to know if the row is pinned
         * @hidden
         * @internal
         */
        get: function () {
            if (!this.isRow(this.strip.context)) {
                return;
            }
            var context = this.strip.context;
            if (context && !this.iconsRendered) {
                this.renderIcons();
                this.iconsRendered = true;
            }
            return context && context.pinned;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridPinningActionsComponent.prototype, "inPinnedArea", {
        /**
         * Getter to know if the row is in pinned and ghost
         * @hidden
         * @internal
         */
        get: function () {
            if (!this.isRow(this.strip.context)) {
                return;
            }
            var context = this.strip.context;
            return this.pinned && !context.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridPinningActionsComponent.prototype, "pinnedTop", {
        /**
         * Getter to know if the row pinning is set to top or bottom
         * @hidden
         * @internal
         */
        get: function () {
            if (!this.isRow(this.strip.context)) {
                return;
            }
            return this.strip.context.grid.isRowPinningToTop;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Pin the row according to the context.
     * @example
     * ```typescript
     * this.gridPinningActions.pin();
     * ```
     */
    IgxGridPinningActionsComponent.prototype.pin = function (event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        var row = this.strip.context;
        var grid = row.grid;
        grid.pinRow(row.rowID);
        this.strip.hide();
    };
    /**
     * Unpin the row according to the context.
     * @example
     * ```typescript
     * this.gridPinningActions.unpin();
     * ```
     */
    IgxGridPinningActionsComponent.prototype.unpin = function (event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        var row = this.strip.context;
        var grid = row.grid;
        grid.unpinRow(row.rowID);
        this.strip.hide();
    };
    IgxGridPinningActionsComponent.prototype.scrollToRow = function (event) {
        if (event) {
            event.stopPropagation();
        }
        var context = this.strip.context;
        var grid = context.grid;
        grid.scrollTo(context.rowData, 0);
        this.strip.hide();
    };
    IgxGridPinningActionsComponent.prototype.renderIcons = function () {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        var context = this.strip.context;
        var grid = context.grid;
        if (grid) {
            grid.filteringService.registerSVGIcons();
        }
    };
    var IgxGridPinningActionsComponent_1;
    __decorate([
        HostBinding('class.igx-action-strip__pining-actions')
    ], IgxGridPinningActionsComponent.prototype, "cssClass", void 0);
    IgxGridPinningActionsComponent = IgxGridPinningActionsComponent_1 = __decorate([
        Component({
            selector: 'igx-grid-pinning-actions',
            template: "<ng-container *ngIf=\"isRowContext\">\n    <button *ngIf=\"inPinnedArea && pinnedTop\" igxRipple igxButton=\"icon\" (click)=\"scrollToRow($event)\">\n        <igx-icon fontSet=\"filtering-icons\" name=\"jump_down\"></igx-icon>\n    </button>\n    <button *ngIf=\"inPinnedArea && !pinnedTop\" igxRipple igxButton=\"icon\" (click)=\"scrollToRow($event)\">\n        <igx-icon fontSet=\"filtering-icons\" name=\"jump_up\"></igx-icon>\n    </button>\n    <button *ngIf=\"!pinned\" igxRipple igxButton=\"icon\" (click)=\"pin($event)\">\n        <igx-icon fontSet=\"filtering-icons\" name=\"pin\"></igx-icon>\n    </button>\n    <button *ngIf=\"pinned\" igxRipple igxButton=\"icon\" (click)=\"unpin($event)\">\n        <igx-icon fontSet=\"filtering-icons\" name=\"unpin\"></igx-icon>\n    </button>\n</ng-container>",
            providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridPinningActionsComponent_1 }]
        })
    ], IgxGridPinningActionsComponent);
    return IgxGridPinningActionsComponent;
}(IgxGridActionsBaseDirective));
export { IgxGridPinningActionsComponent };
//# sourceMappingURL=data:application/json;base64,