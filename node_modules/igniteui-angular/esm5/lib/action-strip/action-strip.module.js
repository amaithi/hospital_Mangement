import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { IgxActionStripComponent, IgxActionStripMenuItemDirective } from './action-strip.component';
import { IgxGridPinningActionsComponent } from './grid-actions/grid-pinning-actions.component';
import { IgxGridEditingActionsComponent } from './grid-actions/grid-editing-actions.component';
import { IgxGridActionsBaseDirective } from './grid-actions/grid-actions-base.directive';
import { CommonModule } from '@angular/common';
import { IgxDropDownModule } from '../drop-down/public_api';
import { IgxToggleModule } from '../directives/toggle/toggle.directive';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxIconModule } from '../icon/public_api';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
/**
 * @hidden
 */
var IgxActionStripModule = /** @class */ (function () {
    function IgxActionStripModule() {
    }
    IgxActionStripModule = __decorate([
        NgModule({
            declarations: [
                IgxActionStripComponent,
                IgxActionStripMenuItemDirective,
                IgxGridPinningActionsComponent,
                IgxGridEditingActionsComponent,
                IgxGridActionsBaseDirective
            ],
            entryComponents: [],
            exports: [
                IgxActionStripComponent,
                IgxActionStripMenuItemDirective,
                IgxGridPinningActionsComponent,
                IgxGridEditingActionsComponent,
                IgxGridActionsBaseDirective
            ],
            imports: [CommonModule, IgxDropDownModule, IgxToggleModule, IgxButtonModule, IgxIconModule, IgxRippleModule]
        })
    ], IgxActionStripModule);
    return IgxActionStripModule;
}());
export { IgxActionStripModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXN0cmlwLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvYWN0aW9uLXN0cmlwL2FjdGlvbi1zdHJpcC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLCtCQUErQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEcsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDL0YsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDL0YsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDekYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDeEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUV4RTs7R0FFRztBQW9CSDtJQUFBO0lBQW9DLENBQUM7SUFBeEIsb0JBQW9CO1FBbkJoQyxRQUFRLENBQUM7WUFDTixZQUFZLEVBQUU7Z0JBQ1YsdUJBQXVCO2dCQUN2QiwrQkFBK0I7Z0JBQy9CLDhCQUE4QjtnQkFDOUIsOEJBQThCO2dCQUM5QiwyQkFBMkI7YUFDOUI7WUFDRCxlQUFlLEVBQUUsRUFDaEI7WUFDRCxPQUFPLEVBQUU7Z0JBQ0wsdUJBQXVCO2dCQUN2QiwrQkFBK0I7Z0JBQy9CLDhCQUE4QjtnQkFDOUIsOEJBQThCO2dCQUM5QiwyQkFBMkI7YUFDOUI7WUFDRCxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsZUFBZSxDQUFDO1NBQy9HLENBQUM7T0FDVyxvQkFBb0IsQ0FBSTtJQUFELDJCQUFDO0NBQUEsQUFBckMsSUFBcUM7U0FBeEIsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEFjdGlvblN0cmlwQ29tcG9uZW50LCBJZ3hBY3Rpb25TdHJpcE1lbnVJdGVtRGlyZWN0aXZlIH0gZnJvbSAnLi9hY3Rpb24tc3RyaXAuY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRQaW5uaW5nQWN0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vZ3JpZC1hY3Rpb25zL2dyaWQtcGlubmluZy1hY3Rpb25zLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hHcmlkRWRpdGluZ0FjdGlvbnNDb21wb25lbnQgfSBmcm9tICcuL2dyaWQtYWN0aW9ucy9ncmlkLWVkaXRpbmctYWN0aW9ucy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4R3JpZEFjdGlvbnNCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9ncmlkLWFjdGlvbnMvZ3JpZC1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJZ3hEcm9wRG93bk1vZHVsZSB9IGZyb20gJy4uL2Ryb3AtZG93bi9wdWJsaWNfYXBpJztcbmltcG9ydCB7IElneFRvZ2dsZU1vZHVsZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdG9nZ2xlL3RvZ2dsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4QnV0dG9uTW9kdWxlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9idXR0b24vYnV0dG9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9wdWJsaWNfYXBpJztcbmltcG9ydCB7IElneFJpcHBsZU1vZHVsZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvcmlwcGxlL3JpcHBsZS5kaXJlY3RpdmUnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgSWd4QWN0aW9uU3RyaXBDb21wb25lbnQsXG4gICAgICAgIElneEFjdGlvblN0cmlwTWVudUl0ZW1EaXJlY3RpdmUsXG4gICAgICAgIElneEdyaWRQaW5uaW5nQWN0aW9uc0NvbXBvbmVudCxcbiAgICAgICAgSWd4R3JpZEVkaXRpbmdBY3Rpb25zQ29tcG9uZW50LFxuICAgICAgICBJZ3hHcmlkQWN0aW9uc0Jhc2VEaXJlY3RpdmVcbiAgICBdLFxuICAgIGVudHJ5Q29tcG9uZW50czogW1xuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBJZ3hBY3Rpb25TdHJpcENvbXBvbmVudCxcbiAgICAgICAgSWd4QWN0aW9uU3RyaXBNZW51SXRlbURpcmVjdGl2ZSxcbiAgICAgICAgSWd4R3JpZFBpbm5pbmdBY3Rpb25zQ29tcG9uZW50LFxuICAgICAgICBJZ3hHcmlkRWRpdGluZ0FjdGlvbnNDb21wb25lbnQsXG4gICAgICAgIElneEdyaWRBY3Rpb25zQmFzZURpcmVjdGl2ZVxuICAgIF0sXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgSWd4RHJvcERvd25Nb2R1bGUsIElneFRvZ2dsZU1vZHVsZSwgSWd4QnV0dG9uTW9kdWxlLCBJZ3hJY29uTW9kdWxlLCBJZ3hSaXBwbGVNb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIElneEFjdGlvblN0cmlwTW9kdWxlIHsgfVxuIl19