import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { Component, HostBinding, Input, NgModule } from '@angular/core';
import { IgxIconModule } from '../icon/public_api';
var NEXT_ID = 0;
/**
 * Determines the igxBadge type
 */
export var IgxBadgeType;
(function (IgxBadgeType) {
    IgxBadgeType["PRIMARY"] = "primary";
    IgxBadgeType["INFO"] = "info";
    IgxBadgeType["SUCCESS"] = "success";
    IgxBadgeType["WARNING"] = "warning";
    IgxBadgeType["ERROR"] = "error";
})(IgxBadgeType || (IgxBadgeType = {}));
/**
 * Badge provides visual notifications used to decorate avatars, menus, etc.
 *
 * @igxModule IgxBadgeModule
 *
 * @igxTheme igx-badge-theme
 *
 * @igxKeywords badge, icon, notification
 *
 * @igxGroup Data Entry & Display
 *
 * @remarks
 * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the
 * application when visual notification is needed. They are usually designed as icons with a predefined
 * style to communicate information, success, warnings, or errors.
 *
 * @example
 * ```html
 * <igx-avatar>
 *   <igx-badge icon="check" type="success"></igx-badge>
 * </igx-avatar>
 */
var IgxBadgeComponent = /** @class */ (function () {
    function IgxBadgeComponent() {
        /**
         * Sets/gets the `id` of the badge.
         *
         * @remarks
         * If not set, the `id` will have value `"igx-badge-0"`.
         *
         * @example
         * ```html
         * <igx-badge id="igx-badge-2"></igx-badge>
         * ```
         */
        this.id = "igx-badge-" + NEXT_ID++;
        /**
         * Sets/gets the type of the badge.
         *
         * @remarks
         * Allowed values are `primary`, `info`, `success`, `warning`, `error`.
         * Providing an invalid value won't display a badge.
         *
         * @example
         * ```html
         * <igx-badge type="success"></igx-badge>
         * ```
         */
        this.type = IgxBadgeType.PRIMARY;
        /**
         * Sets/gets the value to be displayed inside the badge.
         *
         * @remarks
         * If an `icon` property is already set the `icon` will be displayed.
         * If neither a `value` nor an `icon` is set the content of the badge will be empty.
         *
         * @example
         * ```html
         * <igx-badge value="11"></igx-badge>
         * ```
         */
        this.value = '';
        /**
         * Sets/gets the role attribute value.
         *
         * @example
         * ```typescript
         * @ViewChild("MyBadge", { read: IgxBadgeComponent })
         * public badge: IgxBadgeComponent;
         *
         * badge.role = 'status';
         * ```
         */
        this.role = 'status';
        /**
         * Sets/gets the the css class to use on the badge.
         *
         * @example
         * ```typescript
         * @ViewChild("MyBadge", { read: IgxBadgeComponent })
         * public badge: IgxBadgeComponent;
         *
         * badge.cssClass = 'my-badge-class';
         * ```
         */
        this.cssClass = 'igx-badge';
        /**
         * Sets/gets the aria-label attribute value.
         *
         * @example
         * ```typescript
         * @ViewChild("MyBadge", { read: IgxBadgeComponent })
         * public badge: IgxBadgeComponent;
         *
         * badge.label = 'badge';
         * ```
         */
        this.label = 'badge';
    }
    Object.defineProperty(IgxBadgeComponent.prototype, "roleDescription", {
        /**
         * Defines a human-readable, accessor, author-localized description for
         * the `type` and the `icon` or `value` of the element.
         * @hidden
         * @internal
         */
        get: function () {
            var message;
            // tslint:disable-next-line:prefer-conditional-expression
            if (this.icon) {
                message = this.type + ' type badge with icon type ' + this.icon;
            }
            else if (this.value) {
                message = this.type + ' badge type with value ' + this.value;
            }
            else {
                message = this.type + ' badge type without value';
            }
            return message;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method which makes the name of the class more descriptive.
     * This helps the styling of the badges.
     * @hidden
     * @internal
     */
    IgxBadgeComponent.prototype.setClasses = function () {
        var _a, _b, _c, _d, _e;
        var classes = {};
        switch (IgxBadgeType[this.type.toUpperCase()]) {
            case IgxBadgeType.INFO:
                classes = (_a = {},
                    _a[this.cssClass + "__circle--info"] = true,
                    _a);
                break;
            case IgxBadgeType.SUCCESS:
                classes = (_b = {},
                    _b[this.cssClass + "__circle--success"] = true,
                    _b);
                break;
            case IgxBadgeType.WARNING:
                classes = (_c = {},
                    _c[this.cssClass + "__circle--warning"] = true,
                    _c);
                break;
            case IgxBadgeType.ERROR:
                classes = (_d = {},
                    _d[this.cssClass + "__circle--error"] = true,
                    _d);
                break;
            default:
                classes = (_e = {},
                    _e[this.cssClass + "__circle--default"] = true,
                    _e);
        }
        return classes;
    };
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxBadgeComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxBadgeComponent.prototype, "type", void 0);
    __decorate([
        Input()
    ], IgxBadgeComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], IgxBadgeComponent.prototype, "icon", void 0);
    __decorate([
        HostBinding('attr.role')
    ], IgxBadgeComponent.prototype, "role", void 0);
    __decorate([
        HostBinding('class.igx-badge')
    ], IgxBadgeComponent.prototype, "cssClass", void 0);
    __decorate([
        HostBinding('attr.aria-label')
    ], IgxBadgeComponent.prototype, "label", void 0);
    IgxBadgeComponent = __decorate([
        Component({
            selector: 'igx-badge',
            template: "<div class=\"igx-badge__circle\" [ngClass]=\"setClasses()\" [attr.aria-roledescription]=\"roleDescription\">\n    <span *ngIf=\"!icon\" class=\"igx-badge__circle-value\">{{value}}</span>\n    <igx-icon *ngIf=\"icon\" fontSet=\"material\">{{icon}}</igx-icon>\n</div>\n"
        })
    ], IgxBadgeComponent);
    return IgxBadgeComponent;
}());
export { IgxBadgeComponent };
/**
 * @hidden
 */
var IgxBadgeModule = /** @class */ (function () {
    function IgxBadgeModule() {
    }
    IgxBadgeModule = __decorate([
        NgModule({
            declarations: [IgxBadgeComponent],
            exports: [IgxBadgeComponent],
            imports: [CommonModule, IgxIconModule]
        })
    ], IgxBadgeModule);
    return IgxBadgeModule;
}());
export { IgxBadgeModule };
//# sourceMappingURL=data:application/json;base64,