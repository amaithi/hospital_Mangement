import { __decorate, __extends, __param, __values } from "tslib";
import { ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren, Optional } from '@angular/core';
import { IGX_COMBO_COMPONENT } from './combo.common';
import { IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';
import { IgxDropDownComponent } from '../drop-down/drop-down.component';
import { DropDownActionKey } from '../drop-down/drop-down.common';
import { IgxComboAddItemComponent } from './combo-add-item.component';
import { IgxComboAPIService } from './combo.api';
import { IgxSelectionAPIService } from '../core/selection';
import { IgxComboItemComponent } from './combo-item.component';
import { DisplayDensityToken } from '../core/density';
/** @hidden */
var IgxComboDropDownComponent = /** @class */ (function (_super) {
    __extends(IgxComboDropDownComponent, _super);
    function IgxComboDropDownComponent(elementRef, cdr, selection, combo, comboAPI, _displayDensityOptions) {
        var _this = _super.call(this, elementRef, cdr, selection, _displayDensityOptions) || this;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.selection = selection;
        _this.combo = combo;
        _this.comboAPI = comboAPI;
        _this._displayDensityOptions = _displayDensityOptions;
        /**
         * @hidden
         * @internal
         */
        _this.children = null;
        _this.scrollHandler = function () {
            _this.comboAPI.disableTransitions = true;
        };
        return _this;
    }
    IgxComboDropDownComponent_1 = IgxComboDropDownComponent;
    Object.defineProperty(IgxComboDropDownComponent.prototype, "scrollContainer", {
        /** @hidden @internal */
        get: function () {
            return this.virtDir.dc.location.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboDropDownComponent.prototype, "isScrolledToLast", {
        get: function () {
            var scrollTop = this.virtDir.scrollPosition;
            var scrollHeight = this.virtDir.getScroll().scrollHeight;
            return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboDropDownComponent.prototype, "lastVisibleIndex", {
        get: function () {
            return this.combo.totalItemCount ?
                Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :
                this.items.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    IgxComboDropDownComponent.prototype.onFocus = function () {
        this.focusedItem = this._focusedItem || this.items[0];
    };
    /**
     * @hidden @internal
     */
    IgxComboDropDownComponent.prototype.onBlur = function (evt) {
        this.focusedItem = null;
    };
    /**
     * @hidden @internal
     */
    IgxComboDropDownComponent.prototype.onToggleOpened = function () {
        this.onOpened.emit();
    };
    /**
     * @hidden
     */
    IgxComboDropDownComponent.prototype.navigateFirst = function () {
        this.navigateItem(this.virtDir.igxForOf.findIndex(function (e) { return !e.isHeader; }));
    };
    /**
     * @hidden
     */
    IgxComboDropDownComponent.prototype.navigatePrev = function () {
        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {
            this.combo.focusSearchInput(false);
        }
        else {
            _super.prototype.navigatePrev.call(this);
        }
    };
    /**
     * @hidden
     */
    IgxComboDropDownComponent.prototype.navigateNext = function () {
        var lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;
        if (this._focusedItem && this._focusedItem.index === lastIndex) {
            this.focusAddItemButton();
        }
        else {
            _super.prototype.navigateNext.call(this);
        }
    };
    /**
     * @hidden @internal
     */
    IgxComboDropDownComponent.prototype.selectItem = function (item) {
        if (item === null || item === undefined) {
            return;
        }
        this.comboAPI.set_selected_item(item.itemID);
        this._focusedItem = item;
    };
    IgxComboDropDownComponent.prototype.focusAddItemButton = function () {
        if (this.combo.isAddButtonVisible()) {
            this.focusedItem = this.items[this.items.length - 1];
        }
    };
    IgxComboDropDownComponent.prototype.scrollToHiddenItem = function (newItem) { };
    Object.defineProperty(IgxComboDropDownComponent.prototype, "sortedChildren", {
        get: function () {
            if (this.children !== undefined) {
                return this.children.toArray()
                    .sort(function (a, b) {
                    return a.index - b.index;
                });
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboDropDownComponent.prototype, "items", {
        /**
         * Get all non-header items
         *
         * ```typescript
         * let myDropDownItems = this.dropdown.items;
         * ```
         */
        get: function () {
            var e_1, _a;
            var items = [];
            if (this.children !== undefined) {
                var sortedChildren = this.sortedChildren;
                try {
                    for (var sortedChildren_1 = __values(sortedChildren), sortedChildren_1_1 = sortedChildren_1.next(); !sortedChildren_1_1.done; sortedChildren_1_1 = sortedChildren_1.next()) {
                        var child = sortedChildren_1_1.value;
                        if (!child.isHeader) {
                            items.push(child);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (sortedChildren_1_1 && !sortedChildren_1_1.done && (_a = sortedChildren_1.return)) _a.call(sortedChildren_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return items;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    IgxComboDropDownComponent.prototype.updateScrollPosition = function () {
        this.virtDir.getScroll().scrollTop = this._scrollPosition;
    };
    /**
     * @hidden @internal
     */
    IgxComboDropDownComponent.prototype.onItemActionKey = function (key) {
        switch (key) {
            case DropDownActionKey.ENTER:
                this.handleEnter();
                break;
            case DropDownActionKey.SPACE:
                this.handleSpace();
                break;
            case DropDownActionKey.ESCAPE:
                this.close();
        }
    };
    IgxComboDropDownComponent.prototype.handleEnter = function () {
        if (this.isAddItemFocused()) {
            this.combo.addItemToCollection();
        }
        else {
            this.close();
        }
    };
    IgxComboDropDownComponent.prototype.handleSpace = function () {
        if (this.isAddItemFocused()) {
            return;
        }
        else {
            this.selectItem(this.focusedItem);
        }
    };
    IgxComboDropDownComponent.prototype.isAddItemFocused = function () {
        return this.focusedItem instanceof IgxComboAddItemComponent;
    };
    IgxComboDropDownComponent.prototype.ngAfterViewInit = function () {
        this.virtDir.getScroll().addEventListener('scroll', this.scrollHandler);
    };
    /**
     * @hidden @internal
     */
    IgxComboDropDownComponent.prototype.ngOnDestroy = function () {
        this.virtDir.getScroll().removeEventListener('scroll', this.scrollHandler);
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    var IgxComboDropDownComponent_1;
    IgxComboDropDownComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IgxSelectionAPIService },
        { type: undefined, decorators: [{ type: Inject, args: [IGX_COMBO_COMPONENT,] }] },
        { type: IgxComboAPIService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        ContentChildren(IgxComboItemComponent, { descendants: true })
    ], IgxComboDropDownComponent.prototype, "children", void 0);
    IgxComboDropDownComponent = IgxComboDropDownComponent_1 = __decorate([
        Component({
            selector: 'igx-combo-drop-down',
            template: "<div class=\"igx-drop-down__list\" igxToggle [style.width]=\"width\"\n(onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\" (onAppended)=\"onToggleContentAppended()\"\n(onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n    <div class=\"igx-drop-down__list-scroll\" #scrollContainer [attr.id]=\"this.listId\" role=\"listbox\"\n    [style.height]=\"height\"\n    [style.maxHeight]=\"maxHeight\">\n        <ng-container *ngIf=\"!collapsed\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</div>\n",
            providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent_1 }]
        }),
        __param(3, Inject(IGX_COMBO_COMPONENT)),
        __param(5, Optional()), __param(5, Inject(DisplayDensityToken))
    ], IgxComboDropDownComponent);
    return IgxComboDropDownComponent;
}(IgxDropDownComponent));
export { IgxComboDropDownComponent };
//# sourceMappingURL=data:application/json;base64,