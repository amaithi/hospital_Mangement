import { __decorate } from "tslib";
import { Directive, HostBinding, TemplateRef } from '@angular/core';
import { IgxTabsBase } from './tabs.common';
var ButtonStyle;
(function (ButtonStyle) {
    ButtonStyle["VISIBLE"] = "visible";
    ButtonStyle["HIDDEN"] = "hidden";
    ButtonStyle["NOT_DISPLAYED"] = "not_displayed";
})(ButtonStyle || (ButtonStyle = {}));
var IgxRightButtonStyleDirective = /** @class */ (function () {
    function IgxRightButtonStyleDirective(tabs) {
        this.tabs = tabs;
    }
    Object.defineProperty(IgxRightButtonStyleDirective.prototype, "visibleCSS", {
        get: function () {
            return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRightButtonStyleDirective.prototype, "hiddenCSS", {
        get: function () {
            return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRightButtonStyleDirective.prototype, "notDisplayedCSS", {
        get: function () {
            return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    IgxRightButtonStyleDirective.prototype.getRightButtonStyle = function () {
        var viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;
        // We use this hacky way to get the width of the itemsContainer,
        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.
        var itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;
        var itemsContainerWidth = 0;
        if (itemsContainerChildrenCount > 1) {
            var lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];
            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;
        }
        var headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        var offset = this.tabs.offset;
        var total = offset + viewPortWidth;
        // Fix for IE 11, a difference is accumulated from the widths calculations.
        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {
            return ButtonStyle.NOT_DISPLAYED;
        }
        if (itemsContainerWidth > total) {
            return ButtonStyle.VISIBLE;
        }
        else {
            return ButtonStyle.HIDDEN;
        }
    };
    IgxRightButtonStyleDirective.ctorParameters = function () { return [
        { type: IgxTabsBase }
    ]; };
    __decorate([
        HostBinding('class.igx-tabs__header-button')
    ], IgxRightButtonStyleDirective.prototype, "visibleCSS", null);
    __decorate([
        HostBinding('class.igx-tabs__header-button--hidden')
    ], IgxRightButtonStyleDirective.prototype, "hiddenCSS", null);
    __decorate([
        HostBinding('class.igx-tabs__header-button--none')
    ], IgxRightButtonStyleDirective.prototype, "notDisplayedCSS", null);
    IgxRightButtonStyleDirective = __decorate([
        Directive({
            selector: '[igxRightButtonStyle]'
        })
    ], IgxRightButtonStyleDirective);
    return IgxRightButtonStyleDirective;
}());
export { IgxRightButtonStyleDirective };
var IgxLeftButtonStyleDirective = /** @class */ (function () {
    function IgxLeftButtonStyleDirective(tabs) {
        this.tabs = tabs;
    }
    Object.defineProperty(IgxLeftButtonStyleDirective.prototype, "visibleCSS", {
        get: function () {
            return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLeftButtonStyleDirective.prototype, "hiddenCSS", {
        get: function () {
            return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLeftButtonStyleDirective.prototype, "notDisplayedCSS", {
        get: function () {
            return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    IgxLeftButtonStyleDirective.prototype.getLeftButtonStyle = function () {
        // We use this hacky way to get the width of the itemsContainer,
        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.
        var itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;
        var itemsContainerWidth = 0;
        if (itemsContainerChildrenCount > 1) {
            var lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];
            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;
        }
        var headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        var offset = this.tabs.offset;
        if (offset === 0) {
            // Fix for IE 11, a difference is accumulated from the widths calculations.
            if (itemsContainerWidth - headerContainerWidth <= 1) {
                return ButtonStyle.NOT_DISPLAYED;
            }
            return ButtonStyle.HIDDEN;
        }
        else {
            return ButtonStyle.VISIBLE;
        }
    };
    IgxLeftButtonStyleDirective.ctorParameters = function () { return [
        { type: IgxTabsBase }
    ]; };
    __decorate([
        HostBinding('class.igx-tabs__header-button')
    ], IgxLeftButtonStyleDirective.prototype, "visibleCSS", null);
    __decorate([
        HostBinding('class.igx-tabs__header-button--hidden')
    ], IgxLeftButtonStyleDirective.prototype, "hiddenCSS", null);
    __decorate([
        HostBinding('class.igx-tabs__header-button--none')
    ], IgxLeftButtonStyleDirective.prototype, "notDisplayedCSS", null);
    IgxLeftButtonStyleDirective = __decorate([
        Directive({
            selector: '[igxLeftButtonStyle]'
        })
    ], IgxLeftButtonStyleDirective);
    return IgxLeftButtonStyleDirective;
}());
export { IgxLeftButtonStyleDirective };
var IgxTabItemTemplateDirective = /** @class */ (function () {
    function IgxTabItemTemplateDirective(template) {
        this.template = template;
    }
    IgxTabItemTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxTabItemTemplateDirective = __decorate([
        Directive({
            selector: '[igxTab]'
        })
    ], IgxTabItemTemplateDirective);
    return IgxTabItemTemplateDirective;
}());
export { IgxTabItemTemplateDirective };
//# sourceMappingURL=data:application/json;base64,