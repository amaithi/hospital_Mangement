import { __decorate } from "tslib";
import { Component, ChangeDetectionStrategy, Input, ChangeDetectorRef, ViewChild, AfterViewInit, TemplateRef, ViewChildren, QueryList, ElementRef } from '@angular/core';
import { ExpressionUI } from '../grid-filtering.service';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { DataType } from '../../../data-operations/data-util';
import { IgxStringFilteringOperand, IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand } from '../../../data-operations/filtering-condition';
import { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';
import { AutoPositionStrategy, VerticalAlignment, HorizontalAlignment, AbsoluteScrollStrategy } from '../../../services/public_api';
import { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';
import { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';
/**
 * @hidden
 */
var IgxExcelStyleCustomDialogComponent = /** @class */ (function () {
    function IgxExcelStyleCustomDialogComponent(cdr) {
        this.cdr = cdr;
        this.expressionsList = new Array();
        this._customDialogPositionSettings = {
            verticalDirection: VerticalAlignment.Middle,
            horizontalDirection: HorizontalAlignment.Center,
            horizontalStartPoint: HorizontalAlignment.Center,
            verticalStartPoint: VerticalAlignment.Middle
        };
        this._customDialogOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new AutoPositionStrategy(this._customDialogPositionSettings),
            scrollStrategy: new AbsoluteScrollStrategy()
        };
    }
    IgxExcelStyleCustomDialogComponent.prototype.ngAfterViewInit = function () {
        this._customDialogOverlaySettings.outlet = this.grid.outlet;
    };
    Object.defineProperty(IgxExcelStyleCustomDialogComponent.prototype, "template", {
        get: function () {
            if (this.column.dataType === DataType.Date) {
                return this.dateExpressionTemplate;
            }
            return this.defaultExpressionTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleCustomDialogComponent.prototype, "grid", {
        get: function () {
            return this.filteringService.grid;
        },
        enumerable: true,
        configurable: true
    });
    IgxExcelStyleCustomDialogComponent.prototype.onCustomDialogOpening = function () {
        if (this.selectedOperator) {
            this.createInitialExpressionUIElement();
        }
    };
    IgxExcelStyleCustomDialogComponent.prototype.onCustomDialogOpened = function () {
        if (this.expressionComponents.first) {
            this.expressionComponents.first.focus();
        }
    };
    IgxExcelStyleCustomDialogComponent.prototype.open = function (esf) {
        this._customDialogOverlaySettings.positionStrategy.settings.target =
            this.overlayComponentId ?
                this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement :
                esf;
        this.toggle.open(this._customDialogOverlaySettings);
    };
    IgxExcelStyleCustomDialogComponent.prototype.onClearButtonClick = function () {
        this.filteringService.clearFilter(this.column.field);
        this.createInitialExpressionUIElement();
        this.cdr.detectChanges();
    };
    IgxExcelStyleCustomDialogComponent.prototype.closeDialog = function () {
        if (this.overlayComponentId) {
            this.overlayService.hide(this.overlayComponentId);
        }
        else {
            this.toggle.close();
        }
    };
    IgxExcelStyleCustomDialogComponent.prototype.onApplyButtonClick = function () {
        this.expressionsList = this.expressionsList.filter(function (element) { return element.expression.condition &&
            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary); });
        if (this.expressionsList.length > 0) {
            this.expressionsList[0].beforeOperator = null;
            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;
        }
        this.filteringService.filterInternal(this.column.field, this.expressionsList);
        this.closeDialog();
    };
    IgxExcelStyleCustomDialogComponent.prototype.onAddButtonClick = function () {
        var exprUI = new ExpressionUI();
        exprUI.expression = {
            condition: null,
            fieldName: this.column.field,
            ignoreCase: this.column.filteringIgnoreCase,
            searchVal: null
        };
        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;
        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;
        this.expressionsList.push(exprUI);
        this.markChildrenForCheck();
        this.scrollToBottom();
    };
    IgxExcelStyleCustomDialogComponent.prototype.onExpressionRemoved = function (event) {
        var indexToRemove = this.expressionsList.indexOf(event);
        if (indexToRemove === 0 && this.expressionsList.length > 1) {
            this.expressionsList[1].beforeOperator = null;
        }
        else if (indexToRemove === this.expressionsList.length - 1) {
            this.expressionsList[indexToRemove - 1].afterOperator = null;
        }
        else {
            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;
            this.expressionsList[0].beforeOperator = null;
            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;
        }
        this.expressionsList.splice(indexToRemove, 1);
        this.cdr.detectChanges();
        this.markChildrenForCheck();
    };
    IgxExcelStyleCustomDialogComponent.prototype.onLogicOperatorChanged = function (event) {
        var index = this.expressionsList.indexOf(event.target);
        event.target.afterOperator = event.newValue;
        if (index + 1 < this.expressionsList.length) {
            this.expressionsList[index + 1].beforeOperator = event.newValue;
        }
    };
    IgxExcelStyleCustomDialogComponent.prototype.onKeyDown = function (eventArgs) {
        eventArgs.stopPropagation();
    };
    IgxExcelStyleCustomDialogComponent.prototype.onApplyButtonKeyDown = function (eventArgs) {
        if (eventArgs.key === "Tab" /* TAB */ && !eventArgs.shiftKey) {
            eventArgs.stopPropagation();
            eventArgs.preventDefault();
        }
    };
    IgxExcelStyleCustomDialogComponent.prototype.createCondition = function (conditionName) {
        switch (this.column.dataType) {
            case DataType.Boolean:
                return IgxBooleanFilteringOperand.instance().condition(conditionName);
            case DataType.Number:
                return IgxNumberFilteringOperand.instance().condition(conditionName);
            case DataType.Date:
                return IgxDateFilteringOperand.instance().condition(conditionName);
            default:
                return IgxStringFilteringOperand.instance().condition(conditionName);
        }
    };
    IgxExcelStyleCustomDialogComponent.prototype.markChildrenForCheck = function () {
        this.expressionComponents.forEach(function (x) { return x.cdr.markForCheck(); });
        this.expressionDateComponents.forEach(function (x) { return x.cdr.markForCheck(); });
    };
    IgxExcelStyleCustomDialogComponent.prototype.createInitialExpressionUIElement = function () {
        this.expressionsList = [];
        var firstExprUI = new ExpressionUI();
        firstExprUI.expression = {
            condition: this.createCondition(this.selectedOperator),
            fieldName: this.column.field,
            ignoreCase: this.column.filteringIgnoreCase,
            searchVal: null
        };
        firstExprUI.afterOperator = FilteringLogic.And;
        this.expressionsList.push(firstExprUI);
        var secondExprUI = new ExpressionUI();
        secondExprUI.expression = {
            condition: null,
            fieldName: this.column.field,
            ignoreCase: this.column.filteringIgnoreCase,
            searchVal: null
        };
        secondExprUI.beforeOperator = FilteringLogic.And;
        this.expressionsList.push(secondExprUI);
    };
    IgxExcelStyleCustomDialogComponent.prototype.scrollToBottom = function () {
        var _this = this;
        requestAnimationFrame(function () {
            _this.expressionsContainer.nativeElement.scrollTop = _this.expressionsContainer.nativeElement.scrollHeight;
        });
    };
    IgxExcelStyleCustomDialogComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], IgxExcelStyleCustomDialogComponent.prototype, "expressionsList", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleCustomDialogComponent.prototype, "column", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleCustomDialogComponent.prototype, "selectedOperator", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleCustomDialogComponent.prototype, "filteringService", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleCustomDialogComponent.prototype, "overlayComponentId", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleCustomDialogComponent.prototype, "overlayService", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleCustomDialogComponent.prototype, "displayDensity", void 0);
    __decorate([
        ViewChildren(IgxExcelStyleDefaultExpressionComponent)
    ], IgxExcelStyleCustomDialogComponent.prototype, "expressionComponents", void 0);
    __decorate([
        ViewChildren(IgxExcelStyleDateExpressionComponent)
    ], IgxExcelStyleCustomDialogComponent.prototype, "expressionDateComponents", void 0);
    __decorate([
        ViewChild('toggle', { read: IgxToggleDirective, static: true })
    ], IgxExcelStyleCustomDialogComponent.prototype, "toggle", void 0);
    __decorate([
        ViewChild('defaultExpressionTemplate', { read: TemplateRef })
    ], IgxExcelStyleCustomDialogComponent.prototype, "defaultExpressionTemplate", void 0);
    __decorate([
        ViewChild('dateExpressionTemplate', { read: TemplateRef })
    ], IgxExcelStyleCustomDialogComponent.prototype, "dateExpressionTemplate", void 0);
    __decorate([
        ViewChild('expressionsContainer', { static: true })
    ], IgxExcelStyleCustomDialogComponent.prototype, "expressionsContainer", void 0);
    IgxExcelStyleCustomDialogComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: 'igx-excel-style-custom-dialog',
            template: "<article #toggle igxToggle\n    class=\"igx-excel-filter__secondary\"\n    [ngClass]=\"{\n        'igx-excel-filter__secondary--cosy': grid.displayDensity === 'cosy',\n        'igx-excel-filter__secondary--compact': grid.displayDensity === 'compact'\n    }\"\n    (keydown)=\"onKeyDown($event)\"\n    (onOpening)=\"onCustomDialogOpening()\"\n    (onOpened)=\"onCustomDialogOpened()\">\n    <header class=\"igx-excel-filter__secondary-header\">\n        <h4 class=\"igx-typography__h6\">\n            {{ grid.resourceStrings.igx_grid_excel_custom_dialog_header }}{{ column.header || column.field }}\n        </h4>\n    </header>\n\n    <article #expressionsContainer class=\"igx-excel-filter__secondary-main\">\n        <ng-container *ngIf=\"column.dataType === 'date'\">\n            <igx-excel-style-date-expression *ngFor=\"let expression of expressionsList;\"\n                class=\"igx-excel-filter__condition\"\n                [expressionUI]=\"expression\"\n                [column]=\"column\"\n                [grid]=\"grid\"\n                [displayDensity]=\"displayDensity\"\n                [expressionsList]=\"expressionsList\"\n                (onExpressionRemoved)=\"onExpressionRemoved($event)\"\n                (onLogicOperatorChanged)=\"onLogicOperatorChanged($event)\">\n            </igx-excel-style-date-expression>\n        </ng-container>\n\n        <ng-container *ngIf=\"column.dataType !== 'date'\">\n            <igx-excel-style-default-expression *ngFor=\"let expression of expressionsList;\"\n                class=\"igx-excel-filter__condition\"\n                [expressionUI]=\"expression\"\n                [column]=\"column\"\n                [grid]=\"grid\"\n                [displayDensity]=\"displayDensity\"\n                [expressionsList]=\"expressionsList\"\n                (onExpressionRemoved)=\"onExpressionRemoved($event)\"\n                (onLogicOperatorChanged)=\"onLogicOperatorChanged($event)\">\n            </igx-excel-style-default-expression>\n        </ng-container>\n\n        <button igxButton [displayDensity]=\"displayDensity\"\n            class=\"igx-excel-filter__add-filter\"\n            (click)=\"onAddButtonClick()\">\n            <igx-icon>add</igx-icon>\n            <span>{{ grid.resourceStrings.igx_grid_excel_custom_dialog_add }}</span>\n        </button>\n    </article>\n\n    <footer class=\"igx-excel-filter__secondary-footer\">\n        <button igxButton [displayDensity]=\"displayDensity\" (click)=\"onClearButtonClick()\">{{ grid.resourceStrings.igx_grid_excel_custom_dialog_clear }}</button>\n\n        <div>\n            <button igxButton [displayDensity]=\"displayDensity\" (click)=\"closeDialog()\">{{ grid.resourceStrings.igx_grid_excel_cancel }}</button>\n            <button igxButton=\"raised\" [displayDensity]=\"displayDensity\" (click)=\"onApplyButtonClick()\" (keydown)=\"onApplyButtonKeyDown($event)\">\n                {{ grid.resourceStrings.igx_grid_excel_apply }}\n            </button>\n        </div>\n    </footer>\n</article>\n"
        })
    ], IgxExcelStyleCustomDialogComponent);
    return IgxExcelStyleCustomDialogComponent;
}());
export { IgxExcelStyleCustomDialogComponent };
//# sourceMappingURL=data:application/json;base64,