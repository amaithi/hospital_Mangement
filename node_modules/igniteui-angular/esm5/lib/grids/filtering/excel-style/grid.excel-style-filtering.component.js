import { __decorate, __read, __spread, __values } from "tslib";
import { ChangeDetectorRef, Component, ViewChild, HostBinding, ChangeDetectionStrategy, TemplateRef, Directive, OnDestroy, ElementRef, Input, ViewRef } from '@angular/core';
import { HorizontalAlignment, VerticalAlignment, AbsoluteScrollStrategy, AutoPositionStrategy } from '../../../services/public_api';
import { IgxStringFilteringOperand, IgxNumberFilteringOperand, IgxBooleanFilteringOperand, IgxDateFilteringOperand } from '../../../data-operations/filtering-condition';
import { FilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { cloneArray } from '../../../core/utils';
import { DataType, DataUtil } from '../../../data-operations/data-util';
import { IgxExcelStyleSearchComponent } from './excel-style-search.component';
import { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';
import { Subject } from 'rxjs';
import { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';
import { takeUntil } from 'rxjs/operators';
import { IgxDropDownComponent } from '../../../drop-down/public_api';
import { DisplayDensity } from '../../../core/density';
import { GridSelectionMode } from '../../common/enums';
import { IgxDecimalPipeComponent, IgxDatePipeComponent } from '../../common/pipes';
/**
 * @hidden
 */
var FilterListItem = /** @class */ (function () {
    function FilterListItem() {
        this.isSpecial = false;
        this.isBlanks = false;
    }
    return FilterListItem;
}());
export { FilterListItem };
var IgxExcelStyleSortingTemplateDirective = /** @class */ (function () {
    function IgxExcelStyleSortingTemplateDirective(template) {
        this.template = template;
    }
    IgxExcelStyleSortingTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxExcelStyleSortingTemplateDirective = __decorate([
        Directive({
            selector: '[igxExcelStyleSorting]'
        })
    ], IgxExcelStyleSortingTemplateDirective);
    return IgxExcelStyleSortingTemplateDirective;
}());
export { IgxExcelStyleSortingTemplateDirective };
var IgxExcelStyleMovingTemplateDirective = /** @class */ (function () {
    function IgxExcelStyleMovingTemplateDirective(template) {
        this.template = template;
    }
    IgxExcelStyleMovingTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxExcelStyleMovingTemplateDirective = __decorate([
        Directive({
            selector: '[igxExcelStyleMoving]'
        })
    ], IgxExcelStyleMovingTemplateDirective);
    return IgxExcelStyleMovingTemplateDirective;
}());
export { IgxExcelStyleMovingTemplateDirective };
var IgxExcelStyleHidingTemplateDirective = /** @class */ (function () {
    function IgxExcelStyleHidingTemplateDirective(template) {
        this.template = template;
    }
    IgxExcelStyleHidingTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxExcelStyleHidingTemplateDirective = __decorate([
        Directive({
            selector: '[igxExcelStyleHiding]'
        })
    ], IgxExcelStyleHidingTemplateDirective);
    return IgxExcelStyleHidingTemplateDirective;
}());
export { IgxExcelStyleHidingTemplateDirective };
var IgxExcelStyleSelectingTemplateDirective = /** @class */ (function () {
    function IgxExcelStyleSelectingTemplateDirective(template) {
        this.template = template;
    }
    IgxExcelStyleSelectingTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxExcelStyleSelectingTemplateDirective = __decorate([
        Directive({
            selector: '[igxExcelStyleSelecting]'
        })
    ], IgxExcelStyleSelectingTemplateDirective);
    return IgxExcelStyleSelectingTemplateDirective;
}());
export { IgxExcelStyleSelectingTemplateDirective };
var IgxExcelStylePinningTemplateDirective = /** @class */ (function () {
    function IgxExcelStylePinningTemplateDirective(template) {
        this.template = template;
    }
    IgxExcelStylePinningTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxExcelStylePinningTemplateDirective = __decorate([
        Directive({
            selector: '[igxExcelStylePinning]'
        })
    ], IgxExcelStylePinningTemplateDirective);
    return IgxExcelStylePinningTemplateDirective;
}());
export { IgxExcelStylePinningTemplateDirective };
/**
 * A component used for presenting Excel style filtering UI for a specific column.
 * It is used internally in the Grid, but could also be hosted in a container outside of it.
 *
 * Example:
 * ```html
 * <igx-grid-excel-style-filtering
 *     [column]="grid1.columns[0]">
 * </igx-grid-excel-style-filtering>
 * ```
 */
var IgxGridExcelStyleFilteringComponent = /** @class */ (function () {
    function IgxGridExcelStyleFilteringComponent(cdr, element) {
        this.cdr = cdr;
        this.element = element;
        this.shouldOpenSubMenu = true;
        this.expressionsList = new Array();
        this.destroy$ = new Subject();
        this.containsNullOrEmpty = false;
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.filterValues = new Set();
        /**
         * @hidden @internal
         */
        this.listData = new Array();
        /**
         * @hidden @internal
         */
        this.uniqueValues = [];
        this._subMenuPositionSettings = {
            verticalStartPoint: VerticalAlignment.Top
        };
        this._subMenuOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new AutoPositionStrategy(this._subMenuPositionSettings),
            scrollStrategy: new AbsoluteScrollStrategy()
        };
        /**
         * @hidden @internal
         */
        this.className = 'igx-excel-filter';
        /**
         * @hidden @internal
         */
        this.inline = true;
    }
    IgxGridExcelStyleFilteringComponent_1 = IgxGridExcelStyleFilteringComponent;
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "column", {
        /**
         * Returns the current column.
         */
        get: function () {
            return this._column;
        },
        /**
         * An @Input property that sets the column.
         */
        set: function (value) {
            var _this = this;
            this._column = value;
            if (this._columnPinning) {
                this._columnPinning.unsubscribe();
            }
            if (this._columnVisibilityChanged) {
                this._columnVisibilityChanged.unsubscribe();
            }
            if (this._filteringChanged) {
                this._filteringChanged.unsubscribe();
            }
            if (this._densityChanged) {
                this._densityChanged.unsubscribe();
            }
            if (this._column) {
                this._column.grid.filteringService.registerSVGIcons();
                this.isColumnPinnable = this.column.pinnable;
                this.init();
                this._columnPinning = this.grid.onColumnPinning.pipe(takeUntil(this.destroy$)).subscribe(function () {
                    requestAnimationFrame(function () {
                        _this.isColumnPinnable = _this.column.pinnable;
                        if (!_this.cdr.destroyed) {
                            _this.cdr.detectChanges();
                        }
                    });
                });
                this._columnVisibilityChanged = this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe(function () {
                    _this.cdr.detectChanges();
                });
                this._filteringChanged = this.grid.filteringExpressionsTreeChange.pipe(takeUntil(this.destroy$)).subscribe(function () {
                    _this.init();
                });
                this._densityChanged = this.grid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(function () {
                    _this.cdr.detectChanges();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "filteringService", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.grid.filteringService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "minHeight", {
        /**
         * @hidden @internal
         */
        get: function () {
            if (!this.inline) {
                var minHeight = 645;
                switch (this.grid.displayDensity) {
                    case DisplayDensity.cosy:
                        minHeight = 465;
                        break;
                    case DisplayDensity.compact:
                        minHeight = 330;
                        break;
                    default: break;
                }
                return minHeight + "px";
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "maxHeight", {
        /**
         * @hidden @internal
         */
        get: function () {
            if (!this.inline) {
                var maxHeight = 775;
                switch (this.grid.displayDensity) {
                    case DisplayDensity.cosy:
                        maxHeight = 565;
                        break;
                    case DisplayDensity.compact:
                        maxHeight = 405;
                        break;
                    default: break;
                }
                return maxHeight + "px";
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "grid", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.column.grid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "conditions", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.column.filters.conditionList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "subMenuText", {
        /**
         * @hidden @internal
         */
        get: function () {
            switch (this.column.dataType) {
                case DataType.Boolean:
                    return this.grid.resourceStrings.igx_grid_excel_boolean_filter;
                case DataType.Number:
                    return this.grid.resourceStrings.igx_grid_excel_number_filter;
                case DataType.Date:
                    return this.grid.resourceStrings.igx_grid_excel_date_filter;
                default:
                    return this.grid.resourceStrings.igx_grid_excel_text_filter;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    IgxGridExcelStyleFilteringComponent.prototype.init = function () {
        this.expressionsList = new Array();
        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);
        this.populateColumnData();
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.clearFilterClass = function () {
        if (this.column.filteringExpressionsTree) {
            return 'igx-excel-filter__actions-clear';
        }
        return 'igx-excel-filter__actions-clear--disabled';
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.pinClass = function () {
        return this.isColumnPinnable ? 'igx-excel-filter__actions-pin' : 'igx-excel-filter__actions-pin--disabled';
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.selectedClass = function () {
        return this.column.selected ? 'igx-excel-filter__actions-selected' : 'igx-excel-filter__actions-select';
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.initialize = function (column, overlayService, overlayComponentId) {
        var _this = this;
        this.inline = false;
        this.column = column;
        this.overlayService = overlayService;
        this.overlayComponentId = overlayComponentId;
        this._subMenuOverlaySettings.outlet = this.grid.outlet;
        requestAnimationFrame(function () {
            _this.excelStyleSearch.searchInput.nativeElement.focus();
        });
        this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(function () {
            _this.closeDropdown();
        });
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.getCondition = function (value) {
        return this.column.filters.condition(value);
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.translateCondition = function (value) {
        return this.grid.resourceStrings["igx_grid_filter_" + this.getCondition(value).name] || value;
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.onPin = function () {
        this.column.pinned = !this.column.pinned;
        this.closeDropdown();
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.onSelect = function () {
        if (!this.column.selected) {
            this.grid.selectionService.selectColumn(this.column.field, this.grid.columnSelection === GridSelectionMode.single);
        }
        else {
            this.grid.selectionService.deselectColumn(this.column.field);
        }
        this.grid.notifyChanges();
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.columnSelectable = function () {
        return this.grid.columnSelection !== GridSelectionMode.none && this.column.selectable;
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.onHideToggle = function () {
        this.column.hidden = !this.column.hidden;
        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: this.column.hidden });
        this.closeDropdown();
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.onTextFilterClick = function (eventArgs) {
        if (this.shouldOpenSubMenu) {
            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;
            var gridRect = this.grid.nativeElement.getBoundingClientRect();
            var dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();
            var x = dropdownRect.left + dropdownRect.width;
            var x1 = gridRect.left + gridRect.width;
            x += window.pageXOffset;
            x1 += window.pageXOffset;
            if (Math.abs(x - x1) < 200) {
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;
            }
            else {
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;
                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;
            }
            this.subMenu.open(this._subMenuOverlaySettings);
            this.shouldOpenSubMenu = false;
        }
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.onTextFilterKeyDown = function (eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            this.onTextFilterClick(eventArgs);
        }
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.onSubMenuClosed = function () {
        var _this = this;
        requestAnimationFrame(function () {
            _this.shouldOpenSubMenu = true;
        });
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.onSubMenuSelection = function (eventArgs) {
        if (this.expressionsList && this.expressionsList.length &&
            this.expressionsList[0].expression.condition.name !== 'in') {
            this.customDialog.expressionsList = this.expressionsList;
        }
        this.customDialog.selectedOperator = eventArgs.newSelection.value;
        eventArgs.cancel = true;
        if (this.overlayComponentId) {
            this.element.nativeElement.style.display = 'none';
        }
        this.subMenu.close();
        this.customDialog.open(this.mainDropdown.nativeElement);
    };
    IgxGridExcelStyleFilteringComponent.prototype.areExpressionsSelectable = function () {
        if (this.expressionsList.length === 1 &&
            (this.expressionsList[0].expression.condition.name === 'equals' ||
                this.expressionsList[0].expression.condition.name === 'true' ||
                this.expressionsList[0].expression.condition.name === 'false' ||
                this.expressionsList[0].expression.condition.name === 'empty' ||
                this.expressionsList[0].expression.condition.name === 'in')) {
            return true;
        }
        var selectableExpressionsCount = this.expressionsList.filter(function (exp) {
            return (exp.beforeOperator === 1 || exp.afterOperator === 1) &&
                (exp.expression.condition.name === 'equals' ||
                    exp.expression.condition.name === 'true' ||
                    exp.expression.condition.name === 'false' ||
                    exp.expression.condition.name === 'empty' ||
                    exp.expression.condition.name === 'in');
        }).length;
        return selectableExpressionsCount === this.expressionsList.length;
    };
    IgxGridExcelStyleFilteringComponent.prototype.areExpressionsValuesInTheList = function () {
        if (this.column.dataType === DataType.Boolean) {
            return true;
        }
        if (this.filterValues.size === 1) {
            var firstValue = this.filterValues.values().next().value;
            if (!firstValue && firstValue !== 0) {
                return true;
            }
        }
        for (var index = 0; index < this.uniqueValues.length; index++) {
            if (this.filterValues.has(this.uniqueValues[index])) {
                return true;
            }
        }
        return false;
    };
    IgxGridExcelStyleFilteringComponent.prototype.populateColumnData = function () {
        if (this.grid.uniqueColumnValuesStrategy) {
            this.cdr.detectChanges();
            this.renderColumnValuesRemotely();
        }
        else {
            this.renderColumnValuesFromData();
        }
    };
    IgxGridExcelStyleFilteringComponent.prototype.renderColumnValuesRemotely = function () {
        var _this = this;
        this.excelStyleSearch.isLoading = true;
        var expressionsTree = this.getColumnFilterExpressionsTree();
        this.grid.uniqueColumnValuesStrategy(this.column, expressionsTree, function (colVals) {
            var columnValues = (_this.column.dataType === DataType.Date) ?
                colVals.map(function (val) { return val ? val.toDateString() : val; }) : colVals;
            _this.renderValues(columnValues);
            _this.excelStyleSearch.isLoading = false;
            _this.excelStyleSearch.refreshSize();
        });
    };
    IgxGridExcelStyleFilteringComponent.prototype.renderColumnValuesFromData = function () {
        var data = this.column.gridAPI.get_all_data(this.grid.id);
        var expressionsTree = this.getColumnFilterExpressionsTree();
        if (expressionsTree.filteringOperands.length) {
            var state = { expressionsTree: expressionsTree };
            data = DataUtil.filter(cloneArray(data), state);
        }
        var columnField = this.column.field;
        var columnValues = (this.column.dataType === DataType.Date) ?
            data.map(function (record) { return record[columnField] ? record[columnField].toDateString() : record[columnField]; }) :
            data.map(function (record) { return record[columnField]; });
        this.renderValues(columnValues);
    };
    IgxGridExcelStyleFilteringComponent.prototype.renderValues = function (columnValues) {
        this.generateUniqueValues(columnValues);
        this.generateFilterValues(this.column.dataType === DataType.Date);
        this.generateListData();
    };
    IgxGridExcelStyleFilteringComponent.prototype.generateUniqueValues = function (columnValues) {
        this.uniqueValues = Array.from(new Set(columnValues));
    };
    IgxGridExcelStyleFilteringComponent.prototype.generateFilterValues = function (isDateColumn) {
        if (isDateColumn === void 0) { isDateColumn = false; }
        if (isDateColumn) {
            this.filterValues = new Set(this.expressionsList.reduce(function (arr, e) {
                if (e.expression.condition.name === 'in') {
                    return __spread(arr, Array.from(e.expression.searchVal.values()).map(function (v) {
                        return new Date(v).toDateString();
                    }));
                }
                return __spread(arr, [e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal]);
            }, []));
        }
        else {
            this.filterValues = new Set(this.expressionsList.reduce(function (arr, e) {
                if (e.expression.condition.name === 'in') {
                    return __spread(arr, Array.from(e.expression.searchVal.values()));
                }
                return __spread(arr, [e.expression.searchVal]);
            }, []));
        }
    };
    IgxGridExcelStyleFilteringComponent.prototype.generateListData = function () {
        var _this = this;
        this.listData = new Array();
        var shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();
        if (this.column.dataType === DataType.Boolean) {
            this.addBooleanItems();
        }
        else {
            this.addItems(shouldUpdateSelection);
        }
        this.listData.sort(function (a, b) { return _this.sortData(a, b); });
        if (this.column.dataType === DataType.Date) {
            this.uniqueValues = this.uniqueValues.map(function (value) { return new Date(value); });
        }
        if (this.containsNullOrEmpty) {
            this.addBlanksItem(shouldUpdateSelection);
        }
        this.addSelectAllItem();
        if (!this.cdr.destroyed) {
            this.cdr.detectChanges();
        }
    };
    IgxGridExcelStyleFilteringComponent.prototype.getColumnFilterExpressionsTree = function () {
        var e_1, _a;
        var gridExpressionsTree = this.grid.filteringExpressionsTree;
        var expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);
        try {
            for (var _b = __values(gridExpressionsTree.filteringOperands), _c = _b.next(); !_c.done; _c = _b.next()) {
                var operand = _c.value;
                if (operand instanceof FilteringExpressionsTree) {
                    var columnExprTree = operand;
                    if (columnExprTree.fieldName === this.column.field) {
                        break;
                    }
                }
                expressionsTree.filteringOperands.push(operand);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return expressionsTree;
    };
    IgxGridExcelStyleFilteringComponent.prototype.addBooleanItems = function () {
        var _this = this;
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.uniqueValues.forEach(function (element) {
            var filterListItem = new FilterListItem();
            if (element !== undefined && element !== null && element !== '') {
                if (_this.column.filteringExpressionsTree) {
                    if (element === true && _this.expressionsList.find(function (exp) { return exp.expression.condition.name === 'true'; })) {
                        filterListItem.isSelected = true;
                        _this.selectAllIndeterminate = true;
                    }
                    else if (element === false && _this.expressionsList.find(function (exp) { return exp.expression.condition.name === 'false'; })) {
                        filterListItem.isSelected = true;
                        _this.selectAllIndeterminate = true;
                    }
                    else {
                        filterListItem.isSelected = false;
                    }
                }
                else {
                    filterListItem.isSelected = true;
                }
                filterListItem.value = element;
                filterListItem.label = element;
                filterListItem.indeterminate = false;
                _this.listData.push(filterListItem);
            }
            else {
                _this.containsNullOrEmpty = true;
            }
        });
    };
    IgxGridExcelStyleFilteringComponent.prototype.addItems = function (shouldUpdateSelection) {
        var _this = this;
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        var numberPipe = new IgxDecimalPipeComponent(this.column.grid.locale);
        var datePipe = new IgxDatePipeComponent(this.column.grid.locale);
        this.uniqueValues.forEach(function (element) {
            if (element !== undefined && element !== null && element !== '') {
                var filterListItem = new FilterListItem();
                if (_this.column.filteringExpressionsTree) {
                    if (shouldUpdateSelection) {
                        if (_this.filterValues.has(element)) {
                            filterListItem.isSelected = true;
                        }
                        else {
                            filterListItem.isSelected = false;
                        }
                        _this.selectAllIndeterminate = true;
                    }
                    else {
                        filterListItem.isSelected = false;
                        _this.selectAllSelected = false;
                    }
                }
                else {
                    filterListItem.isSelected = true;
                }
                if (_this.column.dataType === DataType.Date) {
                    var date = new Date(element);
                    filterListItem.value = date;
                    filterListItem.label = _this.column.formatter ?
                        _this.column.formatter(date) :
                        datePipe.transform(date, _this.column.grid.locale);
                }
                else if (_this.column.dataType === DataType.Number) {
                    filterListItem.value = element;
                    filterListItem.label = _this.column.formatter ?
                        _this.column.formatter(element) :
                        numberPipe.transform(element, _this.column.grid.locale);
                }
                else {
                    filterListItem.value = element;
                    filterListItem.label = _this.column.formatter ?
                        _this.column.formatter(element) :
                        element;
                }
                filterListItem.indeterminate = false;
                _this.listData.push(filterListItem);
            }
            else {
                _this.containsNullOrEmpty = true;
            }
        });
    };
    IgxGridExcelStyleFilteringComponent.prototype.addSelectAllItem = function () {
        var selectAll = new FilterListItem();
        selectAll.isSelected = this.selectAllSelected;
        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;
        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;
        selectAll.indeterminate = this.selectAllIndeterminate;
        selectAll.isSpecial = true;
        this.listData.unshift(selectAll);
    };
    IgxGridExcelStyleFilteringComponent.prototype.addBlanksItem = function (shouldUpdateSelection) {
        var blanks = new FilterListItem();
        if (this.column.filteringExpressionsTree) {
            if (shouldUpdateSelection) {
                if (this.filterValues.has(null)) {
                    blanks.isSelected = true;
                }
                else {
                    blanks.isSelected = false;
                }
            }
        }
        else {
            blanks.isSelected = true;
        }
        blanks.value = null;
        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;
        blanks.indeterminate = false;
        blanks.isSpecial = true;
        blanks.isBlanks = true;
        this.listData.unshift(blanks);
    };
    IgxGridExcelStyleFilteringComponent.prototype.sortData = function (a, b) {
        var valueA = a.value;
        var valueB = b.value;
        if (typeof (a) === DataType.String) {
            valueA = a.value.toUpperCase();
            valueB = b.value.toUpperCase();
        }
        if (valueA < valueB) {
            return -1;
        }
        else if (valueA > valueB) {
            return 1;
        }
        else {
            return 0;
        }
    };
    IgxGridExcelStyleFilteringComponent.prototype.selectAllFilterItems = function () {
        this.listData.forEach(function (filterListItem) {
            filterListItem.isSelected = true;
            filterListItem.indeterminate = false;
        });
        this.excelStyleSearch.cdr.detectChanges();
    };
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "sortingTemplate", {
        // TODO: sort members by access modifier
        /**
         * @hidden @internal
         */
        get: function () {
            if (this.grid.excelStyleSortingTemplateDirective) {
                return this.grid.excelStyleSortingTemplateDirective.template;
            }
            else {
                return this.defaultExcelStyleSortingTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "movingTemplate", {
        /**
         * @hidden @internal
         */
        get: function () {
            if (this.grid.excelStyleMovingTemplateDirective) {
                return this.grid.excelStyleMovingTemplateDirective.template;
            }
            else {
                return this.defaultExcelStyleMovingTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "pinningTemplate", {
        /**
         * @hidden @internal
         */
        get: function () {
            if (this.grid.excelStylePinningTemplateDirective) {
                return this.grid.excelStylePinningTemplateDirective.template;
            }
            else {
                return this.defaultExcelStylePinningTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "hidingTemplate", {
        /**
         * @hidden @internal
         */
        get: function () {
            if (this.grid.excelStyleHidingTemplateDirective) {
                return this.grid.excelStyleHidingTemplateDirective.template;
            }
            else {
                return this.defaultExcelStyleHidingTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "selectingTemplate", {
        /**
         * @hidden @internal
         */
        get: function () {
            if (this.grid.excelStyleSelectingTemplateDirective) {
                return this.grid.excelStyleSelectingTemplateDirective.template;
            }
            else {
                return this.defaultExcelStyleSelectingTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridExcelStyleFilteringComponent.prototype, "applyButtonDisabled", {
        /**
         * @hidden @internal
         */
        get: function () {
            return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.applyFilter = function () {
        var _this = this;
        var filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);
        var selectedItems = this.listData.slice(1, this.listData.length).filter(function (el) { return el.isSelected === true; });
        var unselectedItem = this.listData.slice(1, this.listData.length).find(function (el) { return el.isSelected === false; });
        if (unselectedItem) {
            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent_1.filterOptimizationThreshold) {
                selectedItems.forEach(function (element) {
                    var condition = null;
                    if (element.value !== null && element.value !== undefined) {
                        if (_this.column.dataType === DataType.Boolean) {
                            condition = _this.createCondition(element.value.toString());
                        }
                        else {
                            condition = _this.createCondition('equals');
                        }
                    }
                    else {
                        condition = _this.createCondition('empty');
                    }
                    filterTree.filteringOperands.push({
                        condition: condition,
                        fieldName: _this.column.field,
                        ignoreCase: _this.column.filteringIgnoreCase,
                        searchVal: element.value
                    });
                });
            }
            else {
                var blanksItemIndex = selectedItems.findIndex(function (e) { return e.value === null || e.value === undefined; });
                var blanksItem = void 0;
                if (blanksItemIndex >= 0) {
                    blanksItem = selectedItems[blanksItemIndex];
                    selectedItems.splice(blanksItemIndex, 1);
                }
                filterTree.filteringOperands.push({
                    condition: this.createCondition('in'),
                    fieldName: this.column.field,
                    ignoreCase: this.column.filteringIgnoreCase,
                    searchVal: new Set(this.column.dataType === DataType.Date ?
                        selectedItems.map(function (d) { return new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString(); }) :
                        selectedItems.map(function (e) { return e.value; }))
                });
                if (blanksItem) {
                    filterTree.filteringOperands.push({
                        condition: this.createCondition('empty'),
                        fieldName: this.column.field,
                        ignoreCase: this.column.filteringIgnoreCase,
                        searchVal: blanksItem.value
                    });
                }
            }
            this.filteringService.filterInternal(this.column.field, filterTree);
            this.expressionsList = new Array();
            this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);
        }
        else {
            this.filteringService.clearFilter(this.column.field);
        }
        this.closeDropdown();
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.cancel = function () {
        if (!this.overlayComponentId) {
            this.init();
        }
        this.closeDropdown();
    };
    IgxGridExcelStyleFilteringComponent.prototype.closeDropdown = function () {
        if (this.overlayComponentId) {
            this.overlayService.hide(this.overlayComponentId);
            this.overlayComponentId = null;
        }
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.onKeyDown = function (eventArgs) {
        if (eventArgs.key === "Escape" /* ESCAPE */ || eventArgs.key === "Esc" /* ESCAPE_IE */) {
            this.closeDropdown();
        }
        eventArgs.stopPropagation();
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.clearFilter = function () {
        this.filteringService.clearFilter(this.column.field);
        this.selectAllFilterItems();
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.onClearFilterKeyDown = function (eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            this.clearFilter();
        }
    };
    /**
     * @hidden @internal
     */
    IgxGridExcelStyleFilteringComponent.prototype.showCustomFilterItem = function () {
        var exprTree = this.column.filteringExpressionsTree;
        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&
            !(exprTree.filteringOperands[0].condition &&
                exprTree.filteringOperands[0].condition.name === 'in');
    };
    IgxGridExcelStyleFilteringComponent.prototype.createCondition = function (conditionName) {
        switch (this.column.dataType) {
            case DataType.Boolean:
                return IgxBooleanFilteringOperand.instance().condition(conditionName);
            case DataType.Number:
                return IgxNumberFilteringOperand.instance().condition(conditionName);
            case DataType.Date:
                return IgxDateFilteringOperand.instance().condition(conditionName);
            default:
                return IgxStringFilteringOperand.instance().condition(conditionName);
        }
    };
    var IgxGridExcelStyleFilteringComponent_1;
    IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold = 2;
    IgxGridExcelStyleFilteringComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], IgxGridExcelStyleFilteringComponent.prototype, "column", null);
    __decorate([
        HostBinding('style.max-height')
    ], IgxGridExcelStyleFilteringComponent.prototype, "maxHeight", null);
    __decorate([
        HostBinding('class.igx-excel-filter')
    ], IgxGridExcelStyleFilteringComponent.prototype, "className", void 0);
    __decorate([
        HostBinding('class.igx-excel-filter--inline')
    ], IgxGridExcelStyleFilteringComponent.prototype, "inline", void 0);
    __decorate([
        ViewChild('dropdown', { read: ElementRef })
    ], IgxGridExcelStyleFilteringComponent.prototype, "mainDropdown", void 0);
    __decorate([
        ViewChild('subMenu', { read: IgxDropDownComponent })
    ], IgxGridExcelStyleFilteringComponent.prototype, "subMenu", void 0);
    __decorate([
        ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent })
    ], IgxGridExcelStyleFilteringComponent.prototype, "customDialog", void 0);
    __decorate([
        ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent })
    ], IgxGridExcelStyleFilteringComponent.prototype, "excelStyleSearch", void 0);
    __decorate([
        ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent })
    ], IgxGridExcelStyleFilteringComponent.prototype, "excelStyleSorting", void 0);
    __decorate([
        ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef, static: true })
    ], IgxGridExcelStyleFilteringComponent.prototype, "defaultExcelStyleSortingTemplate", void 0);
    __decorate([
        ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef, static: true })
    ], IgxGridExcelStyleFilteringComponent.prototype, "defaultExcelStyleHidingTemplate", void 0);
    __decorate([
        ViewChild('defaultExcelStyleSelectingTemplate', { read: TemplateRef, static: true })
    ], IgxGridExcelStyleFilteringComponent.prototype, "defaultExcelStyleSelectingTemplate", void 0);
    __decorate([
        ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef, static: true })
    ], IgxGridExcelStyleFilteringComponent.prototype, "defaultExcelStyleMovingTemplate", void 0);
    __decorate([
        ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef, static: true })
    ], IgxGridExcelStyleFilteringComponent.prototype, "defaultExcelStylePinningTemplate", void 0);
    IgxGridExcelStyleFilteringComponent = IgxGridExcelStyleFilteringComponent_1 = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: 'igx-grid-excel-style-filtering',
            template: "<ng-template #defaultExcelStyleSortingTemplate>\n    <igx-excel-style-sorting #excelStyleSorting\n        class=\"igx-excel-filter__sort\"\n        [column]=\"column\"\n        [grid]=\"grid\"\n        [displayDensity]=\"grid.displayDensity\">\n    </igx-excel-style-sorting>\n</ng-template>\n\n<ng-template #defaultExcelStyleMovingTemplate>\n    <igx-excel-style-column-moving\n        class=\"igx-excel-filter__move\"\n        [column]=\"column\"\n        [grid]=\"grid\"\n        [isColumnPinnable]=\"isColumnPinnable\"\n        [displayDensity]=\"grid.displayDensity\">\n    </igx-excel-style-column-moving>\n</ng-template>\n\n<ng-template #defaultExcelStylePinningTemplate>\n    <div [ngClass]=\"pinClass()\"\n        (click)=\"onPin()\"\n        tabindex=\"0\"\n        *ngIf=\"!column.pinned\">\n        <span>{{ grid.resourceStrings.igx_grid_excel_pin }}</span>\n        <igx-icon fontSet=\"filtering-icons\" name=\"pin\"></igx-icon>\n    </div>\n\n    <div class=\"igx-excel-filter__actions-unpin\"\n        (click)=\"onPin()\"\n        tabindex=\"0\"\n        *ngIf=\"column.pinned\">\n        <span>{{ grid.resourceStrings.igx_grid_excel_unpin }}</span>\n        <igx-icon fontSet=\"filtering-icons\" name=\"unpin\"></igx-icon>\n    </div>\n</ng-template>\n\n<ng-template #defaultExcelStyleHidingTemplate>\n    <div class=\"igx-excel-filter__actions-hide\"\n        tabindex=\"0\"\n        (click)=\"onHideToggle()\">\n        <span>{{ column.hidden ? grid.resourceStrings.igx_grid_excel_show : grid.resourceStrings.igx_grid_excel_hide }}</span>\n        <igx-icon>{{ column.hidden ? 'visibility' : 'visibility_off' }}</igx-icon>\n    </div>\n</ng-template>\n\n<ng-template #defaultExcelStyleSelectingTemplate>\n    <div [ngClass]=\"selectedClass()\"\n    tabindex=\"0\"\n    (click)=\"onSelect()\">\n        <span>{{grid.resourceStrings.igx_grid_excel_select }}</span>\n        <igx-icon fontSet=\"material\"  >done</igx-icon>\n    </div>\n</ng-template>\n\n<article #dropdown\n    *ngIf=\"column\"\n    class=\"igx-excel-filter__menu\"\n    [ngClass]=\"{\n        'igx-excel-filter__menu--cosy': grid.displayDensity === 'cosy',\n        'igx-excel-filter__menu--compact': grid.displayDensity === 'compact'\n    }\"\n    [id]=\"overlayComponentId\"\n    (keydown)=\"onKeyDown($event)\"\n    [style.min-height]=\"minHeight\"\n    [style.max-height]=\"maxHeight\">\n\n    <header class=\"igx-excel-filter__menu-header\">\n        <h4>{{ column.header || column.field }}</h4>\n        <div *ngIf=\"grid.displayDensity!=='comfortable'\" class=\"igx-excel-filter__menu-header-actions\">\n            <button *ngIf=\"columnSelectable()\" igxButton=\"icon\"\n            [displayDensity]=\"grid.displayDensity\" (click)=\"onSelect()\"\n            tabindex=\"0\" [ngClass]='selectedClass()'>\n             <igx-icon fontSet=\"material\">done</igx-icon>\n            </button>\n            <button *ngIf=\"!column.disablePinning && !column.pinned\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                (click)=\"onPin()\"\n                [disabled]=\"!isColumnPinnable\"\n                tabindex=\"0\">\n                <igx-icon fontSet=\"filtering-icons\" name=\"pin\"></igx-icon>\n            </button>\n            <button *ngIf=\"!column.disablePinning && column.pinned\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                (click)=\"onPin()\"\n                tabindex=\"0\">\n                <igx-icon fontSet=\"filtering-icons\" name=\"unpin\"></igx-icon>\n            </button>\n            <button *ngIf=\"!column.disableHiding\"\n                igxButton=\"icon\"\n                [displayDensity]=\"grid.displayDensity\"\n                tabindex=\"0\"\n                (click)=\"onHideToggle()\">\n                <igx-icon>{{ column.hidden ? 'visibility' : 'visibility_off' }}</igx-icon>\n            </button>\n        </div>\n    </header>\n\n    <div *ngIf=\"column.sortable\">\n        <ng-container *ngTemplateOutlet=\"sortingTemplate\"></ng-container>\n    </div>\n\n    <section class=\"igx-excel-filter__actions\">\n\n        <div *ngIf=\"column.movable\">\n            <ng-container *ngTemplateOutlet=\"movingTemplate\"></ng-container>\n        </div>\n\n        <div *ngIf=\"columnSelectable() && grid.displayDensity==='comfortable'\">\n            <ng-container *ngTemplateOutlet=\"selectingTemplate\"></ng-container>\n        </div>\n\n        <div *ngIf=\"!column.disablePinning && grid.displayDensity==='comfortable'\">\n            <ng-container *ngTemplateOutlet=\"pinningTemplate\"></ng-container>\n        </div>\n\n        <div *ngIf=\"!column.disableHiding && grid.displayDensity==='comfortable'\">\n            <ng-container *ngTemplateOutlet=\"hidingTemplate\"></ng-container>\n        </div>\n\n        <div\n            tabindex=\"0\"\n            [ngClass]=\"clearFilterClass()\"\n            (keydown)=\"onClearFilterKeyDown($event)\"\n            (click)=\"clearFilter()\">\n            <span>{{ grid.resourceStrings.igx_grid_excel_filter_clear }}</span>\n            <igx-icon>clear</igx-icon>\n        </div>\n\n        <div\n            tabindex=\"0\"\n            class=\"igx-excel-filter__actions-filter\"\n            (keydown)=\"onTextFilterKeyDown($event)\"\n            (click)=\"onTextFilterClick($event)\"\n            [igxDropDownItemNavigation]=\"subMenu\" >\n            <span>{{ subMenuText }}</span>\n            <igx-icon>keyboard_arrow_right</igx-icon>\n    </div>\n    </section>\n\n    <igx-excel-style-search\n        class=\"igx-excel-filter__menu-main\"\n        #excelStyleSearch\n        [column]=\"column\"\n        [data]=\"listData\"\n        [grid]=\"grid\"\n        [inline]=\"inline\"\n        [displayDensity]=\"grid.displayDensity\">\n    </igx-excel-style-search>\n\n    <footer class=\"igx-excel-filter__menu-footer\">\n        <button igxButton [displayDensity]=\"grid.displayDensity\" (click)=\"cancel()\">{{ grid.resourceStrings.igx_grid_excel_cancel }}</button>\n        <button igxButton=\"raised\" [displayDensity]=\"grid.displayDensity\" [disabled]=\"applyButtonDisabled\" (click)=\"applyFilter()\">{{ grid.resourceStrings.igx_grid_excel_apply }}</button>\n    </footer>\n</article>\n\n<igx-drop-down\n    *ngIf=\"column\"\n    #subMenu\n    [maxHeight]=\"'397px'\"\n    [displayDensity]=\"grid.displayDensity\"\n    (onSelection)=\"onSubMenuSelection($event)\"\n    (onClosed)=\"onSubMenuClosed()\">\n    <div>\n        <igx-drop-down-item\n        *ngFor=\"let condition of conditions\"\n        [value]=\"condition\">\n            <igx-icon fontSet=\"filtering-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n            <span style=\"margin-left: 16px\">{{ translateCondition(condition) }}</span>\n        </igx-drop-down-item>\n        <igx-drop-down-item *ngIf=\"showCustomFilterItem()\">\n            <igx-icon>filter_list</igx-icon>\n            <span style=\"margin-left: 16px\">{{ grid.resourceStrings.igx_grid_excel_custom_filter }}</span>\n        </igx-drop-down-item>\n    </div>\n</igx-drop-down>\n\n<igx-excel-style-custom-dialog\n    *ngIf=\"column\"\n    #customDialog\n    [column]=\"column\"\n    [filteringService]=\"filteringService\"\n    [overlayComponentId]=\"overlayComponentId\"\n    [overlayService]=\"overlayService\"\n    [displayDensity]=\"grid.displayDensity\">\n</igx-excel-style-custom-dialog>\n"
        })
    ], IgxGridExcelStyleFilteringComponent);
    return IgxGridExcelStyleFilteringComponent;
}());
export { IgxGridExcelStyleFilteringComponent };
//# sourceMappingURL=data:application/json;base64,