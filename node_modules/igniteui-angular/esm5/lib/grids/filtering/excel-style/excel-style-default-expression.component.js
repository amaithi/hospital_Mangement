import { __decorate } from "tslib";
import { Component, ChangeDetectionStrategy, AfterViewInit, Input, Output, EventEmitter, ChangeDetectorRef, ViewChild } from '@angular/core';
import { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';
import { IgxDropDownComponent } from '../../../drop-down/public_api';
import { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/public_api';
import { DataType, DataUtil } from '../../../data-operations/data-util';
import { ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/public_api';
/**
 * @hidden
 */
var IgxExcelStyleDefaultExpressionComponent = /** @class */ (function () {
    function IgxExcelStyleDefaultExpressionComponent(cdr) {
        this.cdr = cdr;
        this._dropDownOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new ConnectedPositioningStrategy(),
            scrollStrategy: new CloseScrollStrategy()
        };
        this.onExpressionRemoved = new EventEmitter();
        this.onLogicOperatorChanged = new EventEmitter();
    }
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "inputValuesElement", {
        get: function () {
            return this.inputValuesDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "isLast", {
        get: function () {
            return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "isSingle", {
        get: function () {
            return this.expressionsList.length === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "inputConditionsPlaceholder", {
        get: function () {
            return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "inputValuePlaceholder", {
        get: function () {
            return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "type", {
        get: function () {
            switch (this.column.dataType) {
                case DataType.Number:
                    return 'number';
                default:
                    return 'text';
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxExcelStyleDefaultExpressionComponent.prototype.ngAfterViewInit = function () {
        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;
        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.focus = function () {
        var _this = this;
        // use requestAnimationFrame to focus the values input because when initializing the component
        // datepicker's input group is not yet fully initialized
        requestAnimationFrame(function () { return _this.inputValuesElement.focus(); });
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.isConditionSelected = function (conditionName) {
        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.getConditionName = function (condition) {
        return condition ? this.translateCondition(condition.name) : null;
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.getInputWidth = function () {
        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';
    };
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "conditions", {
        get: function () {
            return this.column.filters.conditionList();
        },
        enumerable: true,
        configurable: true
    });
    IgxExcelStyleDefaultExpressionComponent.prototype.translateCondition = function (value) {
        return this.grid.resourceStrings["igx_grid_filter_" + this.getCondition(value).name] || value;
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.getIconName = function () {
        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {
            return this.getCondition(this.conditions[0]).iconName;
        }
        else if (!this.expressionUI.expression.condition) {
            return 'filter_list';
        }
        else {
            return this.expressionUI.expression.condition.iconName;
        }
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.toggleCustomDialogDropDown = function () {
        this.dropdownConditions.toggle(this._dropDownOverlaySettings);
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.getCondition = function (value) {
        return this.column.filters.condition(value);
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.onConditionsChanged = function (eventArgs) {
        var value = eventArgs.newSelection.value;
        this.expressionUI.expression.condition = this.getCondition(value);
        this.focus();
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.onValuesInput = function (eventArgs) {
        this.expressionUI.expression.searchVal = DataUtil.parseValue(this.column.dataType, eventArgs.target.value);
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.onLogicOperatorButtonClicked = function (eventArgs, buttonIndex) {
        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {
            eventArgs.stopPropagation();
            this.logicOperatorButtonGroup.selectButton(buttonIndex);
        }
        else {
            this.onLogicOperatorChanged.emit({
                target: this.expressionUI,
                newValue: buttonIndex
            });
        }
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.onLogicOperatorKeyDown = function (eventArgs, buttonIndex) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            this.logicOperatorButtonGroup.selectButton(buttonIndex);
            this.onLogicOperatorChanged.emit({
                target: this.expressionUI,
                newValue: buttonIndex
            });
        }
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.onRemoveButtonClick = function () {
        this.onExpressionRemoved.emit(this.expressionUI);
    };
    IgxExcelStyleDefaultExpressionComponent.prototype.onInputConditionsKeyDown = function (eventArgs) {
        if (eventArgs.altKey && (eventArgs.key === "ArrowDown" /* DOWN_ARROW */ || eventArgs.key === "Down" /* DOWN_ARROW_IE */)) {
            this.toggleCustomDialogDropDown();
        }
        if (eventArgs.key === "Tab" /* TAB */ && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {
            eventArgs.preventDefault();
        }
        eventArgs.stopPropagation();
    };
    IgxExcelStyleDefaultExpressionComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "column", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "expressionUI", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "expressionsList", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "grid", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "displayDensity", void 0);
    __decorate([
        Output()
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "onExpressionRemoved", void 0);
    __decorate([
        Output()
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "onLogicOperatorChanged", void 0);
    __decorate([
        ViewChild('inputGroupConditions', { read: IgxInputGroupComponent, static: true })
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "inputGroupConditions", void 0);
    __decorate([
        ViewChild('inputValues', { read: IgxInputDirective, static: true })
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "inputValuesDirective", void 0);
    __decorate([
        ViewChild('dropdownConditions', { read: IgxDropDownComponent, static: true })
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "dropdownConditions", void 0);
    __decorate([
        ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent })
    ], IgxExcelStyleDefaultExpressionComponent.prototype, "logicOperatorButtonGroup", void 0);
    IgxExcelStyleDefaultExpressionComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: 'igx-excel-style-default-expression',
            template: "<igx-drop-down\n    #dropdownConditions\n    [maxHeight]=\"'200px'\"\n    [width]=\"getInputWidth()\"\n    [displayDensity]=\"displayDensity\"\n    (onSelection)=\"onConditionsChanged($event)\">\n    <igx-drop-down-item *ngFor=\"let condition of conditions\" [value]=\"condition\" [selected]=\"isConditionSelected(condition)\">\n        <igx-icon fontSet=\"filtering-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n        <span>{{ translateCondition(condition) }}</span>\n    </igx-drop-down-item>\n</igx-drop-down>\n\n<igx-input-group\n    #inputGroupConditions\n    (click)=\"toggleCustomDialogDropDown()\"\n    type=\"box\"\n    [displayDensity]=\"displayDensity\">\n\n    <igx-prefix>\n        <igx-icon *ngIf=\"expressionUI.expression.condition\" fontSet=\"filtering-icons\" [name]=\"getIconName()\"></igx-icon>\n        <igx-icon *ngIf=\"!expressionUI.expression.condition\">filter_list</igx-icon>\n    </igx-prefix>\n\n    <input\n        igxInput\n        (keydown)=\"onInputConditionsKeyDown($event)\"\n        [igxDropDownItemNavigation]=\"dropdownConditions\"\n        tabindex=\"0\"\n        [placeholder]=\"inputConditionsPlaceholder\"\n        autocomplete=\"off\"\n        [value]=\"getConditionName(expressionUI.expression.condition)\"\n        [readonly]=\"true\"\n    />\n</igx-input-group>\n\n<igx-input-group #inputGroupValues type=\"box\" [displayDensity]=\"displayDensity\">\n    <input\n        #inputValues\n        igxInput\n        [type]=\"type\"\n        tabindex=\"0\"\n        [placeholder]=\"inputValuePlaceholder\"\n        [disabled]=\"expressionUI.expression.condition && expressionUI.expression.condition.isUnary\"\n        autocomplete=\"off\"\n        [value]=\"expressionUI.expression.searchVal\"\n        (input)=\"onValuesInput($event)\"\n    />\n</igx-input-group>\n\n<button (click)=\"onRemoveButtonClick()\" igxButton=\"icon\" [displayDensity]=\"displayDensity\" *ngIf=\"!isSingle\">\n    <igx-icon>cancel</igx-icon>\n</button>\n\n<igx-buttongroup #logicOperatorButtonGroup\n    *ngIf=\"!isLast\"\n    [multiSelection]=\"false\">\n    <span igxButton [displayDensity]=\"displayDensity\"\n        tabindex=\"0\"\n        #andButton\n        (keydown)=\"onLogicOperatorKeyDown($event, 0)\"\n        [selected]=\"expressionUI.afterOperator === 0\"\n        type=\"button\"\n        (click)=\"onLogicOperatorButtonClicked($event, 0)\">\n        {{ grid.resourceStrings.igx_grid_filter_operator_and }}\n    </span>\n\n    <span igxButton [displayDensity]=\"displayDensity\"\n        tabindex=\"0\"\n        #orButton\n        (keydown)=\"onLogicOperatorKeyDown($event, 1)\"\n        [selected]=\"expressionUI.afterOperator === 1\"\n        type=\"button\"\n        (click)=\"onLogicOperatorButtonClicked($event, 1)\">\n        {{ grid.resourceStrings.igx_grid_filter_operator_or }}\n    </span>\n</igx-buttongroup>\n"
        })
    ], IgxExcelStyleDefaultExpressionComponent);
    return IgxExcelStyleDefaultExpressionComponent;
}());
export { IgxExcelStyleDefaultExpressionComponent };
//# sourceMappingURL=data:application/json;base64,