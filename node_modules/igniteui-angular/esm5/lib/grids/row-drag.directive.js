import { __decorate, __extends } from "tslib";
import { Directive, Input, OnDestroy, NgModule, TemplateRef } from '@angular/core';
import { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';
import { fromEvent } from 'rxjs';
var ghostBackgroundClass = 'igx-grid__tr--ghost';
var gridCellClass = 'igx-grid__td';
var rowSelectedClass = 'igx-grid__tr--selected';
var cellSelectedClass = 'igx-grid__td--selected';
var cellActiveClass = 'igx-grid__td--active';
/**
 * @hidden
 */
var IgxRowDragDirective = /** @class */ (function (_super) {
    __extends(IgxRowDragDirective, _super);
    function IgxRowDragDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._rowDragStarted = false;
        _this.transitionEndEvent = function (evt) {
            if (_this.ghostElement) {
                _this.ghostElement.removeEventListener('transitionend', _this.transitionEndEvent, false);
            }
            _this.endDragging();
        };
        return _this;
    }
    Object.defineProperty(IgxRowDragDirective.prototype, "data", {
        get: function () {
            return this.row;
        },
        set: function (val) {
            this.row = val;
        },
        enumerable: true,
        configurable: true
    });
    IgxRowDragDirective.prototype.onPointerDown = function (event) {
        event.preventDefault();
        this._rowDragStarted = false;
        this._removeOnDestroy = false;
        _super.prototype.onPointerDown.call(this, event);
    };
    IgxRowDragDirective.prototype.onPointerMove = function (event) {
        var _this = this;
        _super.prototype.onPointerMove.call(this, event);
        if (this._dragStarted && !this._rowDragStarted) {
            this._rowDragStarted = true;
            var args = {
                dragDirective: this,
                dragData: this.row,
                cancel: false,
                owner: this.row.grid
            };
            this.row.grid.onRowDragStart.emit(args);
            if (args.cancel) {
                this.ghostElement.parentNode.removeChild(this.ghostElement);
                this.ghostElement = null;
                this._dragStarted = false;
                this._clicked = false;
                return;
            }
            this.row.dragging = true;
            this.row.grid.rowDragging = true;
            this.row.grid.markForCheck();
            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe(function (ev) {
                if (ev.key === "Escape" /* ESCAPE */ || ev.key === "Esc" /* ESCAPE_IE */) {
                    _this._lastDropArea = false;
                    _this.onPointerUp(event);
                }
            });
        }
    };
    IgxRowDragDirective.prototype.onPointerUp = function (event) {
        var _this = this;
        if (!this._clicked) {
            return;
        }
        var args = {
            dragDirective: this,
            dragData: this.row,
            animation: false,
            owner: this.row.grid
        };
        this.zone.run(function () {
            _this.row.grid.onRowDragEnd.emit(args);
        });
        var dropArea = this._lastDropArea;
        _super.prototype.onPointerUp.call(this, event);
        if (!dropArea && this.ghostElement) {
            this.ghostElement.addEventListener('transitionend', this.transitionEndEvent, false);
        }
        else {
            this.endDragging();
        }
    };
    IgxRowDragDirective.prototype.createGhost = function (pageX, pageY) {
        this.row.grid.endEdit(true);
        this.row.grid.markForCheck();
        this.ghostContext = {
            $implicit: this.row.rowData,
            data: this.row.rowData,
            grid: this.row.grid
        };
        _super.prototype.createGhost.call(this, pageX, pageY, this.row.nativeElement);
        // check if there is an expander icon and create the ghost at the corresponding position
        if (this.isHierarchicalGrid) {
            var row = this.row;
            if (row.expander) {
                var expanderWidth = row.expander.nativeElement.getBoundingClientRect().width;
                this._ghostHostX += expanderWidth;
            }
        }
        var ghost = this.ghostElement;
        var gridRect = this.row.grid.nativeElement.getBoundingClientRect();
        var rowRect = this.row.nativeElement.getBoundingClientRect();
        ghost.style.overflow = 'hidden';
        ghost.style.width = gridRect.width + 'px';
        ghost.style.height = rowRect.height + 'px';
        this.renderer.addClass(ghost, ghostBackgroundClass);
        this.renderer.removeClass(ghost, rowSelectedClass);
        var ghostCells = ghost.getElementsByClassName(gridCellClass);
        for (var index = 0; index < ghostCells.length; index++) {
            this.renderer.removeClass(ghostCells[index], cellSelectedClass);
            this.renderer.removeClass(ghostCells[index], cellActiveClass);
        }
    };
    IgxRowDragDirective.prototype._unsubscribe = function () {
        if (this.subscription$ && !this.subscription$.closed) {
            this.subscription$.unsubscribe();
        }
    };
    IgxRowDragDirective.prototype.endDragging = function () {
        this.onTransitionEnd(null);
        this.row.dragging = false;
        this.row.grid.rowDragging = false;
        this.row.grid.markForCheck();
        this._unsubscribe();
    };
    Object.defineProperty(IgxRowDragDirective.prototype, "isHierarchicalGrid", {
        get: function () {
            return this.row.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input('igxRowDrag')
    ], IgxRowDragDirective.prototype, "data", null);
    IgxRowDragDirective = __decorate([
        Directive({
            selector: '[igxRowDrag]'
        })
    ], IgxRowDragDirective);
    return IgxRowDragDirective;
}(IgxDragDirective));
export { IgxRowDragDirective };
/**
 * @hidden
 */
var IgxDragIndicatorIconDirective = /** @class */ (function () {
    function IgxDragIndicatorIconDirective() {
    }
    IgxDragIndicatorIconDirective = __decorate([
        Directive({
            selector: '[igxDragIndicatorIcon]'
        })
    ], IgxDragIndicatorIconDirective);
    return IgxDragIndicatorIconDirective;
}());
export { IgxDragIndicatorIconDirective };
/**
 * @hidden
 */
var IgxRowDragGhostDirective = /** @class */ (function () {
    function IgxRowDragGhostDirective(templateRef) {
        this.templateRef = templateRef;
    }
    IgxRowDragGhostDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxRowDragGhostDirective = __decorate([
        Directive({
            selector: '[igxRowDragGhost]'
        })
    ], IgxRowDragGhostDirective);
    return IgxRowDragGhostDirective;
}());
export { IgxRowDragGhostDirective };
var IgxRowDragModule = /** @class */ (function () {
    function IgxRowDragModule() {
    }
    IgxRowDragModule = __decorate([
        NgModule({
            declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],
            entryComponents: [],
            exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],
            imports: []
        })
    ], IgxRowDragModule);
    return IgxRowDragModule;
}());
export { IgxRowDragModule };
//# sourceMappingURL=data:application/json;base64,