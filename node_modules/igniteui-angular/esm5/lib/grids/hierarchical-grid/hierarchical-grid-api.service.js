import { __decorate, __extends } from "tslib";
import { Subject } from 'rxjs';
import { GridBaseAPIService } from '../grid/public_api';
import { Injectable } from '@angular/core';
var IgxHierarchicalGridAPIService = /** @class */ (function (_super) {
    __extends(IgxHierarchicalGridAPIService, _super);
    function IgxHierarchicalGridAPIService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.childRowIslands = new Map();
        _this.childGrids = new Map();
        return _this;
    }
    IgxHierarchicalGridAPIService.prototype.registerChildRowIsland = function (rowIsland) {
        this.childRowIslands.set(rowIsland.key, rowIsland);
        this.destroyMap.set(rowIsland.key, new Subject());
    };
    IgxHierarchicalGridAPIService.prototype.unsetChildRowIsland = function (rowIsland) {
        this.childGrids.delete(rowIsland.key);
        this.childRowIslands.delete(rowIsland.key);
        this.destroyMap.delete(rowIsland.key);
    };
    IgxHierarchicalGridAPIService.prototype.getChildRowIsland = function (key) {
        return this.childRowIslands.get(key);
    };
    IgxHierarchicalGridAPIService.prototype.getChildGrid = function (path) {
        var currPath = path;
        var grid;
        var pathElem = currPath.shift();
        var childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);
        if (childrenForLayout) {
            var childGrid = childrenForLayout.get(pathElem.rowID);
            if (currPath.length === 0) {
                grid = childGrid;
            }
            else {
                grid = childGrid.hgridAPI.getChildGrid(currPath);
            }
        }
        return grid;
    };
    IgxHierarchicalGridAPIService.prototype.getChildGrids = function (inDepth) {
        var allChildren = [];
        this.childGrids.forEach(function (layoutMap) {
            layoutMap.forEach(function (grid) {
                allChildren.push(grid);
                if (inDepth) {
                    var children = grid.hgridAPI.getChildGrids(inDepth);
                    children.forEach(function (item) {
                        allChildren.push(item);
                    });
                }
            });
        });
        return allChildren;
    };
    IgxHierarchicalGridAPIService.prototype.getParentRowId = function (childGrid) {
        var rowID;
        this.childGrids.forEach(function (layoutMap) {
            layoutMap.forEach(function (grid, key) {
                if (grid === childGrid) {
                    rowID = key;
                    return;
                }
            });
        });
        return rowID;
    };
    IgxHierarchicalGridAPIService.prototype.registerChildGrid = function (parentRowID, rowIslandKey, grid) {
        var childrenForLayout = this.childGrids.get(rowIslandKey);
        if (!childrenForLayout) {
            this.childGrids.set(rowIslandKey, new Map());
            childrenForLayout = this.childGrids.get(rowIslandKey);
        }
        childrenForLayout.set(parentRowID, grid);
    };
    IgxHierarchicalGridAPIService.prototype.getChildGridsForRowIsland = function (rowIslandKey) {
        var childrenForLayout = this.childGrids.get(rowIslandKey);
        var children = [];
        if (childrenForLayout) {
            childrenForLayout.forEach(function (child) {
                children.push(child);
            });
        }
        return children;
    };
    IgxHierarchicalGridAPIService.prototype.getChildGridByID = function (rowIslandKey, rowID) {
        var childrenForLayout = this.childGrids.get(rowIslandKey);
        return childrenForLayout.get(rowID);
    };
    IgxHierarchicalGridAPIService.prototype.get_row_expansion_state = function (record) {
        var inState;
        if (record.childGridsData !== undefined) {
            var ri = record.rowID;
            var rec = this.grid.primaryKey ? this.get_rec_by_id(ri) : ri;
            inState = !!_super.prototype.get_row_expansion_state.call(this, rec);
        }
        else {
            inState = !!_super.prototype.get_row_expansion_state.call(this, record);
        }
        return inState && this.grid.childLayoutList.length !== 0;
    };
    IgxHierarchicalGridAPIService.prototype.allow_expansion_state_change = function (rowID, expanded) {
        var rec = this.get_rec_by_id(rowID);
        var grid = this.grid;
        if (grid.hasChildrenKey && !rec[grid.hasChildrenKey]) {
            return false;
        }
        return !!rec && this.grid.expansionStates.get(rowID) !== expanded;
    };
    IgxHierarchicalGridAPIService.prototype.get_rec_by_id = function (rowID) {
        var data = this.get_all_data(false);
        var index = this.get_row_index_in_data(rowID);
        return data[index];
    };
    IgxHierarchicalGridAPIService = __decorate([
        Injectable()
    ], IgxHierarchicalGridAPIService);
    return IgxHierarchicalGridAPIService;
}(GridBaseAPIService));
export { IgxHierarchicalGridAPIService };
//# sourceMappingURL=data:application/json;base64,