import { __decorate, __extends } from "tslib";
import { Component, ContentChildren, ChangeDetectionStrategy, Input, forwardRef, QueryList, Output, EventEmitter } from '@angular/core';
import { IgxColumnComponent } from './column.component';
import { flatten } from '../../core/utils';
var IgxColumnGroupComponent = /** @class */ (function (_super) {
    __extends(IgxColumnGroupComponent, _super);
    function IgxColumnGroupComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.children = new QueryList();
        /**
         * Sets/gets whether the column group is `searchable`.
         * Default value is `true`.
         * ```typescript
         * let isSearchable =  this.columnGroup.searchable;
         * ```
         * ```html
         *  <igx-column-group [searchable] = "false"></igx-column-group>
         * ```
         * @memberof IgxColumnGroupComponent
         */
        _this.searchable = true;
        /**
         * @hidden
         */
        _this.hiddenChange = new EventEmitter();
        return _this;
        // constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & IGridDataBindable>, public cdr: ChangeDetectorRef) {
        //     // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        //     super(gridAPI, cdr);
        // }
    }
    IgxColumnGroupComponent_1 = IgxColumnGroupComponent;
    Object.defineProperty(IgxColumnGroupComponent.prototype, "collapsible", {
        get: function () {
            return this._collapsible && this.checkCollapsibleState();
        },
        /**
         * Set if the column group is collapsible.
         * Default value is `false`
         * ```html
         *  <igx-column-group [collapsible] = "true"></igx-column-group>
         * ```
         * @memberof IgxColumnGroupComponent
         */
        set: function (value) {
            this._collapsible = value;
            this.collapsibleChange.emit(this._collapsible);
            if (this.children && !this.hidden) {
                if (this._collapsible) {
                    this.setExpandCollapseState();
                }
                else {
                    this.children.forEach(function (child) { return child.hidden = false; });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "expanded", {
        get: function () {
            return this._expanded;
        },
        /**
         * Set whether the group is expanded or collapsed initially.
         * Applied only if the collapsible property is set to `true`
         * Default value is `true`
         * ```html
         *  const state = false
         *  <igx-column-group [(expand)] = "state"></igx-column-group>
         * ```
         * @memberof IgxColumnGroupComponent
         */
        set: function (value) {
            this._expanded = value;
            this.expandedChange.emit(this._expanded);
            if (!this.collapsible) {
                return;
            }
            if (!this.hidden && this.children) {
                this.setExpandCollapseState();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "summaries", {
        /**
         * Gets the column group `summaries`.
         * ```typescript
         * let columnGroupSummaries = this.columnGroup.summaries;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return this._summaries;
        },
        /**
         * Sets the column group `summaries`.
         * ```typescript
         * this.columnGroup.summaries = IgxNumberSummaryOperand;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        set: function (classRef) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "filters", {
        /**
         * Gets the column group `filters`.
         * ```typescript
         * let columnGroupFilters = this.columnGroup.filters;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return this._filters;
        },
        /**
         * Sets the column group `filters`.
         * ```typescript
         * this.columnGroup.filters = IgxStringFilteringOperand;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        set: function (classRef) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "selectable", {
        /**
         * Returns if the column group is selectable
         * ```typescript
         * let columnGroupSelectable = this.columnGroup.selectable;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return this.children && this.children.some(function (child) { return child.selectable; });
        },
        set: function (value) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "bodyTemplate", {
        /**
         * Returns a reference to the body template.
         * ```typescript
         * let bodyTemplate = this.columnGroup.bodyTemplate;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return this._bodyTemplate;
        },
        /**
         * @hidden
         */
        set: function (template) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "collapsibleIndicatorTemplate", {
        /**
         * Allows you to define a custom template for expand/collapse indicator
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return this._collapseIndicatorTemplate;
        },
        set: function (template) {
            this._collapseIndicatorTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "inlineEditorTemplate", {
        /**
         * Returns a reference to the inline editor template.
         * ```typescript
         * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return this._inlineEditorTemplate;
        },
        /**
         * @hidden
         */
        set: function (template) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "cells", {
        /**
         * Gets the column group cells.
         * ```typescript
         * let columnCells = this.columnGroup.cells;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "hidden", {
        /**
         * Gets whether the column group is hidden.
         * ```typescript
         * let isHidden = this.columnGroup.hidden;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return this.allChildren.every(function (c) { return c.hidden; });
        },
        /**
         * Sets the column group hidden property.
         * ```html
         * <igx-column [hidden] = "true"></igx-column>
         * ```
         *
         * Two-way data binding
         * ```html
         * <igx-column [(hidden)] = "model.columns[0].isHidden"></igx-column>
         * ```
         * @memberof IgxColumnGroupComponent
         */
        set: function (value) {
            var _this = this;
            this._hidden = value;
            this.hiddenChange.emit(this._hidden);
            if (this._hidden || !this.collapsible) {
                this.children.forEach(function (child) { return child.hidden = _this._hidden; });
            }
            else {
                this.children.forEach(function (c) {
                    if (c.visibleWhenCollapsed === undefined) {
                        c.hidden = false;
                        return;
                    }
                    c.hidden = _this.expanded ? c.visibleWhenCollapsed : !c.visibleWhenCollapsed;
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "selected", {
        /**
         * Returns if the column group is selected.
         * ```typescript
         * let isSelected = this.columnGroup.selected;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            var selectableChildren = this.allChildren.filter(function (c) { return !c.columnGroup && c.selectable && !c.hidden; });
            return selectableChildren.length > 0 && selectableChildren.every(function (c) { return c.selected; });
        },
        /**
         * Select/deselect the column group.
         * ```typescript
         * this.columnGroup.selected = true;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        set: function (value) {
            if (this.selectable) {
                this.children.forEach(function (c) {
                    c.selected = value;
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxColumnGroupComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        /*
            @ContentChildren with descendants still returns the `parent`
            component in the query list.
        */
        if (this.headTemplate && this.headTemplate.length) {
            this._headerTemplate = this.headTemplate.toArray()[0].template;
        }
        if (this.collapseIndicatorTemplate) {
            this._collapseIndicatorTemplate = this.collapseIndicatorTemplate.template;
        }
        // currently only ivy fixes the issue, we have to slice only if the first child is group
        if (this.children.first === this) {
            this.children.reset(this.children.toArray().slice(1));
        }
        this.children.forEach(function (child) {
            child.parent = _this;
        });
        if (this.collapsible) {
            this.setExpandCollapseState();
        }
    };
    Object.defineProperty(IgxColumnGroupComponent.prototype, "allChildren", {
        /**
         * Returns the children columns collection.
         * ```typescript
         * let columns =  this.columnGroup.allChildren;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return flatten(this.children.toArray());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "columnGroup", {
        /**
         * Returns a boolean indicating if the column is a `ColumnGroup`.
         * ```typescript
         * let isColumnGroup =  this.columnGroup.columnGroup
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "columnLayout", {
        /**
         * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.
         * ```typescript
         * let columnGroup =  this.column.columnGroup;
         * ```
         * @memberof IgxColumnComponent
         */
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "width", {
        /**
         * Gets the width of the column group.
         * ```typescript
         * let columnGroupWidth = this.columnGroup.width;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            var isChildrenWidthInPercent = false, width;
            width = "" + this.children.reduce(function (acc, val) {
                if (val.hidden) {
                    return acc;
                }
                if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {
                    isChildrenWidthInPercent = true;
                    return acc + parseInt(val.width, 10);
                }
                return acc + parseInt(val.calcWidth, 10);
            }, 0);
            return isChildrenWidthInPercent ? width + '%' : width + 'px';
        },
        set: function (val) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "applySelectableClass", {
        /**
         * @hidden
         */
        get: function () {
            return this._applySelectableClass;
        },
        /**
         * @hidden
         */
        set: function (value) {
            if (this.selectable) {
                this._applySelectableClass = value;
                this.children.forEach(function (c) {
                    c.applySelectableClass = value;
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    var IgxColumnGroupComponent_1;
    __decorate([
        ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })
    ], IgxColumnGroupComponent.prototype, "children", void 0);
    __decorate([
        Input()
    ], IgxColumnGroupComponent.prototype, "collapsible", null);
    __decorate([
        Input()
    ], IgxColumnGroupComponent.prototype, "expanded", null);
    __decorate([
        Input()
    ], IgxColumnGroupComponent.prototype, "summaries", null);
    __decorate([
        Input()
    ], IgxColumnGroupComponent.prototype, "searchable", void 0);
    __decorate([
        Input()
    ], IgxColumnGroupComponent.prototype, "filters", null);
    __decorate([
        Input()
    ], IgxColumnGroupComponent.prototype, "collapsibleIndicatorTemplate", null);
    __decorate([
        Input()
    ], IgxColumnGroupComponent.prototype, "hidden", null);
    __decorate([
        Output()
    ], IgxColumnGroupComponent.prototype, "hiddenChange", void 0);
    IgxColumnGroupComponent = IgxColumnGroupComponent_1 = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(function () { return IgxColumnGroupComponent_1; }) }],
            selector: 'igx-column-group',
            template: ""
        })
    ], IgxColumnGroupComponent);
    return IgxColumnGroupComponent;
}(IgxColumnComponent));
export { IgxColumnGroupComponent };
//# sourceMappingURL=data:application/json;base64,