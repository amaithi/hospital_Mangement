import { __decorate, __extends, __values } from "tslib";
import { ChangeDetectorRef, HostBinding, Input, OnDestroy, Directive } from '@angular/core';
import { IgxStringFilteringOperand } from '../data-operations/filtering-condition';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { FilteringStrategy } from '../data-operations/filtering-strategy';
import { ColumnDisplayOrder } from './common/enums';
var CustomFilteringStrategy = /** @class */ (function (_super) {
    __extends(CustomFilteringStrategy, _super);
    function CustomFilteringStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomFilteringStrategy.prototype.filter = function (data, expressionsTree) {
        var _this = this;
        var res = [];
        data.forEach(function (item) {
            if (_this.matchRecord(item, expressionsTree.filteringOperands[0])) {
                res.push(item);
            }
            else if (item.column.columnGroup) {
                if (item.column.allChildren.findIndex(function (child) {
                    return _this.matchRecord(child, expressionsTree.filteringOperands[1]) ||
                        _this.matchRecord(child, expressionsTree.filteringOperands[2]);
                }) > -1) {
                    res.push(item);
                }
            }
        });
        return res;
    };
    return CustomFilteringStrategy;
}(FilteringStrategy));
/** @hidden */
var ColumnChooserBaseDirective = /** @class */ (function () {
    function ColumnChooserBaseDirective(cdr) {
        this.cdr = cdr;
        /**
         * Hides/ shows the filtering columns input from the UI.
         */
        this.disableFilter = false;
        /**
         * Access to the columnHidingUI:
         * ```typescript
         * @ViewChild('column-hiding-component')
         *  public columnHidingUI: IgxColumnHidingComponent;
         * ```
         * Sets/gets the max height of the column area.
         * ```typescript
         * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;
         * ```
         *
         * ```html
         * <igx-column-hiding [columnsAreaMaxHeight]="200px"></igx-column-hiding>
         * ```
         */
        this.columnsAreaMaxHeight = '100%';
        /**
         * Sets/Gets the css class selector.
         * By default the value of the `class` attribute is `"igx-column-hiding"`.
         * ```typescript
         * let cssCLass =  this.columnHidingUI.cssClass;
         * ```
         * ```typescript
         * this.columnHidingUI.cssClass = 'column-chooser';
         * ```
         */
        this.cssClass = 'igx-column-hiding';
        /**
         * @hidden
         */
        this._currentColumns = [];
        /**
         * @hidden
         */
        this._gridColumns = [];
        /**
         * @hidden
         */
        this._rawColumns = [];
        /**
         * @hidden
         */
        this._columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;
        /**
         * @hidden
         */
        this._filterCriteria = '';
        /**
         * @hidden
         */
        this._filterColumnsPrompt = '';
        /**
         * @hidden
         */
        this._title = '';
    }
    Object.defineProperty(ColumnChooserBaseDirective.prototype, "columns", {
        /**
         * Gets the grid columns that are going to be manipulated.
         * ```typescript
         * let gridColumns = this.columnHidingUI.columns;
         * ```
         */
        get: function () {
            return this._gridColumns;
        },
        /**
         * Sets the the grid columns that are going to be manipulated.
         * ```html
         * <igx-column-hiding [columns]="grid.columns"></igx-column-hiding>
         * ```
         */
        set: function (value) {
            if (value) {
                this._gridColumns = value;
                this.createColumnItems();
                if (this.filterCriteria) {
                    this.filter();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserBaseDirective.prototype, "title", {
        /**
         * Sets/gets the title of the column chooser.
         * ```typescript
         * let title =  this.columnHidingUI.title;
         * ```
         */
        get: function () {
            return this._title;
        },
        /**
         * ```html
         * <igx-column-hiding [title]="'IgxColumnHidingComponent Title'"></igx-column-hiding>
         * ```
         */
        set: function (value) {
            this._title = (value) ? value : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserBaseDirective.prototype, "filterColumnsPrompt", {
        /**
         * Gets the prompt that is displayed in the filter input.
         * ```typescript
         * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;
         * ```
         */
        get: function () {
            return this._filterColumnsPrompt;
        },
        /**
         * Sets the prompt that is going to be displayed in the filter input.
         * ```html
         * <igx-column-hiding [filterColumnsPrompt]="'Type here to search'"></igx-column-hiding>
         * ```
         */
        set: function (value) {
            this._filterColumnsPrompt = (value) ? value : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserBaseDirective.prototype, "columnItems", {
        /**
         * Gets the items of the selected columns.
         * ```typescript
         * let columnItems =  this.columnHidingUI.columnItems;
         * ```
         */
        get: function () {
            return this._currentColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserBaseDirective.prototype, "filterCriteria", {
        /**
         * Gets the value which filters the columns list.
         * ```typescript
         * let filterCriteria =  this.columnHidingUI.filterCriteria;
         * ```
         */
        get: function () {
            return this._filterCriteria;
        },
        /**
         * Sets the value which filters the columns list.
         * ```html
         *  <igx-column-hiding [filterCriteria]="'ID'"></igx-column-hiding>
         * ```
         */
        set: function (value) {
            if (!value || value.length === 0) {
                this.clearFiltering();
                this._filterCriteria = '';
                this.cdr.detectChanges();
                return;
            }
            else if (this._filterCriteria && this._filterCriteria.length > value.length) {
                this.clearFiltering();
            }
            this._filterCriteria = value;
            this.filter();
            this.cdr.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserBaseDirective.prototype, "columnDisplayOrder", {
        /**
         * Gets the display order of the columns.
         * ```typescript
         * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;
         * ```
         */
        get: function () {
            return this._columnDisplayOrder;
        },
        /**
         * Sets the display order of the columns.
         * ```typescript
         * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;
         * ```
         */
        set: function (value) {
            if (value !== undefined) {
                this.orderColumns(value);
                if (this._filterCriteria.length > 0) {
                    this.filter();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    ColumnChooserBaseDirective.prototype.ngOnDestroy = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this._currentColumns), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                item.valueChanged.unsubscribe();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @hidden
     */
    ColumnChooserBaseDirective.prototype.createColumnItems = function () {
        var _this = this;
        if (this._gridColumns.length > 0) {
            this._rawColumns = [];
            this._gridColumns.forEach(function (column) {
                var item = _this.createColumnItem(_this, column);
                if (item) {
                    _this._rawColumns.push(item);
                }
            });
            this._currentColumns = this._rawColumns.slice(0);
            this.orderColumns(this._columnDisplayOrder);
        }
    };
    /**
     * @hidden
     */
    ColumnChooserBaseDirective.prototype.orderColumns = function (value) {
        this._columnDisplayOrder = value;
        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||
            value === ColumnDisplayOrder.Alphabetical) {
            this._currentColumns = this._rawColumns.slice(0).sort(function (current, next) {
                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());
            });
        }
        else {
            this._currentColumns = this._rawColumns;
        }
    };
    /**
     * @hidden
     */
    ColumnChooserBaseDirective.prototype.filter = function () {
        var filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);
        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));
        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));
        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));
        var strategy = new CustomFilteringStrategy();
        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);
    };
    /**
     * @hidden
     */
    ColumnChooserBaseDirective.prototype.createFilteringExpression = function (fieldName) {
        return {
            condition: IgxStringFilteringOperand.instance().condition('contains'),
            fieldName: fieldName,
            ignoreCase: true,
            searchVal: this._filterCriteria
        };
    };
    /**
     * @hidden
     */
    ColumnChooserBaseDirective.prototype.clearFiltering = function () {
        this.createColumnItems();
    };
    ColumnChooserBaseDirective.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], ColumnChooserBaseDirective.prototype, "columns", null);
    __decorate([
        Input()
    ], ColumnChooserBaseDirective.prototype, "title", null);
    __decorate([
        Input()
    ], ColumnChooserBaseDirective.prototype, "filterColumnsPrompt", null);
    __decorate([
        Input()
    ], ColumnChooserBaseDirective.prototype, "disableFilter", void 0);
    __decorate([
        Input()
    ], ColumnChooserBaseDirective.prototype, "columnItems", null);
    __decorate([
        Input()
    ], ColumnChooserBaseDirective.prototype, "filterCriteria", null);
    __decorate([
        Input()
    ], ColumnChooserBaseDirective.prototype, "columnDisplayOrder", null);
    __decorate([
        Input()
    ], ColumnChooserBaseDirective.prototype, "columnsAreaMaxHeight", void 0);
    __decorate([
        HostBinding('attr.class')
    ], ColumnChooserBaseDirective.prototype, "cssClass", void 0);
    ColumnChooserBaseDirective = __decorate([
        Directive()
    ], ColumnChooserBaseDirective);
    return ColumnChooserBaseDirective;
}());
export { ColumnChooserBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItYmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZ3JpZHMvY29sdW1uLWNob29zZXItYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsd0JBQXdCLEVBQTZCLE1BQU0sK0NBQStDLENBQUM7QUFDcEgsT0FBTyxFQUFFLGNBQWMsRUFBd0IsTUFBTSxtREFBbUQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUUxRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVwRDtJQUFzQywyQ0FBaUI7SUFBdkQ7O0lBaUJBLENBQUM7SUFoQlUsd0NBQU0sR0FBYixVQUFjLElBQVcsRUFBRSxlQUEwQztRQUFyRSxpQkFlQztRQWRHLElBQU0sR0FBRyxHQUFxQyxFQUFFLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQW9DO1lBQzlDLElBQUksS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBeUIsQ0FBQyxFQUFFO2dCQUN0RixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2xCO2lCQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7Z0JBQ2hDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQUMsS0FBSztvQkFDeEMsT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxlQUFlLENB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O1FBREMsS0FBSyxFQUFFOzRFQUM2QjtJQVlyQztRQURDLFdBQVcsQ0FBQyxZQUFZLENBQUM7Z0VBQ1k7SUFsS3BCLDBCQUEwQjtRQUQvQyxTQUFTLEVBQUU7T0FDVSwwQkFBMEIsQ0F5US9DO0lBQUQsaUNBQUM7Q0FBQSxBQXpRRCxJQXlRQztTQXpRcUIsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25EZXN0cm95LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneFN0cmluZ0ZpbHRlcmluZ09wZXJhbmQgfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWNvbmRpdGlvbic7XG5pbXBvcnQgeyBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUsIElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWV4cHJlc3Npb25zLXRyZWUnO1xuaW1wb3J0IHsgRmlsdGVyaW5nTG9naWMsIElGaWx0ZXJpbmdFeHByZXNzaW9uIH0gZnJvbSAnLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBGaWx0ZXJpbmdTdHJhdGVneSB9IGZyb20gJy4uL2RhdGEtb3BlcmF0aW9ucy9maWx0ZXJpbmctc3RyYXRlZ3knO1xuaW1wb3J0IHsgQ29sdW1uQ2hvb3Nlckl0ZW1CYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2x1bW4tY2hvb3Nlci1pdGVtLWJhc2UnO1xuaW1wb3J0IHsgQ29sdW1uRGlzcGxheU9yZGVyIH0gZnJvbSAnLi9jb21tb24vZW51bXMnO1xuXG5jbGFzcyBDdXN0b21GaWx0ZXJpbmdTdHJhdGVneSBleHRlbmRzIEZpbHRlcmluZ1N0cmF0ZWd5IHtcbiAgICBwdWJsaWMgZmlsdGVyKGRhdGE6IGFueVtdLCBleHByZXNzaW9uc1RyZWU6IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUpOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IHJlczogQ29sdW1uQ2hvb3Nlckl0ZW1CYXNlRGlyZWN0aXZlW10gPSBbXTtcbiAgICAgICAgZGF0YS5mb3JFYWNoKChpdGVtOiBDb2x1bW5DaG9vc2VySXRlbUJhc2VEaXJlY3RpdmUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoUmVjb3JkKGl0ZW0sIGV4cHJlc3Npb25zVHJlZS5maWx0ZXJpbmdPcGVyYW5kc1swXSBhcyBJRmlsdGVyaW5nRXhwcmVzc2lvbikpIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5jb2x1bW4uY29sdW1uR3JvdXApIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5jb2x1bW4uYWxsQ2hpbGRyZW4uZmluZEluZGV4KChjaGlsZCkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaFJlY29yZChjaGlsZCwgZXhwcmVzc2lvbnNUcmVlLmZpbHRlcmluZ09wZXJhbmRzWzFdIGFzIElGaWx0ZXJpbmdFeHByZXNzaW9uKSB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoUmVjb3JkKGNoaWxkLCBleHByZXNzaW9uc1RyZWUuZmlsdGVyaW5nT3BlcmFuZHNbMl0gYXMgSUZpbHRlcmluZ0V4cHJlc3Npb24pKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59XG5cbi8qKiBAaGlkZGVuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb2x1bW5DaG9vc2VyQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZ3JpZCBjb2x1bW5zIHRoYXQgYXJlIGdvaW5nIHRvIGJlIG1hbmlwdWxhdGVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZ3JpZENvbHVtbnMgPSB0aGlzLmNvbHVtbkhpZGluZ1VJLmNvbHVtbnM7XG4gICAgICogYGBgXG4gICAgICovXG5cbiAgICBASW5wdXQoKVxuICAgIGdldCBjb2x1bW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ3JpZENvbHVtbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRoZSBncmlkIGNvbHVtbnMgdGhhdCBhcmUgZ29pbmcgdG8gYmUgbWFuaXB1bGF0ZWQuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWhpZGluZyBbY29sdW1uc109XCJncmlkLmNvbHVtbnNcIj48L2lneC1jb2x1bW4taGlkaW5nPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCBjb2x1bW5zKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fZ3JpZENvbHVtbnMgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29sdW1uSXRlbXMoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlckNyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIHRpdGxlIG9mIHRoZSBjb2x1bW4gY2hvb3Nlci5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHRpdGxlID0gIHRoaXMuY29sdW1uSGlkaW5nVUkudGl0bGU7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBnZXQgdGl0bGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWhpZGluZyBbdGl0bGVdPVwiJ0lneENvbHVtbkhpZGluZ0NvbXBvbmVudCBUaXRsZSdcIj48L2lneC1jb2x1bW4taGlkaW5nPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCB0aXRsZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl90aXRsZSA9ICh2YWx1ZSkgPyB2YWx1ZSA6ICcnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9tcHQgdGhhdCBpcyBkaXNwbGF5ZWQgaW4gdGhlIGZpbHRlciBpbnB1dC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGZpbHRlckNvbHVtbnNQcm9tcHQgPSAgdGhpcy5jb2x1bW5IaWRpbmdVSS5maWx0ZXJDb2x1bW5zUHJvbXB0O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGZpbHRlckNvbHVtbnNQcm9tcHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJDb2x1bW5zUHJvbXB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwcm9tcHQgdGhhdCBpcyBnb2luZyB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIGZpbHRlciBpbnB1dC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jb2x1bW4taGlkaW5nIFtmaWx0ZXJDb2x1bW5zUHJvbXB0XT1cIidUeXBlIGhlcmUgdG8gc2VhcmNoJ1wiPjwvaWd4LWNvbHVtbi1oaWRpbmc+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0IGZpbHRlckNvbHVtbnNQcm9tcHQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZmlsdGVyQ29sdW1uc1Byb21wdCA9ICh2YWx1ZSkgPyB2YWx1ZSA6ICcnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIaWRlcy8gc2hvd3MgdGhlIGZpbHRlcmluZyBjb2x1bW5zIGlucHV0IGZyb20gdGhlIFVJLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGRpc2FibGVGaWx0ZXIgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpdGVtcyBvZiB0aGUgc2VsZWN0ZWQgY29sdW1ucy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGNvbHVtbkl0ZW1zID0gIHRoaXMuY29sdW1uSGlkaW5nVUkuY29sdW1uSXRlbXM7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBnZXQgY29sdW1uSXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50Q29sdW1ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgd2hpY2ggZmlsdGVycyB0aGUgY29sdW1ucyBsaXN0LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZmlsdGVyQ3JpdGVyaWEgPSAgdGhpcy5jb2x1bW5IaWRpbmdVSS5maWx0ZXJDcml0ZXJpYTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBmaWx0ZXJDcml0ZXJpYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlckNyaXRlcmlhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIHdoaWNoIGZpbHRlcnMgdGhlIGNvbHVtbnMgbGlzdC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogIDxpZ3gtY29sdW1uLWhpZGluZyBbZmlsdGVyQ3JpdGVyaWFdPVwiJ0lEJ1wiPjwvaWd4LWNvbHVtbi1oaWRpbmc+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0IGZpbHRlckNyaXRlcmlhKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyRmlsdGVyaW5nKCk7XG4gICAgICAgICAgICB0aGlzLl9maWx0ZXJDcml0ZXJpYSA9ICcnO1xuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2ZpbHRlckNyaXRlcmlhICYmIHRoaXMuX2ZpbHRlckNyaXRlcmlhLmxlbmd0aCA+IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5jbGVhckZpbHRlcmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZmlsdGVyQ3JpdGVyaWEgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5maWx0ZXIoKTtcbiAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkaXNwbGF5IG9yZGVyIG9mIHRoZSBjb2x1bW5zLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY29sdW1uRGlzcGxheU9yZGVyICA9ICB0aGlzLmNvbHVtbkhpZGluZ1VJLmNvbHVtbkRpc3BsYXlPcmRlcjtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGdldCBjb2x1bW5EaXNwbGF5T3JkZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2x1bW5EaXNwbGF5T3JkZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRpc3BsYXkgb3JkZXIgb2YgdGhlIGNvbHVtbnMuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuY29sdW1uSGlkaW5nVUkuY29sdW1uRGlzcGxheU9yZGVyID0gQ29sdW1uRGlzcGxheU9yZGVyLkFscGhhYmV0aWNhbDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgY29sdW1uRGlzcGxheU9yZGVyKHZhbHVlOiBDb2x1bW5EaXNwbGF5T3JkZXIpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMub3JkZXJDb2x1bW5zKHZhbHVlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9maWx0ZXJDcml0ZXJpYS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBY2Nlc3MgdG8gdGhlIGNvbHVtbkhpZGluZ1VJOlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBAVmlld0NoaWxkKCdjb2x1bW4taGlkaW5nLWNvbXBvbmVudCcpXG4gICAgICogIHB1YmxpYyBjb2x1bW5IaWRpbmdVSTogSWd4Q29sdW1uSGlkaW5nQ29tcG9uZW50O1xuICAgICAqIGBgYFxuICAgICAqIFNldHMvZ2V0cyB0aGUgbWF4IGhlaWdodCBvZiB0aGUgY29sdW1uIGFyZWEuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjb2x1bW5zQXJlYU1heEhlaWdodCA9ICB0aGlzLmNvbHVtbkhpZGluZ1VJLmNvbHVtbnNBcmVhTWF4SGVpZ2h0O1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWhpZGluZyBbY29sdW1uc0FyZWFNYXhIZWlnaHRdPVwiMjAwcHhcIj48L2lneC1jb2x1bW4taGlkaW5nPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbHVtbnNBcmVhTWF4SGVpZ2h0ID0gJzEwMCUnO1xuICAgIC8qKlxuICAgICAqIFNldHMvR2V0cyB0aGUgY3NzIGNsYXNzIHNlbGVjdG9yLlxuICAgICAqIEJ5IGRlZmF1bHQgdGhlIHZhbHVlIG9mIHRoZSBgY2xhc3NgIGF0dHJpYnV0ZSBpcyBgXCJpZ3gtY29sdW1uLWhpZGluZ1wiYC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGNzc0NMYXNzID0gIHRoaXMuY29sdW1uSGlkaW5nVUkuY3NzQ2xhc3M7XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuY29sdW1uSGlkaW5nVUkuY3NzQ2xhc3MgPSAnY29sdW1uLWNob29zZXInO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5jbGFzcycpXG4gICAgcHVibGljIGNzc0NsYXNzID0gJ2lneC1jb2x1bW4taGlkaW5nJztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY3VycmVudENvbHVtbnMgPSBbXTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfZ3JpZENvbHVtbnMgPSBbXTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfcmF3Q29sdW1ucyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9jb2x1bW5EaXNwbGF5T3JkZXIgPSBDb2x1bW5EaXNwbGF5T3JkZXIuRGlzcGxheU9yZGVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9maWx0ZXJDcml0ZXJpYSA9ICcnO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9maWx0ZXJDb2x1bW5zUHJvbXB0ID0gJyc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX3RpdGxlID0gJyc7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLl9jdXJyZW50Q29sdW1ucykge1xuICAgICAgICAgICAgaXRlbS52YWx1ZUNoYW5nZWQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVDb2x1bW5JdGVtcygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2dyaWRDb2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3Jhd0NvbHVtbnMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2dyaWRDb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmNyZWF0ZUNvbHVtbkl0ZW0odGhpcywgY29sdW1uKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYXdDb2x1bW5zLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50Q29sdW1ucyA9IHRoaXMuX3Jhd0NvbHVtbnMuc2xpY2UoMCk7XG4gICAgICAgICAgICB0aGlzLm9yZGVyQ29sdW1ucyh0aGlzLl9jb2x1bW5EaXNwbGF5T3JkZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgY3JlYXRlQ29sdW1uSXRlbShjb250YWluZXI6IGFueSwgY29sdW1uOiBhbnkpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIG9yZGVyQ29sdW1ucyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9jb2x1bW5EaXNwbGF5T3JkZXIgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBDb2x1bW5EaXNwbGF5T3JkZXJbQ29sdW1uRGlzcGxheU9yZGVyLkFscGhhYmV0aWNhbF0gfHxcbiAgICAgICAgICAgIHZhbHVlID09PSBDb2x1bW5EaXNwbGF5T3JkZXIuQWxwaGFiZXRpY2FsKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50Q29sdW1ucyA9IHRoaXMuX3Jhd0NvbHVtbnMuc2xpY2UoMCkuc29ydCgoY3VycmVudCwgbmV4dCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50Lm5hbWUudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKG5leHQubmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudENvbHVtbnMgPSB0aGlzLl9yYXdDb2x1bW5zO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZmlsdGVyKCkge1xuICAgICAgICBjb25zdCBmaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgPSBuZXcgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlKEZpbHRlcmluZ0xvZ2ljLk9yKTtcbiAgICAgICAgZmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlLmZpbHRlcmluZ09wZXJhbmRzLnB1c2godGhpcy5jcmVhdGVGaWx0ZXJpbmdFeHByZXNzaW9uKCduYW1lJykpO1xuICAgICAgICBmaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUuZmlsdGVyaW5nT3BlcmFuZHMucHVzaCh0aGlzLmNyZWF0ZUZpbHRlcmluZ0V4cHJlc3Npb24oJ2ZpZWxkJykpO1xuICAgICAgICBmaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUuZmlsdGVyaW5nT3BlcmFuZHMucHVzaCh0aGlzLmNyZWF0ZUZpbHRlcmluZ0V4cHJlc3Npb24oJ2hlYWRlcicpKTtcblxuICAgICAgICBjb25zdCBzdHJhdGVneSA9IG5ldyBDdXN0b21GaWx0ZXJpbmdTdHJhdGVneSgpO1xuICAgICAgICB0aGlzLl9jdXJyZW50Q29sdW1ucyA9IHN0cmF0ZWd5LmZpbHRlcih0aGlzLl9jdXJyZW50Q29sdW1ucywgZmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjcmVhdGVGaWx0ZXJpbmdFeHByZXNzaW9uKGZpZWxkTmFtZTogc3RyaW5nKTogSUZpbHRlcmluZ0V4cHJlc3Npb24ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29uZGl0aW9uOiBJZ3hTdHJpbmdGaWx0ZXJpbmdPcGVyYW5kLmluc3RhbmNlKCkuY29uZGl0aW9uKCdjb250YWlucycpLFxuICAgICAgICAgICAgZmllbGROYW1lOiBmaWVsZE5hbWUsXG4gICAgICAgICAgICBpZ25vcmVDYXNlOiB0cnVlLFxuICAgICAgICAgICAgc2VhcmNoVmFsOiB0aGlzLl9maWx0ZXJDcml0ZXJpYVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNsZWFyRmlsdGVyaW5nKCkge1xuICAgICAgICB0aGlzLmNyZWF0ZUNvbHVtbkl0ZW1zKCk7XG4gICAgfVxufVxuXG5cbiJdfQ==