import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';
/** @hidden */
var IgxTreeGridSummaryPipe = /** @class */ (function () {
    function IgxTreeGridSummaryPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxTreeGridSummaryPipe.prototype.transform = function (flatData, hasSummary, summaryCalculationMode, summaryPosition, id, pipeTrigger, summaryPipeTrigger) {
        var grid = this.gridAPI.grid;
        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {
            return flatData;
        }
        return this.addSummaryRows(grid, flatData, summaryPosition);
    };
    IgxTreeGridSummaryPipe.prototype.addSummaryRows = function (grid, collection, summaryPosition) {
        var recordsWithSummary = [];
        var maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();
        for (var i = 0; i < collection.length; i++) {
            var record = collection[i];
            recordsWithSummary.push(record);
            var isExpanded = record.children && record.children.length > 0 && record.expanded;
            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {
                var childRecord = record;
                var parent_1 = record.parent;
                while (parent_1) {
                    var children = parent_1.children;
                    if (children[children.length - 1] === childRecord) {
                        var childData = children.filter(function (r) { return !r.isFilteredOutParent; }).map(function (r) { return r.data; });
                        childData = this.removeDeletedRecord(grid, parent_1.rowID, childData);
                        var summaries = grid.summaryService.calculateSummaries(parent_1.rowID, childData);
                        var summaryRecord = {
                            summaries: summaries,
                            max: maxSummaryHeight,
                            cellIndentation: parent_1.level + 1
                        };
                        recordsWithSummary.push(summaryRecord);
                        childRecord = parent_1;
                        parent_1 = childRecord.parent;
                    }
                    else {
                        break;
                    }
                }
            }
            else if (summaryPosition === GridSummaryPosition.top && isExpanded) {
                var childData = record.children.filter(function (r) { return !r.isFilteredOutParent; }).map(function (r) { return r.data; });
                childData = this.removeDeletedRecord(grid, record.rowID, childData);
                var summaries = grid.summaryService.calculateSummaries(record.rowID, childData);
                var summaryRecord = {
                    summaries: summaries,
                    max: maxSummaryHeight,
                    cellIndentation: record.level + 1
                };
                recordsWithSummary.push(summaryRecord);
            }
        }
        return recordsWithSummary;
    };
    IgxTreeGridSummaryPipe.prototype.removeDeletedRecord = function (grid, rowId, data) {
        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {
            return data;
        }
        var deletedRows = grid.transactions.getTransactionLog().filter(function (t) { return t.type === 'delete'; }).map(function (t) { return t.id; });
        var row = grid.records.get(rowId);
        if (!row && deletedRows.lenght === 0) {
            return [];
        }
        row = row.children ? row : row.parent;
        while (row) {
            rowId = row.rowID;
            if (deletedRows.indexOf(rowId) !== -1) {
                return [];
            }
            row = row.parent;
        }
        deletedRows.forEach(function (rowID) {
            var tempData = grid.primaryKey ? data.map(function (rec) { return rec[grid.primaryKey]; }) : data;
            var index = tempData.indexOf(rowID);
            if (index !== -1) {
                data.splice(index, 1);
            }
        });
        return data;
    };
    IgxTreeGridSummaryPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxTreeGridSummaryPipe = __decorate([
        Pipe({
            name: 'treeGridSummary',
            pure: true
        })
    ], IgxTreeGridSummaryPipe);
    return IgxTreeGridSummaryPipe;
}());
export { IgxTreeGridSummaryPipe };
//# sourceMappingURL=data:application/json;base64,