import { __decorate, __param, __values } from "tslib";
import { Directive, Optional, Input, NgModule, Host, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { IgxColumnComponent } from './columns/column.component';
import { DataType } from '../data-operations/data-util';
import { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand, IgxStringFilteringOperand } from '../data-operations/filtering-condition';
import { IgxGridComponent } from './grid/grid.component';
var COLUMNS = 'columns';
var FILTERING = 'filtering';
var ADVANCED_FILTERING = 'advancedFiltering';
var SORTING = 'sorting';
var GROUPBY = 'groupBy';
var PAGING = 'paging';
var ROW_SELECTION = 'rowSelection';
var ROW_PINNING = 'rowPinning';
var PINNING_CONFIG = 'pinningConfig';
var CELL_SELECTION = 'cellSelection';
var COLUMN_SELECTION = 'columnSelection';
var IgxGridStateDirective = /** @class */ (function () {
    /**
     * @hidden
     */
    function IgxGridStateDirective(grid, resolver, viewRef) {
        this.grid = grid;
        this.resolver = resolver;
        this.viewRef = viewRef;
        this._options = {
            columns: true,
            filtering: true,
            advancedFiltering: true,
            sorting: true,
            groupBy: true,
            paging: true,
            cellSelection: true,
            rowSelection: true,
            columnSelection: true,
            rowPinning: true
        };
    }
    Object.defineProperty(IgxGridStateDirective.prototype, "options", {
        /**
         *  An object with options determining if a certain feature state should be saved.
         *
         * ```html
         * <igx-grid [igxGridState]="options"></igx-grid>
         * ```
         * ```typescript
         * public options = {selection: false, advancedFiltering: false};
         * ```
         */
        get: function () {
            return this._options;
        },
        set: function (value) {
            Object.assign(this._options, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the state of a feature or states of all grid features, unless a certain feature is disabled through the `options` property.
     * @param `serialize` determines whether the returned object will be serialized to JSON string. Default value is false.
     * @param `feature` string or array of strings determining the features which state to retrieve. If skipped, returns all.
     * @returns Returns the serialized to JSON string IGridState object, or the non-serialized IGridState object.
     * ```html
     * <igx-grid [igxGridState]="options"></igx-grid>
     * ```
     * ```typescript
     * @ViewChild(IgxGridStateDirective, { static: true }) public state;
     * let state =  this.state.getState();
     * ```
     */
    IgxGridStateDirective.prototype.getState = function (serialize, feature) {
        var _this = this;
        if (serialize === void 0) { serialize = true; }
        var state;
        if (feature) {
            state = {};
            if (Array.isArray(feature)) {
                feature.forEach(function (f) {
                    state = Object.assign(state, _this.getGridFeature(f));
                });
            }
            else {
                state = this.getGridFeature(feature);
            }
        }
        else {
            state = this.getAllGridFeatures();
        }
        if (serialize) {
            state = JSON.stringify(state, this.stringifyCallback);
            return state;
        }
        else {
            return state;
        }
    };
    /**
     * Restores grid features' state based on the IGridState object passed as an argument.
     * @param IGridState object to restore state from.
     * @returns
     * ```html
     * <igx-grid [igxGridState]="options"></igx-grid>
     * ```
     * ```typescript
     * @ViewChild(IgxGridStateDirective, { static: true }) public state;
     * this.state.setState(gridState);
     * ```
     */
    IgxGridStateDirective.prototype.setState = function (state) {
        if (typeof state === 'string') {
            state = JSON.parse(state);
        }
        this.state = state;
        this.restoreGridState();
        this.grid.cdr.detectChanges();
    };
    /**
     * The method that calls corresponding methods to restore feature from this.state object.
     */
    IgxGridStateDirective.prototype.restoreGridState = function () {
        var e_1, _a;
        try {
            for (var _b = __values(Object.keys(this.state)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (this.state[key]) {
                    this.restoreFeature(key, this.state[key]);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Restores the state of a feature.
     */
    IgxGridStateDirective.prototype.restoreFeature = function (feature, state) {
        switch (feature) {
            case COLUMNS: {
                this.restoreColumns(state);
                break;
            }
            case FILTERING: {
                this.restoreFiltering(state);
                break;
            }
            case ADVANCED_FILTERING: {
                this.restoreAdvancedFiltering(state);
                break;
            }
            case SORTING: {
                this.restoreSorting(state);
                break;
            }
            case GROUPBY: {
                this.restoreGroupBy(state);
                break;
            }
            case PAGING: {
                this.restorePaging(state);
                break;
            }
            case ROW_SELECTION: {
                this.restoreRowSelection(state);
                break;
            }
            case ROW_PINNING: {
                this.restoreRowPinning(state);
                break;
            }
            case PINNING_CONFIG: {
                this.restorePinningConfig(state);
                break;
            }
            case CELL_SELECTION: {
                this.restoreCellSelection(state);
                break;
            }
            case COLUMN_SELECTION: {
                this.restoreColumnSelection(state);
                break;
            }
        }
    };
    /**
     * Returns an object containing all grid features state.
     */
    IgxGridStateDirective.prototype.getAllGridFeatures = function () {
        var e_2, _a;
        var gridState = {};
        try {
            for (var _b = __values(Object.keys(this.options)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (this.options[key]) {
                    var feature = this.getGridFeature(key);
                    gridState = Object.assign(gridState, feature);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        gridState = Object.assign({}, gridState);
        return gridState;
    };
    /**
     * Restores an object containing the state for a grid feature.
     * `serialize` param determines whether the returned object will be serialized to a JSON string. Default value is false.,
     */
    IgxGridStateDirective.prototype.getGridFeature = function (feature) {
        var state = {};
        switch (feature) {
            case COLUMNS: {
                Object.assign(state, this.getColumns());
                break;
            }
            case FILTERING: {
                Object.assign(state, this.getFiltering());
                break;
            }
            case ADVANCED_FILTERING: {
                Object.assign(state, this.getAdvancedFiltering());
                break;
            }
            case SORTING: {
                Object.assign(state, this.getSorting());
                break;
            }
            case GROUPBY: {
                Object.assign(state, this.getGroupBy());
                break;
            }
            case PAGING: {
                Object.assign(state, this.getPaging());
                break;
            }
            case ROW_SELECTION: {
                Object.assign(state, this.getRowSelection());
                break;
            }
            case ROW_PINNING: {
                Object.assign(state, this.getRowPinning());
                break;
            }
            case PINNING_CONFIG: {
                Object.assign(state, this.getPinningConfig());
                break;
            }
            case CELL_SELECTION: {
                Object.assign(state, this.getCellSelection());
                break;
            }
            case COLUMN_SELECTION: {
                Object.assign(state, this.getColumnSelection());
                break;
            }
        }
        return state;
    };
    /**
     * Helper method that creates a new array with the current grid columns.
     */
    IgxGridStateDirective.prototype.getColumns = function () {
        var gridColumns = this.grid.columns.sort(this.sortByVisibleIndex).map(function (c) {
            return {
                pinned: c.pinned,
                sortable: c.sortable,
                filterable: c.filterable,
                editable: c.editable,
                sortingIgnoreCase: c.sortingIgnoreCase,
                filteringIgnoreCase: c.filteringIgnoreCase,
                headerClasses: c.headerClasses,
                headerGroupClasses: c.headerGroupClasses,
                maxWidth: c.maxWidth,
                groupable: c.groupable,
                movable: c.movable,
                hidden: c.hidden,
                dataType: c.dataType,
                hasSummary: c.hasSummary,
                field: c.field,
                width: c.width,
                header: c.header,
                resizable: c.resizable,
                searchable: c.searchable
            };
        });
        return { columns: gridColumns };
    };
    IgxGridStateDirective.prototype.getFiltering = function () {
        var filteringState = this.grid.filteringExpressionsTree;
        return { filtering: filteringState };
    };
    IgxGridStateDirective.prototype.getAdvancedFiltering = function () {
        var advancedFiltering = this.grid.advancedFilteringExpressionsTree;
        return { advancedFiltering: advancedFiltering };
    };
    IgxGridStateDirective.prototype.getPaging = function () {
        var pagingState = this.grid.pagingState;
        return { paging: pagingState };
    };
    IgxGridStateDirective.prototype.getSorting = function () {
        var sortingState = this.grid.sortingExpressions;
        sortingState.forEach(function (s) {
            delete s.strategy;
        });
        return { sorting: sortingState };
    };
    IgxGridStateDirective.prototype.getGroupBy = function () {
        var groupingExpressions = this.grid.groupingExpressions;
        groupingExpressions.forEach(function (expr) {
            delete expr.strategy;
        });
        var expansionState = this.grid.groupingExpansionState;
        var groupsExpanded = this.grid.groupsExpanded;
        return { groupBy: { expressions: groupingExpressions, expansion: expansionState, defaultExpanded: groupsExpanded } };
    };
    IgxGridStateDirective.prototype.getRowSelection = function () {
        var selection = this.grid.selectedRows();
        return { rowSelection: selection };
    };
    IgxGridStateDirective.prototype.getRowPinning = function () {
        var pinned = this.grid.pinnedRows.map(function (x) { return x.rowID; });
        return { rowPinning: pinned };
    };
    IgxGridStateDirective.prototype.getPinningConfig = function () {
        return { pinningConfig: this.grid.pinning };
    };
    IgxGridStateDirective.prototype.getColumnSelection = function () {
        var selection = this.grid.selectedColumns().map(function (c) { return c.field; });
        return { columnSelection: selection };
    };
    IgxGridStateDirective.prototype.getCellSelection = function () {
        var selection = this.grid.getSelectedRanges().map(function (range) {
            return { rowStart: range.rowStart, rowEnd: range.rowEnd, columnStart: range.columnStart, columnEnd: range.columnEnd };
        });
        return { cellSelection: selection };
    };
    /**
     * Restores the grid columns by modifying the `columnList` collection of the grid.
     */
    IgxGridStateDirective.prototype.restoreColumns = function (columnsState) {
        var _this = this;
        var newColumns = [];
        var factory = this.resolver.resolveComponentFactory(IgxColumnComponent);
        columnsState.forEach(function (colState) {
            var ref = factory.create(_this.viewRef.injector);
            Object.assign(ref.instance, colState);
            ref.changeDetectorRef.detectChanges();
            newColumns.push(ref.instance);
        });
        this.grid.columnList.reset(newColumns);
        this.grid.columnList.notifyOnChanges();
    };
    IgxGridStateDirective.prototype.sortByVisibleIndex = function (colA, colB) {
        var a = colA.visibleIndex, b = colB.visibleIndex;
        return a > b ? 1 : a < b ? -1 : 0;
    };
    /**
     * Restores the grid filtering state, i.e. sets the `filteringExpressionsTree` property value.
     */
    IgxGridStateDirective.prototype.restoreFiltering = function (state) {
        var filterTree = this.createExpressionsTreeFromObject(state);
        this.grid.filteringExpressionsTree = filterTree;
    };
    /**
     * Restores the grid advanced filtering state, i.e. sets the `advancedFilteringExpressionsTree` property value.
     */
    IgxGridStateDirective.prototype.restoreAdvancedFiltering = function (state) {
        var advFilterTree = this.createExpressionsTreeFromObject(state);
        this.grid.advancedFilteringExpressionsTree = advFilterTree;
    };
    /**
     * Restores the grid sorting state, i.e. sets the `sortingExpressions` property value.
     */
    IgxGridStateDirective.prototype.restoreSorting = function (state) {
        this.grid.sortingExpressions = state;
    };
    /**
     * Restores the grid grouping state, i.e. sets the `groupbyExpressions` property value.
     */
    IgxGridStateDirective.prototype.restoreGroupBy = function (state) {
        this.grid.groupingExpressions = state.expressions;
        if (this.grid.groupsExpanded !== state.defaultExpanded) {
            this.grid.toggleAllGroupRows();
        }
        else {
            this.grid.groupingExpansionState = state.expansion;
        }
    };
    /**
     * Restores the grid paging state, i.e. sets the `perPage` property value and paginate to index.
     */
    IgxGridStateDirective.prototype.restorePaging = function (state) {
        if (this.grid.perPage !== state.recordsPerPage) {
            this.grid.perPage = state.recordsPerPage;
            this.grid.cdr.detectChanges();
        }
        this.grid.page = state.index;
    };
    IgxGridStateDirective.prototype.restoreRowSelection = function (state) {
        this.grid.selectRows(state);
    };
    IgxGridStateDirective.prototype.restoreRowPinning = function (state) {
        var _this = this;
        // clear current state.
        this.grid.pinnedRows.forEach(function (row) { return row.unpin(); });
        state.forEach(function (rowID) { return _this.grid.pinRow(rowID); });
    };
    IgxGridStateDirective.prototype.restorePinningConfig = function (state) {
        this.grid.pinning = state;
    };
    IgxGridStateDirective.prototype.restoreColumnSelection = function (state) {
        this.grid.selectColumns(state);
    };
    IgxGridStateDirective.prototype.restoreCellSelection = function (state) {
        var _this = this;
        state.forEach(function (r) {
            var range = { rowStart: r.rowStart, rowEnd: r.rowEnd, columnStart: r.columnStart, columnEnd: r.columnEnd };
            _this.grid.selectRange(range);
        });
    };
    /**
     * This method builds a FilteringExpressionsTree from a provided object.
     */
    IgxGridStateDirective.prototype.createExpressionsTreeFromObject = function (exprTreeObject) {
        var e_3, _a;
        if (!exprTreeObject || !exprTreeObject.filteringOperands) {
            return null;
        }
        var expressionsTree = new FilteringExpressionsTree(exprTreeObject.operator, exprTreeObject.fieldName);
        var _loop_1 = function (item) {
            // Check if item is an expressions tree or a single expression.
            if (item.filteringOperands) {
                var subTree = this_1.createExpressionsTreeFromObject(item);
                expressionsTree.filteringOperands.push(subTree);
            }
            else {
                var expr_1 = item;
                var dataType = void 0;
                if (this_1.grid.columnList.length > 0) {
                    dataType = this_1.grid.columnList.find(function (c) { return c.field === expr_1.fieldName; }).dataType;
                }
                else {
                    dataType = this_1.state[COLUMNS].find(function (c) { return c.field === expr_1.fieldName; }).dataType;
                }
                // when ESF, values are stored in Set.
                // First those values are converted to an array before returning string in the stringifyCallback
                // now we need to convert those back to Set
                if (Array.isArray(expr_1.searchVal)) {
                    expr_1.searchVal = new Set(expr_1.searchVal);
                }
                else {
                    expr_1.searchVal = (dataType === 'date') ? new Date(Date.parse(expr_1.searchVal)) : expr_1.searchVal;
                }
                expr_1.condition = this_1.generateFilteringCondition(dataType, expr_1.condition.name);
                expressionsTree.filteringOperands.push(expr_1);
            }
        };
        var this_1 = this;
        try {
            for (var _b = __values(exprTreeObject.filteringOperands), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                _loop_1(item);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return expressionsTree;
    };
    /**
     * Returns the filtering logic function for a given dataType and condition (contains, greaterThan, etc.)
     */
    IgxGridStateDirective.prototype.generateFilteringCondition = function (dataType, name) {
        var filters;
        switch (dataType) {
            case DataType.Boolean:
                filters = IgxBooleanFilteringOperand.instance();
                break;
            case DataType.Number:
                filters = IgxNumberFilteringOperand.instance();
                break;
            case DataType.Date:
                filters = IgxDateFilteringOperand.instance();
                break;
            case DataType.String:
            default:
                filters = IgxStringFilteringOperand.instance();
                break;
        }
        return filters.condition(name);
    };
    IgxGridStateDirective.prototype.stringifyCallback = function (key, val) {
        if (key === 'searchVal' && val instanceof Set) {
            return Array.from(val);
        }
        return val;
    };
    IgxGridStateDirective.ctorParameters = function () { return [
        { type: IgxGridComponent, decorators: [{ type: Host }, { type: Optional }] },
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef }
    ]; };
    __decorate([
        Input('igxGridState')
    ], IgxGridStateDirective.prototype, "options", null);
    IgxGridStateDirective = __decorate([
        Directive({
            selector: '[igxGridState]'
        }),
        __param(0, Host()), __param(0, Optional())
    ], IgxGridStateDirective);
    return IgxGridStateDirective;
}());
export { IgxGridStateDirective };
/**
 * @hidden
 */
var IgxGridStateModule = /** @class */ (function () {
    function IgxGridStateModule() {
    }
    IgxGridStateModule = __decorate([
        NgModule({
            declarations: [IgxGridStateDirective],
            exports: [IgxGridStateDirective]
        })
    ], IgxGridStateModule);
    return IgxGridStateModule;
}());
export { IgxGridStateModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9zdGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZILE9BQU8sRUFBRSx3QkFBd0IsRUFBNkIsTUFBTSwrQ0FBK0MsQ0FBQztBQUVwSCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUdoRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLHlCQUF5QixFQUFFLHVCQUF1QixFQUNuRix5QkFBeUIsRUFBc0IsTUFBTSx3Q0FBd0MsQ0FBQztBQUlsRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQXFEekQsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDO0FBQzFCLElBQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQztBQUM5QixJQUFNLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDO0FBQy9DLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUMxQixJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUM7QUFDMUIsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBQ3hCLElBQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQztBQUNyQyxJQUFNLFdBQVcsR0FBRyxZQUFZLENBQUM7QUFDakMsSUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDO0FBQ3ZDLElBQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQztBQUN2QyxJQUFNLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDO0FBSzNDO0lBb0NJOztPQUVHO0lBQ0gsK0JBQ2dDLElBQXNCLEVB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QU8sR0FBRyx5QkFBeUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDL0MsTUFBTTtTQUNiO1FBQ0QsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTyxpREFBaUIsR0FBekIsVUFBMEIsR0FBVyxFQUFFLEdBQVE7UUFDM0MsSUFBSSxHQUFHLEtBQUssV0FBVyxJQUFJLEdBQUcsWUFBWSxHQUFHLEVBQUU7WUFDM0MsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOztnQkE5YnFDLGdCQUFnQix1QkFBakQsSUFBSSxZQUFJLFFBQVE7Z0JBQ0Msd0JBQXdCO2dCQUN2QixnQkFBZ0I7O0lBZHZDO1FBREMsS0FBSyxDQUFDLGNBQWMsQ0FBQzt3REFHckI7SUE5QlEscUJBQXFCO1FBSGpDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxnQkFBZ0I7U0FDN0IsQ0FBQztRQXlDTyxXQUFBLElBQUksRUFBRSxDQUFBLEVBQUUsV0FBQSxRQUFRLEVBQUUsQ0FBQTtPQXhDZCxxQkFBcUIsQ0F1ZWpDO0lBQUQsNEJBQUM7Q0FBQSxBQXZlRCxJQXVlQztTQXZlWSxxQkFBcUI7QUF5ZWxDOztHQUVHO0FBS0g7SUFBQTtJQUFrQyxDQUFDO0lBQXRCLGtCQUFrQjtRQUo5QixRQUFRLENBQUM7WUFDTixZQUFZLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztZQUNyQyxPQUFPLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztTQUNuQyxDQUFDO09BQ1csa0JBQWtCLENBQUk7SUFBRCx5QkFBQztDQUFBLEFBQW5DLElBQW1DO1NBQXRCLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT3B0aW9uYWwsIElucHV0LCBOZ01vZHVsZSwgSG9zdCwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJU29ydGluZ0V4cHJlc3Npb24gfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvc29ydGluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUsIElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWV4cHJlc3Npb25zLXRyZWUnO1xuaW1wb3J0IHsgSUZpbHRlcmluZ0V4cHJlc3Npb24gfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWV4cHJlc3Npb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IElneENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IElHcm91cGluZ0V4cHJlc3Npb24gfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvZ3JvdXBpbmctZXhwcmVzc2lvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSVBhZ2luZ1N0YXRlIH0gZnJvbSAnLi4vZGF0YS1vcGVyYXRpb25zL3BhZ2luZy1zdGF0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvZGF0YS11dGlsJztcbmltcG9ydCB7IElneEJvb2xlYW5GaWx0ZXJpbmdPcGVyYW5kLCBJZ3hOdW1iZXJGaWx0ZXJpbmdPcGVyYW5kLCBJZ3hEYXRlRmlsdGVyaW5nT3BlcmFuZCxcbiAgICBJZ3hTdHJpbmdGaWx0ZXJpbmdPcGVyYW5kLCBJRmlsdGVyaW5nT3BlcmF0aW9ufSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWNvbmRpdGlvbic7XG5pbXBvcnQgeyBHcmlkU2VsZWN0aW9uUmFuZ2UgfSBmcm9tICcuL3NlbGVjdGlvbi9zZWxlY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBJR3JvdXBCeUV4cGFuZFN0YXRlIH0gZnJvbSAnLi4vZGF0YS1vcGVyYXRpb25zL2dyb3VwYnktZXhwYW5kLXN0YXRlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJR3JvdXBpbmdTdGF0ZSB9IGZyb20gJy4uL2RhdGEtb3BlcmF0aW9ucy9ncm91cGJ5LXN0YXRlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkL2dyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IElQaW5uaW5nQ29uZmlnIH0gZnJvbSAnLi9ncmlkLmNvbW1vbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWRTdGF0ZSB7XG4gICAgY29sdW1ucz86IElDb2x1bW5TdGF0ZVtdO1xuICAgIGZpbHRlcmluZz86IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWU7XG4gICAgYWR2YW5jZWRGaWx0ZXJpbmc/OiBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlO1xuICAgIHBhZ2luZz86IElQYWdpbmdTdGF0ZTtcbiAgICBzb3J0aW5nPzogSVNvcnRpbmdFeHByZXNzaW9uW107XG4gICAgZ3JvdXBCeT86IElHcm91cGluZ1N0YXRlO1xuICAgIGNlbGxTZWxlY3Rpb24/OiBHcmlkU2VsZWN0aW9uUmFuZ2VbXTtcbiAgICByb3dTZWxlY3Rpb24/OiBhbnlbXTtcbiAgICBjb2x1bW5TZWxlY3Rpb24/OiBzdHJpbmdbXTtcbiAgICByb3dQaW5uaW5nPzogYW55W107XG4gICAgcGlubmluZ0NvbmZpZz86IElQaW5uaW5nQ29uZmlnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElHcmlkU3RhdGVPcHRpb25zIHtcbiAgICBjb2x1bW5zPzogYm9vbGVhbjtcbiAgICBmaWx0ZXJpbmc/OiBib29sZWFuO1xuICAgIGFkdmFuY2VkRmlsdGVyaW5nPzogYm9vbGVhbjtcbiAgICBzb3J0aW5nPzogYm9vbGVhbjtcbiAgICBncm91cEJ5PzogYm9vbGVhbjtcbiAgICBwYWdpbmc/OiBib29sZWFuO1xuICAgIGNlbGxTZWxlY3Rpb24/OiBib29sZWFuO1xuICAgIHJvd1NlbGVjdGlvbj86IGJvb2xlYW47XG4gICAgY29sdW1uU2VsZWN0aW9uPzogYm9vbGVhbjtcbiAgICByb3dQaW5uaW5nPzogYm9vbGVhbjtcbiAgICBwaW5uaW5nQ29uZmlnPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29sdW1uU3RhdGUge1xuICAgIHBpbm5lZDogYm9vbGVhbjtcbiAgICBzb3J0YWJsZTogYm9vbGVhbjtcbiAgICBmaWx0ZXJhYmxlOiBib29sZWFuO1xuICAgIGVkaXRhYmxlOiBib29sZWFuO1xuICAgIHNvcnRpbmdJZ25vcmVDYXNlOiBib29sZWFuO1xuICAgIGZpbHRlcmluZ0lnbm9yZUNhc2U6IGJvb2xlYW47XG4gICAgaGVhZGVyQ2xhc3Nlczogc3RyaW5nO1xuICAgIGhlYWRlckdyb3VwQ2xhc3Nlczogc3RyaW5nO1xuICAgIG1heFdpZHRoOiBzdHJpbmc7XG4gICAgZ3JvdXBhYmxlOiBib29sZWFuO1xuICAgIG1vdmFibGU6IGJvb2xlYW47XG4gICAgaGlkZGVuOiBib29sZWFuO1xuICAgIGRhdGFUeXBlOiBEYXRhVHlwZTtcbiAgICBoYXNTdW1tYXJ5OiBib29sZWFuO1xuICAgIGZpZWxkOiBzdHJpbmc7XG4gICAgd2lkdGg6IGFueTtcbiAgICBoZWFkZXI6IHN0cmluZztcbiAgICByZXNpemFibGU6IGJvb2xlYW47XG4gICAgc2VhcmNoYWJsZTogYm9vbGVhbjtcbn1cblxuY29uc3QgQ09MVU1OUyA9ICdjb2x1bW5zJztcbmNvbnN0IEZJTFRFUklORyA9ICdmaWx0ZXJpbmcnO1xuY29uc3QgQURWQU5DRURfRklMVEVSSU5HID0gJ2FkdmFuY2VkRmlsdGVyaW5nJztcbmNvbnN0IFNPUlRJTkcgPSAnc29ydGluZyc7XG5jb25zdCBHUk9VUEJZID0gJ2dyb3VwQnknO1xuY29uc3QgUEFHSU5HID0gJ3BhZ2luZyc7XG5jb25zdCBST1dfU0VMRUNUSU9OID0gJ3Jvd1NlbGVjdGlvbic7XG5jb25zdCBST1dfUElOTklORyA9ICdyb3dQaW5uaW5nJztcbmNvbnN0IFBJTk5JTkdfQ09ORklHID0gJ3Bpbm5pbmdDb25maWcnO1xuY29uc3QgQ0VMTF9TRUxFQ1RJT04gPSAnY2VsbFNlbGVjdGlvbic7XG5jb25zdCBDT0xVTU5fU0VMRUNUSU9OID0gJ2NvbHVtblNlbGVjdGlvbic7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEdyaWRTdGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIElneEdyaWRTdGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBwcml2YXRlIF9vcHRpb25zOiBJR3JpZFN0YXRlT3B0aW9ucyA9IHtcbiAgICAgICAgY29sdW1uczogdHJ1ZSxcbiAgICAgICAgZmlsdGVyaW5nOiB0cnVlLFxuICAgICAgICBhZHZhbmNlZEZpbHRlcmluZzogdHJ1ZSxcbiAgICAgICAgc29ydGluZzogdHJ1ZSxcbiAgICAgICAgZ3JvdXBCeTogdHJ1ZSxcbiAgICAgICAgcGFnaW5nOiB0cnVlLFxuICAgICAgICBjZWxsU2VsZWN0aW9uOiB0cnVlLFxuICAgICAgICByb3dTZWxlY3Rpb246IHRydWUsXG4gICAgICAgIGNvbHVtblNlbGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgcm93UGlubmluZzogdHJ1ZVxuICAgIH07XG5cbiAgICBwcml2YXRlIHN0YXRlOiBJR3JpZFN0YXRlO1xuXG4gICAgLyoqXG4gICAgICogIEFuIG9iamVjdCB3aXRoIG9wdGlvbnMgZGV0ZXJtaW5pbmcgaWYgYSBjZXJ0YWluIGZlYXR1cmUgc3RhdGUgc2hvdWxkIGJlIHNhdmVkLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZ3JpZCBbaWd4R3JpZFN0YXRlXT1cIm9wdGlvbnNcIj48L2lneC1ncmlkPlxuICAgICAqIGBgYFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBwdWJsaWMgb3B0aW9ucyA9IHtzZWxlY3Rpb246IGZhbHNlLCBhZHZhbmNlZEZpbHRlcmluZzogZmFsc2V9O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgnaWd4R3JpZFN0YXRlJylcbiAgICBwdWJsaWMgZ2V0IG9wdGlvbnMoKTogSUdyaWRTdGF0ZU9wdGlvbnMge1xuICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgb3B0aW9ucyh2YWx1ZTogSUdyaWRTdGF0ZU9wdGlvbnMpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9vcHRpb25zLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASG9zdCgpIEBPcHRpb25hbCgpIHByaXZhdGUgZ3JpZDogSWd4R3JpZENvbXBvbmVudCxcbiAgICAgICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgICBwcm90ZWN0ZWQgdmlld1JlZjogVmlld0NvbnRhaW5lclJlZikgeyB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGF0ZSBvZiBhIGZlYXR1cmUgb3Igc3RhdGVzIG9mIGFsbCBncmlkIGZlYXR1cmVzLCB1bmxlc3MgYSBjZXJ0YWluIGZlYXR1cmUgaXMgZGlzYWJsZWQgdGhyb3VnaCB0aGUgYG9wdGlvbnNgIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSBgc2VyaWFsaXplYCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHJldHVybmVkIG9iamVjdCB3aWxsIGJlIHNlcmlhbGl6ZWQgdG8gSlNPTiBzdHJpbmcuIERlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXG4gICAgICogQHBhcmFtIGBmZWF0dXJlYCBzdHJpbmcgb3IgYXJyYXkgb2Ygc3RyaW5ncyBkZXRlcm1pbmluZyB0aGUgZmVhdHVyZXMgd2hpY2ggc3RhdGUgdG8gcmV0cmlldmUuIElmIHNraXBwZWQsIHJldHVybnMgYWxsLlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgdGhlIHNlcmlhbGl6ZWQgdG8gSlNPTiBzdHJpbmcgSUdyaWRTdGF0ZSBvYmplY3QsIG9yIHRoZSBub24tc2VyaWFsaXplZCBJR3JpZFN0YXRlIG9iamVjdC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1ncmlkIFtpZ3hHcmlkU3RhdGVdPVwib3B0aW9uc1wiPjwvaWd4LWdyaWQ+XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoSWd4R3JpZFN0YXRlRGlyZWN0aXZlLCB7IHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgc3RhdGU7XG4gICAgICogbGV0IHN0YXRlID0gIHRoaXMuc3RhdGUuZ2V0U3RhdGUoKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U3RhdGUoc2VyaWFsaXplID0gdHJ1ZSwgZmVhdHVyZT86IHN0cmluZyB8IHN0cmluZ1tdKTogSUdyaWRTdGF0ZSB8IHN0cmluZyAge1xuICAgICAgICBsZXQgc3RhdGU6IElHcmlkU3RhdGUgfCBzdHJpbmc7XG4gICAgICAgIGlmIChmZWF0dXJlKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IHt9O1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmVhdHVyZSkpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLmZvckVhY2goZiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gT2JqZWN0LmFzc2lnbihzdGF0ZSwgdGhpcy5nZXRHcmlkRmVhdHVyZShmKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpcy5nZXRHcmlkRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gdGhpcy5nZXRBbGxHcmlkRmVhdHVyZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VyaWFsaXplKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEpTT04uc3RyaW5naWZ5KHN0YXRlLCB0aGlzLnN0cmluZ2lmeUNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSBhcyBzdHJpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUgYXMgSUdyaWRTdGF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc3RvcmVzIGdyaWQgZmVhdHVyZXMnIHN0YXRlIGJhc2VkIG9uIHRoZSBJR3JpZFN0YXRlIG9iamVjdCBwYXNzZWQgYXMgYW4gYXJndW1lbnQuXG4gICAgICogQHBhcmFtIElHcmlkU3RhdGUgb2JqZWN0IHRvIHJlc3RvcmUgc3RhdGUgZnJvbS5cbiAgICAgKiBAcmV0dXJuc1xuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWdyaWQgW2lneEdyaWRTdGF0ZV09XCJvcHRpb25zXCI+PC9pZ3gtZ3JpZD5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZChJZ3hHcmlkU3RhdGVEaXJlY3RpdmUsIHsgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyBzdGF0ZTtcbiAgICAgKiB0aGlzLnN0YXRlLnNldFN0YXRlKGdyaWRTdGF0ZSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIHNldFN0YXRlKHN0YXRlOiBJR3JpZFN0YXRlIHwgc3RyaW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEpTT04ucGFyc2Uoc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZSBhcyBJR3JpZFN0YXRlO1xuICAgICAgICB0aGlzLnJlc3RvcmVHcmlkU3RhdGUoKTtcbiAgICAgICAgdGhpcy5ncmlkLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG1ldGhvZCB0aGF0IGNhbGxzIGNvcnJlc3BvbmRpbmcgbWV0aG9kcyB0byByZXN0b3JlIGZlYXR1cmUgZnJvbSB0aGlzLnN0YXRlIG9iamVjdC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlc3RvcmVHcmlkU3RhdGUoKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuc3RhdGUpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZVtrZXldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlRmVhdHVyZShrZXksIHRoaXMuc3RhdGVba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXN0b3JlcyB0aGUgc3RhdGUgb2YgYSBmZWF0dXJlLlxuICAgICAqL1xuICAgIHByaXZhdGUgcmVzdG9yZUZlYXR1cmUoZmVhdHVyZTogc3RyaW5nLCBzdGF0ZTogSUNvbHVtblN0YXRlW10gfCBJUGFnaW5nU3RhdGUgfCBJU29ydGluZ0V4cHJlc3Npb25bXSB8XG4gICAgICAgIElHcm91cGluZ1N0YXRlIHwgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIHwgR3JpZFNlbGVjdGlvblJhbmdlW10gfCBhbnlbXSkge1xuICAgICAgICBzd2l0Y2ggKGZlYXR1cmUpIHtcbiAgICAgICAgICAgIGNhc2UgQ09MVU1OUzoge1xuICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlQ29sdW1ucyhzdGF0ZSBhcyBJQ29sdW1uU3RhdGVbXSk7XG4gICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRklMVEVSSU5HOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlRmlsdGVyaW5nKHN0YXRlIGFzIEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEFEVkFOQ0VEX0ZJTFRFUklORzoge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZUFkdmFuY2VkRmlsdGVyaW5nKHN0YXRlIGFzIEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFNPUlRJTkc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmVTb3J0aW5nKHN0YXRlIGFzIElTb3J0aW5nRXhwcmVzc2lvbltdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgY2FzZSBHUk9VUEJZOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlR3JvdXBCeShzdGF0ZSBhcyBJR3JvdXBpbmdTdGF0ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGNhc2UgUEFHSU5HOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlUGFnaW5nKHN0YXRlIGFzIElQYWdpbmdTdGF0ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSBST1dfU0VMRUNUSU9OOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlUm93U2VsZWN0aW9uKHN0YXRlIGFzIGFueVtdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFJPV19QSU5OSU5HOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlUm93UGlubmluZyhzdGF0ZSBhcyBhbnlbXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSBQSU5OSU5HX0NPTkZJRzoge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZVBpbm5pbmdDb25maWcoc3RhdGUgYXMgSVBpbm5pbmdDb25maWcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgQ0VMTF9TRUxFQ1RJT046IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmVDZWxsU2VsZWN0aW9uKHN0YXRlIGFzIEdyaWRTZWxlY3Rpb25SYW5nZVtdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIENPTFVNTl9TRUxFQ1RJT046IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmVDb2x1bW5TZWxlY3Rpb24oc3RhdGUgYXMgc3RyaW5nW10pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgZ3JpZCBmZWF0dXJlcyBzdGF0ZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGdldEFsbEdyaWRGZWF0dXJlcygpOiBJR3JpZFN0YXRlIHtcbiAgICAgICAgbGV0IGdyaWRTdGF0ZTogSUdyaWRTdGF0ZSA9IHt9O1xuXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucykpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnNba2V5XSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmdldEdyaWRGZWF0dXJlKGtleSk7XG4gICAgICAgICAgICAgICAgZ3JpZFN0YXRlID0gIE9iamVjdC5hc3NpZ24oZ3JpZFN0YXRlLCBmZWF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdyaWRTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIGdyaWRTdGF0ZSk7XG4gICAgICAgIHJldHVybiBncmlkU3RhdGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzdG9yZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0YXRlIGZvciBhIGdyaWQgZmVhdHVyZS5cbiAgICAgKiBgc2VyaWFsaXplYCBwYXJhbSBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHJldHVybmVkIG9iamVjdCB3aWxsIGJlIHNlcmlhbGl6ZWQgdG8gYSBKU09OIHN0cmluZy4gRGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS4sXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRHcmlkRmVhdHVyZShmZWF0dXJlOiBzdHJpbmcpOiBJR3JpZFN0YXRlIHtcbiAgICAgICAgY29uc3Qgc3RhdGU6IElHcmlkU3RhdGUgPSB7fTtcbiAgICAgICAgc3dpdGNoIChmZWF0dXJlKSB7XG4gICAgICAgICAgICBjYXNlIENPTFVNTlM6IHtcbiAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3RhdGUsIHRoaXMuZ2V0Q29sdW1ucygpKTtcbiAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBGSUxURVJJTkc6IHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB0aGlzLmdldEZpbHRlcmluZygpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgQURWQU5DRURfRklMVEVSSU5HOiB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwgdGhpcy5nZXRBZHZhbmNlZEZpbHRlcmluZygpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU09SVElORzoge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3RhdGUsIHRoaXMuZ2V0U29ydGluZygpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgY2FzZSBHUk9VUEJZOiB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwgdGhpcy5nZXRHcm91cEJ5KCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBjYXNlIFBBR0lORzoge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3RhdGUsIHRoaXMuZ2V0UGFnaW5nKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgUk9XX1NFTEVDVElPTjoge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3RhdGUsIHRoaXMuZ2V0Um93U2VsZWN0aW9uKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgUk9XX1BJTk5JTkc6IHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB0aGlzLmdldFJvd1Bpbm5pbmcoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSBQSU5OSU5HX0NPTkZJRzoge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3RhdGUsIHRoaXMuZ2V0UGlubmluZ0NvbmZpZygpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIENFTExfU0VMRUNUSU9OOiB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwgdGhpcy5nZXRDZWxsU2VsZWN0aW9uKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgQ09MVU1OX1NFTEVDVElPTjoge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3RhdGUsIHRoaXMuZ2V0Q29sdW1uU2VsZWN0aW9uKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGVscGVyIG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgYXJyYXkgd2l0aCB0aGUgY3VycmVudCBncmlkIGNvbHVtbnMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDb2x1bW5zKCk6IElHcmlkU3RhdGUge1xuICAgICAgICBjb25zdCBncmlkQ29sdW1uczogSUNvbHVtblN0YXRlW10gPSB0aGlzLmdyaWQuY29sdW1ucy5zb3J0KHRoaXMuc29ydEJ5VmlzaWJsZUluZGV4KS5tYXAoKGMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcGlubmVkOiBjLnBpbm5lZCxcbiAgICAgICAgICAgICAgICBzb3J0YWJsZTogYy5zb3J0YWJsZSxcbiAgICAgICAgICAgICAgICBmaWx0ZXJhYmxlOiBjLmZpbHRlcmFibGUsXG4gICAgICAgICAgICAgICAgZWRpdGFibGU6IGMuZWRpdGFibGUsXG4gICAgICAgICAgICAgICAgc29ydGluZ0lnbm9yZUNhc2U6IGMuc29ydGluZ0lnbm9yZUNhc2UsXG4gICAgICAgICAgICAgICAgZmlsdGVyaW5nSWdub3JlQ2FzZTogYy5maWx0ZXJpbmdJZ25vcmVDYXNlLFxuICAgICAgICAgICAgICAgIGhlYWRlckNsYXNzZXM6IGMuaGVhZGVyQ2xhc3NlcyxcbiAgICAgICAgICAgICAgICBoZWFkZXJHcm91cENsYXNzZXM6IGMuaGVhZGVyR3JvdXBDbGFzc2VzLFxuICAgICAgICAgICAgICAgIG1heFdpZHRoOiBjLm1heFdpZHRoLFxuICAgICAgICAgICAgICAgIGdyb3VwYWJsZTogYy5ncm91cGFibGUsXG4gICAgICAgICAgICAgICAgbW92YWJsZTogYy5tb3ZhYmxlLFxuICAgICAgICAgICAgICAgIGhpZGRlbjogYy5oaWRkZW4sXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IGMuZGF0YVR5cGUsXG4gICAgICAgICAgICAgICAgaGFzU3VtbWFyeTogYy5oYXNTdW1tYXJ5LFxuICAgICAgICAgICAgICAgIGZpZWxkOiBjLmZpZWxkLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBjLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlYWRlcjogYy5oZWFkZXIsXG4gICAgICAgICAgICAgICAgcmVzaXphYmxlOiBjLnJlc2l6YWJsZSxcbiAgICAgICAgICAgICAgICBzZWFyY2hhYmxlOiBjLnNlYXJjaGFibGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyBjb2x1bW5zOiBncmlkQ29sdW1ucyB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RmlsdGVyaW5nKCk6IElHcmlkU3RhdGUge1xuICAgICAgICBjb25zdCBmaWx0ZXJpbmdTdGF0ZSA9IHRoaXMuZ3JpZC5maWx0ZXJpbmdFeHByZXNzaW9uc1RyZWU7XG4gICAgICAgIHJldHVybiB7IGZpbHRlcmluZzogZmlsdGVyaW5nU3RhdGUgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEFkdmFuY2VkRmlsdGVyaW5nKCk6IElHcmlkU3RhdGUge1xuICAgICAgICBjb25zdCBhZHZhbmNlZEZpbHRlcmluZyA9IHRoaXMuZ3JpZC5hZHZhbmNlZEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZTtcbiAgICAgICAgcmV0dXJuIHsgYWR2YW5jZWRGaWx0ZXJpbmc6IGFkdmFuY2VkRmlsdGVyaW5nIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRQYWdpbmcoKTogSUdyaWRTdGF0ZSB7XG4gICAgICAgIGNvbnN0IHBhZ2luZ1N0YXRlID0gdGhpcy5ncmlkLnBhZ2luZ1N0YXRlO1xuICAgICAgICByZXR1cm4geyBwYWdpbmc6IHBhZ2luZ1N0YXRlIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRTb3J0aW5nKCk6IElHcmlkU3RhdGUge1xuICAgICAgICBjb25zdCBzb3J0aW5nU3RhdGUgPSB0aGlzLmdyaWQuc29ydGluZ0V4cHJlc3Npb25zO1xuICAgICAgICBzb3J0aW5nU3RhdGUuZm9yRWFjaChzID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBzLnN0cmF0ZWd5O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgc29ydGluZzogc29ydGluZ1N0YXRlIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRHcm91cEJ5KCk6IElHcmlkU3RhdGUge1xuICAgICAgICBjb25zdCBncm91cGluZ0V4cHJlc3Npb25zID0gdGhpcy5ncmlkLmdyb3VwaW5nRXhwcmVzc2lvbnM7XG4gICAgICAgIGdyb3VwaW5nRXhwcmVzc2lvbnMuZm9yRWFjaChleHByID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBleHByLnN0cmF0ZWd5O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZXhwYW5zaW9uU3RhdGUgPSB0aGlzLmdyaWQuZ3JvdXBpbmdFeHBhbnNpb25TdGF0ZTtcbiAgICAgICAgY29uc3QgZ3JvdXBzRXhwYW5kZWQgPSB0aGlzLmdyaWQuZ3JvdXBzRXhwYW5kZWQ7XG5cbiAgICAgICAgcmV0dXJuIHsgZ3JvdXBCeTogeyBleHByZXNzaW9uczogZ3JvdXBpbmdFeHByZXNzaW9ucywgZXhwYW5zaW9uOiBleHBhbnNpb25TdGF0ZSwgZGVmYXVsdEV4cGFuZGVkOiBncm91cHNFeHBhbmRlZH0gIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRSb3dTZWxlY3Rpb24oKTogSUdyaWRTdGF0ZSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuZ3JpZC5zZWxlY3RlZFJvd3MoKTtcbiAgICAgICAgcmV0dXJuIHsgcm93U2VsZWN0aW9uOiBzZWxlY3Rpb24gfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFJvd1Bpbm5pbmcoKTogSUdyaWRTdGF0ZSB7XG4gICAgICAgIGNvbnN0IHBpbm5lZCA9IHRoaXMuZ3JpZC5waW5uZWRSb3dzLm1hcCh4ID0+IHgucm93SUQpO1xuICAgICAgICByZXR1cm4geyByb3dQaW5uaW5nOiBwaW5uZWQgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBpbm5pbmdDb25maWcoKTogSUdyaWRTdGF0ZSB7XG4gICAgICAgIHJldHVybiB7IHBpbm5pbmdDb25maWc6IHRoaXMuZ3JpZC5waW5uaW5nIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDb2x1bW5TZWxlY3Rpb24oKTogSUdyaWRTdGF0ZSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuZ3JpZC5zZWxlY3RlZENvbHVtbnMoKS5tYXAoYyA9PiBjLmZpZWxkKTtcbiAgICAgICAgcmV0dXJuIHsgY29sdW1uU2VsZWN0aW9uOiBzZWxlY3Rpb24gfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldENlbGxTZWxlY3Rpb24oKTogSUdyaWRTdGF0ZSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuZ3JpZC5nZXRTZWxlY3RlZFJhbmdlcygpLm1hcChyYW5nZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyByb3dTdGFydDogcmFuZ2Uucm93U3RhcnQsIHJvd0VuZDogcmFuZ2Uucm93RW5kLCBjb2x1bW5TdGFydDogcmFuZ2UuY29sdW1uU3RhcnQsIGNvbHVtbkVuZDogcmFuZ2UuY29sdW1uRW5kIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyBjZWxsU2VsZWN0aW9uOiBzZWxlY3Rpb24gfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXN0b3JlcyB0aGUgZ3JpZCBjb2x1bW5zIGJ5IG1vZGlmeWluZyB0aGUgYGNvbHVtbkxpc3RgIGNvbGxlY3Rpb24gb2YgdGhlIGdyaWQuXG4gICAgICovXG4gICAgcHJpdmF0ZSByZXN0b3JlQ29sdW1ucyhjb2x1bW5zU3RhdGU6IElDb2x1bW5TdGF0ZVtdKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG5ld0NvbHVtbnMgPSBbXTtcbiAgICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoSWd4Q29sdW1uQ29tcG9uZW50KTtcbiAgICAgICAgY29sdW1uc1N0YXRlLmZvckVhY2goKGNvbFN0YXRlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWYgPSBmYWN0b3J5LmNyZWF0ZSh0aGlzLnZpZXdSZWYuaW5qZWN0b3IpO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZWYuaW5zdGFuY2UsIGNvbFN0YXRlKTtcbiAgICAgICAgICAgIHJlZi5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgICAgICBuZXdDb2x1bW5zLnB1c2gocmVmLmluc3RhbmNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5ncmlkLmNvbHVtbkxpc3QucmVzZXQobmV3Q29sdW1ucyk7XG4gICAgICAgIHRoaXMuZ3JpZC5jb2x1bW5MaXN0Lm5vdGlmeU9uQ2hhbmdlcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc29ydEJ5VmlzaWJsZUluZGV4KGNvbEE6IElneENvbHVtbkNvbXBvbmVudCwgY29sQjogSWd4Q29sdW1uQ29tcG9uZW50KSB7XG4gICAgICAgICAgY29uc3QgYSA9IGNvbEEudmlzaWJsZUluZGV4LCBiID0gY29sQi52aXNpYmxlSW5kZXg7XG4gICAgICAgICAgcmV0dXJuIGEgPiBiID8gMSA6IGEgPCBiID8gLTEgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc3RvcmVzIHRoZSBncmlkIGZpbHRlcmluZyBzdGF0ZSwgaS5lLiBzZXRzIHRoZSBgZmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlYCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlc3RvcmVGaWx0ZXJpbmcoc3RhdGU6IEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSkge1xuICAgICAgICBjb25zdCBmaWx0ZXJUcmVlID0gdGhpcy5jcmVhdGVFeHByZXNzaW9uc1RyZWVGcm9tT2JqZWN0KHN0YXRlKTtcbiAgICAgICAgdGhpcy5ncmlkLmZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSA9IGZpbHRlclRyZWUgYXMgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc3RvcmVzIHRoZSBncmlkIGFkdmFuY2VkIGZpbHRlcmluZyBzdGF0ZSwgaS5lLiBzZXRzIHRoZSBgYWR2YW5jZWRGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWVgIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIHByaXZhdGUgcmVzdG9yZUFkdmFuY2VkRmlsdGVyaW5nKHN0YXRlOiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUpIHtcbiAgICAgICAgY29uc3QgYWR2RmlsdGVyVHJlZSA9IHRoaXMuY3JlYXRlRXhwcmVzc2lvbnNUcmVlRnJvbU9iamVjdChzdGF0ZSk7XG4gICAgICAgIHRoaXMuZ3JpZC5hZHZhbmNlZEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSA9IGFkdkZpbHRlclRyZWUgYXMgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc3RvcmVzIHRoZSBncmlkIHNvcnRpbmcgc3RhdGUsIGkuZS4gc2V0cyB0aGUgYHNvcnRpbmdFeHByZXNzaW9uc2AgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgcHJpdmF0ZSByZXN0b3JlU29ydGluZyhzdGF0ZTogSVNvcnRpbmdFeHByZXNzaW9uW10pIHtcbiAgICAgICAgdGhpcy5ncmlkLnNvcnRpbmdFeHByZXNzaW9ucyA9IHN0YXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc3RvcmVzIHRoZSBncmlkIGdyb3VwaW5nIHN0YXRlLCBpLmUuIHNldHMgdGhlIGBncm91cGJ5RXhwcmVzc2lvbnNgIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIHByaXZhdGUgcmVzdG9yZUdyb3VwQnkoc3RhdGU6IElHcm91cGluZ1N0YXRlKSB7XG4gICAgICAgICh0aGlzLmdyaWQgYXMgSWd4R3JpZENvbXBvbmVudCkuZ3JvdXBpbmdFeHByZXNzaW9ucyA9IHN0YXRlLmV4cHJlc3Npb25zIGFzIElHcm91cGluZ0V4cHJlc3Npb25bXTtcbiAgICAgICAgaWYgKCh0aGlzLmdyaWQgYXMgSWd4R3JpZENvbXBvbmVudCkuZ3JvdXBzRXhwYW5kZWQgIT09IHN0YXRlLmRlZmF1bHRFeHBhbmRlZCkge1xuICAgICAgICAgICAgdGhpcy5ncmlkLnRvZ2dsZUFsbEdyb3VwUm93cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKHRoaXMuZ3JpZCBhcyBJZ3hHcmlkQ29tcG9uZW50KS5ncm91cGluZ0V4cGFuc2lvblN0YXRlID0gc3RhdGUuZXhwYW5zaW9uIGFzIElHcm91cEJ5RXhwYW5kU3RhdGVbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc3RvcmVzIHRoZSBncmlkIHBhZ2luZyBzdGF0ZSwgaS5lLiBzZXRzIHRoZSBgcGVyUGFnZWAgcHJvcGVydHkgdmFsdWUgYW5kIHBhZ2luYXRlIHRvIGluZGV4LlxuICAgICAqL1xuICAgIHByaXZhdGUgcmVzdG9yZVBhZ2luZyhzdGF0ZTogSVBhZ2luZ1N0YXRlKSB7XG4gICAgICAgIGlmICh0aGlzLmdyaWQucGVyUGFnZSAhPT0gc3RhdGUucmVjb3Jkc1BlclBhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5wZXJQYWdlID0gc3RhdGUucmVjb3Jkc1BlclBhZ2U7XG4gICAgICAgICAgICB0aGlzLmdyaWQuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdyaWQucGFnZSA9IHN0YXRlLmluZGV4O1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzdG9yZVJvd1NlbGVjdGlvbihzdGF0ZTogYW55W10pIHtcbiAgICAgICAgdGhpcy5ncmlkLnNlbGVjdFJvd3Moc3RhdGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzdG9yZVJvd1Bpbm5pbmcoc3RhdGU6IGFueVtdKSB7XG4gICAgICAgIC8vIGNsZWFyIGN1cnJlbnQgc3RhdGUuXG4gICAgICAgIHRoaXMuZ3JpZC5waW5uZWRSb3dzLmZvckVhY2gocm93ID0+IHJvdy51bnBpbigpKTtcbiAgICAgICAgc3RhdGUuZm9yRWFjaChyb3dJRCA9PiB0aGlzLmdyaWQucGluUm93KHJvd0lEKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXN0b3JlUGlubmluZ0NvbmZpZyhzdGF0ZTogSVBpbm5pbmdDb25maWcpIHtcbiAgICAgICB0aGlzLmdyaWQucGlubmluZyA9IHN0YXRlO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzdG9yZUNvbHVtblNlbGVjdGlvbihzdGF0ZTogc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy5ncmlkLnNlbGVjdENvbHVtbnMoc3RhdGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzdG9yZUNlbGxTZWxlY3Rpb24oc3RhdGU6IEdyaWRTZWxlY3Rpb25SYW5nZVtdKSB7XG4gICAgICAgIHN0YXRlLmZvckVhY2gociA9PiB7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHsgcm93U3RhcnQ6IHIucm93U3RhcnQsIHJvd0VuZDogci5yb3dFbmQsIGNvbHVtblN0YXJ0OiByLmNvbHVtblN0YXJ0LCBjb2x1bW5FbmQ6IHIuY29sdW1uRW5kfTtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5zZWxlY3RSYW5nZShyYW5nZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGJ1aWxkcyBhIEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSBmcm9tIGEgcHJvdmlkZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlRXhwcmVzc2lvbnNUcmVlRnJvbU9iamVjdChleHByVHJlZU9iamVjdDogRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlKTogRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIHtcbiAgICAgICAgaWYgKCFleHByVHJlZU9iamVjdCB8fCAhZXhwclRyZWVPYmplY3QuZmlsdGVyaW5nT3BlcmFuZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbnNUcmVlID0gbmV3IEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZShleHByVHJlZU9iamVjdC5vcGVyYXRvciwgZXhwclRyZWVPYmplY3QuZmllbGROYW1lKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZXhwclRyZWVPYmplY3QuZmlsdGVyaW5nT3BlcmFuZHMpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGl0ZW0gaXMgYW4gZXhwcmVzc2lvbnMgdHJlZSBvciBhIHNpbmdsZSBleHByZXNzaW9uLlxuICAgICAgICAgICAgaWYgKChpdGVtIGFzIEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSkuZmlsdGVyaW5nT3BlcmFuZHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJUcmVlID0gdGhpcy5jcmVhdGVFeHByZXNzaW9uc1RyZWVGcm9tT2JqZWN0KChpdGVtIGFzIEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSkpO1xuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zVHJlZS5maWx0ZXJpbmdPcGVyYW5kcy5wdXNoKHN1YlRyZWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleHByID0gaXRlbSBhcyBJRmlsdGVyaW5nRXhwcmVzc2lvbjtcbiAgICAgICAgICAgICAgICBsZXQgZGF0YVR5cGU6IHN0cmluZztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkLmNvbHVtbkxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZSA9IHRoaXMuZ3JpZC5jb2x1bW5MaXN0LmZpbmQoYyA9PiBjLmZpZWxkID09PSBleHByLmZpZWxkTmFtZSkuZGF0YVR5cGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGUgPSB0aGlzLnN0YXRlW0NPTFVNTlNdLmZpbmQoYyA9PiBjLmZpZWxkID09PSBleHByLmZpZWxkTmFtZSkuZGF0YVR5cGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHdoZW4gRVNGLCB2YWx1ZXMgYXJlIHN0b3JlZCBpbiBTZXQuXG4gICAgICAgICAgICAgICAgLy8gRmlyc3QgdGhvc2UgdmFsdWVzIGFyZSBjb252ZXJ0ZWQgdG8gYW4gYXJyYXkgYmVmb3JlIHJldHVybmluZyBzdHJpbmcgaW4gdGhlIHN0cmluZ2lmeUNhbGxiYWNrXG4gICAgICAgICAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gY29udmVydCB0aG9zZSBiYWNrIHRvIFNldFxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGV4cHIuc2VhcmNoVmFsKSkge1xuICAgICAgICAgICAgICAgICAgICBleHByLnNlYXJjaFZhbCA9IG5ldyBTZXQoZXhwci5zZWFyY2hWYWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cHIuc2VhcmNoVmFsID0gKGRhdGFUeXBlID09PSAnZGF0ZScpID8gbmV3IERhdGUoRGF0ZS5wYXJzZShleHByLnNlYXJjaFZhbCkpIDogZXhwci5zZWFyY2hWYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGV4cHIuY29uZGl0aW9uID0gdGhpcy5nZW5lcmF0ZUZpbHRlcmluZ0NvbmRpdGlvbihkYXRhVHlwZSwgZXhwci5jb25kaXRpb24ubmFtZSk7XG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbnNUcmVlLmZpbHRlcmluZ09wZXJhbmRzLnB1c2goZXhwcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbnNUcmVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZpbHRlcmluZyBsb2dpYyBmdW5jdGlvbiBmb3IgYSBnaXZlbiBkYXRhVHlwZSBhbmQgY29uZGl0aW9uIChjb250YWlucywgZ3JlYXRlclRoYW4sIGV0Yy4pXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUZpbHRlcmluZ0NvbmRpdGlvbihkYXRhVHlwZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBJRmlsdGVyaW5nT3BlcmF0aW9uIHtcbiAgICAgICAgbGV0IGZpbHRlcnM7XG4gICAgICAgIHN3aXRjaCAoZGF0YVR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuQm9vbGVhbjpcbiAgICAgICAgICAgICAgICBmaWx0ZXJzID0gSWd4Qm9vbGVhbkZpbHRlcmluZ09wZXJhbmQuaW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuTnVtYmVyOlxuICAgICAgICAgICAgICAgIGZpbHRlcnMgPSBJZ3hOdW1iZXJGaWx0ZXJpbmdPcGVyYW5kLmluc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERhdGFUeXBlLkRhdGU6XG4gICAgICAgICAgICAgICAgZmlsdGVycyA9IElneERhdGVGaWx0ZXJpbmdPcGVyYW5kLmluc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERhdGFUeXBlLlN0cmluZzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZmlsdGVycyA9IElneFN0cmluZ0ZpbHRlcmluZ09wZXJhbmQuaW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVycy5jb25kaXRpb24obmFtZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdHJpbmdpZnlDYWxsYmFjayhrZXk6IHN0cmluZywgdmFsOiBhbnkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ3NlYXJjaFZhbCcgJiYgdmFsIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh2YWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hHcmlkU3RhdGVEaXJlY3RpdmVdLFxuICAgIGV4cG9ydHM6IFtJZ3hHcmlkU3RhdGVEaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIElneEdyaWRTdGF0ZU1vZHVsZSB7IH1cbiJdfQ==