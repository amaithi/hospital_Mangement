import { __decorate, __read, __spread } from "tslib";
import { Injectable, NgZone } from '@angular/core';
/**
 * @hidden
 * @internal
 */
var IgxColumnResizingService = /** @class */ (function () {
    function IgxColumnResizingService(zone) {
        this.zone = zone;
        /**
         * @hidden
         */
        this.resizeCursor = null;
        /**
         * @hidden
         */
        this.showResizer = false;
    }
    Object.defineProperty(IgxColumnResizingService.prototype, "resizerHeight", {
        /**
         * @hidden
         */
        get: function () {
            var height = this.column.grid.getVisibleContentHeight();
            // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.
            var columnHeightMultiplier = 1;
            if (this.column.columnLayoutChild) {
                columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;
            }
            if (this.column.level !== 0) {
                height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;
            }
            return height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnResizingService.prototype, "restrictResizeMin", {
        /**
         * Returns the minimal possible width to which the column can be resized.
         */
        get: function () {
            var actualMinWidth = parseFloat(this.column.minWidth);
            var minWidth = actualMinWidth < parseFloat(this.column.width) ? actualMinWidth : parseFloat(this.column.width);
            return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnResizingService.prototype, "restrictResizeMax", {
        /**
         * Returns the maximal possible width to which the column can be resized.
         */
        get: function () {
            var actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;
            if (this.column.maxWidth) {
                return parseFloat(this.column.maxWidth) - actualWidth;
            }
            else {
                return Number.MAX_SAFE_INTEGER;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Autosizes the column to the longest currently visible cell value, including the header cell.
     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,
     * then the column is sized to its maxWidth.
     * If the column is pinned and the autosized column width will cause the pinned area to become bigger
     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.
     */
    IgxColumnResizingService.prototype.autosizeColumnOnDblClick = function () {
        var currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;
        var size = this.column.getLargestCellWidth();
        if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {
            this.column.width = parseFloat(this.column.maxWidth) + 'px';
        }
        else if (parseFloat(size) < parseFloat(this.column.minWidth)) {
            this.column.width = parseFloat(this.column.minWidth) + 'px';
        }
        else {
            this.column.width = size;
        }
        this.zone.run(function () { });
        this.column.grid.onColumnResized.emit({
            column: this.column,
            prevWidth: currentColWidth.toString(),
            newWidth: this.column.width
        });
    };
    /**
     * Resizes the column regaridng to the column minWidth and maxWidth.
     */
    IgxColumnResizingService.prototype.resizeColumn = function (event) {
        this.showResizer = false;
        var diff = event.clientX - this.startResizePos;
        var currentColWidth = parseFloat(this.column.width);
        var actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;
        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;
        var colMinWidth = this.getColMinWidth(this.column);
        var colMaxWidth = this.getColMaxWidth(this.column);
        if (this.column.grid.hasColumnLayouts) {
            this.resizeColumnLayoutFor(this.column, diff);
        }
        else {
            if (currentColWidth + diff < colMinWidth) {
                this.column.width = colMinWidth + 'px';
            }
            else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {
                this.column.width = colMaxWidth + 'px';
            }
            else {
                this.column.width = (currentColWidth + diff) + 'px';
            }
        }
        this.zone.run(function () { });
        if (currentColWidth !== parseFloat(this.column.width)) {
            this.column.grid.onColumnResized.emit({
                column: this.column,
                prevWidth: currentColWidth.toString(),
                newWidth: this.column.width
            });
        }
        this.isColumnResizing = false;
    };
    IgxColumnResizingService.prototype.getColMinWidth = function (column) {
        var currentColWidth = parseFloat(column.width);
        var actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;
        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;
        var actualMinWidth = parseFloat(column.minWidth);
        return actualMinWidth < currentColWidth ? actualMinWidth : currentColWidth;
    };
    IgxColumnResizingService.prototype.getColMaxWidth = function (column) {
        return column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(column.maxWidth);
    };
    IgxColumnResizingService.prototype.resizeColumnLayoutFor = function (column, diff) {
        var _this = this;
        var relativeColumns = column.getResizableColUnderEnd();
        var combinedSpan = relativeColumns.reduce(function (acc, col) { return acc + col.spanUsed; }, 0);
        // Resize first those who might reach min/max width
        var columnsToResize = __spread(relativeColumns);
        var updatedDiff = diff;
        var updatedCombinedSpan = combinedSpan;
        var setMinMaxCols = false;
        var _loop_1 = function () {
            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.
            // This is because we can have at first 2 cols reaching min width and then after
            // recalculating the diff there might be 1 more that reaches min width.
            setMinMaxCols = false;
            var newCombinedSpan = updatedCombinedSpan;
            var newColsToResize = [];
            columnsToResize.forEach(function (col) {
                var currentResizeWidth = parseFloat(col.target.calcWidth);
                var resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;
                var minWidth = _this.getColMinWidth(col.target);
                var maxWidth = _this.getColMaxWidth(col.target);
                if (currentResizeWidth + resizeScaled < minWidth) {
                    col.target.width = minWidth + 'px';
                    updatedDiff += (currentResizeWidth - minWidth);
                    newCombinedSpan -= col.spanUsed;
                    setMinMaxCols = true;
                }
                else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {
                    col.target.width = maxWidth + 'px';
                    updatedDiff -= (maxWidth - currentResizeWidth);
                    newCombinedSpan -= col.spanUsed;
                    setMinMaxCols = true;
                }
                else {
                    // Save new ones that can be resized
                    newColsToResize.push(col);
                }
            });
            updatedCombinedSpan = newCombinedSpan;
            columnsToResize = newColsToResize;
        };
        do {
            _loop_1();
        } while (setMinMaxCols);
        // Those left that don't reach min/max size resize them normally.
        columnsToResize.forEach(function (col) {
            var currentResizeWidth = parseFloat(col.target.calcWidth);
            var resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;
            col.target.width = (currentResizeWidth + resizeScaled) + 'px';
        });
    };
    IgxColumnResizingService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    IgxColumnResizingService = __decorate([
        Injectable()
    ], IgxColumnResizingService);
    return IgxColumnResizingService;
}());
export { IgxColumnResizingService };
//# sourceMappingURL=data:application/json;base64,