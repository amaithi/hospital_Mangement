import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Input, NgZone, Output, OnInit, OnDestroy, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';
import { map, switchMap, takeUntil, throttle } from 'rxjs/operators';
/**
 * @hidden
 * @internal
 */
var IgxColumnResizerDirective = /** @class */ (function () {
    function IgxColumnResizerDirective(element, document, zone) {
        var _this = this;
        this.element = element;
        this.document = document;
        this.zone = zone;
        this.restrictHResizeMin = Number.MIN_SAFE_INTEGER;
        this.restrictHResizeMax = Number.MAX_SAFE_INTEGER;
        this.resizeEnd = new Subject();
        this.resizeStart = new Subject();
        this.resize = new Subject();
        this._destroy = new Subject();
        this.resizeStart.pipe(map(function (event) { return event.clientX; }), takeUntil(this._destroy), switchMap(function (offset) { return _this.resize.pipe(map(function (event) { return event.clientX - offset; }), takeUntil(_this.resizeEnd), takeUntil(_this._destroy)); })).subscribe(function (pos) {
            var left = _this._left + pos;
            var min = _this._left - _this.restrictHResizeMin;
            var max = _this._left + _this.restrictHResizeMax;
            _this.left = left < min ? min : left;
            if (left > max) {
                _this.left = max;
            }
        });
    }
    IgxColumnResizerDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            fromEvent(_this.document.defaultView, 'mousemove').pipe(throttle(function () { return interval(0, animationFrameScheduler); }), takeUntil(_this._destroy)).subscribe(function (res) { return _this.onMousemove(res); });
            fromEvent(_this.document.defaultView, 'mouseup').pipe(takeUntil(_this._destroy))
                .subscribe(function (res) { return _this.onMouseup(res); });
        });
    };
    IgxColumnResizerDirective.prototype.ngOnDestroy = function () {
        this._destroy.next(true);
        this._destroy.complete();
    };
    Object.defineProperty(IgxColumnResizerDirective.prototype, "left", {
        set: function (val) {
            var _this = this;
            requestAnimationFrame(function () { return _this.element.nativeElement.style.left = val + 'px'; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnResizerDirective.prototype, "top", {
        set: function (val) {
            var _this = this;
            requestAnimationFrame(function () { return _this.element.nativeElement.style.top = val + 'px'; });
        },
        enumerable: true,
        configurable: true
    });
    IgxColumnResizerDirective.prototype.onMouseup = function (event) {
        this.resizeEnd.next(event);
        this.resizeEnd.complete();
    };
    IgxColumnResizerDirective.prototype.onMousedown = function (event) {
        event.preventDefault();
        var parent = this.element.nativeElement.parentElement.parentElement;
        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;
        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;
        this.resizeStart.next(event);
    };
    IgxColumnResizerDirective.prototype.onMousemove = function (event) {
        event.preventDefault();
        this.resize.next(event);
    };
    IgxColumnResizerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: NgZone }
    ]; };
    __decorate([
        Input()
    ], IgxColumnResizerDirective.prototype, "restrictHResizeMin", void 0);
    __decorate([
        Input()
    ], IgxColumnResizerDirective.prototype, "restrictHResizeMax", void 0);
    __decorate([
        Output()
    ], IgxColumnResizerDirective.prototype, "resizeEnd", void 0);
    __decorate([
        Output()
    ], IgxColumnResizerDirective.prototype, "resizeStart", void 0);
    __decorate([
        Output()
    ], IgxColumnResizerDirective.prototype, "resize", void 0);
    IgxColumnResizerDirective = __decorate([
        Directive({
            selector: '[igxResizer]'
        }),
        __param(1, Inject(DOCUMENT))
    ], IgxColumnResizerDirective);
    return IgxColumnResizerDirective;
}());
export { IgxColumnResizerDirective };
//# sourceMappingURL=data:application/json;base64,