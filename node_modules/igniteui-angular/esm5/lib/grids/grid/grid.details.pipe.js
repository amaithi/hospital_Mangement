import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
/** @hidden */
var IgxGridDetailsPipe = /** @class */ (function () {
    function IgxGridDetailsPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridDetailsPipe.prototype.transform = function (collection, hasDetails, expansionStates, pipeTrigger) {
        if (!hasDetails) {
            return collection;
        }
        var res = this.addDetailRows(collection, expansionStates);
        return res;
    };
    IgxGridDetailsPipe.prototype.addDetailRows = function (collection, expansionStates) {
        var _this = this;
        var result = [];
        collection.forEach(function (v) {
            result.push(v);
            if (!_this.gridAPI.grid.isGroupByRecord(v) && !_this.gridAPI.grid.isSummaryRow(v) &&
                _this.gridAPI.get_row_expansion_state(v)) {
                var detailsObj = { detailsData: v };
                result.push(detailsObj);
            }
        });
        return result;
    };
    IgxGridDetailsPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxGridDetailsPipe = __decorate([
        Pipe({
            name: 'gridDetails',
            pure: true
        })
    ], IgxGridDetailsPipe);
    return IgxGridDetailsPipe;
}());
export { IgxGridDetailsPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5kZXRhaWxzLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2dyaWQvZ3JpZC5kZXRhaWxzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3BELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3BELGNBQWM7QUFLZDtJQUVJLDRCQUFZLE9BQTREO1FBQ3BFLElBQUksQ0FBQyxPQUFPLEdBQXNCLE9BQU8sQ0FBQztJQUM5QyxDQUFDO0lBQ00sc0NBQVMsR0FBaEIsVUFBaUIsVUFBaUIsRUFBRSxVQUFtQixFQUFFLGVBQW1DLEVBQUUsV0FBbUI7UUFDN0csSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNiLE9BQU8sVUFBVSxDQUFDO1NBQ3JCO1FBQ0QsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDNUQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBRVMsMENBQWEsR0FBdkIsVUFBd0IsVUFBaUIsRUFBRSxlQUFrQztRQUE3RSxpQkFXQztRQVZHLElBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQztZQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQzNFLEtBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3pDLElBQU0sVUFBVSxHQUFHLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzNCO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOztnQkF0Qm9CLGtCQUFrQjs7SUFGOUIsa0JBQWtCO1FBSjlCLElBQUksQ0FBQztZQUNGLElBQUksRUFBRSxhQUFhO1lBQ25CLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQztPQUNXLGtCQUFrQixDQXlCOUI7SUFBRCx5QkFBQztDQUFBLEFBekJELElBeUJDO1NBekJZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0sIFBpcGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyaWRUeXBlIH0gZnJvbSAnLi4vY29tbW9uL2dyaWQuaW50ZXJmYWNlJztcbmltcG9ydCB7IElneEdyaWRCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZ3JpZC1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBHcmlkQmFzZUFQSVNlcnZpY2UgfSBmcm9tICcuLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQVBJU2VydmljZSB9IGZyb20gJy4vZ3JpZC1hcGkuc2VydmljZSc7XG5cbi8qKiBAaGlkZGVuICovXG5AUGlwZSh7XG4gICAgbmFtZTogJ2dyaWREZXRhaWxzJyxcbiAgICBwdXJlOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneEdyaWREZXRhaWxzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHByaXZhdGUgZ3JpZEFQSTogSWd4R3JpZEFQSVNlcnZpY2U7XG4gICAgY29uc3RydWN0b3IoZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+KSB7XG4gICAgICAgIHRoaXMuZ3JpZEFQSSA9IDxJZ3hHcmlkQVBJU2VydmljZT5ncmlkQVBJO1xuICAgIH1cbiAgICBwdWJsaWMgdHJhbnNmb3JtKGNvbGxlY3Rpb246IGFueVtdLCBoYXNEZXRhaWxzOiBib29sZWFuLCBleHBhbnNpb25TdGF0ZXM6ICBNYXA8YW55LCBib29sZWFuPiwgcGlwZVRyaWdnZXI6IG51bWJlcikge1xuICAgICAgICBpZiAoIWhhc0RldGFpbHMpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuYWRkRGV0YWlsUm93cyhjb2xsZWN0aW9uLCBleHBhbnNpb25TdGF0ZXMpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhZGREZXRhaWxSb3dzKGNvbGxlY3Rpb246IGFueVtdLCBleHBhbnNpb25TdGF0ZXM6IE1hcDxhbnksIGJvb2xlYW4+KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBjb2xsZWN0aW9uLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHYpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmdyaWRBUEkuZ3JpZC5pc0dyb3VwQnlSZWNvcmQodikgJiYgIXRoaXMuZ3JpZEFQSS5ncmlkLmlzU3VtbWFyeVJvdyh2KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZEFQSS5nZXRfcm93X2V4cGFuc2lvbl9zdGF0ZSh2KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRldGFpbHNPYmogPSB7IGRldGFpbHNEYXRhOiB2IH07XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZGV0YWlsc09iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbiJdfQ==