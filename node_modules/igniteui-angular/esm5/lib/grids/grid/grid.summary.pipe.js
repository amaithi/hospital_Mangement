import { __decorate, __read, __spread } from "tslib";
import { Pipe } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';
/** @hidden */
var IgxGridSummaryPipe = /** @class */ (function () {
    function IgxGridSummaryPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridSummaryPipe.prototype.transform = function (collection, hasSummary, summaryCalculationMode, summaryPosition, id, pipeTrigger, summaryPipeTrigger) {
        if (!collection.data || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {
            return collection.data;
        }
        return this.addSummaryRows(id, collection, summaryPosition);
    };
    IgxGridSummaryPipe.prototype.addSummaryRows = function (gridId, collection, summaryPosition) {
        var _a;
        var recordsWithSummary = [];
        var lastChildMap = new Map();
        var grid = this.gridAPI.grid;
        var maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();
        if (collection.metadata.length && !grid.isGroupByRecord(collection.data[0]) &&
            grid.isGroupByRecord(collection.metadata[0]) && summaryPosition === GridSummaryPosition.bottom) {
            var groups = [];
            groups.push(collection.metadata[0]);
            while (groups[groups.length - 1].groupParent) {
                groups.push(groups[groups.length - 1].groupParent);
            }
            groups.reverse();
            groups.forEach(function (g) { return g.skip = true; });
            (_a = collection.data).splice.apply(_a, __spread([0, 0], groups));
        }
        for (var i = 0; i < collection.data.length; i++) {
            var record = collection.data[i];
            var skipAdd = false;
            var recordId = void 0;
            var groupByRecord = null;
            if (grid.isGroupByRecord(record)) {
                skipAdd = !!record.skip;
                record.skip = null;
                groupByRecord = record;
                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);
            }
            else {
                recordId = this.gridAPI.get_row_id(record);
            }
            if (!skipAdd) {
                recordsWithSummary.push(record);
            }
            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {
                var groupRecords = lastChildMap.get(recordId);
                for (var j = 0; j < groupRecords.length; j++) {
                    var groupRecord = groupRecords[j];
                    var groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);
                    var records = this.removeDeletedRecord(grid, groupRecord.records.slice());
                    var summaries = grid.summaryService.calculateSummaries(groupRecordId, records);
                    var summaryRecord = {
                        summaries: summaries,
                        max: maxSummaryHeight
                    };
                    recordsWithSummary.push(summaryRecord);
                }
            }
            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {
                continue;
            }
            if (summaryPosition === GridSummaryPosition.top) {
                var records = this.removeDeletedRecord(grid, groupByRecord.records.slice());
                var summaries = grid.summaryService.calculateSummaries(recordId, records);
                var summaryRecord = {
                    summaries: summaries,
                    max: maxSummaryHeight
                };
                recordsWithSummary.push(summaryRecord);
            }
            else if (summaryPosition === GridSummaryPosition.bottom) {
                var lastChild = groupByRecord;
                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {
                    lastChild = lastChild.groups[lastChild.groups.length - 1];
                }
                var lastChildId = void 0;
                if (grid.isExpandedGroup(lastChild)) {
                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);
                }
                else {
                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);
                }
                var groupRecords = lastChildMap.get(lastChildId);
                if (!groupRecords) {
                    groupRecords = [];
                    lastChildMap.set(lastChildId, groupRecords);
                }
                groupRecords.unshift(groupByRecord);
            }
        }
        return recordsWithSummary;
    };
    IgxGridSummaryPipe.prototype.removeDeletedRecord = function (grid, data) {
        if (!grid.transactions.enabled) {
            return data;
        }
        var deletedRows = grid.transactions.getTransactionLog().filter(function (t) { return t.type === 'delete'; }).map(function (t) { return t.id; });
        deletedRows.forEach(function (rowID) {
            var tempData = grid.primaryKey ? data.map(function (rec) { return rec[grid.primaryKey]; }) : data;
            var index = tempData.indexOf(rowID);
            if (index !== -1) {
                data.splice(index, 1);
            }
        });
        return data;
    };
    IgxGridSummaryPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxGridSummaryPipe = __decorate([
        Pipe({
            name: 'gridSummary',
            pure: true
        })
    ], IgxGridSummaryPipe);
    return IgxGridSummaryPipe;
}());
export { IgxGridSummaryPipe };
//# sourceMappingURL=data:application/json;base64,