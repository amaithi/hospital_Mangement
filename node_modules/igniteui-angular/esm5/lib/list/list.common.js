import { __decorate, __extends, __param } from "tslib";
import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
/** @hidden */
var IgxListBaseDirective = /** @class */ (function (_super) {
    __extends(IgxListBaseDirective, _super);
    function IgxListBaseDirective(_displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this._displayDensityOptions = _displayDensityOptions;
        return _this;
    }
    IgxListBaseDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    IgxListBaseDirective = __decorate([
        Directive({
            selector: '[igxListBase]'
        }),
        __param(0, Optional()), __param(0, Inject(DisplayDensityToken))
    ], IgxListBaseDirective);
    return IgxListBaseDirective;
}(DisplayDensityBase));
export { IgxListBaseDirective };
export var IgxListPanState;
(function (IgxListPanState) {
    IgxListPanState[IgxListPanState["NONE"] = 0] = "NONE";
    IgxListPanState[IgxListPanState["LEFT"] = 1] = "LEFT";
    IgxListPanState[IgxListPanState["RIGHT"] = 2] = "RIGHT";
})(IgxListPanState || (IgxListPanState = {}));
var IgxEmptyListTemplateDirective = /** @class */ (function () {
    function IgxEmptyListTemplateDirective(template) {
        this.template = template;
    }
    IgxEmptyListTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxEmptyListTemplateDirective = __decorate([
        Directive({
            selector: '[igxEmptyList]'
        })
    ], IgxEmptyListTemplateDirective);
    return IgxEmptyListTemplateDirective;
}());
export { IgxEmptyListTemplateDirective };
var IgxDataLoadingTemplateDirective = /** @class */ (function () {
    function IgxDataLoadingTemplateDirective(template) {
        this.template = template;
    }
    IgxDataLoadingTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxDataLoadingTemplateDirective = __decorate([
        Directive({
            selector: '[igxDataLoading]'
        })
    ], IgxDataLoadingTemplateDirective);
    return IgxDataLoadingTemplateDirective;
}());
export { IgxDataLoadingTemplateDirective };
var IgxListItemLeftPanningTemplateDirective = /** @class */ (function () {
    function IgxListItemLeftPanningTemplateDirective(template) {
        this.template = template;
    }
    IgxListItemLeftPanningTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxListItemLeftPanningTemplateDirective = __decorate([
        Directive({
            selector: '[igxListItemLeftPanning]'
        })
    ], IgxListItemLeftPanningTemplateDirective);
    return IgxListItemLeftPanningTemplateDirective;
}());
export { IgxListItemLeftPanningTemplateDirective };
var IgxListItemRightPanningTemplateDirective = /** @class */ (function () {
    function IgxListItemRightPanningTemplateDirective(template) {
        this.template = template;
    }
    IgxListItemRightPanningTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxListItemRightPanningTemplateDirective = __decorate([
        Directive({
            selector: '[igxListItemRightPanning]'
        })
    ], IgxListItemRightPanningTemplateDirective);
    return IgxListItemRightPanningTemplateDirective;
}());
export { IgxListItemRightPanningTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21tb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2xpc3QvbGlzdC5jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsa0JBQWtCLEVBQTBCLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNbEcsY0FBYztBQUlkO0lBQTBDLHdDQUFrQjtJQVl4RCw4QkFBK0Qsc0JBQThDO1FBQTdHLFlBQ0ksa0JBQU0sc0JBQXNCLENBQUMsU0FDaEM7UUFGOEQsNEJBQXNCLEdBQXRCLHNCQUFzQixDQUF3Qjs7SUFFN0csQ0FBQzs7Z0RBRlksUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7O0lBWjFDLG9CQUFvQjtRQUhoQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsZUFBZTtTQUM1QixDQUFDO1FBYWUsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7T0FaM0Msb0JBQW9CLENBZWhDO0lBQUQsMkJBQUM7Q0FBQSxBQWZELENBQTBDLGtCQUFrQixHQWUzRDtTQWZZLG9CQUFvQjtBQWlCakMsTUFBTSxDQUFOLElBQVksZUFBcUM7QUFBakQsV0FBWSxlQUFlO0lBQUcscURBQUksQ0FBQTtJQUFFLHFEQUFJLENBQUE7SUFBRSx1REFBSyxDQUFBO0FBQUMsQ0FBQyxFQUFyQyxlQUFlLEtBQWYsZUFBZSxRQUFzQjtBQUtqRDtJQUNJLHVDQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7O2dCQUFyQixXQUFXOztJQUQvQiw2QkFBNkI7UUFIekMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGdCQUFnQjtTQUM3QixDQUFDO09BQ1csNkJBQTZCLENBRXpDO0lBQUQsb0NBQUM7Q0FBQSxBQUZELElBRUM7U0FGWSw2QkFBNkI7QUFPMUM7SUFDSSx5Q0FBbUIsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFBSSxDQUFDOztnQkFBckIsV0FBVzs7SUFEL0IsK0JBQStCO1FBSDNDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxrQkFBa0I7U0FDL0IsQ0FBQztPQUNXLCtCQUErQixDQUUzQztJQUFELHNDQUFDO0NBQUEsQUFGRCxJQUVDO1NBRlksK0JBQStCO0FBTzVDO0lBQ0ksaURBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7Z0JBQXJCLFdBQVc7O0lBRC9CLHVDQUF1QztRQUhuRCxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsMEJBQTBCO1NBQ3ZDLENBQUM7T0FDVyx1Q0FBdUMsQ0FFbkQ7SUFBRCw4Q0FBQztDQUFBLEFBRkQsSUFFQztTQUZZLHVDQUF1QztBQU9wRDtJQUNJLGtEQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7O2dCQUFyQixXQUFXOztJQUQvQix3Q0FBd0M7UUFIcEQsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLDJCQUEyQjtTQUN4QyxDQUFDO09BQ1csd0NBQXdDLENBRXBEO0lBQUQsK0NBQUM7Q0FBQSxBQUZELElBRUM7U0FGWSx3Q0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmLCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlzcGxheURlbnNpdHlCYXNlLCBJRGlzcGxheURlbnNpdHlPcHRpb25zLCBEaXNwbGF5RGVuc2l0eVRva2VuIH0gZnJvbSAnLi4vY29yZS9kZW5zaXR5JztcblxuZXhwb3J0IGludGVyZmFjZSBJTGlzdENoaWxkIHtcbiAgICBpbmRleDogbnVtYmVyO1xufVxuXG4vKiogQGhpZGRlbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4TGlzdEJhc2VdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hMaXN0QmFzZURpcmVjdGl2ZSBleHRlbmRzIERpc3BsYXlEZW5zaXR5QmFzZSB7XG4gICAgb25JdGVtQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWxsb3dMZWZ0UGFubmluZzogYm9vbGVhbjtcbiAgICBhbGxvd1JpZ2h0UGFubmluZzogYm9vbGVhbjtcbiAgICBwYW5FbmRUcmlnZ2VyaW5nVGhyZXNob2xkOiBudW1iZXI7XG4gICAgb25MZWZ0UGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblJpZ2h0UGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblBhblN0YXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjaGlsZHJlbjogUXVlcnlMaXN0PGFueT47XG4gICAgbGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlOiBJZ3hMaXN0SXRlbUxlZnRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgbGlzdEl0ZW1SaWdodFBhbm5pbmdUZW1wbGF0ZTogSWd4TGlzdEl0ZW1SaWdodFBhbm5pbmdUZW1wbGF0ZURpcmVjdGl2ZTtcblxuICAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoRGlzcGxheURlbnNpdHlUb2tlbikgcHJvdGVjdGVkIF9kaXNwbGF5RGVuc2l0eU9wdGlvbnM6IElEaXNwbGF5RGVuc2l0eU9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoX2Rpc3BsYXlEZW5zaXR5T3B0aW9ucyk7XG4gICAgfVxufVxuXG5leHBvcnQgZW51bSBJZ3hMaXN0UGFuU3RhdGUgeyBOT05FLCBMRUZULCBSSUdIVCB9XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEVtcHR5TGlzdF0nXG59KVxuZXhwb3J0IGNsYXNzIElneEVtcHR5TGlzdFRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hEYXRhTG9hZGluZ10nXG59KVxuZXhwb3J0IGNsYXNzIElneERhdGFMb2FkaW5nVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneExpc3RJdGVtTGVmdFBhbm5pbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hMaXN0SXRlbUxlZnRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneExpc3RJdGVtUmlnaHRQYW5uaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TGlzdEl0ZW1SaWdodFBhbm5pbmdUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cbiJdfQ==