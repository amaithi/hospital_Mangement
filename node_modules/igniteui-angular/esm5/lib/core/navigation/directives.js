import { __decorate } from "tslib";
import { Directive, HostListener, Input, NgModule } from '@angular/core';
import { IgxNavigationService } from './nav.service';
/**
 * Directive that can toggle targets through provided NavigationService.
 *
 * Usage:
 * ```
 * <button igxNavToggle="ID"> Toggle </button>
 * ```
 * Where the `ID` matches the ID of compatible `IToggleView` component.
 */
var IgxNavigationToggleDirective = /** @class */ (function () {
    function IgxNavigationToggleDirective(nav) {
        this.state = nav;
    }
    IgxNavigationToggleDirective.prototype.toggleNavigationDrawer = function () {
        this.state.toggle(this.target, true);
    };
    IgxNavigationToggleDirective.ctorParameters = function () { return [
        { type: IgxNavigationService }
    ]; };
    __decorate([
        Input('igxNavToggle')
    ], IgxNavigationToggleDirective.prototype, "target", void 0);
    __decorate([
        HostListener('click')
    ], IgxNavigationToggleDirective.prototype, "toggleNavigationDrawer", null);
    IgxNavigationToggleDirective = __decorate([
        Directive({ selector: '[igxNavToggle]' })
    ], IgxNavigationToggleDirective);
    return IgxNavigationToggleDirective;
}());
export { IgxNavigationToggleDirective };
/**
 * Directive that can close targets through provided NavigationService.
 *
 * Usage:
 * ```
 * <button igxNavClose="ID"> Close </button>
 * ```
 * Where the `ID` matches the ID of compatible `IToggleView` component.
 */
var IgxNavigationCloseDirective = /** @class */ (function () {
    function IgxNavigationCloseDirective(nav) {
        this.state = nav;
    }
    IgxNavigationCloseDirective.prototype.closeNavigationDrawer = function () {
        this.state.close(this.target, true);
    };
    IgxNavigationCloseDirective.ctorParameters = function () { return [
        { type: IgxNavigationService }
    ]; };
    __decorate([
        Input('igxNavClose')
    ], IgxNavigationCloseDirective.prototype, "target", void 0);
    __decorate([
        HostListener('click')
    ], IgxNavigationCloseDirective.prototype, "closeNavigationDrawer", null);
    IgxNavigationCloseDirective = __decorate([
        Directive({ selector: '[igxNavClose]' })
    ], IgxNavigationCloseDirective);
    return IgxNavigationCloseDirective;
}());
export { IgxNavigationCloseDirective };
/**
 * @hidden
 */
var IgxNavigationModule = /** @class */ (function () {
    function IgxNavigationModule() {
    }
    IgxNavigationModule = __decorate([
        NgModule({
            declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],
            exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],
            providers: [IgxNavigationService]
        })
    ], IgxNavigationModule);
    return IgxNavigationModule;
}());
export { IgxNavigationModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvY29yZS9uYXZpZ2F0aW9uL2RpcmVjdGl2ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRW5EOzs7Ozs7OztHQVFHO0FBRUg7SUFLSSxzQ0FBWSxHQUF5QjtRQUNqQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztJQUNyQixDQUFDO0lBR00sNkRBQXNCLEdBQTdCO1FBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDOztnQkFQZ0Isb0JBQW9COztJQUZkO1FBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7Z0VBQWdCO0lBT3RDO1FBREMsWUFBWSxDQUFDLE9BQU8sQ0FBQzs4RUFHckI7SUFaUSw0QkFBNEI7UUFEeEMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLENBQUM7T0FDN0IsNEJBQTRCLENBYXhDO0lBQUQsbUNBQUM7Q0FBQSxBQWJELElBYUM7U0FiWSw0QkFBNEI7QUFlekM7Ozs7Ozs7O0dBUUc7QUFFSDtJQUtJLHFDQUFZLEdBQXlCO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO0lBQ3JCLENBQUM7SUFHTSwyREFBcUIsR0FBNUI7UUFDSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7O2dCQVBnQixvQkFBb0I7O0lBRmY7UUFBckIsS0FBSyxDQUFDLGFBQWEsQ0FBQzsrREFBZ0I7SUFPckM7UUFEQyxZQUFZLENBQUMsT0FBTyxDQUFDOzRFQUdyQjtJQVpRLDJCQUEyQjtRQUR2QyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLENBQUM7T0FDNUIsMkJBQTJCLENBYXZDO0lBQUQsa0NBQUM7Q0FBQSxBQWJELElBYUM7U0FiWSwyQkFBMkI7QUFleEM7O0dBRUc7QUFNSDtJQUFBO0lBQWtDLENBQUM7SUFBdEIsbUJBQW1CO1FBTC9CLFFBQVEsQ0FBQztZQUNOLFlBQVksRUFBRSxDQUFDLDJCQUEyQixFQUFFLDRCQUE0QixDQUFDO1lBQ3pFLE9BQU8sRUFBRSxDQUFDLDJCQUEyQixFQUFFLDRCQUE0QixDQUFDO1lBQ3BFLFNBQVMsRUFBRSxDQUFDLG9CQUFvQixDQUFDO1NBQ3BDLENBQUM7T0FDVyxtQkFBbUIsQ0FBRztJQUFELDBCQUFDO0NBQUEsQUFBbkMsSUFBbUM7U0FBdEIsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0LCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtJZ3hOYXZpZ2F0aW9uU2VydmljZX0gZnJvbSAnLi9uYXYuc2VydmljZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHRoYXQgY2FuIHRvZ2dsZSB0YXJnZXRzIHRocm91Z2ggcHJvdmlkZWQgTmF2aWdhdGlvblNlcnZpY2UuXG4gKlxuICogVXNhZ2U6XG4gKiBgYGBcbiAqIDxidXR0b24gaWd4TmF2VG9nZ2xlPVwiSURcIj4gVG9nZ2xlIDwvYnV0dG9uPlxuICogYGBgXG4gKiBXaGVyZSB0aGUgYElEYCBtYXRjaGVzIHRoZSBJRCBvZiBjb21wYXRpYmxlIGBJVG9nZ2xlVmlld2AgY29tcG9uZW50LlxuICovXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbaWd4TmF2VG9nZ2xlXScgfSlcbmV4cG9ydCBjbGFzcyBJZ3hOYXZpZ2F0aW9uVG9nZ2xlRGlyZWN0aXZlIHtcbiAgICBwdWJsaWMgc3RhdGU6IElneE5hdmlnYXRpb25TZXJ2aWNlO1xuXG4gICAgQElucHV0KCdpZ3hOYXZUb2dnbGUnKSBwcml2YXRlIHRhcmdldDtcblxuICAgIGNvbnN0cnVjdG9yKG5hdjogSWd4TmF2aWdhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5hdjtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gICAgcHVibGljIHRvZ2dsZU5hdmlnYXRpb25EcmF3ZXIoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUudG9nZ2xlKHRoaXMudGFyZ2V0LCB0cnVlKTtcbiAgICB9XG59XG5cbi8qKlxuICogRGlyZWN0aXZlIHRoYXQgY2FuIGNsb3NlIHRhcmdldHMgdGhyb3VnaCBwcm92aWRlZCBOYXZpZ2F0aW9uU2VydmljZS5cbiAqXG4gKiBVc2FnZTpcbiAqIGBgYFxuICogPGJ1dHRvbiBpZ3hOYXZDbG9zZT1cIklEXCI+IENsb3NlIDwvYnV0dG9uPlxuICogYGBgXG4gKiBXaGVyZSB0aGUgYElEYCBtYXRjaGVzIHRoZSBJRCBvZiBjb21wYXRpYmxlIGBJVG9nZ2xlVmlld2AgY29tcG9uZW50LlxuICovXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbaWd4TmF2Q2xvc2VdJyB9KVxuZXhwb3J0IGNsYXNzIElneE5hdmlnYXRpb25DbG9zZURpcmVjdGl2ZSB7XG4gICAgcHVibGljIHN0YXRlOiBJZ3hOYXZpZ2F0aW9uU2VydmljZTtcblxuICAgIEBJbnB1dCgnaWd4TmF2Q2xvc2UnKSBwcml2YXRlIHRhcmdldDtcblxuICAgIGNvbnN0cnVjdG9yKG5hdjogSWd4TmF2aWdhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5hdjtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gICAgcHVibGljIGNsb3NlTmF2aWdhdGlvbkRyYXdlcigpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5jbG9zZSh0aGlzLnRhcmdldCwgdHJ1ZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hOYXZpZ2F0aW9uQ2xvc2VEaXJlY3RpdmUsIElneE5hdmlnYXRpb25Ub2dnbGVEaXJlY3RpdmVdLFxuICAgIGV4cG9ydHM6IFtJZ3hOYXZpZ2F0aW9uQ2xvc2VEaXJlY3RpdmUsIElneE5hdmlnYXRpb25Ub2dnbGVEaXJlY3RpdmVdLFxuICAgIHByb3ZpZGVyczogW0lneE5hdmlnYXRpb25TZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hOYXZpZ2F0aW9uTW9kdWxlIHt9XG4iXX0=