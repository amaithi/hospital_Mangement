import { __decorate, __extends, __param } from "tslib";
import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, NgModule, Renderer2, HostListener, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken, DisplayDensity } from '../../core/density';
/**
 * The Button directive provides the Ignite UI Button functionality to every component that's intended to be used as a button.
 *
 * @igxModule IgxButtonModule
 *
 * @igxParent Data Entry & Display
 *
 * @igxTheme igx-button-theme
 *
 * @igxKeywords button, span, div, click
 *
 * @remarks
 * The Ignite UI Button directive is intended to be used by any button, span or div and turn it into a fully functional button.
 *
 * @example
 * ```html
 * <button igxButton="outlined">A Button</button>
 * ```
 */
var IgxButtonDirective = /** @class */ (function (_super) {
    __extends(IgxButtonDirective, _super);
    function IgxButtonDirective(element, _renderer, _displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.element = element;
        _this._renderer = _renderer;
        _this._displayDensityOptions = _displayDensityOptions;
        /**
         * @hidden
         * @internal
         */
        _this._defaultType = 'flat';
        /**
         * @hidden
         * @internal
         */
        _this._cssClassPrefix = 'igx-button';
        /**
         * Called when the button is clicked.
         */
        _this.buttonClick = new EventEmitter();
        /**
         * Sets/gets the `role` attribute.
         *
         * @example
         * ```typescript
         * this.button.role = 'navbutton';
         * let buttonRole = this.button.role;
         * ```
         */
        _this.role = 'button';
        /**
         * Gets or sets whether the button is selected.
         * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.
         *
         * @example
         * ```html
         * <button igxButton="flat" [selected]="button.selected"></button>
         * ```
         */
        _this.selected = false;
        return _this;
    }
    Object.defineProperty(IgxButtonDirective.prototype, "nativeElement", {
        /**
         * Returns the underlying DOM element.
         */
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "type", {
        /**
         * Sets the type of the button.
         *
         * @example
         * ```html
         * <button igxButton="icon"></button>
         * ```
         */
        set: function (value) {
            var newValue = value ? value : this._defaultType;
            if (this._type !== newValue) {
                this._renderer.removeClass(this.nativeElement, this._cssClassPrefix + "--" + this._type);
                this._type = newValue;
                this._renderer.addClass(this.nativeElement, this._cssClassPrefix + "--" + this._type);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "color", {
        /**
         * Sets the button text color.
         *
         * @example
         * ```html
         * <button igxButton="gradient" igxButtonColor="blue"></button>
         * ```
         */
        set: function (value) {
            this._color = value || this.nativeElement.style.color;
            this._renderer.setStyle(this.nativeElement, 'color', this._color);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "background", {
        /**
         * Sets the background color of the button.
         *
         * @example
         *  ```html
         * <button igxButton="raised" igxButtonBackground="red"></button>
         * ```
         */
        set: function (value) {
            this._backgroundColor = value || this._backgroundColor;
            this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "label", {
        /**
         * Sets the `aria-label` attribute.
         *
         * @example
         *  ```html
         * <button igxButton= "flat" igxLabel="Label"></button>
         * ```
         */
        set: function (value) {
            this._label = value || this._label;
            this._renderer.setAttribute(this.nativeElement, "aria-label", this._label);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "disabled", {
        /**
         * Enables/disables the button.
         *
         * @example
         * ```html
         * <button igxButton= "fab" [disabled]="true"></button>
         * ```
         */
        set: function (val) {
            val = !!val;
            this._disabled = val;
            if (val) {
                this._renderer.addClass(this.nativeElement, this._cssClassPrefix + "--disabled");
            }
            else {
                this._renderer.removeClass(this.nativeElement, this._cssClassPrefix + "--disabled");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "cssClassCosy", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&
                this.displayDensity === DisplayDensity.cosy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "cssClassCompact", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&
                this.displayDensity === DisplayDensity.compact;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "cssClassCosyFab", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "cssClassCompactFab", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "disabledAttribute", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            return this._disabled ? this._disabled : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @internal
     */
    IgxButtonDirective.prototype.onClick = function (ev) {
        this.buttonClick.emit(ev);
    };
    IgxButtonDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        Output()
    ], IgxButtonDirective.prototype, "buttonClick", void 0);
    __decorate([
        HostBinding('attr.role')
    ], IgxButtonDirective.prototype, "role", void 0);
    __decorate([
        Input('igxButton')
    ], IgxButtonDirective.prototype, "type", null);
    __decorate([
        Input('igxButtonColor')
    ], IgxButtonDirective.prototype, "color", null);
    __decorate([
        Input('igxButtonBackground')
    ], IgxButtonDirective.prototype, "background", null);
    __decorate([
        Input('igxLabel')
    ], IgxButtonDirective.prototype, "label", null);
    __decorate([
        Input()
    ], IgxButtonDirective.prototype, "disabled", null);
    __decorate([
        HostBinding('class.igx-button--cosy')
    ], IgxButtonDirective.prototype, "cssClassCosy", null);
    __decorate([
        HostBinding('class.igx-button--compact')
    ], IgxButtonDirective.prototype, "cssClassCompact", null);
    __decorate([
        HostBinding('class.igx-button--fab-cosy')
    ], IgxButtonDirective.prototype, "cssClassCosyFab", null);
    __decorate([
        HostBinding('class.igx-button--fab-compact')
    ], IgxButtonDirective.prototype, "cssClassCompactFab", null);
    __decorate([
        HostBinding('attr.disabled')
    ], IgxButtonDirective.prototype, "disabledAttribute", null);
    __decorate([
        Input()
    ], IgxButtonDirective.prototype, "selected", void 0);
    __decorate([
        HostListener('click', ['$event'])
    ], IgxButtonDirective.prototype, "onClick", null);
    IgxButtonDirective = __decorate([
        Directive({
            selector: '[igxButton]'
        }),
        __param(2, Optional()), __param(2, Inject(DisplayDensityToken))
    ], IgxButtonDirective);
    return IgxButtonDirective;
}(DisplayDensityBase));
export { IgxButtonDirective };
/**
 * @hidden
 */
var IgxButtonModule = /** @class */ (function () {
    function IgxButtonModule() {
    }
    IgxButtonModule = __decorate([
        NgModule({
            declarations: [IgxButtonDirective],
            exports: [IgxButtonDirective]
        })
    ], IgxButtonModule);
    return IgxButtonModule;
}());
export { IgxButtonModule };
//# sourceMappingURL=data:application/json;base64,