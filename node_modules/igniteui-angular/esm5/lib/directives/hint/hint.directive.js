import { __decorate } from "tslib";
import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';
var IgxHintPosition;
(function (IgxHintPosition) {
    IgxHintPosition[IgxHintPosition["START"] = 0] = "START";
    IgxHintPosition[IgxHintPosition["END"] = 1] = "END";
})(IgxHintPosition || (IgxHintPosition = {}));
var IgxHintDirective = /** @class */ (function () {
    function IgxHintDirective(_element) {
        this._element = _element;
        this._position = IgxHintPosition.START;
        /**
         * Sets/gets whether the hint position is at the start.
         * Default value is `false`.
         * ```typescript
         * @ViewChild('hint', {read: IgxHintDirective})
         * public igxHint: IgxHintDirective;
         * this.igxHint.isPositionStart = true;
         * ```
         * ```typescript
         * let isHintPositionStart = this.igxHint.isPositionStart;
         * ```
         * @memberof IgxHintDirective
         */
        this.isPositionStart = false;
        /**
         * Sets/gets whether the hint position is at the end.
         * Default value is `false`.
         * ```typescript
         * @ViewChild('hint', {read: IgxHintDirective})
         * public igxHint: IgxHintDirective;
         * this.igxHint.isPositionEnd = true;
         * ```
         * ```typescript
         * let isHintPositionEnd = this.igxHint.isPositionEnd;
         * ```
         * @memberof IgxHintDirective
         */
        this.isPositionEnd = false;
    }
    Object.defineProperty(IgxHintDirective.prototype, "position", {
        /**
         * Gets the position of the hint.
         * ```typescript
         * @ViewChild('hint', {read: IgxHintDirective})
         * public igxHint: IgxHintDirective;
         * let hintPosition =  this.igxHint.position;
         * ```
         * @memberof IgxHintDirective
         */
        get: function () {
            return this._position.toString();
        },
        /**
         * Sets the position of the hint.
         * ```html
         * <igx-input-group>
         *  <input igxInput type="text"/>
         *  <igx-hint #hint [position]="'start'">IgxHint displayed at the start</igx-hint>
         * </igx-input-group>
         * ```
         * @memberof IgxHintDirective
         */
        set: function (value) {
            var position = IgxHintPosition[value.toUpperCase()];
            if (position !== undefined) {
                this._position = position;
                this._applyPosition(this._position);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxHintDirective.prototype.ngOnInit = function () {
        this._applyPosition(this._position);
    };
    IgxHintDirective.prototype._applyPosition = function (position) {
        this.isPositionStart = this.isPositionEnd = false;
        switch (position) {
            case IgxHintPosition.START:
                this.isPositionStart = true;
                break;
            case IgxHintPosition.END:
                this.isPositionEnd = true;
                break;
            default: break;
        }
    };
    IgxHintDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostBinding('class.igx-input-group__hint-item--start')
    ], IgxHintDirective.prototype, "isPositionStart", void 0);
    __decorate([
        HostBinding('class.igx-input-group__hint-item--end')
    ], IgxHintDirective.prototype, "isPositionEnd", void 0);
    __decorate([
        Input('position')
    ], IgxHintDirective.prototype, "position", null);
    IgxHintDirective = __decorate([
        Directive({
            selector: 'igx-hint,[igxHint]'
        })
    ], IgxHintDirective);
    return IgxHintDirective;
}());
export { IgxHintDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvaGludC9oaW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbEYsSUFBSyxlQUdKO0FBSEQsV0FBSyxlQUFlO0lBQ2hCLHVEQUFLLENBQUE7SUFDTCxtREFBRyxDQUFBO0FBQ1AsQ0FBQyxFQUhJLGVBQWUsS0FBZixlQUFlLFFBR25CO0FBS0Q7SUFpQ0ksMEJBQW9CLFFBQW9CO1FBQXBCLGFBQVEsR0FBUixRQUFRLENBQVk7UUFoQ2hDLGNBQVMsR0FBb0IsZUFBZSxDQUFDLEtBQUssQ0FBQztRQUMzRDs7Ozs7Ozs7Ozs7O1dBWUc7UUFFSSxvQkFBZSxHQUFHLEtBQUssQ0FBQztRQUMvQjs7Ozs7Ozs7Ozs7O1dBWUc7UUFFSSxrQkFBYSxHQUFHLEtBQUssQ0FBQztJQUc3QixDQUFDO0lBWUQsc0JBQUksc0NBQVE7UUFPWjs7Ozs7Ozs7V0FRRzthQUNIO1lBQ0ksT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JDLENBQUM7UUE3QkQ7Ozs7Ozs7OztXQVNHO2FBRUgsVUFBYSxLQUFhO1lBQ3RCLElBQU0sUUFBUSxHQUFxQixlQUF1QixDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBQ2hGLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3ZDO1FBQ0wsQ0FBQzs7O09BQUE7SUFhRDs7T0FFRztJQUNILG1DQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU8seUNBQWMsR0FBdEIsVUFBdUIsUUFBeUI7UUFDNUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUNsRCxRQUFRLFFBQVEsRUFBRTtZQUNkLEtBQUssZUFBZSxDQUFDLEtBQUs7Z0JBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO2dCQUM1QixNQUFNO1lBQ1YsS0FBSyxlQUFlLENBQUMsR0FBRztnQkFDcEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7Z0JBQzFCLE1BQU07WUFDVixPQUFPLENBQUMsQ0FBQyxNQUFNO1NBQ2xCO0lBQ0wsQ0FBQzs7Z0JBbEQ2QixVQUFVOztJQWpCeEM7UUFEQyxXQUFXLENBQUMseUNBQXlDLENBQUM7NkRBQ3hCO0lBZS9CO1FBREMsV0FBVyxDQUFDLHVDQUF1QyxDQUFDOzJEQUN4QjtJQWU3QjtRQURDLEtBQUssQ0FBQyxVQUFVLENBQUM7b0RBT2pCO0lBcERRLGdCQUFnQjtRQUg1QixTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsb0JBQW9CO1NBQ2pDLENBQUM7T0FDVyxnQkFBZ0IsQ0FvRjVCO0lBQUQsdUJBQUM7Q0FBQSxBQXBGRCxJQW9GQztTQXBGWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmVudW0gSWd4SGludFBvc2l0aW9uIHtcbiAgICBTVEFSVCxcbiAgICBFTkRcbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtaGludCxbaWd4SGludF0nXG59KVxuZXhwb3J0IGNsYXNzIElneEhpbnREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgX3Bvc2l0aW9uOiBJZ3hIaW50UG9zaXRpb24gPSBJZ3hIaW50UG9zaXRpb24uU1RBUlQ7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHdoZXRoZXIgdGhlIGhpbnQgcG9zaXRpb24gaXMgYXQgdGhlIHN0YXJ0LlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnaGludCcsIHtyZWFkOiBJZ3hIaW50RGlyZWN0aXZlfSlcbiAgICAgKiBwdWJsaWMgaWd4SGludDogSWd4SGludERpcmVjdGl2ZTtcbiAgICAgKiB0aGlzLmlneEhpbnQuaXNQb3NpdGlvblN0YXJ0ID0gdHJ1ZTtcbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGlzSGludFBvc2l0aW9uU3RhcnQgPSB0aGlzLmlneEhpbnQuaXNQb3NpdGlvblN0YXJ0O1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hIaW50RGlyZWN0aXZlXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtaW5wdXQtZ3JvdXBfX2hpbnQtaXRlbS0tc3RhcnQnKVxuICAgIHB1YmxpYyBpc1Bvc2l0aW9uU3RhcnQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgd2hldGhlciB0aGUgaGludCBwb3NpdGlvbiBpcyBhdCB0aGUgZW5kLlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnaGludCcsIHtyZWFkOiBJZ3hIaW50RGlyZWN0aXZlfSlcbiAgICAgKiBwdWJsaWMgaWd4SGludDogSWd4SGludERpcmVjdGl2ZTtcbiAgICAgKiB0aGlzLmlneEhpbnQuaXNQb3NpdGlvbkVuZCA9IHRydWU7XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBpc0hpbnRQb3NpdGlvbkVuZCA9IHRoaXMuaWd4SGludC5pc1Bvc2l0aW9uRW5kO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hIaW50RGlyZWN0aXZlXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtaW5wdXQtZ3JvdXBfX2hpbnQtaXRlbS0tZW5kJylcbiAgICBwdWJsaWMgaXNQb3NpdGlvbkVuZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZikge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgaGludC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1pbnB1dC1ncm91cD5cbiAgICAgKiAgPGlucHV0IGlneElucHV0IHR5cGU9XCJ0ZXh0XCIvPlxuICAgICAqICA8aWd4LWhpbnQgI2hpbnQgW3Bvc2l0aW9uXT1cIidzdGFydCdcIj5JZ3hIaW50IGRpc3BsYXllZCBhdCB0aGUgc3RhcnQ8L2lneC1oaW50PlxuICAgICAqIDwvaWd4LWlucHV0LWdyb3VwPlxuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hIaW50RGlyZWN0aXZlXG4gICAgICovXG4gICAgQElucHV0KCdwb3NpdGlvbicpXG4gICAgc2V0IHBvc2l0aW9uKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb246IElneEhpbnRQb3NpdGlvbiA9IChJZ3hIaW50UG9zaXRpb24gYXMgYW55KVt2YWx1ZS50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgaWYgKHBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLl9hcHBseVBvc2l0aW9uKHRoaXMuX3Bvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgaGludC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnaGludCcsIHtyZWFkOiBJZ3hIaW50RGlyZWN0aXZlfSlcbiAgICAgKiBwdWJsaWMgaWd4SGludDogSWd4SGludERpcmVjdGl2ZTtcbiAgICAgKiBsZXQgaGludFBvc2l0aW9uID0gIHRoaXMuaWd4SGludC5wb3NpdGlvbjtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4SGludERpcmVjdGl2ZVxuICAgICAqL1xuICAgIGdldCBwb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5fYXBwbHlQb3NpdGlvbih0aGlzLl9wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYXBwbHlQb3NpdGlvbihwb3NpdGlvbjogSWd4SGludFBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuaXNQb3NpdGlvblN0YXJ0ID0gdGhpcy5pc1Bvc2l0aW9uRW5kID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgSWd4SGludFBvc2l0aW9uLlNUQVJUOlxuICAgICAgICAgICAgICAgIHRoaXMuaXNQb3NpdGlvblN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSWd4SGludFBvc2l0aW9uLkVORDpcbiAgICAgICAgICAgICAgICB0aGlzLmlzUG9zaXRpb25FbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=