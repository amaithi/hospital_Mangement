import { __decorate } from "tslib";
import { Component, EventEmitter, HostBinding, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isIE } from '../core/utils';
export var RadioLabelPosition;
(function (RadioLabelPosition) {
    RadioLabelPosition["BEFORE"] = "before";
    RadioLabelPosition["AFTER"] = "after";
})(RadioLabelPosition || (RadioLabelPosition = {}));
var nextId = 0;
var noop = function () { };
var Éµ0 = noop;
/**
 * **Ignite UI for Angular Radio Button** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)
 *
 * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.
 *
 * Example:
 * ```html
 * <igx-radio>
 *   Simple radio button
 * </igx-radio>
 * ```
 */
var IgxRadioComponent = /** @class */ (function () {
    function IgxRadioComponent() {
        /**
         * Sets/gets the `id` of the radio component.
         * If not set, the `id` of the first radio component will be `"igx-radio-0"`.
         * ```html
         * <igx-radio id = "my-first-radio"></igx-radio>
         * ```
         * ```typescript
         * let radioId =  this.radio.id;
         * ```
         * @memberof IgxRadioComponent
         */
        this.id = "igx-radio-" + nextId++;
        /**
         * Sets/gets the id of the `label` element in the radio component.
         * If not set, the id of the `label` in the first radio component will be `"igx-radio-0-label"`.
         * ```html
         * <igx-radio labelId = "Label1"></igx-radio>
         * ```
         * ```typescript
         * let labelId =  this.radio.labelId;
         * ```
         * @memberof IgxRadioComponent
         */
        this.labelId = this.id + "-label";
        /**
         * Sets/gets the position of the `label` in the radio component.
         * If not set, `labelPosition` will have value `"after"`.
         * ```html
         * <igx-radio labelPosition = "before"></igx-radio>
         * ```
         * ```typescript
         * let labelPosition =  this.radio.labelPosition;
         * ```
         * @memberof IgxRadioComponent
         */
        this.labelPosition = 'after';
        /**
         * Sets the value of the `tabindex` attribute.
         * ```html
         * <igx-radio [tabindex] = "1"></igx-radio>
         * ```
         * ```typescript
         * let tabIndex =  this.radio.tabindex;
         * ```
         * @memberof IgxRadioComponent
         */
        this.tabindex = null;
        /**
         * Enables/disables the ripple effect on the radio button..
         * If not set, the `disableRipple` will have value `false`.
         * ```html
         * <igx-radio [disableRipple] = "true"></igx-radio>
         * ```
         * ```typescript
         * let isDisabledRipple =  this.radio.disableRipple;
         * ```
         * @memberof IgxRadioComponent
         */
        this.disableRipple = false;
        /**
         * Sets/gets whether the radio button is required.
         * If not set, `required` will have value `false`.
         * ```html
         * <igx-radio [required] = "true"></igx-radio>
         * ```
         * ```typescript
         * let isRequired =  this.radio.required;
         * ```
         * @memberof IgxRadioComponent
         */
        this.required = false;
        /**
         * Sets/gets the `aria-labelledby` attribute of the radio component.
         * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.
         * ```html
         * <igx-radio aria-labelledby = "Radio1"></igx-radio>
         * ```
         * ```typescript
         * let ariaLabelledBy = this.radio.ariaLabelledBy;
         * ```
         * @memberof IgxRadioComponent
         */
        this.ariaLabelledBy = this.labelId;
        /**
         * Sets/gets the `aria-label` attribute of the radio component.
         * ```html
         * <igx-radio aria-label = "Radio1"></igx-radio>
         * ```
         * ```typescript
         * let ariaLabel =  this.radio.ariaLabel;
         * ```
         * @memberof IgxRadioComponent
         */
        this.ariaLabel = null;
        /**
         * An event that is emitted after the radio `value` is changed.
         * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.
         * @memberof IgxRadioComponent
         */
        this.change = new EventEmitter();
        /**
         * Returns the class of the radio component.
         * ```typescript
         * let radioClass = this.radio.cssClass;
         * ```
         * @memberof IgxRadioComponent
         */
        this.cssClass = 'igx-radio';
        /**
         * Sets/gets  the `checked` attribute.
         * Default value is `false`.
         * ```html
         * <igx-radio [checked] = "true"></igx-radio>
         * ```
         * ```typescript
         * let isChecked =  this.radio.checked;
         * ```
         * @memberof IgxRadioComponent
         */
        this.checked = false;
        /**
         * Sets/gets  the `disabled` attribute.
         * Default value is `false`.
         * ```html
         * <igx-radio [disabled] = "true"></igx-radio>
         * ```
         * ```typescript
         * let isDisabled =  this.radio.disabled;
         * ```
         * @memberof IgxRadioComponent
         */
        this.disabled = false;
        /**
         * Sets/gets whether the radio component is on focus.
         * Default value is `false`.
         * ```typescript
         * this.radio.focus = true;
         * ```
         * ```typescript
         * let isFocused =  this.radio.focused;
         * ```
         * @memberof IgxRadioComponent
         */
        this.focused = false;
        /**
         * @hidden
         */
        this.inputId = this.id + "-input";
        /**
         * @hidden
         */
        this._value = null;
        /**
         * @hidden
         */
        this._onTouchedCallback = noop;
        /**
         * @hidden
         */
        this._onChangeCallback = noop;
    }
    IgxRadioComponent_1 = IgxRadioComponent;
    /**
     * @hidden
     */
    IgxRadioComponent.prototype._onRadioChange = function (event) {
        event.stopPropagation();
    };
    /**
     * @hidden
     */
    IgxRadioComponent.prototype._onRadioClick = function (event) {
        event.stopPropagation();
        this.select();
        if (isIE()) {
            this.nativeRadio.nativeElement.blur();
        }
    };
    /**
     * @hidden
     */
    IgxRadioComponent.prototype._onLabelClick = function () {
        this.select();
    };
    /**
     * Selects the current radio button.
     * ```typescript
     * this.radio.select();
     * ```
     * @memberof IgxRadioComponent
     */
    IgxRadioComponent.prototype.select = function () {
        if (this.disabled) {
            return;
        }
        this.checked = true;
        this.focused = false;
        this.change.emit({ value: this.value, radio: this });
        this._onChangeCallback(this.value);
    };
    /**
     * Checks whether the provided value is consistent to the current radio button.
     * If it is, the checked attribute will have value `true`;
     * ```typescript
     * this.radio.writeValue('radioButtonValue');
     * ```
     */
    IgxRadioComponent.prototype.writeValue = function (value) {
        this._value = value;
        this.checked = (this._value === this.value);
    };
    /** @hidden */
    IgxRadioComponent.prototype.getEditElement = function () {
        return this.nativeRadio.nativeElement;
    };
    Object.defineProperty(IgxRadioComponent.prototype, "labelClass", {
        /**
         * @hidden
         */
        get: function () {
            switch (this.labelPosition) {
                case RadioLabelPosition.BEFORE:
                    return this.cssClass + "__label--before";
                case RadioLabelPosition.AFTER:
                default:
                    return this.cssClass + "__label";
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxRadioComponent.prototype.onFocus = function () {
        this.focused = true;
    };
    /**
     * @hidden
     */
    IgxRadioComponent.prototype.onBlur = function () {
        this.focused = false;
        this._onTouchedCallback();
    };
    /**
     * @hidden
     */
    IgxRadioComponent.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    /**
     * @hidden
     */
    IgxRadioComponent.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    var IgxRadioComponent_1;
    __decorate([
        ViewChild('radio', { static: true })
    ], IgxRadioComponent.prototype, "nativeRadio", void 0);
    __decorate([
        ViewChild('nativeLabel', { static: true })
    ], IgxRadioComponent.prototype, "nativeLabel", void 0);
    __decorate([
        ViewChild('placeholderLabel', { static: true })
    ], IgxRadioComponent.prototype, "placeholderLabel", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxRadioComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], IgxRadioComponent.prototype, "labelId", void 0);
    __decorate([
        Input()
    ], IgxRadioComponent.prototype, "labelPosition", void 0);
    __decorate([
        Input()
    ], IgxRadioComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], IgxRadioComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], IgxRadioComponent.prototype, "tabindex", void 0);
    __decorate([
        Input()
    ], IgxRadioComponent.prototype, "disableRipple", void 0);
    __decorate([
        Input()
    ], IgxRadioComponent.prototype, "required", void 0);
    __decorate([
        Input('aria-labelledby')
    ], IgxRadioComponent.prototype, "ariaLabelledBy", void 0);
    __decorate([
        Input('aria-label')
    ], IgxRadioComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Output()
    ], IgxRadioComponent.prototype, "change", void 0);
    __decorate([
        HostBinding('class.igx-radio')
    ], IgxRadioComponent.prototype, "cssClass", void 0);
    __decorate([
        HostBinding('class.igx-radio--checked'),
        Input()
    ], IgxRadioComponent.prototype, "checked", void 0);
    __decorate([
        HostBinding('class.igx-radio--disabled'),
        Input()
    ], IgxRadioComponent.prototype, "disabled", void 0);
    __decorate([
        HostBinding('class.igx-radio--focused')
    ], IgxRadioComponent.prototype, "focused", void 0);
    IgxRadioComponent = IgxRadioComponent_1 = __decorate([
        Component({
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent_1, multi: true }],
            selector: 'igx-radio',
            template: "<input #radio class=\"igx-radio__input\" type=\"radio\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (click)=\"_onRadioClick($event)\"\n    (change)=\"_onRadioChange($event)\"\n    (focus)=\"onFocus()\"\n    (blur)=\"onBlur()\" />\n\n<label #nativeLabel class=\"igx-radio__composite\" igxRipple\n    igxRippleTarget=\".igx-radio__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\"\n    [for]=\"inputId\">\n    <div class=\"igx-radio__ripple\"></div>\n</label>\n\n<span #placeholderLabel\n    [id]=\"labelId\"\n    [class]=\"labelClass\"\n    (click)=\"_onLabelClick()\">\n    <ng-content></ng-content>\n</span>\n"
        })
    ], IgxRadioComponent);
    return IgxRadioComponent;
}());
export { IgxRadioComponent };
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,