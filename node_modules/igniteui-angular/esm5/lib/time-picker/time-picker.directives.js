import { __decorate, __param } from "tslib";
/**
 * This file contains all the directives used by the @link IgxTimePickerComponent.
 * You should generally not use them directly.
 * @preferred
 */
import { Directive, ElementRef, HostBinding, HostListener, Inject, Input, TemplateRef } from '@angular/core';
import { IGX_TIME_PICKER_COMPONENT } from './time-picker.common';
import { InteractionMode } from '../core/enums';
/** @hidden */
var IgxItemListDirective = /** @class */ (function () {
    function IgxItemListDirective(timePicker, elementRef) {
        this.timePicker = timePicker;
        this.elementRef = elementRef;
        this.tabindex = 0;
    }
    Object.defineProperty(IgxItemListDirective.prototype, "defaultCSS", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxItemListDirective.prototype, "hourCSS", {
        get: function () {
            return this.type === 'hourList';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxItemListDirective.prototype, "minuteCSS", {
        get: function () {
            return this.type === 'minuteList';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxItemListDirective.prototype, "secondsCSS", {
        get: function () {
            return this.type === 'secondsList';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxItemListDirective.prototype, "ampmCSS", {
        get: function () {
            return this.type === 'ampmList';
        },
        enumerable: true,
        configurable: true
    });
    IgxItemListDirective.prototype.onFocus = function () {
        this.isActive = true;
    };
    IgxItemListDirective.prototype.onBlur = function () {
        this.isActive = false;
    };
    IgxItemListDirective.prototype.nextItem = function () {
        switch (this.type) {
            case 'hourList': {
                this.timePicker.nextHour();
                break;
            }
            case 'minuteList': {
                this.timePicker.nextMinute();
                break;
            }
            case 'secondsList': {
                this.timePicker.nextSeconds();
                break;
            }
            case 'ampmList': {
                this.timePicker.nextAmPm();
                break;
            }
        }
    };
    IgxItemListDirective.prototype.prevItem = function () {
        switch (this.type) {
            case 'hourList': {
                this.timePicker.prevHour();
                break;
            }
            case 'minuteList': {
                this.timePicker.prevMinute();
                break;
            }
            case 'secondsList': {
                this.timePicker.prevSeconds();
                break;
            }
            case 'ampmList': {
                this.timePicker.prevAmPm();
                break;
            }
        }
    };
    /**
     * @hidden
     */
    IgxItemListDirective.prototype.onKeydownArrowDown = function (event) {
        event.preventDefault();
        this.nextItem();
    };
    /**
     * @hidden
     */
    IgxItemListDirective.prototype.onKeydownArrowUp = function (event) {
        event.preventDefault();
        this.prevItem();
    };
    /**
     * @hidden
     */
    IgxItemListDirective.prototype.onKeydownArrowRight = function (event) {
        event.preventDefault();
        var listName = event.target.className;
        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.secondsList) {
            this.timePicker.secondsList.nativeElement.focus();
        }
        else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1 ||
            listName.indexOf('secondsList') !== -1) && this.timePicker.ampmList) {
            this.timePicker.ampmList.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    IgxItemListDirective.prototype.onKeydownArrowLeft = function (event) {
        event.preventDefault();
        var listName = event.target.className;
        if (listName.indexOf('ampmList') !== -1 && this.timePicker.secondsList) {
            this.timePicker.secondsList.nativeElement.focus();
        }
        else if (listName.indexOf('secondsList') !== -1 && this.timePicker.secondsList
            && listName.indexOf('minutesList') && this.timePicker.minuteList) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('secondsList') !== -1 ||
            listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {
            this.timePicker.hourList.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    IgxItemListDirective.prototype.onKeydownEnter = function (event) {
        event.preventDefault();
        if (this.timePicker.mode === InteractionMode.DropDown) {
            this.timePicker.close();
            return;
        }
        this.timePicker.okButtonClick();
    };
    /**
     * @hidden
     */
    IgxItemListDirective.prototype.onKeydownEscape = function (event) {
        event.preventDefault();
        this.timePicker.cancelButtonClick();
    };
    /**
     * @hidden
     */
    IgxItemListDirective.prototype.onHover = function () {
        this.elementRef.nativeElement.focus();
    };
    /**
     * @hidden
     */
    IgxItemListDirective.prototype.onScroll = function (event) {
        event.preventDefault();
        event.stopPropagation();
        if (event.deltaY > 0) {
            this.nextItem();
        }
        else if (event.deltaY < 0) {
            this.prevItem();
        }
    };
    /**
     * @hidden
     */
    IgxItemListDirective.prototype.onPanMove = function (event) {
        if (event.deltaY < 0) {
            this.nextItem();
        }
        else if (event.deltaY > 0) {
            this.prevItem();
        }
    };
    IgxItemListDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
        { type: ElementRef }
    ]; };
    __decorate([
        Input('igxItemList')
    ], IgxItemListDirective.prototype, "type", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxItemListDirective.prototype, "tabindex", void 0);
    __decorate([
        HostBinding('class.igx-time-picker__column')
    ], IgxItemListDirective.prototype, "defaultCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__hourList')
    ], IgxItemListDirective.prototype, "hourCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__minuteList')
    ], IgxItemListDirective.prototype, "minuteCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__secondsList')
    ], IgxItemListDirective.prototype, "secondsCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__ampmList')
    ], IgxItemListDirective.prototype, "ampmCSS", null);
    __decorate([
        HostListener('focus')
    ], IgxItemListDirective.prototype, "onFocus", null);
    __decorate([
        HostListener('blur')
    ], IgxItemListDirective.prototype, "onBlur", null);
    __decorate([
        HostListener('keydown.arrowdown', ['$event'])
    ], IgxItemListDirective.prototype, "onKeydownArrowDown", null);
    __decorate([
        HostListener('keydown.arrowup', ['$event'])
    ], IgxItemListDirective.prototype, "onKeydownArrowUp", null);
    __decorate([
        HostListener('keydown.arrowright', ['$event'])
    ], IgxItemListDirective.prototype, "onKeydownArrowRight", null);
    __decorate([
        HostListener('keydown.arrowleft', ['$event'])
    ], IgxItemListDirective.prototype, "onKeydownArrowLeft", null);
    __decorate([
        HostListener('keydown.enter', ['$event'])
    ], IgxItemListDirective.prototype, "onKeydownEnter", null);
    __decorate([
        HostListener('keydown.escape', ['$event'])
    ], IgxItemListDirective.prototype, "onKeydownEscape", null);
    __decorate([
        HostListener('mouseover')
    ], IgxItemListDirective.prototype, "onHover", null);
    __decorate([
        HostListener('wheel', ['$event'])
    ], IgxItemListDirective.prototype, "onScroll", null);
    __decorate([
        HostListener('panmove', ['$event'])
    ], IgxItemListDirective.prototype, "onPanMove", null);
    IgxItemListDirective = __decorate([
        Directive({
            selector: '[igxItemList]'
        }),
        __param(0, Inject(IGX_TIME_PICKER_COMPONENT))
    ], IgxItemListDirective);
    return IgxItemListDirective;
}());
export { IgxItemListDirective };
/**
 * @hidden
 */
var IgxHourItemDirective = /** @class */ (function () {
    function IgxHourItemDirective(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    Object.defineProperty(IgxHourItemDirective.prototype, "defaultCSS", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHourItemDirective.prototype, "selectedCSS", {
        get: function () {
            return this.isSelectedHour;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHourItemDirective.prototype, "activeCSS", {
        get: function () {
            return this.isSelectedHour && this.itemList.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHourItemDirective.prototype, "isSelectedHour", {
        get: function () {
            return this.timePicker.selectedHour === this.value;
        },
        enumerable: true,
        configurable: true
    });
    IgxHourItemDirective.prototype.onClick = function (item) {
        if (item !== '') {
            this.timePicker.scrollHourIntoView(item);
        }
    };
    IgxHourItemDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
        { type: IgxItemListDirective }
    ]; };
    __decorate([
        Input('igxHourItem')
    ], IgxHourItemDirective.prototype, "value", void 0);
    __decorate([
        HostBinding('class.igx-time-picker__item')
    ], IgxHourItemDirective.prototype, "defaultCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__item--selected')
    ], IgxHourItemDirective.prototype, "selectedCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__item--active')
    ], IgxHourItemDirective.prototype, "activeCSS", null);
    __decorate([
        HostListener('click', ['value'])
    ], IgxHourItemDirective.prototype, "onClick", null);
    IgxHourItemDirective = __decorate([
        Directive({
            selector: '[igxHourItem]'
        }),
        __param(0, Inject(IGX_TIME_PICKER_COMPONENT))
    ], IgxHourItemDirective);
    return IgxHourItemDirective;
}());
export { IgxHourItemDirective };
/**
 * @hidden
 */
var IgxMinuteItemDirective = /** @class */ (function () {
    function IgxMinuteItemDirective(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    Object.defineProperty(IgxMinuteItemDirective.prototype, "defaultCSS", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMinuteItemDirective.prototype, "selectedCSS", {
        get: function () {
            return this.isSelectedMinute;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMinuteItemDirective.prototype, "activeCSS", {
        get: function () {
            return this.isSelectedMinute && this.itemList.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMinuteItemDirective.prototype, "isSelectedMinute", {
        get: function () {
            return this.timePicker.selectedMinute === this.value;
        },
        enumerable: true,
        configurable: true
    });
    IgxMinuteItemDirective.prototype.onClick = function (item) {
        if (item !== '') {
            this.timePicker.scrollMinuteIntoView(item);
        }
    };
    IgxMinuteItemDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
        { type: IgxItemListDirective }
    ]; };
    __decorate([
        Input('igxMinuteItem')
    ], IgxMinuteItemDirective.prototype, "value", void 0);
    __decorate([
        HostBinding('class.igx-time-picker__item')
    ], IgxMinuteItemDirective.prototype, "defaultCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__item--selected')
    ], IgxMinuteItemDirective.prototype, "selectedCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__item--active')
    ], IgxMinuteItemDirective.prototype, "activeCSS", null);
    __decorate([
        HostListener('click', ['value'])
    ], IgxMinuteItemDirective.prototype, "onClick", null);
    IgxMinuteItemDirective = __decorate([
        Directive({
            selector: '[igxMinuteItem]'
        }),
        __param(0, Inject(IGX_TIME_PICKER_COMPONENT))
    ], IgxMinuteItemDirective);
    return IgxMinuteItemDirective;
}());
export { IgxMinuteItemDirective };
/**
 * @hidden
 */
var IgxSecondsItemDirective = /** @class */ (function () {
    function IgxSecondsItemDirective(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    Object.defineProperty(IgxSecondsItemDirective.prototype, "defaultCSS", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSecondsItemDirective.prototype, "selectedCSS", {
        get: function () {
            return this.isSelectedSeconds;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSecondsItemDirective.prototype, "activeCSS", {
        get: function () {
            return this.isSelectedSeconds && this.itemList.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSecondsItemDirective.prototype, "isSelectedSeconds", {
        get: function () {
            return this.timePicker.selectedSeconds === this.value;
        },
        enumerable: true,
        configurable: true
    });
    IgxSecondsItemDirective.prototype.onClick = function (item) {
        if (item !== '') {
            this.timePicker.scrollSecondsIntoView(item);
        }
    };
    IgxSecondsItemDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
        { type: IgxItemListDirective }
    ]; };
    __decorate([
        Input('igxSecondsItem')
    ], IgxSecondsItemDirective.prototype, "value", void 0);
    __decorate([
        HostBinding('class.igx-time-picker__item')
    ], IgxSecondsItemDirective.prototype, "defaultCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__item--selected')
    ], IgxSecondsItemDirective.prototype, "selectedCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__item--active')
    ], IgxSecondsItemDirective.prototype, "activeCSS", null);
    __decorate([
        HostListener('click', ['value'])
    ], IgxSecondsItemDirective.prototype, "onClick", null);
    IgxSecondsItemDirective = __decorate([
        Directive({
            selector: '[igxSecondsItem]'
        }),
        __param(0, Inject(IGX_TIME_PICKER_COMPONENT))
    ], IgxSecondsItemDirective);
    return IgxSecondsItemDirective;
}());
export { IgxSecondsItemDirective };
/**
 * @hidden
 */
var IgxAmPmItemDirective = /** @class */ (function () {
    function IgxAmPmItemDirective(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    Object.defineProperty(IgxAmPmItemDirective.prototype, "defaultCSS", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAmPmItemDirective.prototype, "selectedCSS", {
        get: function () {
            return this.isSelectedAmPm;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAmPmItemDirective.prototype, "activeCSS", {
        get: function () {
            return this.isSelectedAmPm && this.itemList.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAmPmItemDirective.prototype, "isSelectedAmPm", {
        get: function () {
            return this.timePicker.selectedAmPm === this.value;
        },
        enumerable: true,
        configurable: true
    });
    IgxAmPmItemDirective.prototype.onClick = function (item) {
        if (item !== '') {
            this.timePicker.scrollAmPmIntoView(item);
        }
    };
    IgxAmPmItemDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
        { type: IgxItemListDirective }
    ]; };
    __decorate([
        Input('igxAmPmItem')
    ], IgxAmPmItemDirective.prototype, "value", void 0);
    __decorate([
        HostBinding('class.igx-time-picker__item')
    ], IgxAmPmItemDirective.prototype, "defaultCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__item--selected')
    ], IgxAmPmItemDirective.prototype, "selectedCSS", null);
    __decorate([
        HostBinding('class.igx-time-picker__item--active')
    ], IgxAmPmItemDirective.prototype, "activeCSS", null);
    __decorate([
        HostListener('click', ['value'])
    ], IgxAmPmItemDirective.prototype, "onClick", null);
    IgxAmPmItemDirective = __decorate([
        Directive({
            selector: '[igxAmPmItem]'
        }),
        __param(0, Inject(IGX_TIME_PICKER_COMPONENT))
    ], IgxAmPmItemDirective);
    return IgxAmPmItemDirective;
}());
export { IgxAmPmItemDirective };
/**
 * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.
 */
var IgxTimePickerTemplateDirective = /** @class */ (function () {
    function IgxTimePickerTemplateDirective(template) {
        this.template = template;
    }
    IgxTimePickerTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxTimePickerTemplateDirective = __decorate([
        Directive({
            selector: '[igxTimePickerTemplate]'
        })
    ], IgxTimePickerTemplateDirective);
    return IgxTimePickerTemplateDirective;
}());
export { IgxTimePickerTemplateDirective };
/**
 * This directive can be used to add custom action buttons to the dropdownb/dialog.
 */
var IgxTimePickerActionsDirective = /** @class */ (function () {
    function IgxTimePickerActionsDirective(template) {
        this.template = template;
    }
    IgxTimePickerActionsDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    IgxTimePickerActionsDirective = __decorate([
        Directive({
            selector: '[igxTimePickerActions]'
        })
    ], IgxTimePickerActionsDirective);
    return IgxTimePickerActionsDirective;
}());
export { IgxTimePickerActionsDirective };
//# sourceMappingURL=data:application/json;base64,