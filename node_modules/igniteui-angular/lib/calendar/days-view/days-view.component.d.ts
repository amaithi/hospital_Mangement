import { EventEmitter, QueryList, DoCheck, OnInit } from '@angular/core';
import { ICalendarDate } from '../../calendar/calendar';
import { IgxDayItemComponent } from './day-item.component';
import { DateRangeDescriptor } from '../../core/dates';
import { IgxCalendarBaseDirective } from '../calendar-base';
import { IViewChangingEventArgs } from './days-view.interface';
import { IgxDaysViewNavigationService } from '../days-view/daysview-navigation.service';
import * as ɵngcc0 from '@angular/core';
export declare class IgxDaysViewComponent extends IgxCalendarBaseDirective implements DoCheck, OnInit {
    daysNavService: IgxDaysViewNavigationService;
    /**
     * Sets/gets the `id` of the days view.
     * If not set, the `id` will have value `"igx-days-view-0"`.
     * ```html
     * <igx-days-view id="my-days-view"></igx-days-view>
     * ```
     * ```typescript
     * let daysViewId =  this.daysView.id;
     * ```
     */
    id: string;
    /**
     * @hidden
     */
    changeDaysView: boolean;
    /**
     * @hidden
     */
    onDateSelection: EventEmitter<ICalendarDate>;
    /**
     * @hidden
     */
    onViewChanging: EventEmitter<IViewChangingEventArgs>;
    /**
     * @hidden
     */
    dates: QueryList<IgxDayItemComponent>;
    /**
     * @hidden
     */
    outOfRangeDates: DateRangeDescriptor[];
    /**
     * @hidden
     */
    nextMonthView: IgxDaysViewComponent;
    /**
     * @hidden
     */
    prevMonthView: IgxDaysViewComponent;
    /**
     * The default css class applied to the component.
     *
     * @hidden
     */
    styleClass: boolean;
    /**
     * @hidden
     */
    constructor(daysNavService: IgxDaysViewNavigationService);
    /**
     * @hidden
     */
    get getCalendarMonth(): ICalendarDate[][];
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngDoCheck(): void;
    /**
     * Returns the locale representation of the date in the days view.
     *
     * @hidden
     */
    formattedDate(value: Date): string;
    /**
     * @hidden
     */
    generateWeekHeader(): string[];
    /**
     * @hidden
     */
    rowTracker(index: any, item: any): string;
    /**
     * @hidden
     */
    dateTracker(index: any, item: any): string;
    /**
     * @hidden
     */
    isCurrentMonth(value: Date): boolean;
    /**
     * @hidden
     */
    isCurrentYear(value: Date): boolean;
    /**
     * @hidden
     */
    isSelected(date: ICalendarDate): boolean;
    /**
     * @hidden
     */
    isLastInRange(date: ICalendarDate): boolean;
    /**
     * @hidden
     */
    isFirstInRange(date: ICalendarDate): boolean;
    /**
     * @hidden
     */
    isWithinRange(date: Date, checkForRange: boolean, min?: Date, max?: Date): boolean;
    /**
     * @hidden
     */
    focusActiveDate(): void;
    /**
     * @hidden
     */
    selectDay(event: any): void;
    /**
     * @hidden
     */
    private disableOutOfRangeDates;
    /**
     * @hidden
     */
    getFirstMonthView(): IgxDaysViewComponent;
    /**
     * @hidden
     */
    private getLastMonthView;
    /**
     * @hidden
     */
    private get isSingleSelection();
    /**
     * @hidden
     */
    onKeydownArrow(event: KeyboardEvent): void;
    /**
     * @hidden
     */
    onKeydownHome(event: KeyboardEvent): void;
    /**
     * @hidden
     */
    onKeydownEnd(event: KeyboardEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDaysViewComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxDaysViewComponent, "igx-days-view", never, {
    "id": "id";
    "changeDaysView": "changeDaysView";
}, {
    "onDateSelection": "onDateSelection";
    "onViewChanging": "onViewChanging";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5cy12aWV3LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkYXlzLXZpZXcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNklBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIERvQ2hlY2ssIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNhbGVuZGFyRGF0ZSB9IGZyb20gJy4uLy4uL2NhbGVuZGFyL2NhbGVuZGFyJztcbmltcG9ydCB7IElneERheUl0ZW1Db21wb25lbnQgfSBmcm9tICcuL2RheS1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRlUmFuZ2VEZXNjcmlwdG9yIH0gZnJvbSAnLi4vLi4vY29yZS9kYXRlcyc7XG5pbXBvcnQgeyBJZ3hDYWxlbmRhckJhc2VEaXJlY3RpdmUgfSBmcm9tICcuLi9jYWxlbmRhci1iYXNlJztcbmltcG9ydCB7IElWaWV3Q2hhbmdpbmdFdmVudEFyZ3MgfSBmcm9tICcuL2RheXMtdmlldy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSWd4RGF5c1ZpZXdOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4uL2RheXMtdmlldy9kYXlzdmlldy1uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RGF5c1ZpZXdDb21wb25lbnQgZXh0ZW5kcyBJZ3hDYWxlbmRhckJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBEb0NoZWNrLCBPbkluaXQge1xuICAgIGRheXNOYXZTZXJ2aWNlOiBJZ3hEYXlzVmlld05hdmlnYXRpb25TZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgYGlkYCBvZiB0aGUgZGF5cyB2aWV3LlxuICAgICAqIElmIG5vdCBzZXQsIHRoZSBgaWRgIHdpbGwgaGF2ZSB2YWx1ZSBgXCJpZ3gtZGF5cy12aWV3LTBcImAuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZGF5cy12aWV3IGlkPVwibXktZGF5cy12aWV3XCI+PC9pZ3gtZGF5cy12aWV3PlxuICAgICAqIGBgYFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZGF5c1ZpZXdJZCA9ICB0aGlzLmRheXNWaWV3LmlkO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNoYW5nZURheXNWaWV3OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkRhdGVTZWxlY3Rpb246IEV2ZW50RW1pdHRlcjxJQ2FsZW5kYXJEYXRlPjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25WaWV3Q2hhbmdpbmc6IEV2ZW50RW1pdHRlcjxJVmlld0NoYW5naW5nRXZlbnRBcmdzPjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZGF0ZXM6IFF1ZXJ5TGlzdDxJZ3hEYXlJdGVtQ29tcG9uZW50PjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb3V0T2ZSYW5nZURhdGVzOiBEYXRlUmFuZ2VEZXNjcmlwdG9yW107XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5leHRNb250aFZpZXc6IElneERheXNWaWV3Q29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcmV2TW9udGhWaWV3OiBJZ3hEYXlzVmlld0NvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBjc3MgY2xhc3MgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHN0eWxlQ2xhc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRheXNOYXZTZXJ2aWNlOiBJZ3hEYXlzVmlld05hdmlnYXRpb25TZXJ2aWNlKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGdldENhbGVuZGFyTW9udGgoKTogSUNhbGVuZGFyRGF0ZVtdW107XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxvY2FsZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZGF0ZSBpbiB0aGUgZGF5cyB2aWV3LlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZvcm1hdHRlZERhdGUodmFsdWU6IERhdGUpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdlbmVyYXRlV2Vla0hlYWRlcigpOiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcm93VHJhY2tlcihpbmRleDogYW55LCBpdGVtOiBhbnkpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGRhdGVUcmFja2VyKGluZGV4OiBhbnksIGl0ZW06IGFueSk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaXNDdXJyZW50TW9udGgodmFsdWU6IERhdGUpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpc0N1cnJlbnRZZWFyKHZhbHVlOiBEYXRlKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaXNTZWxlY3RlZChkYXRlOiBJQ2FsZW5kYXJEYXRlKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaXNMYXN0SW5SYW5nZShkYXRlOiBJQ2FsZW5kYXJEYXRlKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaXNGaXJzdEluUmFuZ2UoZGF0ZTogSUNhbGVuZGFyRGF0ZSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGlzV2l0aGluUmFuZ2UoZGF0ZTogRGF0ZSwgY2hlY2tGb3JSYW5nZTogYm9vbGVhbiwgbWluPzogRGF0ZSwgbWF4PzogRGF0ZSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZvY3VzQWN0aXZlRGF0ZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZWxlY3REYXkoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZGlzYWJsZU91dE9mUmFuZ2VEYXRlcztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0Rmlyc3RNb250aFZpZXcoKTogSWd4RGF5c1ZpZXdDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0TGFzdE1vbnRoVmlldztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXQgaXNTaW5nbGVTZWxlY3Rpb24oKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25LZXlkb3duQXJyb3coZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbktleWRvd25Ib21lKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25LZXlkb3duRW5kKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbn1cbiJdfQ==