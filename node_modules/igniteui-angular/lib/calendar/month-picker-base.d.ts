import { IgxCalendarBaseDirective } from './calendar-base';
import { ElementRef, QueryList } from '@angular/core';
/**
 * Sets the calender view - days, months or years.
 */
import * as ɵngcc0 from '@angular/core';
export declare enum CalendarView {
    DEFAULT = 0,
    YEAR = 1,
    DECADE = 2
}
export declare class IgxMonthPickerBaseDirective extends IgxCalendarBaseDirective {
    /**
     * Holds month view index we are operating on.
     */
    protected activeViewIdx: number;
    /**
     * The default `tabindex` attribute for the component.
     *
     * @hidden
     */
    tabindex: number;
    /**
     * @hidden
     */
    yearsBtns: QueryList<ElementRef>;
    /**
     * Gets the current active view.
     */
    get activeView(): CalendarView;
    /**
     * Sets the current active view.
     */
    set activeView(val: CalendarView);
    /**
     * @hidden
     */
    get isDefaultView(): boolean;
    /**
     * @hidden
     */
    get isDecadeView(): boolean;
    /**
     * @hidden
     */
    private _activeView;
    /**
     * @hidden
     */
    changeYear(event: Date): void;
    /**
     * @hidden
     */
    activeViewDecade(activeViewIdx?: number): void;
    /**
     * @hidden
     */
    activeViewDecadeKB(event: any, activeViewIdx?: number): void;
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     */
    formattedYear(value: Date): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxMonthPickerBaseDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxMonthPickerBaseDirective, "[igxMonthPickerBase]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtcGlja2VyLWJhc2UuZC50cyIsInNvdXJjZXMiOlsibW9udGgtcGlja2VyLWJhc2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyREEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZ3hDYWxlbmRhckJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2NhbGVuZGFyLWJhc2UnO1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIFNldHMgdGhlIGNhbGVuZGVyIHZpZXcgLSBkYXlzLCBtb250aHMgb3IgeWVhcnMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGVudW0gQ2FsZW5kYXJWaWV3IHtcbiAgICBERUZBVUxUID0gMCxcbiAgICBZRUFSID0gMSxcbiAgICBERUNBREUgPSAyXG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hNb250aFBpY2tlckJhc2VEaXJlY3RpdmUgZXh0ZW5kcyBJZ3hDYWxlbmRhckJhc2VEaXJlY3RpdmUge1xuICAgIC8qKlxuICAgICAqIEhvbGRzIG1vbnRoIHZpZXcgaW5kZXggd2UgYXJlIG9wZXJhdGluZyBvbi5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWN0aXZlVmlld0lkeDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IGB0YWJpbmRleGAgYXR0cmlidXRlIGZvciB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRhYmluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHllYXJzQnRuczogUXVlcnlMaXN0PEVsZW1lbnRSZWY+O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgYWN0aXZlIHZpZXcuXG4gICAgICovXG4gICAgZ2V0IGFjdGl2ZVZpZXcoKTogQ2FsZW5kYXJWaWV3O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgYWN0aXZlIHZpZXcuXG4gICAgICovXG4gICAgc2V0IGFjdGl2ZVZpZXcodmFsOiBDYWxlbmRhclZpZXcpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgaXNEZWZhdWx0VmlldygpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgaXNEZWNhZGVWaWV3KCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX2FjdGl2ZVZpZXc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNoYW5nZVllYXIoZXZlbnQ6IERhdGUpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBhY3RpdmVWaWV3RGVjYWRlKGFjdGl2ZVZpZXdJZHg/OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBhY3RpdmVWaWV3RGVjYWRlS0IoZXZlbnQ6IGFueSwgYWN0aXZlVmlld0lkeD86IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbG9jYWxlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB5ZWFyIGluIHRoZSB5ZWFyIHZpZXcgaWYgZW5hYmxlZCxcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJucyB0aGUgZGVmYXVsdCBgRGF0ZS5nZXRGdWxsWWVhcigpYCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBmb3JtYXR0ZWRZZWFyKHZhbHVlOiBEYXRlKTogc3RyaW5nO1xufVxuIl19