/**
 * This file contains all the directives used by the @link IgxCalendarComponent.
 * Except for the directives which are used for templating the calendar itself
 * you should generally not use them directly.
 * @preferred
 */
import { EventEmitter, TemplateRef, ElementRef, AfterViewInit, OnDestroy, NgZone } from '@angular/core';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxCalendarYearDirective {
    value: Date;
    date: Date;
    onYearSelection: EventEmitter<Date>;
    get defaultCSS(): boolean;
    get currentCSS(): boolean;
    get isCurrentYear(): boolean;
    onClick(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCalendarYearDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCalendarYearDirective, "[igxCalendarYear]", never, {
    "value": "igxCalendarYear";
    "date": "date";
}, {
    "onYearSelection": "onYearSelection";
}, never>;
}
export declare class IgxCalendarMonthDirective {
    elementRef: ElementRef;
    value: Date;
    date: Date;
    index: any;
    onMonthSelection: EventEmitter<Date>;
    tabindex: number;
    get defaultCSS(): boolean;
    get currentCSS(): boolean;
    get isCurrentMonth(): boolean;
    get nativeElement(): any;
    constructor(elementRef: ElementRef);
    onClick(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCalendarMonthDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCalendarMonthDirective, "[igxCalendarMonth]", never, {
    "value": "igxCalendarMonth";
    "date": "date";
    "index": "index";
}, {
    "onMonthSelection": "onMonthSelection";
}, never>;
}
/**
 * @hidden
 */
export declare class IgxCalendarHeaderTemplateDirective {
    template: TemplateRef<any>;
    constructor(template: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCalendarHeaderTemplateDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCalendarHeaderTemplateDirective, "[igxCalendarHeader]", never, {}, {}, never>;
}
/**
 * @hidden
 */
export declare class IgxCalendarSubheaderTemplateDirective {
    template: TemplateRef<any>;
    constructor(template: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCalendarSubheaderTemplateDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCalendarSubheaderTemplateDirective, "[igxCalendarSubheader]", never, {}, {}, never>;
}
/**
 * @hidden
 */
export declare class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {
    private element;
    private zone;
    /**
     * A callback function to be invoked when month increment/decrement starts.
     * @hidden
     */
    startScroll: (keydown?: boolean) => {};
    /**
     * A callback function to be invoked when month increment/decrement stops.
     * @hidden
     */
    stopScroll: (event: any) => {};
    /**
     * @hidden
     */
    private destroy$;
    constructor(element: ElementRef, zone: NgZone);
    /**
     * @hidden
     */
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    onMouseDown(): void;
    /**
     * @hidden
     */
    onMouseUp(event: MouseEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCalendarScrollMonthDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCalendarScrollMonthDirective, "[igxCalendarScrollMonth]", never, {
    "startScroll": "startScroll";
    "stopScroll": "stopScroll";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuZGlyZWN0aXZlcy5kLnRzIiwic291cmNlcyI6WyJjYWxlbmRhci5kaXJlY3RpdmVzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBY0E7Ozs7Ozs7OztBQU9BOzs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIGFsbCB0aGUgZGlyZWN0aXZlcyB1c2VkIGJ5IHRoZSBAbGluayBJZ3hDYWxlbmRhckNvbXBvbmVudC5cbiAqIEV4Y2VwdCBmb3IgdGhlIGRpcmVjdGl2ZXMgd2hpY2ggYXJlIHVzZWQgZm9yIHRlbXBsYXRpbmcgdGhlIGNhbGVuZGFyIGl0c2VsZlxuICogeW91IHNob3VsZCBnZW5lcmFsbHkgbm90IHVzZSB0aGVtIGRpcmVjdGx5LlxuICogQHByZWZlcnJlZFxuICovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmLCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneENhbGVuZGFyWWVhckRpcmVjdGl2ZSB7XG4gICAgdmFsdWU6IERhdGU7XG4gICAgZGF0ZTogRGF0ZTtcbiAgICBvblllYXJTZWxlY3Rpb246IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBnZXQgZGVmYXVsdENTUygpOiBib29sZWFuO1xuICAgIGdldCBjdXJyZW50Q1NTKCk6IGJvb2xlYW47XG4gICAgZ2V0IGlzQ3VycmVudFllYXIoKTogYm9vbGVhbjtcbiAgICBvbkNsaWNrKCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hDYWxlbmRhck1vbnRoRGlyZWN0aXZlIHtcbiAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHZhbHVlOiBEYXRlO1xuICAgIGRhdGU6IERhdGU7XG4gICAgaW5kZXg6IGFueTtcbiAgICBvbk1vbnRoU2VsZWN0aW9uOiBFdmVudEVtaXR0ZXI8RGF0ZT47XG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICBnZXQgZGVmYXVsdENTUygpOiBib29sZWFuO1xuICAgIGdldCBjdXJyZW50Q1NTKCk6IGJvb2xlYW47XG4gICAgZ2V0IGlzQ3VycmVudE1vbnRoKCk6IGJvb2xlYW47XG4gICAgZ2V0IG5hdGl2ZUVsZW1lbnQoKTogYW55O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpO1xuICAgIG9uQ2xpY2soKTogdm9pZDtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hDYWxlbmRhckhlYWRlclRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pik7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4Q2FsZW5kYXJTdWJoZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgY29uc3RydWN0b3IodGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneENhbGVuZGFyU2Nyb2xsTW9udGhEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgLyoqXG4gICAgICogQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBpbnZva2VkIHdoZW4gbW9udGggaW5jcmVtZW50L2RlY3JlbWVudCBzdGFydHMuXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHN0YXJ0U2Nyb2xsOiAoa2V5ZG93bj86IGJvb2xlYW4pID0+IHt9O1xuICAgIC8qKlxuICAgICAqIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB3aGVuIG1vbnRoIGluY3JlbWVudC9kZWNyZW1lbnQgc3RvcHMuXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHN0b3BTY3JvbGw6IChldmVudDogYW55KSA9PiB7fTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBkZXN0cm95JDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25Nb3VzZURvd24oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25Nb3VzZVVwKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbn1cbiJdfQ==