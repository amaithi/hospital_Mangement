import { ElementRef, EventEmitter, OnInit, OnDestroy, TemplateRef } from '@angular/core';
import { SliderHandle } from '../slider.common';
import { Subject } from 'rxjs';
import { IgxDirectionality } from '../../services/direction/directionality';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxSliderThumbComponent implements OnInit, OnDestroy {
    private _elementRef;
    private _dir;
    private _isActive;
    private _isPressed;
    private _destroy$;
    private get thumbPositionX();
    isActive: boolean;
    value: number;
    continuous: boolean;
    thumbLabelVisibilityDuration: any;
    disabled: boolean;
    onPan: Subject<number>;
    stepDistance: number;
    step: number;
    templateRef: TemplateRef<any>;
    context: any;
    type: SliderHandle;
    deactiveState: boolean;
    onThumbValueChange: EventEmitter<number>;
    onChange: EventEmitter<any>;
    onHoverChange: EventEmitter<boolean>;
    tabindex: number;
    zIndex: number;
    get thumbFromClass(): boolean;
    get thumbToClass(): boolean;
    get thumbFromActiveClass(): boolean;
    get thumbToActiveClass(): boolean;
    get thumbPressedClass(): boolean;
    get nativeElement(): any;
    get destroy(): Subject<boolean>;
    constructor(_elementRef: ElementRef, _dir: IgxDirectionality);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    onPinterEnter(): void;
    onPointerLeave(): void;
    onKeyDown(event: KeyboardEvent): void;
    onBlur(): void;
    onFocusListener(): void;
    /**
     * Show thumb label and ripple.
     */
    showThumbIndicators(): void;
    /**
     * Hide thumb label and ripple.
     */
    hideThumbIndicators(): void;
    private updateThumbValue;
    private calculateTrackUpdate;
    private stepToProceed;
    private toggleThumbIndicators;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSliderThumbComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxSliderThumbComponent, "igx-thumb", never, {
    "value": "value";
    "continuous": "continuous";
    "thumbLabelVisibilityDuration": "thumbLabelVisibilityDuration";
    "disabled": "disabled";
    "onPan": "onPan";
    "stepDistance": "stepDistance";
    "step": "step";
    "templateRef": "templateRef";
    "context": "context";
    "type": "type";
    "deactiveState": "deactiveState";
}, {
    "onThumbValueChange": "onThumbValueChange";
    "onChange": "onChange";
    "onHoverChange": "onHoverChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWItc2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0aHVtYi1zbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBPbkRlc3Ryb3ksIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTbGlkZXJIYW5kbGUgfSBmcm9tICcuLi9zbGlkZXIuY29tbW9uJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElneERpcmVjdGlvbmFsaXR5IH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGlyZWN0aW9uL2RpcmVjdGlvbmFsaXR5Jztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hTbGlkZXJUaHVtYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmO1xuICAgIHByaXZhdGUgX2RpcjtcbiAgICBwcml2YXRlIF9pc0FjdGl2ZTtcbiAgICBwcml2YXRlIF9pc1ByZXNzZWQ7XG4gICAgcHJpdmF0ZSBfZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSBnZXQgdGh1bWJQb3NpdGlvblgoKTtcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIGNvbnRpbnVvdXM6IGJvb2xlYW47XG4gICAgdGh1bWJMYWJlbFZpc2liaWxpdHlEdXJhdGlvbjogYW55O1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIG9uUGFuOiBTdWJqZWN0PG51bWJlcj47XG4gICAgc3RlcERpc3RhbmNlOiBudW1iZXI7XG4gICAgc3RlcDogbnVtYmVyO1xuICAgIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGNvbnRleHQ6IGFueTtcbiAgICB0eXBlOiBTbGlkZXJIYW5kbGU7XG4gICAgZGVhY3RpdmVTdGF0ZTogYm9vbGVhbjtcbiAgICBvblRodW1iVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkhvdmVyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICB6SW5kZXg6IG51bWJlcjtcbiAgICBnZXQgdGh1bWJGcm9tQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBnZXQgdGh1bWJUb0NsYXNzKCk6IGJvb2xlYW47XG4gICAgZ2V0IHRodW1iRnJvbUFjdGl2ZUNsYXNzKCk6IGJvb2xlYW47XG4gICAgZ2V0IHRodW1iVG9BY3RpdmVDbGFzcygpOiBib29sZWFuO1xuICAgIGdldCB0aHVtYlByZXNzZWRDbGFzcygpOiBib29sZWFuO1xuICAgIGdldCBuYXRpdmVFbGVtZW50KCk6IGFueTtcbiAgICBnZXQgZGVzdHJveSgpOiBTdWJqZWN0PGJvb2xlYW4+O1xuICAgIGNvbnN0cnVjdG9yKF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBfZGlyOiBJZ3hEaXJlY3Rpb25hbGl0eSk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25QaW50ZXJFbnRlcigpOiB2b2lkO1xuICAgIG9uUG9pbnRlckxlYXZlKCk6IHZvaWQ7XG4gICAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBvbkJsdXIoKTogdm9pZDtcbiAgICBvbkZvY3VzTGlzdGVuZXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTaG93IHRodW1iIGxhYmVsIGFuZCByaXBwbGUuXG4gICAgICovXG4gICAgc2hvd1RodW1iSW5kaWNhdG9ycygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEhpZGUgdGh1bWIgbGFiZWwgYW5kIHJpcHBsZS5cbiAgICAgKi9cbiAgICBoaWRlVGh1bWJJbmRpY2F0b3JzKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVUaHVtYlZhbHVlO1xuICAgIHByaXZhdGUgY2FsY3VsYXRlVHJhY2tVcGRhdGU7XG4gICAgcHJpdmF0ZSBzdGVwVG9Qcm9jZWVkO1xuICAgIHByaXZhdGUgdG9nZ2xlVGh1bWJJbmRpY2F0b3JzO1xufVxuIl19