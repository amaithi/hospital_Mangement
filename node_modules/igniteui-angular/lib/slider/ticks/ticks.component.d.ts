import { TemplateRef } from '@angular/core';
import { TicksOrientation, TickLabelsOrientation } from '../slider.common';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxTicksComponent {
    primaryTicks: number;
    secondaryTicks: number;
    primaryTickLabels: boolean;
    secondaryTickLabels: boolean;
    ticksOrientation: TicksOrientation;
    tickLabelsOrientation: TickLabelsOrientation;
    maxValue: number;
    minValue: number;
    labelsViewEnabled: boolean;
    labels: Array<number | string | boolean | null | undefined>;
    tickLabelTemplateRef: TemplateRef<any>;
    /**
     * @hidden
     */
    ticksClass: boolean;
    /**
     * @hidden
     */
    get ticksTopClass(): boolean;
    /**
     * @hidden
     */
    get hasPrimaryClass(): boolean;
    /**
     * @hidden
     */
    get labelsTopToBottomClass(): boolean;
    /**
     * @hidden
     */
    get labelsBottomToTopClass(): boolean;
    /**
     * Returns the template context corresponding to
     * {@link IgxTickLabelTemplateDirective}
     *
     * ```typescript
     * return {
     *  $implicit //returns the value per each tick label.
     *  isPrimery //returns if the tick is primary.
     *  labels // returns the {@link labels} collection.
     *  index // returns the index per each tick of the whole sequence.
     * }
     * ```
     *
     * @param idx the index per each tick label.
     */
    context(idx: number): any;
    /**
     * @hidden
     */
    get ticksLength(): number;
    hiddenTickLabels(idx: number): boolean;
    /**
     * @hidden
     */
    isPrimary(idx: number): boolean;
    /**
     * @hidden
     */
    tickLabel(idx: number): string | number | boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTicksComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxTicksComponent, "igx-ticks", never, {
    "primaryTicks": "primaryTicks";
    "secondaryTicks": "secondaryTicks";
    "primaryTickLabels": "primaryTickLabels";
    "secondaryTickLabels": "secondaryTickLabels";
    "ticksOrientation": "ticksOrientation";
    "tickLabelsOrientation": "tickLabelsOrientation";
    "maxValue": "maxValue";
    "minValue": "minValue";
    "labelsViewEnabled": "labelsViewEnabled";
    "labels": "labels";
    "tickLabelTemplateRef": "tickLabelTemplateRef";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlja3MuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRpY2tzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkRBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRpY2tzT3JpZW50YXRpb24sIFRpY2tMYWJlbHNPcmllbnRhdGlvbiB9IGZyb20gJy4uL3NsaWRlci5jb21tb24nO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFRpY2tzQ29tcG9uZW50IHtcbiAgICBwcmltYXJ5VGlja3M6IG51bWJlcjtcbiAgICBzZWNvbmRhcnlUaWNrczogbnVtYmVyO1xuICAgIHByaW1hcnlUaWNrTGFiZWxzOiBib29sZWFuO1xuICAgIHNlY29uZGFyeVRpY2tMYWJlbHM6IGJvb2xlYW47XG4gICAgdGlja3NPcmllbnRhdGlvbjogVGlja3NPcmllbnRhdGlvbjtcbiAgICB0aWNrTGFiZWxzT3JpZW50YXRpb246IFRpY2tMYWJlbHNPcmllbnRhdGlvbjtcbiAgICBtYXhWYWx1ZTogbnVtYmVyO1xuICAgIG1pblZhbHVlOiBudW1iZXI7XG4gICAgbGFiZWxzVmlld0VuYWJsZWQ6IGJvb2xlYW47XG4gICAgbGFiZWxzOiBBcnJheTxudW1iZXIgfCBzdHJpbmcgfCBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZD47XG4gICAgdGlja0xhYmVsVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRpY2tzQ2xhc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCB0aWNrc1RvcENsYXNzKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBoYXNQcmltYXJ5Q2xhc3MoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGxhYmVsc1RvcFRvQm90dG9tQ2xhc3MoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGxhYmVsc0JvdHRvbVRvVG9wQ2xhc3MoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSBjb250ZXh0IGNvcnJlc3BvbmRpbmcgdG9cbiAgICAgKiB7QGxpbmsgSWd4VGlja0xhYmVsVGVtcGxhdGVEaXJlY3RpdmV9XG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogcmV0dXJuIHtcbiAgICAgKiAgJGltcGxpY2l0IC8vcmV0dXJucyB0aGUgdmFsdWUgcGVyIGVhY2ggdGljayBsYWJlbC5cbiAgICAgKiAgaXNQcmltZXJ5IC8vcmV0dXJucyBpZiB0aGUgdGljayBpcyBwcmltYXJ5LlxuICAgICAqICBsYWJlbHMgLy8gcmV0dXJucyB0aGUge0BsaW5rIGxhYmVsc30gY29sbGVjdGlvbi5cbiAgICAgKiAgaW5kZXggLy8gcmV0dXJucyB0aGUgaW5kZXggcGVyIGVhY2ggdGljayBvZiB0aGUgd2hvbGUgc2VxdWVuY2UuXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGlkeCB0aGUgaW5kZXggcGVyIGVhY2ggdGljayBsYWJlbC5cbiAgICAgKi9cbiAgICBjb250ZXh0KGlkeDogbnVtYmVyKTogYW55O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgdGlja3NMZW5ndGgoKTogbnVtYmVyO1xuICAgIGhpZGRlblRpY2tMYWJlbHMoaWR4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpc1ByaW1hcnkoaWR4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0aWNrTGFiZWwoaWR4OiBudW1iZXIpOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuO1xufVxuIl19