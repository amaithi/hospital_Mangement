import { OnInit, OnChanges, SimpleChanges } from '@angular/core';
/**
 * IgxCardMedia is container for the card media section.
 * Use it to wrap images and videos.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../directives/button/button.directive';
export declare class IgxCardMediaDirective {
    /** @hidden @internal */
    cssClass: string;
    /**
     * An @Input property that sets the `width` and `min-width` style property
     * of the media container. If not provided it will be set to `auto`.
     *
     * @example
     * ```html
     * <igx-card-media width="300px"></igx-card-media>
     * ```
     */
    width: string;
    /**
     * An @Input property that sets the `height` style property of the media container.
     * If not provided it will be set to `auto`.
     *
     * @example
     * ```html
     * <igx-card-media height="50%"></igx-card-media>
     * ```
     */
    height: string;
    /**
     * An @Input property that sets the `role` attribute of the media container.
     */
    role: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCardMediaDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCardMediaDirective, "igx-card-media", never, {
    "width": "width";
    "height": "height";
    "role": "role";
}, {}, never>;
}
/**
 * IgxCardHeader is container for the card header
 */
export declare class IgxCardHeaderComponent {
    /** @hidden @internal */
    cssClass: string;
    /**
     * An @Input property that sets the layout style of the header.
     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.
     *
     * @example
     * ```html
     * <igx-card-header [vertical]="true"></igx-card-header>
     * ```
     */
    vertical: boolean;
    /**
     * An @Input property that sets the value of the `role` attribute of the card header.
     * By default the value is set to `header`.
     *
     * @example
     * ```html
     * <igx-card-header role="header"></igx-card-header>
     * ```
     */
    role: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCardHeaderComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxCardHeaderComponent, "igx-card-header", never, {
    "vertical": "vertical";
}, {}, never>;
}
/**
 * IgxCardThumbnail is container for the card thumbnail section.
 * Use it to wrap anything you want to be used as a thumbnail.
 */
export declare class IgxCardThumbnailDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCardThumbnailDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCardThumbnailDirective, "[igxCardThumbnail]", never, {}, {}, never>;
}
/**
 * igxCardHeaderTitle is used to denote the header title in a card.
 * Use it to tag text nodes.
 */
export declare class IgxCardHeaderTitleDirective {
    /** @hidden @internal */
    cssClass: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCardHeaderTitleDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCardHeaderTitleDirective, "[igxCardHeaderTitle]", never, {}, {}, never>;
}
/**
 * igxCardHeaderSubtitle is used to denote the header subtitle in a card.
 * Use it to tag text nodes.
 */
export declare class IgxCardHeaderSubtitleDirective {
    /** @hidden @internal */
    cssClass: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCardHeaderSubtitleDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCardHeaderSubtitleDirective, "[igxCardHeaderSubtitle]", never, {}, {}, never>;
}
/**
 * IgxCardContent is container for the card content.
 */
export declare class IgxCardContentDirective {
    /** @hidden @internal */
    cssClass: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCardContentDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCardContentDirective, "igx-card-content", never, {}, {}, never>;
}
/**
 * IgxCardFooter is container for the card footer
 */
export declare class IgxCardFooterDirective {
    /**
     * An @Input property that sets the value of the `role` attribute of the card footer.
     * By default the value is set to `footer`.
     *
     * @example
     * ```html
     * <igx-card-footer role="footer"></igx-card-footer>
     * ```
     */
    role: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCardFooterDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxCardFooterDirective, "igx-card-footer", never, {
    "role": "role";
}, {}, never>;
}
/**
 * Card provides a way to display organized content in appealing way.
 *
 * @igxModule IgxCardModule
 *
 * @igxTheme igx-card-theme, igx-icon-theme, igx-button-theme
 *
 * @igxKeywords card, button, avatar, icon
 *
 * @igxGroup Layouts
 *
 * @remarks
 * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are
 * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.
 *
 * @example
 * ```html
 * <igx-card>
 *   <igx-card-header>
 *     <h3 igxCardHeaderTitle>{{title}}</h3>
 *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>
 *   </igx-card-header>
 *   <igx-card-actions>
 *       <button igxButton igxRipple>Share</button>
 *       <button igxButton igxRipple>Play Album</button>
 *   </igx-card-actions>
 * </igx-card>
 * ```
 */
export declare enum IgxCardType {
    ELEVATED = "elevated",
    OUTLINED = "outlined"
}
export declare class IgxCardComponent {
    /**
     * Sets/gets the `id` of the card.
     * If not set, `id` will have value `"igx-card-0"`;
     *
     * @example
     * ```html
     * <igx-card id = "my-first-card"></igx-card>
     * ```
     * ```typescript
     * let cardId =  this.card.id;
     * ```
     */
    id: string;
    /**
     * An @Input property that sets the value of the `role` attribute of the card.
     * By default the value is set to `group`.
     *
     * @example
     * ```html
     * <igx-card role="group"></igx-card>
     * ```
     */
    role: string;
    /**
     * An @Input property that sets the value of the `type` attribute of the card.
     * By default the value is set to `default`. You can make the card use the
     * outlined style by setting the value to `outlined`.
     *
     * @example
     * ```html
     * <igx-card type="outlined"></igx-card>
     * ```
     */
    type: IgxCardType | string;
    /**
     * A getter which will return true if the card type is `outlined`.
     */
    get isOutlinedCard(): boolean;
    /**
     * An @Input property that sets the value of the `horizontal` attribute of the card.
     * Setting this to `true` will make the different card sections align horizontally,
     * essentially flipping the card to the side.
     *
     * @example
     * ```html
     * <igx-card [horizontal]="true"></igx-card>
     * ```
     */
    horizontal: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCardComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxCardComponent, "igx-card", never, {
    "id": "id";
    "role": "role";
    "type": "type";
    "horizontal": "horizontal";
}, {}, never>;
}
export declare enum IgxCardActionsLayout {
    START = "start",
    JUSTIFY = "justify"
}
/**
 * IgxCardActions is container for the card actions.
 */
export declare class IgxCardActionsComponent implements OnInit, OnChanges {
    card: IgxCardComponent;
    private isVerticalSet;
    constructor(card: IgxCardComponent);
    /**
     * An @Input property that sets the layout style of the actions.
     * By default icons and icon buttons, as well as regular buttons
     * are split into two containers, which are then positioned on both ends
     * of the card-actions area.
     * You can justify the elements in those groups so they are positioned equally
     * from one another taking up all the space available along the card actions axis.
     *
     * @example
     * ```html
     * <igx-card-actions layout="justify"></igx-card-actions>
     * ```
     */
    layout: IgxCardActionsLayout | string;
    /**
     * An @Input property that sets the vertical attribute of the actions.
     * When set to `true` the actions will be layed out vertically.
     */
    vertical: boolean;
    /**
     * A getter that returns `true` when the layout has been
     * set to `justify`.
     */
    get isJustifyLayout(): boolean;
    /**
     * An @Input property that sets order of the buttons the actions area.
     * By default all icons/icon buttons are placed at the end of the action
     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons
     * placed in the actions area.
     * If you want to reverse their positions so that icons appear first, use the `reverse`
     * attribute.
     *
     * @example
     * ```html
     * <igx-card-actions [reverse]="true"></igx-card-actions>
     * ```
     */
    reverse: boolean;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxCardActionsComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxCardActionsComponent, "igx-card-actions", never, {
    "layout": "layout";
    "reverse": "reverse";
    "vertical": "vertical";
}, {}, never>;
}
/**
 * @hidden
 */
export declare class IgxCardModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxCardModule, [typeof IgxCardComponent, typeof IgxCardHeaderComponent, typeof IgxCardMediaDirective, typeof IgxCardContentDirective, typeof IgxCardActionsComponent, typeof IgxCardFooterDirective, typeof IgxCardHeaderTitleDirective, typeof IgxCardHeaderSubtitleDirective, typeof IgxCardThumbnailDirective], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.IgxButtonModule], [typeof IgxCardComponent, typeof IgxCardHeaderComponent, typeof IgxCardMediaDirective, typeof IgxCardContentDirective, typeof IgxCardActionsComponent, typeof IgxCardFooterDirective, typeof IgxCardHeaderTitleDirective, typeof IgxCardHeaderSubtitleDirective, typeof IgxCardThumbnailDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxCardModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,