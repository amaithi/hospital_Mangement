/**
 * The `<igx-drop-down-item>` is a container intended for row items in
 * a `<igx-drop-down>` container.
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxDropDownGroupComponent {
    private _id;
    /**
     * @hidden @internal
     */
    get labelId(): string;
    get labelledBy(): string;
    /**
     * @hidden @internal
     */
    role: string;
    /** @hidden @internal */
    groupClass: boolean;
    /**
     * Sets/gets if the item group is disabled
     *
     * ```typescript
     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;
     * // get
     * ...
     * const groupState: boolean = myDropDownGroup.disabled;
     * ...
     * //set
     * ...
     * myDropDownGroup,disabled = false;
     * ...
     * ```
     *
     * ```html
     * <igx-drop-down-item-group [label]="'My Items'" [disabled]="true">
     *     <igx-drop-down-item *ngFor="let item of items[index]" [value]="item.value">
     *         {{ item.text }}
     *     </igx-drop-down-item>
     * </igx-drop-down-item-group>
     * ```
     *
     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled
     */
    disabled: boolean;
    /**
     * Sets/gets the label of the item group
     *
     * ```typescript
     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;
     * // get
     * ...
     * const myLabel: string = myDropDownGroup.label;
     * ...
     * // set
     * ...
     * myDropDownGroup.label = 'My New Label';
     * ...
     * ```
     *
     * ```html
     * <igx-drop-down-item-group [label]="'My new Label'">
     *      ...
     * </igx-drop-down-item-group>
     * ```
     */
    label: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDropDownGroupComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxDropDownGroupComponent, "igx-drop-down-item-group", never, {
    "disabled": "disabled";
    "label": "label";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcC1kb3duLWdyb3VwLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkcm9wLWRvd24tZ3JvdXAuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZEQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGA8aWd4LWRyb3AtZG93bi1pdGVtPmAgaXMgYSBjb250YWluZXIgaW50ZW5kZWQgZm9yIHJvdyBpdGVtcyBpblxuICogYSBgPGlneC1kcm9wLWRvd24+YCBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneERyb3BEb3duR3JvdXBDb21wb25lbnQge1xuICAgIHByaXZhdGUgX2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IGxhYmVsSWQoKTogc3RyaW5nO1xuICAgIGdldCBsYWJlbGxlZEJ5KCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHJvbGU6IHN0cmluZztcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBncm91cENsYXNzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyBpZiB0aGUgaXRlbSBncm91cCBpcyBkaXNhYmxlZFxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG15RHJvcERvd25Hcm91cDogSWd4RHJvcERvd25Hcm91cENvbXBvbmVudCA9IHRoaXMuZHJvcGRvd25Hcm91cDtcbiAgICAgKiAvLyBnZXRcbiAgICAgKiAuLi5cbiAgICAgKiBjb25zdCBncm91cFN0YXRlOiBib29sZWFuID0gbXlEcm9wRG93bkdyb3VwLmRpc2FibGVkO1xuICAgICAqIC4uLlxuICAgICAqIC8vc2V0XG4gICAgICogLi4uXG4gICAgICogbXlEcm9wRG93bkdyb3VwLGRpc2FibGVkID0gZmFsc2U7XG4gICAgICogLi4uXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1kcm9wLWRvd24taXRlbS1ncm91cCBbbGFiZWxdPVwiJ015IEl0ZW1zJ1wiIFtkaXNhYmxlZF09XCJ0cnVlXCI+XG4gICAgICogICAgIDxpZ3gtZHJvcC1kb3duLWl0ZW0gKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNbaW5kZXhdXCIgW3ZhbHVlXT1cIml0ZW0udmFsdWVcIj5cbiAgICAgKiAgICAgICAgIHt7IGl0ZW0udGV4dCB9fVxuICAgICAqICAgICA8L2lneC1kcm9wLWRvd24taXRlbT5cbiAgICAgKiA8L2lneC1kcm9wLWRvd24taXRlbS1ncm91cD5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICoqTk9URToqKiBBbGwgaXRlbXMgaW5zaWRlIG9mIGEgZGlzYWJsZWQgZHJvcCBkb3duIGdyb3VwIHdpbGwgYmUgdHJlYXRlZCBhcyBkaXNhYmxlZFxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgbGFiZWwgb2YgdGhlIGl0ZW0gZ3JvdXBcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBteURyb3BEb3duR3JvdXA6IElneERyb3BEb3duR3JvdXBDb21wb25lbnQgPSB0aGlzLmRyb3Bkb3duR3JvdXA7XG4gICAgICogLy8gZ2V0XG4gICAgICogLi4uXG4gICAgICogY29uc3QgbXlMYWJlbDogc3RyaW5nID0gbXlEcm9wRG93bkdyb3VwLmxhYmVsO1xuICAgICAqIC4uLlxuICAgICAqIC8vIHNldFxuICAgICAqIC4uLlxuICAgICAqIG15RHJvcERvd25Hcm91cC5sYWJlbCA9ICdNeSBOZXcgTGFiZWwnO1xuICAgICAqIC4uLlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZHJvcC1kb3duLWl0ZW0tZ3JvdXAgW2xhYmVsXT1cIidNeSBuZXcgTGFiZWwnXCI+XG4gICAgICogICAgICAuLi5cbiAgICAgKiA8L2lneC1kcm9wLWRvd24taXRlbS1ncm91cD5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBsYWJlbDogc3RyaW5nO1xufVxuIl19