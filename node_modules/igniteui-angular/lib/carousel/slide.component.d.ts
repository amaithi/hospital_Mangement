import { OnDestroy, EventEmitter, ElementRef } from '@angular/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare enum Direction {
    NONE = 0,
    NEXT = 1,
    PREV = 2
}
/**
 * A slide component that usually holds an image and/or a caption text.
 * IgxSlideComponent is usually a child component of an IgxCarouselComponent.
 *
 * ```
 * <igx-slide [input bindings] >
 *    <ng-content></ng-content>
 * </igx-slide>
 * ```
 *
 * @export
 */
export declare class IgxSlideComponent implements OnDestroy {
    private elementRef;
    private _active;
    private _destroy$;
    /**
     * Gets/sets the `index` of the slide inside the carousel.
     * ```html
     * <igx-carousel>
     *  <igx-slide index = "1"></igx-slide>
     * <igx-carousel>
     * ```
     * @memberOf IgxSlideComponent
     */
    index: number;
    /**
     * Gets/sets the target `direction` for the slide.
     * ```html
     * <igx-carousel>
     *  <igx-slide direction="NEXT"></igx-slide>
     * <igx-carousel>
     * ```
     * @memberOf IgxSlideComponent
     */
    direction: Direction;
    /**
     * Returns the `tabIndex` of the slide component.
     * ```typescript
     * let tabIndex =  this.carousel.tabIndex;
     * ```
     * @memberof IgxSlideComponent
     */
    get tabIndex(): number;
    /**
     * Returns the `aria-selected` of the slide.
     *
     * ```typescript
     * let slide = this.slide.ariaSelected;
     * ```
     *
     */
    get ariaSelected(): boolean;
    /**
     * Returns the `aria-live` of the slide.
     *
     * ```typescript
     * let slide = this.slide.ariaLive;
     * ```
     *
     */
    get ariaLive(): string;
    /**
     * Returns the class of the slide component.
     * ```typescript
     * let class =  this.slide.cssClass;
     * ```
     * @memberof IgxSlideComponent
     */
    cssClass: string;
    /**
     * Gets/sets the `active` state of the slide.
     * ```html
     * <igx-carousel>
     *  <igx-slide [active] ="false"></igx-slide>
     * <igx-carousel>
     * ```
     *
     * Two-way data binding.
     * ```html
     * <igx-carousel>
     *  <igx-slide [(active)] ="model.isActive"></igx-slide>
     * <igx-carousel>
     * ```
     * @memberof IgxSlideComponent
     */
    get active(): boolean;
    set active(value: boolean);
    previous: boolean;
    /**
     * @hidden
     */
    activeChange: EventEmitter<boolean>;
    constructor(elementRef: ElementRef);
    /**
     * Returns a reference to the carousel element in the DOM.
     * ```typescript
     * let nativeElement =  this.slide.nativeElement;
     * ```
     * @memberof IgxSlideComponent
     */
    get nativeElement(): any;
    /**
     * @hidden
     */
    get isDestroyed(): Subject<boolean>;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSlideComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxSlideComponent, "igx-slide", never, {
    "previous": "previous";
    "active": "active";
    "index": "index";
    "direction": "direction";
}, {
    "activeChange": "activeChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNsaWRlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1IQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5leHBvcnQgZGVjbGFyZSBlbnVtIERpcmVjdGlvbiB7XG4gICAgTk9ORSA9IDAsXG4gICAgTkVYVCA9IDEsXG4gICAgUFJFViA9IDJcbn1cbi8qKlxuICogQSBzbGlkZSBjb21wb25lbnQgdGhhdCB1c3VhbGx5IGhvbGRzIGFuIGltYWdlIGFuZC9vciBhIGNhcHRpb24gdGV4dC5cbiAqIElneFNsaWRlQ29tcG9uZW50IGlzIHVzdWFsbHkgYSBjaGlsZCBjb21wb25lbnQgb2YgYW4gSWd4Q2Fyb3VzZWxDb21wb25lbnQuXG4gKlxuICogYGBgXG4gKiA8aWd4LXNsaWRlIFtpbnB1dCBiaW5kaW5nc10gPlxuICogICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICogPC9pZ3gtc2xpZGU+XG4gKiBgYGBcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFNsaWRlQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBfYWN0aXZlO1xuICAgIHByaXZhdGUgX2Rlc3Ryb3kkO1xuICAgIC8qKlxuICAgICAqIEdldHMvc2V0cyB0aGUgYGluZGV4YCBvZiB0aGUgc2xpZGUgaW5zaWRlIHRoZSBjYXJvdXNlbC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYXJvdXNlbD5cbiAgICAgKiAgPGlneC1zbGlkZSBpbmRleCA9IFwiMVwiPjwvaWd4LXNsaWRlPlxuICAgICAqIDxpZ3gtY2Fyb3VzZWw+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlck9mIElneFNsaWRlQ29tcG9uZW50XG4gICAgICovXG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBHZXRzL3NldHMgdGhlIHRhcmdldCBgZGlyZWN0aW9uYCBmb3IgdGhlIHNsaWRlLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhcm91c2VsPlxuICAgICAqICA8aWd4LXNsaWRlIGRpcmVjdGlvbj1cIk5FWFRcIj48L2lneC1zbGlkZT5cbiAgICAgKiA8aWd4LWNhcm91c2VsPlxuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJPZiBJZ3hTbGlkZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGRpcmVjdGlvbjogRGlyZWN0aW9uO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGB0YWJJbmRleGAgb2YgdGhlIHNsaWRlIGNvbXBvbmVudC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHRhYkluZGV4ID0gIHRoaXMuY2Fyb3VzZWwudGFiSW5kZXg7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneFNsaWRlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IHRhYkluZGV4KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBgYXJpYS1zZWxlY3RlZGAgb2YgdGhlIHNsaWRlLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBzbGlkZSA9IHRoaXMuc2xpZGUuYXJpYVNlbGVjdGVkO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICovXG4gICAgZ2V0IGFyaWFTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBhcmlhLWxpdmVgIG9mIHRoZSBzbGlkZS5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgc2xpZGUgPSB0aGlzLnNsaWRlLmFyaWFMaXZlO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICovXG4gICAgZ2V0IGFyaWFMaXZlKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjbGFzcyBvZiB0aGUgc2xpZGUgY29tcG9uZW50LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY2xhc3MgPSAgdGhpcy5zbGlkZS5jc3NDbGFzcztcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4U2xpZGVDb21wb25lbnRcbiAgICAgKi9cbiAgICBjc3NDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEdldHMvc2V0cyB0aGUgYGFjdGl2ZWAgc3RhdGUgb2YgdGhlIHNsaWRlLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhcm91c2VsPlxuICAgICAqICA8aWd4LXNsaWRlIFthY3RpdmVdID1cImZhbHNlXCI+PC9pZ3gtc2xpZGU+XG4gICAgICogPGlneC1jYXJvdXNlbD5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFR3by13YXkgZGF0YSBiaW5kaW5nLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhcm91c2VsPlxuICAgICAqICA8aWd4LXNsaWRlIFsoYWN0aXZlKV0gPVwibW9kZWwuaXNBY3RpdmVcIj48L2lneC1zbGlkZT5cbiAgICAgKiA8aWd4LWNhcm91c2VsPlxuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hTbGlkZUNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCBhY3RpdmUoKTogYm9vbGVhbjtcbiAgICBzZXQgYWN0aXZlKHZhbHVlOiBib29sZWFuKTtcbiAgICBwcmV2aW91czogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgYWN0aXZlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgY2Fyb3VzZWwgZWxlbWVudCBpbiB0aGUgRE9NLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgbmF0aXZlRWxlbWVudCA9ICB0aGlzLnNsaWRlLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneFNsaWRlQ29tcG9uZW50XG4gICAgICovXG4gICAgZ2V0IG5hdGl2ZUVsZW1lbnQoKTogYW55O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgaXNEZXN0cm95ZWQoKTogU3ViamVjdDxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==