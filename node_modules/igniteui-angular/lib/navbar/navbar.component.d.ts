import { EventEmitter } from '@angular/core';
/**
 * IgxActionIcon is a container for the action nav icon of the IgxNavbar.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../directives/button/button.directive';
import * as ɵngcc2 from '../icon/public_api';
import * as ɵngcc3 from '@angular/common';
export declare class IgxActionIconDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxActionIconDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxActionIconDirective, "igx-action-icon", never, {}, {}, never>;
}
/**
 * **Ignite UI for Angular Navbar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)
 *
 * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation
 * state such as a "Go Back" button. It also supports other actions represented by icons.
 *
 * Example:
 * ```html
 * <igx-navbar title="Sample App" actionButtonIcon="menu">
 *   <igx-icon>search</igx-icon>
 *   <igx-icon>favorite</igx-icon>
 *   <igx-icon>more_vert</igx-icon>
 * </igx-navbar>
 * ```
 */
export declare class IgxNavbarComponent {
    private static NEXT_ID;
    private isVisible;
    /**
     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.
     * ```html
     * <igx-navbar [id]="'igx-navbar-12'" title="Sample App" actionButtonIcon="menu">
     * ```
     */
    id: string;
    /**
     * Returns whether the `IgxNavbarComponent` action button is visible, true/false.
     * ```typescript
     *  @ViewChild("MyChild")
     * public navBar: IgxNavbarComponent;
     * ngAfterViewInit(){
     *     let actionButtonVisibile = this.navBar.isActionButtonVisible;
     * }
     * ```
     */
    get isActionButtonVisible(): boolean;
    /**
     * Sets whether the action button of the `IgxNavbarComponent` is visible.
     * ```html
     * <igx-navbar [title]="currentView" [isActionButtonVisible]="'false'"></igx-navbar>
     * ```
     */
    set isActionButtonVisible(value: boolean);
    /**
     * An @Input property that sets the icon of the `IgxNavbarComponent`.
     * ```html
     * <igx-navbar [title]="currentView" actionButtonIcon="arrow_back"></igx-navbar>
     * ```
     */
    actionButtonIcon: string;
    /**
     * An @Input property that sets the title of the `IgxNavbarComponent`.
     * ```html
     * <igx-navbar title="Sample App" actionButtonIcon="menu">
     * ```
     */
    title: string;
    /**
     * The event that will be thrown when the action is executed,
     * provides reference to the `IgxNavbar` component as argument
     * ```typescript
     * public actionExc(event){
     *     alert("Action Execute!");
     * }
     *  //..
     * ```
     * ```html
     * <igx-navbar (onAction)="actionExc($event)" title="Sample App" actionButtonIcon="menu">
     * ```
     */
    onAction: EventEmitter<IgxNavbarComponent>;
    /**
     * An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.
     * ```html
     * <igx-navbar [titleId]="'igx-navbar-7'" title="Sample App" actionButtonIcon="menu">
     * ```
     */
    titleId: string;
    /**
     * @hidden
     */
    protected actionIconTemplate: IgxActionIconDirective;
    /**
     * @hidden
     */
    _triggerAction(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxNavbarComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxNavbarComponent, "igx-navbar", never, {
    "id": "id";
    "titleId": "titleId";
    "isActionButtonVisible": "isActionButtonVisible";
    "actionButtonIcon": "actionButtonIcon";
    "title": "title";
}, {
    "onAction": "onAction";
}, ["actionIconTemplate"]>;
}
/**
 * @hidden
 */
export declare class IgxNavbarModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxNavbarModule, [typeof IgxNavbarComponent, typeof IgxActionIconDirective], [typeof ɵngcc1.IgxButtonModule, typeof ɵngcc2.IgxIconModule, typeof ɵngcc3.CommonModule], [typeof IgxNavbarComponent, typeof IgxActionIconDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxNavbarModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuYXZiYXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBSUE7OztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdGQTs7Ozs7OztBQUtBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIElneEFjdGlvbkljb24gaXMgYSBjb250YWluZXIgZm9yIHRoZSBhY3Rpb24gbmF2IGljb24gb2YgdGhlIElneE5hdmJhci5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4QWN0aW9uSWNvbkRpcmVjdGl2ZSB7XG59XG4vKipcbiAqICoqSWduaXRlIFVJIGZvciBBbmd1bGFyIE5hdmJhcioqIC1cbiAqIFtEb2N1bWVudGF0aW9uXShodHRwczovL3d3dy5pbmZyYWdpc3RpY3MuY29tL3Byb2R1Y3RzL2lnbml0ZS11aS1hbmd1bGFyL2FuZ3VsYXIvY29tcG9uZW50cy9uYXZiYXIuaHRtbClcbiAqXG4gKiBUaGUgSWduaXRlIFVJIE5hdmJhciBpcyBtb3N0IGNvbW1vbmx5IHVzZWQgdG8gcHJvdmlkZSBhbiBhcHAgaGVhZGVyIHdpdGggYSBoYW1idXJnZXIgbWVudSBhbmQgbmF2aWdhdGlvblxuICogc3RhdGUgc3VjaCBhcyBhIFwiR28gQmFja1wiIGJ1dHRvbi4gSXQgYWxzbyBzdXBwb3J0cyBvdGhlciBhY3Rpb25zIHJlcHJlc2VudGVkIGJ5IGljb25zLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBodG1sXG4gKiA8aWd4LW5hdmJhciB0aXRsZT1cIlNhbXBsZSBBcHBcIiBhY3Rpb25CdXR0b25JY29uPVwibWVudVwiPlxuICogICA8aWd4LWljb24+c2VhcmNoPC9pZ3gtaWNvbj5cbiAqICAgPGlneC1pY29uPmZhdm9yaXRlPC9pZ3gtaWNvbj5cbiAqICAgPGlneC1pY29uPm1vcmVfdmVydDwvaWd4LWljb24+XG4gKiA8L2lneC1uYXZiYXI+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4TmF2YmFyQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIHN0YXRpYyBORVhUX0lEO1xuICAgIHByaXZhdGUgaXNWaXNpYmxlO1xuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHZhbHVlIG9mIHRoZSBgaWRgIGF0dHJpYnV0ZS4gSWYgbm90IHByb3ZpZGVkIGl0IHdpbGwgYmUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtbmF2YmFyIFtpZF09XCInaWd4LW5hdmJhci0xMidcIiB0aXRsZT1cIlNhbXBsZSBBcHBcIiBhY3Rpb25CdXR0b25JY29uPVwibWVudVwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBgSWd4TmF2YmFyQ29tcG9uZW50YCBhY3Rpb24gYnV0dG9uIGlzIHZpc2libGUsIHRydWUvZmFsc2UuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBAVmlld0NoaWxkKFwiTXlDaGlsZFwiKVxuICAgICAqIHB1YmxpYyBuYXZCYXI6IElneE5hdmJhckNvbXBvbmVudDtcbiAgICAgKiBuZ0FmdGVyVmlld0luaXQoKXtcbiAgICAgKiAgICAgbGV0IGFjdGlvbkJ1dHRvblZpc2liaWxlID0gdGhpcy5uYXZCYXIuaXNBY3Rpb25CdXR0b25WaXNpYmxlO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgaXNBY3Rpb25CdXR0b25WaXNpYmxlKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyB3aGV0aGVyIHRoZSBhY3Rpb24gYnV0dG9uIG9mIHRoZSBgSWd4TmF2YmFyQ29tcG9uZW50YCBpcyB2aXNpYmxlLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LW5hdmJhciBbdGl0bGVdPVwiY3VycmVudFZpZXdcIiBbaXNBY3Rpb25CdXR0b25WaXNpYmxlXT1cIidmYWxzZSdcIj48L2lneC1uYXZiYXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0IGlzQWN0aW9uQnV0dG9uVmlzaWJsZSh2YWx1ZTogYm9vbGVhbik7XG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgaWNvbiBvZiB0aGUgYElneE5hdmJhckNvbXBvbmVudGAuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtbmF2YmFyIFt0aXRsZV09XCJjdXJyZW50Vmlld1wiIGFjdGlvbkJ1dHRvbkljb249XCJhcnJvd19iYWNrXCI+PC9pZ3gtbmF2YmFyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGFjdGlvbkJ1dHRvbkljb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB0aXRsZSBvZiB0aGUgYElneE5hdmJhckNvbXBvbmVudGAuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtbmF2YmFyIHRpdGxlPVwiU2FtcGxlIEFwcFwiIGFjdGlvbkJ1dHRvbkljb249XCJtZW51XCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgZXZlbnQgdGhhdCB3aWxsIGJlIHRocm93biB3aGVuIHRoZSBhY3Rpb24gaXMgZXhlY3V0ZWQsXG4gICAgICogcHJvdmlkZXMgcmVmZXJlbmNlIHRvIHRoZSBgSWd4TmF2YmFyYCBjb21wb25lbnQgYXMgYXJndW1lbnRcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogcHVibGljIGFjdGlvbkV4YyhldmVudCl7XG4gICAgICogICAgIGFsZXJ0KFwiQWN0aW9uIEV4ZWN1dGUhXCIpO1xuICAgICAqIH1cbiAgICAgKiAgLy8uLlxuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LW5hdmJhciAob25BY3Rpb24pPVwiYWN0aW9uRXhjKCRldmVudClcIiB0aXRsZT1cIlNhbXBsZSBBcHBcIiBhY3Rpb25CdXR0b25JY29uPVwibWVudVwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uQWN0aW9uOiBFdmVudEVtaXR0ZXI8SWd4TmF2YmFyQ29tcG9uZW50PjtcbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB0aXRsZUlkIG9mIHRoZSBgSWd4TmF2YmFyQ29tcG9uZW50YC4gSWYgbm90IHNldCBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LW5hdmJhciBbdGl0bGVJZF09XCInaWd4LW5hdmJhci03J1wiIHRpdGxlPVwiU2FtcGxlIEFwcFwiIGFjdGlvbkJ1dHRvbkljb249XCJtZW51XCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdGl0bGVJZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWN0aW9uSWNvblRlbXBsYXRlOiBJZ3hBY3Rpb25JY29uRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfdHJpZ2dlckFjdGlvbigpOiB2b2lkO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneE5hdmJhck1vZHVsZSB7XG59XG4iXX0=