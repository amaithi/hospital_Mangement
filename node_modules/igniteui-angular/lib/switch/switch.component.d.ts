import { EventEmitter, Provider, ElementRef } from '@angular/core';
import { CheckboxRequiredValidator, ControlValueAccessor } from '@angular/forms';
import { IBaseEventArgs } from '../core/utils';
import { EditorProvider } from '../core/edit-provider';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../directives/ripple/ripple.directive';
export declare enum SwitchLabelPosition {
    BEFORE = "before",
    AFTER = "after"
}
export interface IChangeSwitchEventArgs extends IBaseEventArgs {
    checked: boolean;
    switch: IgxSwitchComponent;
}
/**
 *
 * The Switch component is a binary choice selection component.
 *
 * @igxModule IgxSwitchModule
 *
 * @igxTheme igx-switch-theme, igx-tooltip-theme
 *
 * @igxKeywords switch, states, tooltip
 *
 * @igxGroup Data Entry & Display
 *
 * @remarks
 *
 * The Ignite UI Switch lets the user toggle between on/off or true/false states.
 *
 * @example
 * ```html
 * <igx-switch [checked]="true">
 *   Simple switch
 * </igx-switch>
 * ```
 */
export declare class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {
    /**
     * @hidden
     * @internal
     */
    protected _value: any;
    /**
     * Returns a reference to the native checkbox element.
     *
     * @example
     * ```typescript
     * let checkboxElement =  this.switch.nativeCheckbox;
     * ```
     */
    nativeCheckbox: ElementRef;
    /**
     * Returns reference to the native label element.
     *
     * @example
     * ```typescript
     * let labelElement =  this.switch.nativeLabel;
     * ```
     */
    nativeLabel: any;
    /**
     * Returns reference to the label placeholder element.
     *
     * @example
     * ```typescript
     * let labelPlaceholder = this.switch.placeholderLabel;
     * ```
     */
    placeholderLabel: any;
    /**
     * Sets/gets the `id` of the switch component.
     * If not set, the `id` of the first switch component will be `"igx-switch-0"`.
     *
     * @example
     * ```html
     * <igx-switch id="my-first-switch"></igx-switch>
     * ```
     */
    id: string;
    /**
     * Sets/gets the id of the `label` element of the switch component.
     * If not set, the label of the first switch component will have value `"igx-switch-0-label"`.
     *
     * @example
     * ```html
     * <igx-switch labelId="Label1"></igx-switch>
     * ```
     */
    labelId: string;
    /**
     * Sets/gets the `value` attribute of the switch component.
     *
     * @example
     * ```html
     * <igx-switch [value]="switchValue"></igx-switch>
     * ```
     */
    value: any;
    /**
     * Sets/gets the `name` attribute of the switch component.
     *
     * @example
     * ```html
     * <igx-switch name="Switch1"></igx-switch>
     * ```
     */
    name: string;
    /**
     * Sets/gets the value of the `tabindex` attribute.
     *
     * @example
     * ```html
     * <igx-switch [tabindex]="1"></igx-switch>
     * ```
     */
    tabindex: number;
    /**
     * Sets/gets the position of the `label` in the switch component.
     * If not set, `labelPosition` will have value `"after"`.
     *
     * @example
     * ```html
     * <igx-switch labelPosition="before"></igx-switch>
     * ```
     */
    labelPosition: SwitchLabelPosition | string;
    /**
     * Enables/Disables the ripple effect
     * If not set, `disableRipple` will have value `false`.
     *
     * @example
     * ```html
     * <igx-switch [disableRipple]="true"></igx-switch>
     * ```
     */
    disableRipple: boolean;
    /**
     * Sets/gets whether switch is required.
     * If not set, `required` will have value `false`.
     *
     * @example
     * ```html
     * <igx-switch [required]="true"></igx-switch>
     * ```
     */
    required: boolean;
    /**
     * Sets/gets the `aria-labelledBy` attribute.
     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.
     *
     * @example
     * ```html
     * <igx-switch aria-labelledby = "Label1"></igx-switch>
     * ```
     */
    ariaLabelledBy: string;
    /**
     * Sets/gets the value of the `aria-label` attribute.
     *
     * @example
     * ```html
     * <igx-switch aria-label="Label1"></igx-switch>
     * ```
     */
    ariaLabel: string | null;
    /**
     * An event that is emitted after the switch state is changed.
     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.
     */
    readonly change: EventEmitter<IChangeSwitchEventArgs>;
    /**
     * @hidden
     * @internal
     */
    private _onTouchedCallback;
    /**
     * @hidden
     * @internal
     */
    private _onChangeCallback;
    /**
     * Returns the class of the switch component.
     *
     * @example
     * ```typescript
     * let switchClass = this.switch.cssClass;
     * ```
     */
    cssClass: string;
    /**
     * Sets/gets whether the switch is on or off.
     * Default value is 'false'.
     *
     * @example
     * ```html
     *  <igx-switch [checked]="true"></igx-switch>
     * ```
     */
    checked: boolean;
    /**
     * Sets/gets the `disabled` attribute.
     * Default value is `false`.
     *
     * @example
     * ```html
     * <igx-switch [disabled]="true"><igx-switch>
     * ```
     */
    disabled: boolean;
    /**
     * Sets/gets whether the switch component is on focus.
     * Default value is `false`.
     *
     * @example
     * ```typescript
     * this.switch.focused = true;
     * ```
     */
    focused: boolean;
    /**
     * @hidden
     * @internal
     */
    inputId: string;
    /**
     * Toggles the checked state of the switch.
     *
     * @example
     * ```typescript
     * this.switch.toggle();
     * ```
     */
    toggle(): void;
    /**
     * @hidden
     * @internal
     */
    _onSwitchChange(event: any): void;
    /**
     * @hidden
     * @internal
     */
    _onSwitchClick(event: any): void;
    /**
     * @hidden
     * @internal
     */
    _onLabelClick(event: any): void;
    /**
     * @hidden
     * @internal
     */
    onFocus(event: any): void;
    /**
     * @hidden
     * @internal
     */
    onBlur(event: any): void;
    /**
     * @hidden
     * @internal
     */
    writeValue(value: any): void;
    /**
     * @hidden
     * @internal
     */
    getEditElement(): any;
    /**
     * @hidden
     * @internal
     */
    get labelClass(): string;
    /**
     * @hidden
     * @internal
     */
    registerOnChange(fn: (_: any) => void): void;
    /**
     * @hidden
     * @internal
     */
    registerOnTouched(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSwitchComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxSwitchComponent, "igx-switch", never, {
    "id": "id";
    "labelId": "labelId";
    "tabindex": "tabindex";
    "labelPosition": "labelPosition";
    "disableRipple": "disableRipple";
    "required": "required";
    "ariaLabelledBy": "aria-labelledby";
    "ariaLabel": "aria-label";
    "checked": "checked";
    "disabled": "disabled";
    "value": "value";
    "name": "name";
}, {
    "change": "change";
}, never>;
}
export declare const IGX_SWITCH_REQUIRED_VALIDATOR: Provider;
export declare class IgxSwitchRequiredDirective extends CheckboxRequiredValidator {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSwitchRequiredDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxSwitchRequiredDirective, "igx-switch[required][formControlName],    igx-switch[required][formControl],    igx-switch[required][ngModel]", never, {}, {}, never>;
}
/**
 * @hidden
 */
export declare class IgxSwitchModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxSwitchModule, [typeof IgxSwitchComponent, typeof IgxSwitchRequiredDirective], [typeof ɵngcc1.IgxRippleModule], [typeof IgxSwitchComponent, typeof IgxSwitchRequiredDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxSwitchModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,