import { ElementRef, EventEmitter, OnChanges, PipeTransform, Renderer2, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class IgxFilterOptions {
    inputValue: string;
    key: string;
    items: any[];
    get_value(item: any, key: string): string;
    formatter(valueToTest: string): string;
    matchFn(valueToTest: string, inputValue: string): boolean;
    metConditionFn(item: any): void;
    overdueConditionFn(item: any): void;
}
export declare class IgxFilterDirective implements OnChanges {
    private element;
    filtering: EventEmitter<any>;
    filtered: EventEmitter<any>;
    filterOptions: IgxFilterOptions;
    constructor(element: ElementRef, renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    private filter;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxFilterDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxFilterDirective, "[igxFilter]", never, {
    "filterOptions": "igxFilter";
}, {
    "filtering": "filtering";
    "filtered": "filtered";
}, never>;
}
export declare class IgxFilterPipe implements PipeTransform {
    transform(items: any[], options: IgxFilterOptions): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxFilterPipe>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxFilterPipe, "igxFilter">;
}
/**
 * @hidden
 */
export declare class IgxFilterModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxFilterModule, [typeof IgxFilterDirective, typeof IgxFilterPipe], [typeof ɵngcc1.CommonModule], [typeof IgxFilterDirective, typeof IgxFilterPipe]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxFilterModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJmaWx0ZXIuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7OztBQUdBOzs7Ozs7O0FBS0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgUGlwZVRyYW5zZm9ybSwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hGaWx0ZXJPcHRpb25zIHtcbiAgICBpbnB1dFZhbHVlOiBzdHJpbmc7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgaXRlbXM6IGFueVtdO1xuICAgIGdldF92YWx1ZShpdGVtOiBhbnksIGtleTogc3RyaW5nKTogc3RyaW5nO1xuICAgIGZvcm1hdHRlcih2YWx1ZVRvVGVzdDogc3RyaW5nKTogc3RyaW5nO1xuICAgIG1hdGNoRm4odmFsdWVUb1Rlc3Q6IHN0cmluZywgaW5wdXRWYWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICBtZXRDb25kaXRpb25GbihpdGVtOiBhbnkpOiB2b2lkO1xuICAgIG92ZXJkdWVDb25kaXRpb25GbihpdGVtOiBhbnkpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RmlsdGVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgZmlsdGVyaW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBmaWx0ZXJlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZmlsdGVyT3B0aW9uczogSWd4RmlsdGVyT3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBwcml2YXRlIGZpbHRlcjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEZpbHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICB0cmFuc2Zvcm0oaXRlbXM6IGFueVtdLCBvcHRpb25zOiBJZ3hGaWx0ZXJPcHRpb25zKTogYW55W107XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RmlsdGVyTW9kdWxlIHtcbn1cbiJdfQ==