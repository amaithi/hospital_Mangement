import { ElementRef, EventEmitter, PipeTransform, Renderer2, OnInit, AfterViewChecked } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { MaskParsingService, MaskOptions } from './mask-parsing.service';
import { IBaseEventArgs } from '../../core/utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class IgxMaskDirective implements OnInit, AfterViewChecked, ControlValueAccessor {
    protected elementRef: ElementRef;
    protected maskParser: MaskParsingService;
    protected renderer: Renderer2;
    /**
     * Sets the input mask.
     * ```html
     * <input [igxMask] = "'00/00/0000'">
     * ```
     */
    mask: string;
    /**
     * Sets the character representing a fillable spot in the input mask.
     * Default value is "'_'".
     * ```html
     * <input [promptChar] = "'/'">
     * ```
     */
    promptChar: string;
    /**
     * Specifies if the bound value includes the formatting symbols.
     * ```html
     * <input [includeLiterals] = "true">
     * ```
     */
    includeLiterals: boolean;
    /**
     * Specifies a placeholder.
     * ```html
     * <input placeholder = "enter text...">
     * ```
     */
    set placeholder(val: string);
    get placeholder(): string;
    /**
     * Specifies a pipe to be used on blur.
     * ```html
     * <input [displayValuePipe] = "displayFormatPipe">
     * ```
     */
    displayValuePipe: PipeTransform;
    /**
     * Specifies a pipe to be used on focus.
     * ```html
     * <input [focusedValuePipe] = "inputFormatPipe">
     * ```
     */
    focusedValuePipe: PipeTransform;
    /**
     * Emits an event each time the value changes.
     * Provides `rawValue: string` and `formattedValue: string` as event arguments.
     * ```html
     * <input (onValueChange) = "onValueChange(rawValue: string, formattedValue: string)">
     * ```
     */
    onValueChange: EventEmitter<IMaskEventArgs>;
    /** @hidden */
    get nativeElement(): HTMLInputElement;
    /** @hidden @internal; */
    protected get inputValue(): string;
    /** @hidden @internal */
    protected set inputValue(val: string);
    /** @hidden */
    protected get maskOptions(): MaskOptions;
    /** @hidden */
    protected get selectionStart(): number;
    /** @hidden */
    protected get selectionEnd(): number;
    /** @hidden */
    protected get start(): number;
    /** @hidden */
    protected get end(): number;
    private _end;
    private _start;
    private _key;
    private _oldText;
    private _dataValue;
    private _focused;
    private _droppedData;
    private _hasDropAction;
    private _stopPropagation;
    private _onTouchedCallback;
    private _onChangeCallback;
    constructor(elementRef: ElementRef, maskParser: MaskParsingService, renderer: Renderer2);
    /** @hidden */
    ngOnInit(): void;
    /**
     * TODO: Remove after date/time picker integration refactor
     * @hidden
     */
    ngAfterViewChecked(): void;
    /** @hidden */
    onKeyDown(event: any): void;
    /** @hidden */
    onInputChanged(): void;
    /** @hidden */
    onPaste(): void;
    /** @hidden */
    onFocus(): void;
    /** @hidden */
    onBlur(value: string): void;
    /** @hidden */
    onDragEnter(): void;
    /** @hidden */
    onDragLeave(): void;
    /** @hidden */
    onDrop(event: DragEvent): void;
    /** @hidden */
    protected showMask(value: string): void;
    /** @hidden */
    protected setSelectionRange(start: number, end?: number): void;
    /** @hidden */
    protected afterInput(): void;
    private showDisplayValue;
    /** @hidden */
    writeValue(value: string): void;
    /** @hidden */
    registerOnChange(fn: (_: any) => void): void;
    /** @hidden */
    registerOnTouched(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxMaskDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxMaskDirective, "[igxMask]", ["igxMask"], {
    "promptChar": "promptChar";
    "mask": "igxMask";
    "includeLiterals": "includeLiterals";
    "displayValuePipe": "displayValuePipe";
    "focusedValuePipe": "focusedValuePipe";
}, {
    "onValueChange": "onValueChange";
}, never>;
}
/**
 * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.
 */
export interface IMaskEventArgs extends IBaseEventArgs {
    rawValue: string;
    formattedValue: string;
}
/** @hidden */
export declare class IgxMaskModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxMaskModule, [typeof IgxMaskDirective], [typeof ɵngcc1.CommonModule], [typeof IgxMaskDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxMaskModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibWFzay5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3SEE7Ozs7Ozs7Ozs7OztBQVVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBQaXBlVHJhbnNmb3JtLCBSZW5kZXJlcjIsIE9uSW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNYXNrUGFyc2luZ1NlcnZpY2UsIE1hc2tPcHRpb25zIH0gZnJvbSAnLi9tYXNrLXBhcnNpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBJQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4TWFza0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBtYXNrUGFyc2VyOiBNYXNrUGFyc2luZ1NlcnZpY2U7XG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW5wdXQgbWFzay5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlucHV0IFtpZ3hNYXNrXSA9IFwiJzAwLzAwLzAwMDAnXCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgbWFzazogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNoYXJhY3RlciByZXByZXNlbnRpbmcgYSBmaWxsYWJsZSBzcG90IGluIHRoZSBpbnB1dCBtYXNrLlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgXCInXydcIi5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlucHV0IFtwcm9tcHRDaGFyXSA9IFwiJy8nXCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHJvbXB0Q2hhcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiB0aGUgYm91bmQgdmFsdWUgaW5jbHVkZXMgdGhlIGZvcm1hdHRpbmcgc3ltYm9scy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlucHV0IFtpbmNsdWRlTGl0ZXJhbHNdID0gXCJ0cnVlXCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgaW5jbHVkZUxpdGVyYWxzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBhIHBsYWNlaG9sZGVyLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aW5wdXQgcGxhY2Vob2xkZXIgPSBcImVudGVyIHRleHQuLi5cIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgcGxhY2Vob2xkZXIodmFsOiBzdHJpbmcpO1xuICAgIGdldCBwbGFjZWhvbGRlcigpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGEgcGlwZSB0byBiZSB1c2VkIG9uIGJsdXIuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpbnB1dCBbZGlzcGxheVZhbHVlUGlwZV0gPSBcImRpc3BsYXlGb3JtYXRQaXBlXCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZGlzcGxheVZhbHVlUGlwZTogUGlwZVRyYW5zZm9ybTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgYSBwaXBlIHRvIGJlIHVzZWQgb24gZm9jdXMuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpbnB1dCBbZm9jdXNlZFZhbHVlUGlwZV0gPSBcImlucHV0Rm9ybWF0UGlwZVwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZvY3VzZWRWYWx1ZVBpcGU6IFBpcGVUcmFuc2Zvcm07XG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gZXZlbnQgZWFjaCB0aW1lIHRoZSB2YWx1ZSBjaGFuZ2VzLlxuICAgICAqIFByb3ZpZGVzIGByYXdWYWx1ZTogc3RyaW5nYCBhbmQgYGZvcm1hdHRlZFZhbHVlOiBzdHJpbmdgIGFzIGV2ZW50IGFyZ3VtZW50cy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlucHV0IChvblZhbHVlQ2hhbmdlKSA9IFwib25WYWx1ZUNoYW5nZShyYXdWYWx1ZTogc3RyaW5nLCBmb3JtYXR0ZWRWYWx1ZTogc3RyaW5nKVwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxJTWFza0V2ZW50QXJncz47XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBnZXQgbmF0aXZlRWxlbWVudCgpOiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbDsgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0IGlucHV0VmFsdWUoKTogc3RyaW5nO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHByb3RlY3RlZCBzZXQgaW5wdXRWYWx1ZSh2YWw6IHN0cmluZyk7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcm90ZWN0ZWQgZ2V0IG1hc2tPcHRpb25zKCk6IE1hc2tPcHRpb25zO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHJvdGVjdGVkIGdldCBzZWxlY3Rpb25TdGFydCgpOiBudW1iZXI7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcm90ZWN0ZWQgZ2V0IHNlbGVjdGlvbkVuZCgpOiBudW1iZXI7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcm90ZWN0ZWQgZ2V0IHN0YXJ0KCk6IG51bWJlcjtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByb3RlY3RlZCBnZXQgZW5kKCk6IG51bWJlcjtcbiAgICBwcml2YXRlIF9lbmQ7XG4gICAgcHJpdmF0ZSBfc3RhcnQ7XG4gICAgcHJpdmF0ZSBfa2V5O1xuICAgIHByaXZhdGUgX29sZFRleHQ7XG4gICAgcHJpdmF0ZSBfZGF0YVZhbHVlO1xuICAgIHByaXZhdGUgX2ZvY3VzZWQ7XG4gICAgcHJpdmF0ZSBfZHJvcHBlZERhdGE7XG4gICAgcHJpdmF0ZSBfaGFzRHJvcEFjdGlvbjtcbiAgICBwcml2YXRlIF9zdG9wUHJvcGFnYXRpb247XG4gICAgcHJpdmF0ZSBfb25Ub3VjaGVkQ2FsbGJhY2s7XG4gICAgcHJpdmF0ZSBfb25DaGFuZ2VDYWxsYmFjaztcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBtYXNrUGFyc2VyOiBNYXNrUGFyc2luZ1NlcnZpY2UsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUT0RPOiBSZW1vdmUgYWZ0ZXIgZGF0ZS90aW1lIHBpY2tlciBpbnRlZ3JhdGlvbiByZWZhY3RvclxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG9uS2V5RG93bihldmVudDogYW55KTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG9uSW5wdXRDaGFuZ2VkKCk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBvblBhc3RlKCk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBvbkZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBvbkJsdXIodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBvbkRyYWdFbnRlcigpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgb25EcmFnTGVhdmUoKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIG9uRHJvcChldmVudDogRHJhZ0V2ZW50KTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByb3RlY3RlZCBzaG93TWFzayh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByb3RlY3RlZCBzZXRTZWxlY3Rpb25SYW5nZShzdGFydDogbnVtYmVyLCBlbmQ/OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcHJvdGVjdGVkIGFmdGVySW5wdXQoKTogdm9pZDtcbiAgICBwcml2YXRlIHNob3dEaXNwbGF5VmFsdWU7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG59XG4vKipcbiAqIFRoZSBJZ3hNYXNrTW9kdWxlIHByb3ZpZGVzIHRoZSB7QGxpbmsgSWd4TWFza0RpcmVjdGl2ZX0gaW5zaWRlIHlvdXIgYXBwbGljYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU1hc2tFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgcmF3VmFsdWU6IHN0cmluZztcbiAgICBmb3JtYXR0ZWRWYWx1ZTogc3RyaW5nO1xufVxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneE1hc2tNb2R1bGUge1xufVxuIl19