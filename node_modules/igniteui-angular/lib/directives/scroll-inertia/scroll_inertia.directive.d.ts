import { ElementRef, NgZone, OnInit, OnDestroy } from '@angular/core';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class IgxScrollInertiaDirective implements OnInit, OnDestroy {
    private element;
    private _zone;
    constructor(element: ElementRef, _zone: NgZone);
    IgxScrollInertiaDirection: string;
    IgxScrollInertiaScrollContainer: any;
    wheelStep: number;
    inertiaStep: number;
    swipeToleranceX: number;
    inertiaDeltaY: number;
    inertiaDeltaX: number;
    inertiaDuration: number;
    private _touchInertiaAnimID;
    private _startX;
    private _startY;
    private _touchStartX;
    private _touchStartY;
    private _lastTouchEnd;
    private _lastTouchX;
    private _lastTouchY;
    private _savedSpeedsX;
    private _savedSpeedsY;
    private _totalMovedX;
    private _offsetRecorded;
    private _offsetDirection;
    private _touchPrevented;
    private _lastMovedX;
    private _lastMovedY;
    private _gestureObject;
    private setPointerCaptureFName;
    private releasePointerCaptureFName;
    private _pointer;
    private _nextX;
    private _nextY;
    private parentElement;
    ngOnInit(): void;
    /**
     * @hidden
     * Function that is called when scrolling with the mouse wheel or using touchpad
     */
    protected onWheel(evt: any): void;
    /**
     * @hidden
     * When there is still room to scroll up/down prevent the parent elements from scrolling too.
     */
    protected preventParentScroll(evt: any, preventDefault: any): void;
    /**
     * @hidden
     * Function that is called the first moment we start interacting with the content on a touch device
     */
    protected onTouchStart(event: any): boolean;
    /**
     * @hidden
     * Function that is called when we need to scroll the content based on touch interactions
     */
    protected onTouchMove(event: any): boolean;
    protected onTouchEnd(event: any): void;
    /**
     * @hidden
     * Function that is called when we need to detect touch starting on a touch device on IE/Edge
     */
    protected onPointerDown(event: any): boolean;
    /**
     * @hidden
     * Function that is called when we need to detect touch ending on a touch device on IE/Edge
     */
    protected onPointerUp(event: any): boolean;
    /**
     * @hidden
     *  Function that is called when a gesture begins on IE/Edge
     */
    protected onMSGestureStart(event: any): boolean;
    /**
     * @hidden
     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge
     */
    protected onMSGestureChange(event: any): boolean;
    private calcAxisCoords;
    private _scrollTo;
    private _scrollToX;
    private _scrollToY;
    protected _inertiaInit(speedX: any, speedY: any): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxScrollInertiaDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxScrollInertiaDirective, "[igxScrollInertia]", never, {
    "wheelStep": "wheelStep";
    "inertiaStep": "inertiaStep";
    "swipeToleranceX": "swipeToleranceX";
    "inertiaDeltaY": "inertiaDeltaY";
    "inertiaDeltaX": "inertiaDeltaX";
    "inertiaDuration": "inertiaDuration";
    "IgxScrollInertiaDirection": "IgxScrollInertiaDirection";
    "IgxScrollInertiaScrollContainer": "IgxScrollInertiaScrollContainer";
}, {}, never>;
}
/**
 * @hidden
 */
export declare class IgxScrollInertiaModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxScrollInertiaModule, [typeof IgxScrollInertiaDirective], [typeof ɵngcc1.CommonModule], [typeof IgxScrollInertiaDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxScrollInertiaModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsX2luZXJ0aWEuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInNjcm9sbF9pbmVydGlhLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1GQTs7Ozs7OztBQUtBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgTmdab25lLCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFNjcm9sbEluZXJ0aWFEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgX3pvbmU7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgX3pvbmU6IE5nWm9uZSk7XG4gICAgSWd4U2Nyb2xsSW5lcnRpYURpcmVjdGlvbjogc3RyaW5nO1xuICAgIElneFNjcm9sbEluZXJ0aWFTY3JvbGxDb250YWluZXI6IGFueTtcbiAgICB3aGVlbFN0ZXA6IG51bWJlcjtcbiAgICBpbmVydGlhU3RlcDogbnVtYmVyO1xuICAgIHN3aXBlVG9sZXJhbmNlWDogbnVtYmVyO1xuICAgIGluZXJ0aWFEZWx0YVk6IG51bWJlcjtcbiAgICBpbmVydGlhRGVsdGFYOiBudW1iZXI7XG4gICAgaW5lcnRpYUR1cmF0aW9uOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfdG91Y2hJbmVydGlhQW5pbUlEO1xuICAgIHByaXZhdGUgX3N0YXJ0WDtcbiAgICBwcml2YXRlIF9zdGFydFk7XG4gICAgcHJpdmF0ZSBfdG91Y2hTdGFydFg7XG4gICAgcHJpdmF0ZSBfdG91Y2hTdGFydFk7XG4gICAgcHJpdmF0ZSBfbGFzdFRvdWNoRW5kO1xuICAgIHByaXZhdGUgX2xhc3RUb3VjaFg7XG4gICAgcHJpdmF0ZSBfbGFzdFRvdWNoWTtcbiAgICBwcml2YXRlIF9zYXZlZFNwZWVkc1g7XG4gICAgcHJpdmF0ZSBfc2F2ZWRTcGVlZHNZO1xuICAgIHByaXZhdGUgX3RvdGFsTW92ZWRYO1xuICAgIHByaXZhdGUgX29mZnNldFJlY29yZGVkO1xuICAgIHByaXZhdGUgX29mZnNldERpcmVjdGlvbjtcbiAgICBwcml2YXRlIF90b3VjaFByZXZlbnRlZDtcbiAgICBwcml2YXRlIF9sYXN0TW92ZWRYO1xuICAgIHByaXZhdGUgX2xhc3RNb3ZlZFk7XG4gICAgcHJpdmF0ZSBfZ2VzdHVyZU9iamVjdDtcbiAgICBwcml2YXRlIHNldFBvaW50ZXJDYXB0dXJlRk5hbWU7XG4gICAgcHJpdmF0ZSByZWxlYXNlUG9pbnRlckNhcHR1cmVGTmFtZTtcbiAgICBwcml2YXRlIF9wb2ludGVyO1xuICAgIHByaXZhdGUgX25leHRYO1xuICAgIHByaXZhdGUgX25leHRZO1xuICAgIHByaXZhdGUgcGFyZW50RWxlbWVudDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHNjcm9sbGluZyB3aXRoIHRoZSBtb3VzZSB3aGVlbCBvciB1c2luZyB0b3VjaHBhZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBvbldoZWVsKGV2dDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogV2hlbiB0aGVyZSBpcyBzdGlsbCByb29tIHRvIHNjcm9sbCB1cC9kb3duIHByZXZlbnQgdGhlIHBhcmVudCBlbGVtZW50cyBmcm9tIHNjcm9sbGluZyB0b28uXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHByZXZlbnRQYXJlbnRTY3JvbGwoZXZ0OiBhbnksIHByZXZlbnREZWZhdWx0OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB0aGUgZmlyc3QgbW9tZW50IHdlIHN0YXJ0IGludGVyYWN0aW5nIHdpdGggdGhlIGNvbnRlbnQgb24gYSB0b3VjaCBkZXZpY2VcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25Ub3VjaFN0YXJ0KGV2ZW50OiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHdlIG5lZWQgdG8gc2Nyb2xsIHRoZSBjb250ZW50IGJhc2VkIG9uIHRvdWNoIGludGVyYWN0aW9uc1xuICAgICAqL1xuICAgIHByb3RlY3RlZCBvblRvdWNoTW92ZShldmVudDogYW55KTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgb25Ub3VjaEVuZChldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB3ZSBuZWVkIHRvIGRldGVjdCB0b3VjaCBzdGFydGluZyBvbiBhIHRvdWNoIGRldmljZSBvbiBJRS9FZGdlXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG9uUG9pbnRlckRvd24oZXZlbnQ6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gd2UgbmVlZCB0byBkZXRlY3QgdG91Y2ggZW5kaW5nIG9uIGEgdG91Y2ggZGV2aWNlIG9uIElFL0VkZ2VcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25Qb2ludGVyVXAoZXZlbnQ6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqICBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIGEgZ2VzdHVyZSBiZWdpbnMgb24gSUUvRWRnZVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBvbk1TR2VzdHVyZVN0YXJ0KGV2ZW50OiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIGEgd2UgbmVlZCB0byBzY3JvbGwgYmFzZWQgb24gdGhlIGdlc3R1cmUgcGVyZm9ybWVkIG9uIElFL0VkZ2VcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25NU0dlc3R1cmVDaGFuZ2UoZXZlbnQ6IGFueSk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBjYWxjQXhpc0Nvb3JkcztcbiAgICBwcml2YXRlIF9zY3JvbGxUbztcbiAgICBwcml2YXRlIF9zY3JvbGxUb1g7XG4gICAgcHJpdmF0ZSBfc2Nyb2xsVG9ZO1xuICAgIHByb3RlY3RlZCBfaW5lcnRpYUluaXQoc3BlZWRYOiBhbnksIHNwZWVkWTogYW55KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFNjcm9sbEluZXJ0aWFNb2R1bGUge1xufVxuIl19