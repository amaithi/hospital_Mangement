import { EmbeddedViewRef, OnChanges, ChangeDetectorRef, SimpleChanges, TemplateRef, ViewContainerRef, NgZone, EventEmitter } from '@angular/core';
import { IBaseEventArgs } from '../../core/utils';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class IgxTemplateOutletDirective implements OnChanges {
    _viewContainerRef: ViewContainerRef;
    private _zone;
    cdr: ChangeDetectorRef;
    private _viewRef;
    /**
     * The embedded views cache. Collection is key-value paired.
     * Key is the template id, value is the embedded view for the related template.
     */
    private _embeddedViewsMap;
    igxTemplateOutletContext: Object;
    igxTemplateOutlet: TemplateRef<any>;
    onViewCreated: EventEmitter<IViewChangeEventArgs>;
    onViewMoved: EventEmitter<IViewChangeEventArgs>;
    onCachedViewLoaded: EventEmitter<ICachedViewLoadedEventArgs>;
    onBeforeViewDetach: EventEmitter<IViewChangeEventArgs>;
    constructor(_viewContainerRef: ViewContainerRef, _zone: NgZone, cdr: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    cleanCache(): void;
    cleanView(tmplID: any): void;
    private _recreateView;
    private _moveView;
    private _useCachedView;
    private _shouldRecreateView;
    private _hasContextShapeChanged;
    private _updateExistingContext;
    private _cloneContext;
    private _getActionType;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTemplateOutletDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxTemplateOutletDirective, "[igxTemplateOutlet]", never, {
    "igxTemplateOutletContext": "igxTemplateOutletContext";
    "igxTemplateOutlet": "igxTemplateOutlet";
}, {
    "onViewCreated": "onViewCreated";
    "onViewMoved": "onViewMoved";
    "onCachedViewLoaded": "onCachedViewLoaded";
    "onBeforeViewDetach": "onBeforeViewDetach";
}, never>;
}
export interface IViewChangeEventArgs extends IBaseEventArgs {
    owner: IgxTemplateOutletDirective;
    view: EmbeddedViewRef<any>;
    context: any;
}
export interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {
    oldContext: any;
}
/**
 * @hidden
 */
export declare class IgxTemplateOutletModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxTemplateOutletModule, [typeof IgxTemplateOutletDirective], [typeof ɵngcc1.CommonModule], [typeof IgxTemplateOutletDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxTemplateOutletModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVfb3V0bGV0LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJ0ZW1wbGF0ZV9vdXRsZXQuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0QkE7Ozs7Ozs7Ozs7Ozs7OztBQWFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1iZWRkZWRWaWV3UmVmLCBPbkNoYW5nZXMsIENoYW5nZURldGVjdG9yUmVmLCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiwgTmdab25lLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElCYXNlRXZlbnRBcmdzIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4VGVtcGxhdGVPdXRsZXREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIF92aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmO1xuICAgIHByaXZhdGUgX3pvbmU7XG4gICAgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcml2YXRlIF92aWV3UmVmO1xuICAgIC8qKlxuICAgICAqIFRoZSBlbWJlZGRlZCB2aWV3cyBjYWNoZS4gQ29sbGVjdGlvbiBpcyBrZXktdmFsdWUgcGFpcmVkLlxuICAgICAqIEtleSBpcyB0aGUgdGVtcGxhdGUgaWQsIHZhbHVlIGlzIHRoZSBlbWJlZGRlZCB2aWV3IGZvciB0aGUgcmVsYXRlZCB0ZW1wbGF0ZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9lbWJlZGRlZFZpZXdzTWFwO1xuICAgIGlneFRlbXBsYXRlT3V0bGV0Q29udGV4dDogT2JqZWN0O1xuICAgIGlneFRlbXBsYXRlT3V0bGV0OiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIG9uVmlld0NyZWF0ZWQ6IEV2ZW50RW1pdHRlcjxJVmlld0NoYW5nZUV2ZW50QXJncz47XG4gICAgb25WaWV3TW92ZWQ6IEV2ZW50RW1pdHRlcjxJVmlld0NoYW5nZUV2ZW50QXJncz47XG4gICAgb25DYWNoZWRWaWV3TG9hZGVkOiBFdmVudEVtaXR0ZXI8SUNhY2hlZFZpZXdMb2FkZWRFdmVudEFyZ3M+O1xuICAgIG9uQmVmb3JlVmlld0RldGFjaDogRXZlbnRFbWl0dGVyPElWaWV3Q2hhbmdlRXZlbnRBcmdzPjtcbiAgICBjb25zdHJ1Y3Rvcihfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgX3pvbmU6IE5nWm9uZSwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgY2xlYW5DYWNoZSgpOiB2b2lkO1xuICAgIGNsZWFuVmlldyh0bXBsSUQ6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfcmVjcmVhdGVWaWV3O1xuICAgIHByaXZhdGUgX21vdmVWaWV3O1xuICAgIHByaXZhdGUgX3VzZUNhY2hlZFZpZXc7XG4gICAgcHJpdmF0ZSBfc2hvdWxkUmVjcmVhdGVWaWV3O1xuICAgIHByaXZhdGUgX2hhc0NvbnRleHRTaGFwZUNoYW5nZWQ7XG4gICAgcHJpdmF0ZSBfdXBkYXRlRXhpc3RpbmdDb250ZXh0O1xuICAgIHByaXZhdGUgX2Nsb25lQ29udGV4dDtcbiAgICBwcml2YXRlIF9nZXRBY3Rpb25UeXBlO1xufVxuZXhwb3J0IGludGVyZmFjZSBJVmlld0NoYW5nZUV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICBvd25lcjogSWd4VGVtcGxhdGVPdXRsZXREaXJlY3RpdmU7XG4gICAgdmlldzogRW1iZWRkZWRWaWV3UmVmPGFueT47XG4gICAgY29udGV4dDogYW55O1xufVxuZXhwb3J0IGludGVyZmFjZSBJQ2FjaGVkVmlld0xvYWRlZEV2ZW50QXJncyBleHRlbmRzIElWaWV3Q2hhbmdlRXZlbnRBcmdzIHtcbiAgICBvbGRDb250ZXh0OiBhbnk7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4VGVtcGxhdGVPdXRsZXRNb2R1bGUge1xufVxuIl19