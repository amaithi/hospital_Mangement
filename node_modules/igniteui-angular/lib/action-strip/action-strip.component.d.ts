import { Renderer2, ViewContainerRef, QueryList, TemplateRef } from '@angular/core';
import { DisplayDensityBase, IDisplayDensityOptions } from '../core/density';
import { OverlaySettings } from '../services/public_api';
import * as ɵngcc0 from '@angular/core';
export declare class IgxActionStripMenuItemDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxActionStripMenuItemDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxActionStripMenuItemDirective, "[igxActionStripMenuItem]", never, {}, {}, never>;
}
/**
 * Action Strip provides templatable area for one or more actions.
 *
 * @igxModule IgxActionStripModule
 *
 * @igxTheme igx-action-strip-theme
 *
 * @igxKeywords action, strip, actionStrip, pinning, editing
 *
 * @igxGroup Data Entry & Display
 *
 * @remarks
 * The Ignite UI Action Strip is a container, overlaying its parent container,
 * and displaying action buttons with action applicable to the parent component the strip is instantiated or shown for.
 *
 * @example
 * ```html
 * <igx-action-strip #actionStrip>
 *     <igx-icon (click)="doSomeAction()"></igx-icon>
 * </igx-action-strip>
 */
export declare class IgxActionStripComponent extends DisplayDensityBase {
    private _viewContainer;
    private renderer;
    protected _displayDensityOptions: IDisplayDensityOptions;
    constructor(_viewContainer: ViewContainerRef, renderer: Renderer2, _displayDensityOptions: IDisplayDensityOptions);
    /**
     * Getter for the 'display' property of the current `IgxActionStrip`
     * @hidden
     * @internal
     */
    get display(): string;
    private _hidden;
    /**
     * An @Input property that set the visibility of the Action Strip.
     * Could be used to set if the Action Strip will be initially hidden.
     * @example
     * ```html
     *  <igx-action-strip [hidden]="false">
     * ```
     */
    set hidden(value: boolean);
    get hidden(): boolean;
    /**
     * Host `class.igx-action-strip` binding.
     * @hidden
     * @internal
     */
    hostClass: string;
    /**
     * Host `attr.class` binding.
     * @hidden
     * @internal
     */
    get hostClasses(): string;
    /**
     * Sets the context of an action strip.
     * The context should be an instance of a @Component, that has element property.
     * This element will be the placeholder of the action strip.
     * @example
     * ```html
     * <igx-action-strip [context]="cell"></igx-action-strip>
     * ```
     */
    context: any;
    /**
     * Menu Items ContentChildren inside the Action Strip
     * @hidden
     * @internal
     */
    menuItems: QueryList<IgxActionStripMenuItemDirective>;
    /**
     * Reference to the menu
     * @hidden
     * @internal
     */
    private menu;
    /**
     * Showing the Action Strip and appending it the specified context element.
     * @param context
     * @example
     * ```typescript
     * this.actionStrip.show(row);
     * ```
     */
    show(context?: any): void;
    /**
     * Hiding the Action Strip and removing it from its current context element.
     * @example
     * ```typescript
     * this.actionStrip.hide();
     * ```
     */
    hide(): void;
    /**
     * Getter for menu overlay settings
     * @hidden
     * @internal
     */
    get menuOverlaySettings(): OverlaySettings;
    /**
     * Close the menu if opened
     * @hidden
     * @internal
     */
    private closeMenu;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxActionStripComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxActionStripComponent, "igx-action-strip", never, {
    "hidden": "hidden";
    "context": "context";
    "hostClass": "class";
}, {}, ["menuItems"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXN0cmlwLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhY3Rpb24tc3RyaXAuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyR0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXJlcjIsIFZpZXdDb250YWluZXJSZWYsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpc3BsYXlEZW5zaXR5QmFzZSwgSURpc3BsYXlEZW5zaXR5T3B0aW9ucyB9IGZyb20gJy4uL2NvcmUvZGVuc2l0eSc7XG5pbXBvcnQgeyBPdmVybGF5U2V0dGluZ3MgfSBmcm9tICcuLi9zZXJ2aWNlcy9wdWJsaWNfYXBpJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEFjdGlvblN0cmlwTWVudUl0ZW1EaXJlY3RpdmUge1xuICAgIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KTtcbn1cbi8qKlxuICogQWN0aW9uIFN0cmlwIHByb3ZpZGVzIHRlbXBsYXRhYmxlIGFyZWEgZm9yIG9uZSBvciBtb3JlIGFjdGlvbnMuXG4gKlxuICogQGlneE1vZHVsZSBJZ3hBY3Rpb25TdHJpcE1vZHVsZVxuICpcbiAqIEBpZ3hUaGVtZSBpZ3gtYWN0aW9uLXN0cmlwLXRoZW1lXG4gKlxuICogQGlneEtleXdvcmRzIGFjdGlvbiwgc3RyaXAsIGFjdGlvblN0cmlwLCBwaW5uaW5nLCBlZGl0aW5nXG4gKlxuICogQGlneEdyb3VwIERhdGEgRW50cnkgJiBEaXNwbGF5XG4gKlxuICogQHJlbWFya3NcbiAqIFRoZSBJZ25pdGUgVUkgQWN0aW9uIFN0cmlwIGlzIGEgY29udGFpbmVyLCBvdmVybGF5aW5nIGl0cyBwYXJlbnQgY29udGFpbmVyLFxuICogYW5kIGRpc3BsYXlpbmcgYWN0aW9uIGJ1dHRvbnMgd2l0aCBhY3Rpb24gYXBwbGljYWJsZSB0byB0aGUgcGFyZW50IGNvbXBvbmVudCB0aGUgc3RyaXAgaXMgaW5zdGFudGlhdGVkIG9yIHNob3duIGZvci5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGlneC1hY3Rpb24tc3RyaXAgI2FjdGlvblN0cmlwPlxuICogICAgIDxpZ3gtaWNvbiAoY2xpY2spPVwiZG9Tb21lQWN0aW9uKClcIj48L2lneC1pY29uPlxuICogPC9pZ3gtYWN0aW9uLXN0cmlwPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hBY3Rpb25TdHJpcENvbXBvbmVudCBleHRlbmRzIERpc3BsYXlEZW5zaXR5QmFzZSB7XG4gICAgcHJpdmF0ZSBfdmlld0NvbnRhaW5lcjtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByb3RlY3RlZCBfZGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKF92aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBfZGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zKTtcbiAgICAvKipcbiAgICAgKiBHZXR0ZXIgZm9yIHRoZSAnZGlzcGxheScgcHJvcGVydHkgb2YgdGhlIGN1cnJlbnQgYElneEFjdGlvblN0cmlwYFxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgZGlzcGxheSgpOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfaGlkZGVuO1xuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgQWN0aW9uIFN0cmlwLlxuICAgICAqIENvdWxkIGJlIHVzZWQgdG8gc2V0IGlmIHRoZSBBY3Rpb24gU3RyaXAgd2lsbCBiZSBpbml0aWFsbHkgaGlkZGVuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqICA8aWd4LWFjdGlvbi1zdHJpcCBbaGlkZGVuXT1cImZhbHNlXCI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0IGhpZGRlbih2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGhpZGRlbigpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEhvc3QgYGNsYXNzLmlneC1hY3Rpb24tc3RyaXBgIGJpbmRpbmcuXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGhvc3RDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEhvc3QgYGF0dHIuY2xhc3NgIGJpbmRpbmcuXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldCBob3N0Q2xhc3NlcygpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY29udGV4dCBvZiBhbiBhY3Rpb24gc3RyaXAuXG4gICAgICogVGhlIGNvbnRleHQgc2hvdWxkIGJlIGFuIGluc3RhbmNlIG9mIGEgQENvbXBvbmVudCwgdGhhdCBoYXMgZWxlbWVudCBwcm9wZXJ0eS5cbiAgICAgKiBUaGlzIGVsZW1lbnQgd2lsbCBiZSB0aGUgcGxhY2Vob2xkZXIgb2YgdGhlIGFjdGlvbiBzdHJpcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWFjdGlvbi1zdHJpcCBbY29udGV4dF09XCJjZWxsXCI+PC9pZ3gtYWN0aW9uLXN0cmlwPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNvbnRleHQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBNZW51IEl0ZW1zIENvbnRlbnRDaGlsZHJlbiBpbnNpZGUgdGhlIEFjdGlvbiBTdHJpcFxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBtZW51SXRlbXM6IFF1ZXJ5TGlzdDxJZ3hBY3Rpb25TdHJpcE1lbnVJdGVtRGlyZWN0aXZlPjtcbiAgICAvKipcbiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIG1lbnVcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSBtZW51O1xuICAgIC8qKlxuICAgICAqIFNob3dpbmcgdGhlIEFjdGlvbiBTdHJpcCBhbmQgYXBwZW5kaW5nIGl0IHRoZSBzcGVjaWZpZWQgY29udGV4dCBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBjb250ZXh0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5hY3Rpb25TdHJpcC5zaG93KHJvdyk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2hvdyhjb250ZXh0PzogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBIaWRpbmcgdGhlIEFjdGlvbiBTdHJpcCBhbmQgcmVtb3ZpbmcgaXQgZnJvbSBpdHMgY3VycmVudCBjb250ZXh0IGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5hY3Rpb25TdHJpcC5oaWRlKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEdldHRlciBmb3IgbWVudSBvdmVybGF5IHNldHRpbmdzXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldCBtZW51T3ZlcmxheVNldHRpbmdzKCk6IE92ZXJsYXlTZXR0aW5ncztcbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgbWVudSBpZiBvcGVuZWRcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSBjbG9zZU1lbnU7XG59XG4iXX0=