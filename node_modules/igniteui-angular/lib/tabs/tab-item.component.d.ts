import { ElementRef, TemplateRef, NgZone, AfterViewInit, OnDestroy } from '@angular/core';
import { IgxTabsGroupComponent } from './tabs-group.component';
import { IgxTabItemBase, IgxTabsBase } from './tabs.common';
import { IgxTabItemTemplateDirective } from './tabs.directives';
import * as ɵngcc0 from '@angular/core';
export declare class IgxTabItemComponent extends IgxTabItemBase implements AfterViewInit, OnDestroy {
    private _tabs;
    private _element;
    private _ngZone;
    /**
     * Gets the group associated with the tab.
     * ```html
     * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;
     * ```
     */
    relatedGroup: IgxTabsGroupComponent;
    /** @hidden */
    private _icon;
    /**
     * An @Input property that sets the value of the `icon`.
     * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.
     * ```html
     * <igx-tab-item label="Tab 1" icon="home">
     * ```
     */
    get icon(): string;
    set icon(newValue: string);
    /** @hidden */
    private _label;
    /**
     * An @Input property that sets the value of the `label`.
     * ```html
     * <igx-tabs-item label="Tab 2" icon="folder">
     * ```
     */
    get label(): string;
    set label(newValue: string);
    /**
     * @hidden @internal
     * Set to true when the tab item is automatically generated from the IgxTabsComponent when tab groups are defined.
     */
    autoGenerated: boolean;
    /** @hidden */
    protected defaultTabTemplate: TemplateRef<any>;
    /** @hidden */
    protected customTabTemplateDir: IgxTabItemTemplateDirective;
    private _nativeTabItem;
    private _changesCount;
    private _isSelected;
    private _disabled;
    private _resizeObserver;
    constructor(_tabs: IgxTabsBase, _element: ElementRef, _ngZone: NgZone);
    get provideCssClassSelected(): boolean;
    get provideCssClassDisabled(): boolean;
    get provideCssClass(): boolean;
    /**
     * @hidden @internal
     */
    role: string;
    /**
     * @hidden @internal
     */
    tabindex: number;
    /**
     * @hidden @internal
     */
    ariaLabel: string;
    /**
     * @hidden @internal
     */
    ariaDisabled: boolean;
    /**
     * @hidden @internal
     */
    ariaSelected: boolean;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    onClick(event: any): void;
    /**
     * @hidden
     */
    onKeydown(event: KeyboardEvent): void;
    /**
     * @hidden
     */
    get changesCount(): number;
    /**
     * @hidden
     */
    get nativeTabItem(): ElementRef;
    /**
     * 	Gets whether the tab is disabled.
     * ```
     * const disabledItem = this.myTabComponent.tabs.first.disabled;
     * ```
     */
    get disabled(): boolean;
    set disabled(newValue: boolean);
    /**
     * Gets whether the tab is selected.
     * ```typescript
     * const selectedItem = this.myTabComponent.tabs.first.isSelected;
     * ```
     */
    get isSelected(): boolean;
    set isSelected(newValue: boolean);
    /**
     * @hidden
     */
    select(): void;
    /**
     * @hidden
     */
    get index(): number;
    /**
     * @hidden
     */
    setSelectedInternal(newValue: boolean): void;
    /**
     * @hidden
     */
    get template(): TemplateRef<any>;
    /**
     * @hidden
     */
    get context(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTabItemComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxTabItemComponent, "igx-tab-item", never, {
    "icon": "icon";
    "label": "label";
    "disabled": "disabled";
    "isSelected": "isSelected";
    "relatedGroup": "relatedGroup";
    "autoGenerated": "autoGenerated";
}, {}, ["customTabTemplateDir"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWl0ZW0uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhYi1pdGVtLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEhBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgVGVtcGxhdGVSZWYsIE5nWm9uZSwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hUYWJzR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL3RhYnMtZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IElneFRhYkl0ZW1CYXNlLCBJZ3hUYWJzQmFzZSB9IGZyb20gJy4vdGFicy5jb21tb24nO1xuaW1wb3J0IHsgSWd4VGFiSXRlbVRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi90YWJzLmRpcmVjdGl2ZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4VGFiSXRlbUNvbXBvbmVudCBleHRlbmRzIElneFRhYkl0ZW1CYXNlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF90YWJzO1xuICAgIHByaXZhdGUgX2VsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfbmdab25lO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGdyb3VwIGFzc29jaWF0ZWQgd2l0aCB0aGUgdGFiLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiBjb25zdCByZWxhdGVkR3JvdXAgPSB0aGlzLnRhYmJhci50YWJzLnRvQXJyYXkoKVsxXS5yZWxhdGVkR3JvdXA7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcmVsYXRlZEdyb3VwOiBJZ3hUYWJzR3JvdXBDb21wb25lbnQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcml2YXRlIF9pY29uO1xuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHZhbHVlIG9mIHRoZSBgaWNvbmAuXG4gICAgICogVGhlIHZhbHVlIHNob3VsZCBiZSB2YWxpZCBpY29uIG5hbWUgZnJvbSB7QGxpbmsgaHR0cHM6Ly9tYXRlcmlhbC5pby90b29scy9pY29ucy8/c3R5bGU9YmFzZWxpbmV9LlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXRhYi1pdGVtIGxhYmVsPVwiVGFiIDFcIiBpY29uPVwiaG9tZVwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBpY29uKCk6IHN0cmluZztcbiAgICBzZXQgaWNvbihuZXdWYWx1ZTogc3RyaW5nKTtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByaXZhdGUgX2xhYmVsO1xuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHZhbHVlIG9mIHRoZSBgbGFiZWxgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXRhYnMtaXRlbSBsYWJlbD1cIlRhYiAyXCIgaWNvbj1cImZvbGRlclwiPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBsYWJlbCgpOiBzdHJpbmc7XG4gICAgc2V0IGxhYmVsKG5ld1ZhbHVlOiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICogU2V0IHRvIHRydWUgd2hlbiB0aGUgdGFiIGl0ZW0gaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZnJvbSB0aGUgSWd4VGFic0NvbXBvbmVudCB3aGVuIHRhYiBncm91cHMgYXJlIGRlZmluZWQuXG4gICAgICovXG4gICAgYXV0b0dlbmVyYXRlZDogYm9vbGVhbjtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHByb3RlY3RlZCBkZWZhdWx0VGFiVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBwcm90ZWN0ZWQgY3VzdG9tVGFiVGVtcGxhdGVEaXI6IElneFRhYkl0ZW1UZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICBwcml2YXRlIF9uYXRpdmVUYWJJdGVtO1xuICAgIHByaXZhdGUgX2NoYW5nZXNDb3VudDtcbiAgICBwcml2YXRlIF9pc1NlbGVjdGVkO1xuICAgIHByaXZhdGUgX2Rpc2FibGVkO1xuICAgIHByaXZhdGUgX3Jlc2l6ZU9ic2VydmVyO1xuICAgIGNvbnN0cnVjdG9yKF90YWJzOiBJZ3hUYWJzQmFzZSwgX2VsZW1lbnQ6IEVsZW1lbnRSZWYsIF9uZ1pvbmU6IE5nWm9uZSk7XG4gICAgZ2V0IHByb3ZpZGVDc3NDbGFzc1NlbGVjdGVkKCk6IGJvb2xlYW47XG4gICAgZ2V0IHByb3ZpZGVDc3NDbGFzc0Rpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgZ2V0IHByb3ZpZGVDc3NDbGFzcygpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcm9sZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgYXJpYURpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgYXJpYVNlbGVjdGVkOiBib29sZWFuO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBjaGFuZ2VzQ291bnQoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgbmF0aXZlVGFiSXRlbSgpOiBFbGVtZW50UmVmO1xuICAgIC8qKlxuICAgICAqIFx0R2V0cyB3aGV0aGVyIHRoZSB0YWIgaXMgZGlzYWJsZWQuXG4gICAgICogYGBgXG4gICAgICogY29uc3QgZGlzYWJsZWRJdGVtID0gdGhpcy5teVRhYkNvbXBvbmVudC50YWJzLmZpcnN0LmRpc2FibGVkO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIHNldCBkaXNhYmxlZChuZXdWYWx1ZTogYm9vbGVhbik7XG4gICAgLyoqXG4gICAgICogR2V0cyB3aGV0aGVyIHRoZSB0YWIgaXMgc2VsZWN0ZWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHNlbGVjdGVkSXRlbSA9IHRoaXMubXlUYWJDb21wb25lbnQudGFicy5maXJzdC5pc1NlbGVjdGVkO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBpc1NlbGVjdGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGlzU2VsZWN0ZWQobmV3VmFsdWU6IGJvb2xlYW4pO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZWxlY3QoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGluZGV4KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc2V0U2VsZWN0ZWRJbnRlcm5hbChuZXdWYWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCB0ZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgY29udGV4dCgpOiBhbnk7XG59XG4iXX0=