import { TransactionService, Transaction, State } from './transaction';
import { EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {
    protected _isPending: boolean;
    protected _pendingTransactions: T[];
    protected _pendingStates: Map<any, S>;
    /**
     * @inheritdoc
     */
    get canRedo(): boolean;
    /**
     * @inheritdoc
     */
    get canUndo(): boolean;
    /**
     * @inheritdoc
     */
    get enabled(): boolean;
    /**
     * @inheritdoc
     */
    onStateUpdate: EventEmitter<void>;
    /**
     * @inheritdoc
     */
    add(transaction: T, recordRef?: any): void;
    /**
     * @inheritdoc
     */
    getTransactionLog(id?: any): T[];
    /**
     * @inheritdoc
     */
    undo(): void;
    /**
     * @inheritdoc
     */
    redo(): void;
    /**
     * @inheritdoc
     */
    getAggregatedChanges(mergeChanges: boolean): T[];
    /**
     * @inheritdoc
     */
    getState(id: any): S;
    /**
     * @inheritdoc
     */
    getAggregatedValue(id: any, mergeChanges: boolean): any;
    /**
     * @inheritdoc
     */
    commit(data: any[], id?: any): void;
    /**
     * @inheritdoc
     */
    clear(id?: any): void;
    /**
     * @inheritdoc
     */
    startPending(): void;
    /**
     * @inheritdoc
     */
    endPending(commit: boolean): void;
    /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @param states States collection to apply the update to
     * @param transaction Transaction to apply to the current state
     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     */
    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void;
    /**
     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types
     * @param state State to update value for
     * @returns updated value including all the changes in provided state
     */
    protected updateValue(state: S): any;
    /**
     * Merges second values in first value and the result in empty object. If values are primitive type
     * returns second value if exists, or first value.
     * @param first Value to merge into
     * @param second Value to merge
     */
    protected mergeValues<U>(first: U, second: U): U;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxBaseTransactionService<any, any>>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxBaseTransactionService<any, any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS10cmFuc2FjdGlvbi5kLnRzIiwic291cmNlcyI6WyJiYXNlLXRyYW5zYWN0aW9uLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9GQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zYWN0aW9uU2VydmljZSwgVHJhbnNhY3Rpb24sIFN0YXRlIH0gZnJvbSAnLi90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEJhc2VUcmFuc2FjdGlvblNlcnZpY2U8VCBleHRlbmRzIFRyYW5zYWN0aW9uLCBTIGV4dGVuZHMgU3RhdGU+IGltcGxlbWVudHMgVHJhbnNhY3Rpb25TZXJ2aWNlPFQsIFM+IHtcbiAgICBwcm90ZWN0ZWQgX2lzUGVuZGluZzogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX3BlbmRpbmdUcmFuc2FjdGlvbnM6IFRbXTtcbiAgICBwcm90ZWN0ZWQgX3BlbmRpbmdTdGF0ZXM6IE1hcDxhbnksIFM+O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgZ2V0IGNhblJlZG8oKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIGdldCBjYW5VbmRvKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICBnZXQgZW5hYmxlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgb25TdGF0ZVVwZGF0ZTogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgYWRkKHRyYW5zYWN0aW9uOiBULCByZWNvcmRSZWY/OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25Mb2coaWQ/OiBhbnkpOiBUW107XG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICB1bmRvKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICByZWRvKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICBnZXRBZ2dyZWdhdGVkQ2hhbmdlcyhtZXJnZUNoYW5nZXM6IGJvb2xlYW4pOiBUW107XG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICBnZXRTdGF0ZShpZDogYW55KTogUztcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIGdldEFnZ3JlZ2F0ZWRWYWx1ZShpZDogYW55LCBtZXJnZUNoYW5nZXM6IGJvb2xlYW4pOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICBjb21taXQoZGF0YTogYW55W10sIGlkPzogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIGNsZWFyKGlkPzogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIHN0YXJ0UGVuZGluZygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgZW5kUGVuZGluZyhjb21taXQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHByb3ZpZGVkIHN0YXRlcyBjb2xsZWN0aW9uIGFjY29yZGluZyB0byBwYXNzZWQgdHJhbnNhY3Rpb24gYW5kIHJlY29yZFJlZlxuICAgICAqIEBwYXJhbSBzdGF0ZXMgU3RhdGVzIGNvbGxlY3Rpb24gdG8gYXBwbHkgdGhlIHVwZGF0ZSB0b1xuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiBUcmFuc2FjdGlvbiB0byBhcHBseSB0byB0aGUgY3VycmVudCBzdGF0ZVxuICAgICAqIEBwYXJhbSByZWNvcmRSZWYgUmVmZXJlbmNlIHRvIHRoZSB2YWx1ZSBvZiB0aGUgcmVjb3JkIGluIGRhdGEgc291cmNlLCBpZiBhbnksIHdoZXJlIHRyYW5zYWN0aW9uIHNob3VsZCBiZSBhcHBsaWVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHVwZGF0ZVN0YXRlKHN0YXRlczogTWFwPGFueSwgUz4sIHRyYW5zYWN0aW9uOiBULCByZWNvcmRSZWY/OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHJlY29yZFJlZiBvZiB0aGUgcHJvdmlkZWQgc3RhdGUgd2l0aCBhbGwgdGhlIGNoYW5nZXMgaW4gdGhlIHN0YXRlLiBBY2NlcHRzIHByaW1pdGl2ZSBhbmQgb2JqZWN0IHZhbHVlIHR5cGVzXG4gICAgICogQHBhcmFtIHN0YXRlIFN0YXRlIHRvIHVwZGF0ZSB2YWx1ZSBmb3JcbiAgICAgKiBAcmV0dXJucyB1cGRhdGVkIHZhbHVlIGluY2x1ZGluZyBhbGwgdGhlIGNoYW5nZXMgaW4gcHJvdmlkZWQgc3RhdGVcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlVmFsdWUoc3RhdGU6IFMpOiBhbnk7XG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHNlY29uZCB2YWx1ZXMgaW4gZmlyc3QgdmFsdWUgYW5kIHRoZSByZXN1bHQgaW4gZW1wdHkgb2JqZWN0LiBJZiB2YWx1ZXMgYXJlIHByaW1pdGl2ZSB0eXBlXG4gICAgICogcmV0dXJucyBzZWNvbmQgdmFsdWUgaWYgZXhpc3RzLCBvciBmaXJzdCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gZmlyc3QgVmFsdWUgdG8gbWVyZ2UgaW50b1xuICAgICAqIEBwYXJhbSBzZWNvbmQgVmFsdWUgdG8gbWVyZ2VcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgbWVyZ2VWYWx1ZXM8VT4oZmlyc3Q6IFUsIHNlY29uZDogVSk6IFU7XG59XG4iXX0=