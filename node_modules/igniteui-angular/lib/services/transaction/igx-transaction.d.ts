import { Transaction, State } from './transaction';
import { IgxBaseTransactionService } from './base-transaction';
import { EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {
    protected _transactions: T[];
    protected _redoStack: {
        transaction: T;
        recordRef: any;
    }[][];
    protected _undoStack: {
        transaction: T;
        recordRef: any;
    }[][];
    protected _states: Map<any, S>;
    /**
     * @inheritdoc
     */
    get canUndo(): boolean;
    /**
     * @inheritdoc
     */
    get canRedo(): boolean;
    /**
     * @inheritdoc
     */
    onStateUpdate: EventEmitter<void>;
    /**
     * @inheritdoc
     */
    add(transaction: T, recordRef?: any): void;
    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any): void;
    /**
     * @inheritdoc
     */
    getTransactionLog(id?: any): T[];
    /**
     * @inheritdoc
     */
    getAggregatedChanges(mergeChanges: boolean): T[];
    /**
     * @inheritdoc
     */
    getState(id: any, pending?: boolean): S;
    /**
     * @inheritdoc
     */
    get enabled(): boolean;
    /**
     * @inheritdoc
     */
    getAggregatedValue(id: any, mergeChanges: boolean): any;
    /**
     * @inheritdoc
     */
    endPending(commit: boolean): void;
    /**
     * @inheritdoc
     */
    commit(data: any[], id?: any): void;
    /**
     * @inheritdoc
     */
    clear(id?: any): void;
    /**
     * @inheritdoc
     */
    undo(): void;
    /**
     * @inheritdoc
     */
    redo(): void;
    /**
     * Verifies if the passed transaction is correct. If not throws an exception.
     * @param transaction Transaction to be verified
     */
    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void;
    /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @param states States collection to apply the update to
     * @param transaction Transaction to apply to the current state
     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     */
    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void;
    /**
     * Compares the state with recordRef and clears all duplicated values. If any state ends as
     * empty object removes it from states.
     * @param state State to clean
     */
    protected cleanState(id: any, states: Map<any, S>): void;
    /**
     * Updates state related record in the provided data
     * @param data Data source to update
     * @param state State to update data from
     */
    protected updateRecord(data: any[], state: S): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTransactionService<any, any>>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxTransactionService<any, any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWd4LXRyYW5zYWN0aW9uLmQudHMiLCJzb3VyY2VzIjpbImlneC10cmFuc2FjdGlvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0RkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc2FjdGlvbiwgU3RhdGUgfSBmcm9tICcuL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IElneEJhc2VUcmFuc2FjdGlvblNlcnZpY2UgfSBmcm9tICcuL2Jhc2UtdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hUcmFuc2FjdGlvblNlcnZpY2U8VCBleHRlbmRzIFRyYW5zYWN0aW9uLCBTIGV4dGVuZHMgU3RhdGU+IGV4dGVuZHMgSWd4QmFzZVRyYW5zYWN0aW9uU2VydmljZTxULCBTPiB7XG4gICAgcHJvdGVjdGVkIF90cmFuc2FjdGlvbnM6IFRbXTtcbiAgICBwcm90ZWN0ZWQgX3JlZG9TdGFjazoge1xuICAgICAgICB0cmFuc2FjdGlvbjogVDtcbiAgICAgICAgcmVjb3JkUmVmOiBhbnk7XG4gICAgfVtdW107XG4gICAgcHJvdGVjdGVkIF91bmRvU3RhY2s6IHtcbiAgICAgICAgdHJhbnNhY3Rpb246IFQ7XG4gICAgICAgIHJlY29yZFJlZjogYW55O1xuICAgIH1bXVtdO1xuICAgIHByb3RlY3RlZCBfc3RhdGVzOiBNYXA8YW55LCBTPjtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIGdldCBjYW5VbmRvKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICBnZXQgY2FuUmVkbygpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgb25TdGF0ZVVwZGF0ZTogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgYWRkKHRyYW5zYWN0aW9uOiBULCByZWNvcmRSZWY/OiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBhZGRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbjogVCwgc3RhdGVzOiBNYXA8YW55LCBTPiwgcmVjb3JkUmVmPzogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIGdldFRyYW5zYWN0aW9uTG9nKGlkPzogYW55KTogVFtdO1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgZ2V0QWdncmVnYXRlZENoYW5nZXMobWVyZ2VDaGFuZ2VzOiBib29sZWFuKTogVFtdO1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgZ2V0U3RhdGUoaWQ6IGFueSwgcGVuZGluZz86IGJvb2xlYW4pOiBTO1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgZ2V0IGVuYWJsZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIGdldEFnZ3JlZ2F0ZWRWYWx1ZShpZDogYW55LCBtZXJnZUNoYW5nZXM6IGJvb2xlYW4pOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICBlbmRQZW5kaW5nKGNvbW1pdDogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICBjb21taXQoZGF0YTogYW55W10sIGlkPzogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIGNsZWFyKGlkPzogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIHVuZG8oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIHJlZG8oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyBpZiB0aGUgcGFzc2VkIHRyYW5zYWN0aW9uIGlzIGNvcnJlY3QuIElmIG5vdCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiBUcmFuc2FjdGlvbiB0byBiZSB2ZXJpZmllZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCB2ZXJpZnlBZGRlZFRyYW5zYWN0aW9uKHN0YXRlczogTWFwPGFueSwgUz4sIHRyYW5zYWN0aW9uOiBULCByZWNvcmRSZWY/OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHByb3ZpZGVkIHN0YXRlcyBjb2xsZWN0aW9uIGFjY29yZGluZyB0byBwYXNzZWQgdHJhbnNhY3Rpb24gYW5kIHJlY29yZFJlZlxuICAgICAqIEBwYXJhbSBzdGF0ZXMgU3RhdGVzIGNvbGxlY3Rpb24gdG8gYXBwbHkgdGhlIHVwZGF0ZSB0b1xuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiBUcmFuc2FjdGlvbiB0byBhcHBseSB0byB0aGUgY3VycmVudCBzdGF0ZVxuICAgICAqIEBwYXJhbSByZWNvcmRSZWYgUmVmZXJlbmNlIHRvIHRoZSB2YWx1ZSBvZiB0aGUgcmVjb3JkIGluIGRhdGEgc291cmNlLCBpZiBhbnksIHdoZXJlIHRyYW5zYWN0aW9uIHNob3VsZCBiZSBhcHBsaWVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHVwZGF0ZVN0YXRlKHN0YXRlczogTWFwPGFueSwgUz4sIHRyYW5zYWN0aW9uOiBULCByZWNvcmRSZWY/OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHRoZSBzdGF0ZSB3aXRoIHJlY29yZFJlZiBhbmQgY2xlYXJzIGFsbCBkdXBsaWNhdGVkIHZhbHVlcy4gSWYgYW55IHN0YXRlIGVuZHMgYXNcbiAgICAgKiBlbXB0eSBvYmplY3QgcmVtb3ZlcyBpdCBmcm9tIHN0YXRlcy5cbiAgICAgKiBAcGFyYW0gc3RhdGUgU3RhdGUgdG8gY2xlYW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY2xlYW5TdGF0ZShpZDogYW55LCBzdGF0ZXM6IE1hcDxhbnksIFM+KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHN0YXRlIHJlbGF0ZWQgcmVjb3JkIGluIHRoZSBwcm92aWRlZCBkYXRhXG4gICAgICogQHBhcmFtIGRhdGEgRGF0YSBzb3VyY2UgdG8gdXBkYXRlXG4gICAgICogQHBhcmFtIHN0YXRlIFN0YXRlIHRvIHVwZGF0ZSBkYXRhIGZyb21cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlUmVjb3JkKGRhdGE6IGFueVtdLCBzdGF0ZTogUyk6IHZvaWQ7XG59XG4iXX0=