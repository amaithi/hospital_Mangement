import { ChangeDetectorRef, EventEmitter, IterableDiffers, QueryList, DoCheck, AfterViewInit, OnDestroy, ElementRef } from '@angular/core';
import { IgxChipComponent, IChipSelectEventArgs, IChipKeyDownEventArgs, IChipEnterDragAreaEventArgs, IBaseChipEventArgs } from './chip.component';
import { IDropBaseEventArgs, IDragBaseEventArgs } from '../directives/drag-drop/drag-drop.directive';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export interface IBaseChipsAreaEventArgs {
    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;
    owner: IgxChipsAreaComponent;
}
export interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {
    chipsArray: IgxChipComponent[];
}
export interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {
    newSelection: IgxChipComponent[];
}
/**
 * The chip area allows you to perform more complex scenarios with chips that require interaction,
 * like dragging, selection, navigation, etc.
 *
 * @igxModule IgxChipsModule
 *
 * @igxTheme igx-chip-theme
 *
 * @igxKeywords chip area, chip
 *
 * @igxGroup display
 *
 * @example
 * ```html
 * <igx-chips-area>
 *    <igx-chip *ngFor="let chip of chipList" [id]="chip.id">
 *        <span>{{chip.text}}</span>
 *    </igx-chip>
 * </igx-chips-area>
 * ```
 */
export declare class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {
    cdr: ChangeDetectorRef;
    element: ElementRef;
    private _iterableDiffers;
    /**
     * @hidden
     * @internal
     */
    class: string;
    /**
     * @hidden
     * @internal
     */
    get hostClass(): string;
    /**
     * An @Input property that sets the width of the `IgxChipsAreaComponent`.
     * @example
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onReorder)="chipsOrderChanged($event)"></igx-chips-area>
     * ```
     */
    width: number;
    /**
     * An @Input property that sets the height of the `IgxChipsAreaComponent`.
     * @example
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onReorder)="chipsOrderChanged($event)"></igx-chips-area>
     * ```
     */
    height: number;
    /**
     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.
     * Returns an array of `IgxChipComponent`s.
     * @example
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onReorder)="changedOrder($event)"></igx-chips-area>
     * ```
     */
    onReorder: EventEmitter<IChipsAreaReorderEventArgs>;
    /**
     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.
     * Fired after the chips area is initialized if there are initially selected chips as well.
     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.
     * @example
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onSelection)="selection($event)"></igx-chips-area>
     * ```
     */
    onSelection: EventEmitter<IChipsAreaSelectEventArgs>;
    /**
     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.
     * @example
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onMoveStart)="moveStart($event)"></igx-chips-area>
     * ```
     */
    onMoveStart: EventEmitter<IBaseChipsAreaEventArgs>;
    /**
     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.
     * @example
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onMoveEnd)="moveEnd($event)"></igx-chips-area>
     * ```
     */
    onMoveEnd: EventEmitter<IBaseChipsAreaEventArgs>;
    /**
     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.
     * @example
     * ```typescript
     * ngAfterViewInit(){
     *    let chips = this.chipsArea.chipsList;
     * }
     * ```
     */
    chipsList: QueryList<IgxChipComponent>;
    private modifiedChipsArray;
    private _differ;
    protected destroy$: Subject<boolean>;
    constructor(cdr: ChangeDetectorRef, element: ElementRef, _iterableDiffers: IterableDiffers);
    /**
     * @hidden
     * @internal
     */
    ngAfterViewInit(): void;
    /**
     * @hidden
     * @internal
     */
    ngDoCheck(): void;
    /**
     * @hidden
     * @internal
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     * @internal
     */
    protected onChipKeyDown(event: IChipKeyDownEventArgs): void;
    /**
     * @hidden
     * @internal
     */
    protected onChipMoveStart(event: IBaseChipEventArgs): void;
    /**
     * @hidden
     * @internal
     */
    protected onChipMoveEnd(event: IBaseChipEventArgs): void;
    /**
     * @hidden
     * @internal
     */
    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs): void;
    /**
     * @hidden
     * @internal
     */
    protected positionChipAtIndex(chipIndex: any, targetIndex: any, shiftRestLeft: any, originalEvent: any): boolean;
    /**
     * @hidden
     * @internal
     */
    protected onChipSelectionChange(event: IChipSelectEventArgs): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxChipsAreaComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxChipsAreaComponent, "igx-chips-area", never, {
    "class": "class";
    "width": "width";
    "height": "height";
}, {
    "onReorder": "onReorder";
    "onSelection": "onSelection";
    "onMoveStart": "onMoveStart";
    "onMoveEnd": "onMoveEnd";
}, ["chipsList"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcHMtYXJlYS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2hpcHMtYXJlYS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJKQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIEl0ZXJhYmxlRGlmZmVycywgUXVlcnlMaXN0LCBEb0NoZWNrLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneENoaXBDb21wb25lbnQsIElDaGlwU2VsZWN0RXZlbnRBcmdzLCBJQ2hpcEtleURvd25FdmVudEFyZ3MsIElDaGlwRW50ZXJEcmFnQXJlYUV2ZW50QXJncywgSUJhc2VDaGlwRXZlbnRBcmdzIH0gZnJvbSAnLi9jaGlwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJRHJvcEJhc2VFdmVudEFyZ3MsIElEcmFnQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvZHJhZy1kcm9wL2RyYWctZHJvcC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGludGVyZmFjZSBJQmFzZUNoaXBzQXJlYUV2ZW50QXJncyB7XG4gICAgb3JpZ2luYWxFdmVudDogSURyYWdCYXNlRXZlbnRBcmdzIHwgSURyb3BCYXNlRXZlbnRBcmdzIHwgS2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50O1xuICAgIG93bmVyOiBJZ3hDaGlwc0FyZWFDb21wb25lbnQ7XG59XG5leHBvcnQgaW50ZXJmYWNlIElDaGlwc0FyZWFSZW9yZGVyRXZlbnRBcmdzIGV4dGVuZHMgSUJhc2VDaGlwc0FyZWFFdmVudEFyZ3Mge1xuICAgIGNoaXBzQXJyYXk6IElneENoaXBDb21wb25lbnRbXTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUNoaXBzQXJlYVNlbGVjdEV2ZW50QXJncyBleHRlbmRzIElCYXNlQ2hpcHNBcmVhRXZlbnRBcmdzIHtcbiAgICBuZXdTZWxlY3Rpb246IElneENoaXBDb21wb25lbnRbXTtcbn1cbi8qKlxuICogVGhlIGNoaXAgYXJlYSBhbGxvd3MgeW91IHRvIHBlcmZvcm0gbW9yZSBjb21wbGV4IHNjZW5hcmlvcyB3aXRoIGNoaXBzIHRoYXQgcmVxdWlyZSBpbnRlcmFjdGlvbixcbiAqIGxpa2UgZHJhZ2dpbmcsIHNlbGVjdGlvbiwgbmF2aWdhdGlvbiwgZXRjLlxuICpcbiAqIEBpZ3hNb2R1bGUgSWd4Q2hpcHNNb2R1bGVcbiAqXG4gKiBAaWd4VGhlbWUgaWd4LWNoaXAtdGhlbWVcbiAqXG4gKiBAaWd4S2V5d29yZHMgY2hpcCBhcmVhLCBjaGlwXG4gKlxuICogQGlneEdyb3VwIGRpc3BsYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGlneC1jaGlwcy1hcmVhPlxuICogICAgPGlneC1jaGlwICpuZ0Zvcj1cImxldCBjaGlwIG9mIGNoaXBMaXN0XCIgW2lkXT1cImNoaXAuaWRcIj5cbiAqICAgICAgICA8c3Bhbj57e2NoaXAudGV4dH19PC9zcGFuPlxuICogICAgPC9pZ3gtY2hpcD5cbiAqIDwvaWd4LWNoaXBzLWFyZWE+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4Q2hpcHNBcmVhQ29tcG9uZW50IGltcGxlbWVudHMgRG9DaGVjaywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBjZHI6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBfaXRlcmFibGVEaWZmZXJzO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgaG9zdENsYXNzKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB3aWR0aCBvZiB0aGUgYElneENoaXBzQXJlYUNvbXBvbmVudGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jaGlwcy1hcmVhICNjaGlwc0FyZWEgW3dpZHRoXT1cIiczMDAnXCIgW2hlaWdodF09XCInMTAnXCIgKG9uUmVvcmRlcik9XCJjaGlwc09yZGVyQ2hhbmdlZCgkZXZlbnQpXCI+PC9pZ3gtY2hpcHMtYXJlYT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIGhlaWdodCBvZiB0aGUgYElneENoaXBzQXJlYUNvbXBvbmVudGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jaGlwcy1hcmVhICNjaGlwc0FyZWEgW3dpZHRoXT1cIiczMDAnXCIgW2hlaWdodF09XCInMTAnXCIgKG9uUmVvcmRlcik9XCJjaGlwc09yZGVyQ2hhbmdlZCgkZXZlbnQpXCI+PC9pZ3gtY2hpcHMtYXJlYT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBldmVudCB3aGVuIGBJZ3hDaGlwQ29tcG9uZW50YHMgaW4gdGhlIGBJZ3hDaGlwc0FyZWFDb21wb25lbnRgIHNob3VsZCBiZSByZW9yZGVyZWQuXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBgSWd4Q2hpcENvbXBvbmVudGBzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2hpcHMtYXJlYSAjY2hpcHNBcmVhIFt3aWR0aF09XCInMzAwJ1wiIFtoZWlnaHRdPVwiJzEwJ1wiIChvblJlb3JkZXIpPVwiY2hhbmdlZE9yZGVyKCRldmVudClcIj48L2lneC1jaGlwcy1hcmVhPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uUmVvcmRlcjogRXZlbnRFbWl0dGVyPElDaGlwc0FyZWFSZW9yZGVyRXZlbnRBcmdzPjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBldmVudCB3aGVuIGFuIGBJZ3hDaGlwQ29tcG9uZW50YCBpbiB0aGUgYElneENoaXBzQXJlYUNvbXBvbmVudGAgaXMgc2VsZWN0ZWQvZGVzZWxlY3RlZC5cbiAgICAgKiBGaXJlZCBhZnRlciB0aGUgY2hpcHMgYXJlYSBpcyBpbml0aWFsaXplZCBpZiB0aGVyZSBhcmUgaW5pdGlhbGx5IHNlbGVjdGVkIGNoaXBzIGFzIHdlbGwuXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBzZWxlY3RlZCBgSWd4Q2hpcENvbXBvbmVudGBzIGFuZCB0aGUgYElneENoaXBBcmVhQ29tcG9uZW50YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNoaXBzLWFyZWEgI2NoaXBzQXJlYSBbd2lkdGhdPVwiJzMwMCdcIiBbaGVpZ2h0XT1cIicxMCdcIiAob25TZWxlY3Rpb24pPVwic2VsZWN0aW9uKCRldmVudClcIj48L2lneC1jaGlwcy1hcmVhPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uU2VsZWN0aW9uOiBFdmVudEVtaXR0ZXI8SUNoaXBzQXJlYVNlbGVjdEV2ZW50QXJncz47XG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gZXZlbnQgd2hlbiBhbiBgSWd4Q2hpcENvbXBvbmVudGAgaW4gdGhlIGBJZ3hDaGlwc0FyZWFDb21wb25lbnRgIGlzIG1vdmVkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2hpcHMtYXJlYSAjY2hpcHNBcmVhIFt3aWR0aF09XCInMzAwJ1wiIFtoZWlnaHRdPVwiJzEwJ1wiIChvbk1vdmVTdGFydCk9XCJtb3ZlU3RhcnQoJGV2ZW50KVwiPjwvaWd4LWNoaXBzLWFyZWE+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgb25Nb3ZlU3RhcnQ6IEV2ZW50RW1pdHRlcjxJQmFzZUNoaXBzQXJlYUV2ZW50QXJncz47XG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gZXZlbnQgYWZ0ZXIgYW4gYElneENoaXBDb21wb25lbnRgIGluIHRoZSBgSWd4Q2hpcHNBcmVhQ29tcG9uZW50YCBpcyBtb3ZlZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNoaXBzLWFyZWEgI2NoaXBzQXJlYSBbd2lkdGhdPVwiJzMwMCdcIiBbaGVpZ2h0XT1cIicxMCdcIiAob25Nb3ZlRW5kKT1cIm1vdmVFbmQoJGV2ZW50KVwiPjwvaWd4LWNoaXBzLWFyZWE+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgb25Nb3ZlRW5kOiBFdmVudEVtaXR0ZXI8SUJhc2VDaGlwc0FyZWFFdmVudEFyZ3M+O1xuICAgIC8qKlxuICAgICAqIEhvbGRzIHRoZSBgSWd4Q2hpcENvbXBvbmVudGAgaW4gdGhlIGBJZ3hDaGlwc0FyZWFDb21wb25lbnRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIG5nQWZ0ZXJWaWV3SW5pdCgpe1xuICAgICAqICAgIGxldCBjaGlwcyA9IHRoaXMuY2hpcHNBcmVhLmNoaXBzTGlzdDtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY2hpcHNMaXN0OiBRdWVyeUxpc3Q8SWd4Q2hpcENvbXBvbmVudD47XG4gICAgcHJpdmF0ZSBtb2RpZmllZENoaXBzQXJyYXk7XG4gICAgcHJpdmF0ZSBfZGlmZmVyO1xuICAgIHByb3RlY3RlZCBkZXN0cm95JDogU3ViamVjdDxib29sZWFuPjtcbiAgICBjb25zdHJ1Y3RvcihjZHI6IENoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50OiBFbGVtZW50UmVmLCBfaXRlcmFibGVEaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBvbkNoaXBLZXlEb3duKGV2ZW50OiBJQ2hpcEtleURvd25FdmVudEFyZ3MpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25DaGlwTW92ZVN0YXJ0KGV2ZW50OiBJQmFzZUNoaXBFdmVudEFyZ3MpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25DaGlwTW92ZUVuZChldmVudDogSUJhc2VDaGlwRXZlbnRBcmdzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG9uQ2hpcERyYWdFbnRlcihldmVudDogSUNoaXBFbnRlckRyYWdBcmVhRXZlbnRBcmdzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHBvc2l0aW9uQ2hpcEF0SW5kZXgoY2hpcEluZGV4OiBhbnksIHRhcmdldEluZGV4OiBhbnksIHNoaWZ0UmVzdExlZnQ6IGFueSwgb3JpZ2luYWxFdmVudDogYW55KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG9uQ2hpcFNlbGVjdGlvbkNoYW5nZShldmVudDogSUNoaXBTZWxlY3RFdmVudEFyZ3MpOiB2b2lkO1xufVxuIl19