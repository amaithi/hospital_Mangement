import { ChangeDetectorRef, DoCheck, ElementRef, NgZone, OnInit, OnDestroy } from '@angular/core';
import { SortingDirection } from '../../data-operations/sorting-expression.interface';
import { GridBaseAPIService } from '../api.service';
import { IgxColumnComponent } from '../columns/column.component';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { IgxColumnResizingService } from '../resizing/resizing.service';
import { GridType } from '../common/grid.interface';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {
    gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>;
    colResizingService: IgxColumnResizingService;
    cdr: ChangeDetectorRef;
    elementRef: ElementRef;
    zone: NgZone;
    private _destroy$;
    column: IgxColumnComponent;
    gridID: string;
    /**
     * Returns the `aria-selected` of the header.
     */
    get ariaSelected(): boolean;
    get styleClasses(): string;
    get height(): number;
    get ascending(): boolean;
    get descending(): boolean;
    get sortingIcon(): string;
    get sorted(): boolean;
    get filterIconClassName(): "igx-excel-filter__icon--filtered" | "igx-excel-filter__icon";
    get selectable(): boolean;
    get selected(): boolean;
    get columnTitle(): any;
    hostRole: string;
    get headerID(): string;
    protected sortDirection: SortingDirection;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, colResizingService: IgxColumnResizingService, cdr: ChangeDetectorRef, elementRef: ElementRef, zone: NgZone);
    ngOnInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    onClick(event: any): void;
    onFilteringIconClick(event: any): void;
    get grid(): any;
    protected getSortDirection(): void;
    onSortingIconClick(event: any): void;
    private triggerSort;
    /**
     * @hidden
     */
    onPinterEnter(): void;
    /**
     * @hidden
     */
    onPointerLeave(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridHeaderComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxGridHeaderComponent, "igx-grid-header", never, {
    "column": "column";
    "gridID": "gridID";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1oZWFkZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImdyaWQtaGVhZGVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNENBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIE5nWm9uZSwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNvcnRpbmdEaXJlY3Rpb24gfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvc29ydGluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBHcmlkQmFzZUFQSVNlcnZpY2UgfSBmcm9tICcuLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4R3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuLi9ncmlkLWJhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneENvbHVtblJlc2l6aW5nU2VydmljZSB9IGZyb20gJy4uL3Jlc2l6aW5nL3Jlc2l6aW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEdyaWRIZWFkZXJDb21wb25lbnQgaW1wbGVtZW50cyBEb0NoZWNrLCBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+O1xuICAgIGNvbFJlc2l6aW5nU2VydmljZTogSWd4Q29sdW1uUmVzaXppbmdTZXJ2aWNlO1xuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICB6b25lOiBOZ1pvbmU7XG4gICAgcHJpdmF0ZSBfZGVzdHJveSQ7XG4gICAgY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQ7XG4gICAgZ3JpZElEOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYGFyaWEtc2VsZWN0ZWRgIG9mIHRoZSBoZWFkZXIuXG4gICAgICovXG4gICAgZ2V0IGFyaWFTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIGdldCBzdHlsZUNsYXNzZXMoKTogc3RyaW5nO1xuICAgIGdldCBoZWlnaHQoKTogbnVtYmVyO1xuICAgIGdldCBhc2NlbmRpbmcoKTogYm9vbGVhbjtcbiAgICBnZXQgZGVzY2VuZGluZygpOiBib29sZWFuO1xuICAgIGdldCBzb3J0aW5nSWNvbigpOiBzdHJpbmc7XG4gICAgZ2V0IHNvcnRlZCgpOiBib29sZWFuO1xuICAgIGdldCBmaWx0ZXJJY29uQ2xhc3NOYW1lKCk6IFwiaWd4LWV4Y2VsLWZpbHRlcl9faWNvbi0tZmlsdGVyZWRcIiB8IFwiaWd4LWV4Y2VsLWZpbHRlcl9faWNvblwiO1xuICAgIGdldCBzZWxlY3RhYmxlKCk6IGJvb2xlYW47XG4gICAgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW47XG4gICAgZ2V0IGNvbHVtblRpdGxlKCk6IGFueTtcbiAgICBob3N0Um9sZTogc3RyaW5nO1xuICAgIGdldCBoZWFkZXJJRCgpOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHNvcnREaXJlY3Rpb246IFNvcnRpbmdEaXJlY3Rpb247XG4gICAgY29uc3RydWN0b3IoZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+LCBjb2xSZXNpemluZ1NlcnZpY2U6IElneENvbHVtblJlc2l6aW5nU2VydmljZSwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgem9uZTogTmdab25lKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBvbkZpbHRlcmluZ0ljb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBnZXQgZ3JpZCgpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGdldFNvcnREaXJlY3Rpb24oKTogdm9pZDtcbiAgICBvblNvcnRpbmdJY29uQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB0cmlnZ2VyU29ydDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25QaW50ZXJFbnRlcigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvblBvaW50ZXJMZWF2ZSgpOiB2b2lkO1xufVxuIl19