import { IgxForOfDirective } from '../directives/for-of/for_of.directive';
import { GridType } from './common/grid.interface';
import { IgxGridBaseDirective } from './grid-base.directive';
import { IMultiRowLayoutNode } from './selection/selection.service';
import { GridKeydownTargetType } from './common/enums';
import * as ɵngcc0 from '@angular/core';
export interface ColumnGroupsCache {
    level: number;
    visibleIndex: number;
}
export interface IActiveNode {
    gridID?: string;
    row: number;
    column?: number;
    level?: number;
    mchCache?: ColumnGroupsCache;
    layout?: IMultiRowLayoutNode;
}
/** @hidden */
export declare class IgxGridNavigationService {
    grid: IgxGridBaseDirective & GridType;
    activeNode: IActiveNode;
    protected pendingNavigation: boolean;
    handleNavigation(event: KeyboardEvent): void;
    dispatchEvent(event: KeyboardEvent): void;
    protected getNextPosition(rowIndex: number, colIndex: number, key: string, shift: boolean, ctrl: boolean, event: KeyboardEvent): {
        rowIndex: number;
        colIndex: number;
    };
    summaryNav(event: KeyboardEvent): void;
    headerNavigation(event: KeyboardEvent): void;
    protected horizontalNav(event: KeyboardEvent, key: string, rowIndex: number): void;
    focusTbody(event: any): void;
    focusFirstCell(header?: boolean): void;
    get lastColumnIndex(): number;
    get displayContainerWidth(): number;
    get displayContainerScrollLeft(): number;
    get containerTopOffset(): number;
    isColumnFullyVisible(columnIndex: number): boolean;
    protected getColumnUnpinnedIndex(visibleColumnIndex: number): any;
    protected forOfDir(): IgxForOfDirective<any>;
    protected handleAlt(key: string, event: KeyboardEvent): void;
    protected handleEditing(shift: boolean, event: KeyboardEvent): void;
    shouldPerformHorizontalScroll(visibleColIndex: number, rowIndex?: number): boolean;
    shouldPerformVerticalScroll(targetRowIndex: number, visibleColIndex: number): boolean;
    protected navigateInBody(rowIndex: any, visibleColIndex: any, cb?: Function): void;
    performVerticalScrollToCell(rowIndex: number, visibleColIndex?: number, cb?: () => void): void;
    performHorizontalScrollToCell(visibleColumnIndex: number, cb?: () => void): void;
    isDataRow(rowIndex: number, includeSummary?: boolean): boolean;
    protected emitKeyDown(type: GridKeydownTargetType, rowIndex: any, event: any): true;
    protected isColumnPinned(columnIndex: number, forOfDir: IgxForOfDirective<any>): boolean;
    protected findFirstDataRowIndex(): number;
    protected findLastDataRowIndex(): number;
    protected getRowElementByIndex(index: any): any;
    protected isValidPosition(rowIndex: number, colIndex: number): boolean;
    protected performHeaderKeyCombination(column: any, key: any, shift: any, ctrl: any, alt: any, event: any): void;
    private handleMCHeaderNav;
    private handleMCHExpandCollapse;
    private handleColumnSelection;
    private getNextColumnMCH;
    private get currentActiveColumn();
    private isActiveNode;
    private isToggleKey;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridNavigationService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxGridNavigationService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeURBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWd4Rm9yT2ZEaXJlY3RpdmUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL2Zvci1vZi9mb3Jfb2YuZGlyZWN0aXZlJztcbmltcG9ydCB7IEdyaWRUeXBlIH0gZnJvbSAnLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSWd4R3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2dyaWQtYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSU11bHRpUm93TGF5b3V0Tm9kZSB9IGZyb20gJy4vc2VsZWN0aW9uL3NlbGVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEdyaWRLZXlkb3duVGFyZ2V0VHlwZSB9IGZyb20gJy4vY29tbW9uL2VudW1zJztcbmV4cG9ydCBpbnRlcmZhY2UgQ29sdW1uR3JvdXBzQ2FjaGUge1xuICAgIGxldmVsOiBudW1iZXI7XG4gICAgdmlzaWJsZUluZGV4OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIElBY3RpdmVOb2RlIHtcbiAgICBncmlkSUQ/OiBzdHJpbmc7XG4gICAgcm93OiBudW1iZXI7XG4gICAgY29sdW1uPzogbnVtYmVyO1xuICAgIGxldmVsPzogbnVtYmVyO1xuICAgIG1jaENhY2hlPzogQ29sdW1uR3JvdXBzQ2FjaGU7XG4gICAgbGF5b3V0PzogSU11bHRpUm93TGF5b3V0Tm9kZTtcbn1cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hHcmlkTmF2aWdhdGlvblNlcnZpY2Uge1xuICAgIGdyaWQ6IElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU7XG4gICAgYWN0aXZlTm9kZTogSUFjdGl2ZU5vZGU7XG4gICAgcHJvdGVjdGVkIHBlbmRpbmdOYXZpZ2F0aW9uOiBib29sZWFuO1xuICAgIGhhbmRsZU5hdmlnYXRpb24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGRpc3BhdGNoRXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBnZXROZXh0UG9zaXRpb24ocm93SW5kZXg6IG51bWJlciwgY29sSW5kZXg6IG51bWJlciwga2V5OiBzdHJpbmcsIHNoaWZ0OiBib29sZWFuLCBjdHJsOiBib29sZWFuLCBldmVudDogS2V5Ym9hcmRFdmVudCk6IHtcbiAgICAgICAgcm93SW5kZXg6IG51bWJlcjtcbiAgICAgICAgY29sSW5kZXg6IG51bWJlcjtcbiAgICB9O1xuICAgIHN1bW1hcnlOYXYoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGhlYWRlck5hdmlnYXRpb24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBob3Jpem9udGFsTmF2KGV2ZW50OiBLZXlib2FyZEV2ZW50LCBrZXk6IHN0cmluZywgcm93SW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgZm9jdXNUYm9keShldmVudDogYW55KTogdm9pZDtcbiAgICBmb2N1c0ZpcnN0Q2VsbChoZWFkZXI/OiBib29sZWFuKTogdm9pZDtcbiAgICBnZXQgbGFzdENvbHVtbkluZGV4KCk6IG51bWJlcjtcbiAgICBnZXQgZGlzcGxheUNvbnRhaW5lcldpZHRoKCk6IG51bWJlcjtcbiAgICBnZXQgZGlzcGxheUNvbnRhaW5lclNjcm9sbExlZnQoKTogbnVtYmVyO1xuICAgIGdldCBjb250YWluZXJUb3BPZmZzZXQoKTogbnVtYmVyO1xuICAgIGlzQ29sdW1uRnVsbHlWaXNpYmxlKGNvbHVtbkluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBnZXRDb2x1bW5VbnBpbm5lZEluZGV4KHZpc2libGVDb2x1bW5JbmRleDogbnVtYmVyKTogYW55O1xuICAgIHByb3RlY3RlZCBmb3JPZkRpcigpOiBJZ3hGb3JPZkRpcmVjdGl2ZTxhbnk+O1xuICAgIHByb3RlY3RlZCBoYW5kbGVBbHQoa2V5OiBzdHJpbmcsIGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgaGFuZGxlRWRpdGluZyhzaGlmdDogYm9vbGVhbiwgZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHNob3VsZFBlcmZvcm1Ib3Jpem9udGFsU2Nyb2xsKHZpc2libGVDb2xJbmRleDogbnVtYmVyLCByb3dJbmRleD86IG51bWJlcik6IGJvb2xlYW47XG4gICAgc2hvdWxkUGVyZm9ybVZlcnRpY2FsU2Nyb2xsKHRhcmdldFJvd0luZGV4OiBudW1iZXIsIHZpc2libGVDb2xJbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgbmF2aWdhdGVJbkJvZHkocm93SW5kZXg6IGFueSwgdmlzaWJsZUNvbEluZGV4OiBhbnksIGNiPzogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHBlcmZvcm1WZXJ0aWNhbFNjcm9sbFRvQ2VsbChyb3dJbmRleDogbnVtYmVyLCB2aXNpYmxlQ29sSW5kZXg/OiBudW1iZXIsIGNiPzogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcGVyZm9ybUhvcml6b250YWxTY3JvbGxUb0NlbGwodmlzaWJsZUNvbHVtbkluZGV4OiBudW1iZXIsIGNiPzogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgaXNEYXRhUm93KHJvd0luZGV4OiBudW1iZXIsIGluY2x1ZGVTdW1tYXJ5PzogYm9vbGVhbik6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGVtaXRLZXlEb3duKHR5cGU6IEdyaWRLZXlkb3duVGFyZ2V0VHlwZSwgcm93SW5kZXg6IGFueSwgZXZlbnQ6IGFueSk6IHRydWU7XG4gICAgcHJvdGVjdGVkIGlzQ29sdW1uUGlubmVkKGNvbHVtbkluZGV4OiBudW1iZXIsIGZvck9mRGlyOiBJZ3hGb3JPZkRpcmVjdGl2ZTxhbnk+KTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgZmluZEZpcnN0RGF0YVJvd0luZGV4KCk6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgZmluZExhc3REYXRhUm93SW5kZXgoKTogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBnZXRSb3dFbGVtZW50QnlJbmRleChpbmRleDogYW55KTogYW55O1xuICAgIHByb3RlY3RlZCBpc1ZhbGlkUG9zaXRpb24ocm93SW5kZXg6IG51bWJlciwgY29sSW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIHBlcmZvcm1IZWFkZXJLZXlDb21iaW5hdGlvbihjb2x1bW46IGFueSwga2V5OiBhbnksIHNoaWZ0OiBhbnksIGN0cmw6IGFueSwgYWx0OiBhbnksIGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgaGFuZGxlTUNIZWFkZXJOYXY7XG4gICAgcHJpdmF0ZSBoYW5kbGVNQ0hFeHBhbmRDb2xsYXBzZTtcbiAgICBwcml2YXRlIGhhbmRsZUNvbHVtblNlbGVjdGlvbjtcbiAgICBwcml2YXRlIGdldE5leHRDb2x1bW5NQ0g7XG4gICAgcHJpdmF0ZSBnZXQgY3VycmVudEFjdGl2ZUNvbHVtbigpO1xuICAgIHByaXZhdGUgaXNBY3RpdmVOb2RlO1xuICAgIHByaXZhdGUgaXNUb2dnbGVLZXk7XG59XG4iXX0=