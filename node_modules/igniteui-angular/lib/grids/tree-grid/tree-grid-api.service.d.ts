import { GridBaseAPIService } from '../api.service';
import { IgxTreeGridComponent } from './tree-grid.component';
import { ITreeGridRecord } from './tree-grid.interfaces';
import { ColumnType } from '../common/column.interface';
import * as ɵngcc0 from '@angular/core';
export declare class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {
    get_all_data(transactions?: boolean): any[];
    get_summary_data(): any[];
    allow_expansion_state_change(rowID: any, expanded: any): boolean;
    expand_path_to_record(record: ITreeGridRecord): void;
    get_row_expansion_state(record: ITreeGridRecord): boolean;
    protected update_row_in_array(value: any, rowID: any, index: number): void;
    should_apply_number_style(column: ColumnType): boolean;
    deleteRowById(rowID: any): void;
    deleteRowFromData(rowID: any, index: number): void;
    /**
     * Updates related row of provided grid's data source with provided new row value
     * @param grid Grid to update data for
     * @param rowID ID of the row to update
     * @param rowValueInDataSource Initial value of the row as it is in data source
     * @param rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param rowNewValue New value of the row
     */
    protected updateData(grid: IgxTreeGridComponent, rowID: any, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {
        [x: string]: any;
    }): void;
    get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]): void;
    row_deleted_transaction(rowID: any): boolean;
    get_rec_by_id(rowID: any): ITreeGridRecord;
    private row_deleted_parent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTreeGridAPIService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxTreeGridAPIService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLWFwaS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInRyZWUtZ3JpZC1hcGkuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmlkQmFzZUFQSVNlcnZpY2UgfSBmcm9tICcuLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hUcmVlR3JpZENvbXBvbmVudCB9IGZyb20gJy4vdHJlZS1ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJVHJlZUdyaWRSZWNvcmQgfSBmcm9tICcuL3RyZWUtZ3JpZC5pbnRlcmZhY2VzJztcbmltcG9ydCB7IENvbHVtblR5cGUgfSBmcm9tICcuLi9jb21tb24vY29sdW1uLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hUcmVlR3JpZEFQSVNlcnZpY2UgZXh0ZW5kcyBHcmlkQmFzZUFQSVNlcnZpY2U8SWd4VHJlZUdyaWRDb21wb25lbnQ+IHtcbiAgICBnZXRfYWxsX2RhdGEodHJhbnNhY3Rpb25zPzogYm9vbGVhbik6IGFueVtdO1xuICAgIGdldF9zdW1tYXJ5X2RhdGEoKTogYW55W107XG4gICAgYWxsb3dfZXhwYW5zaW9uX3N0YXRlX2NoYW5nZShyb3dJRDogYW55LCBleHBhbmRlZDogYW55KTogYm9vbGVhbjtcbiAgICBleHBhbmRfcGF0aF90b19yZWNvcmQocmVjb3JkOiBJVHJlZUdyaWRSZWNvcmQpOiB2b2lkO1xuICAgIGdldF9yb3dfZXhwYW5zaW9uX3N0YXRlKHJlY29yZDogSVRyZWVHcmlkUmVjb3JkKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlX3Jvd19pbl9hcnJheSh2YWx1ZTogYW55LCByb3dJRDogYW55LCBpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBzaG91bGRfYXBwbHlfbnVtYmVyX3N0eWxlKGNvbHVtbjogQ29sdW1uVHlwZSk6IGJvb2xlYW47XG4gICAgZGVsZXRlUm93QnlJZChyb3dJRDogYW55KTogdm9pZDtcbiAgICBkZWxldGVSb3dGcm9tRGF0YShyb3dJRDogYW55LCBpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHJlbGF0ZWQgcm93IG9mIHByb3ZpZGVkIGdyaWQncyBkYXRhIHNvdXJjZSB3aXRoIHByb3ZpZGVkIG5ldyByb3cgdmFsdWVcbiAgICAgKiBAcGFyYW0gZ3JpZCBHcmlkIHRvIHVwZGF0ZSBkYXRhIGZvclxuICAgICAqIEBwYXJhbSByb3dJRCBJRCBvZiB0aGUgcm93IHRvIHVwZGF0ZVxuICAgICAqIEBwYXJhbSByb3dWYWx1ZUluRGF0YVNvdXJjZSBJbml0aWFsIHZhbHVlIG9mIHRoZSByb3cgYXMgaXQgaXMgaW4gZGF0YSBzb3VyY2VcbiAgICAgKiBAcGFyYW0gcm93Q3VycmVudFZhbHVlIEN1cnJlbnQgdmFsdWUgb2YgdGhlIHJvdyBhcyBpdCBpcyB3aXRoIGFwcGxpZWQgcHJldmlvdXMgdHJhbnNhY3Rpb25zXG4gICAgICogQHBhcmFtIHJvd05ld1ZhbHVlIE5ldyB2YWx1ZSBvZiB0aGUgcm93XG4gICAgICovXG4gICAgcHJvdGVjdGVkIHVwZGF0ZURhdGEoZ3JpZDogSWd4VHJlZUdyaWRDb21wb25lbnQsIHJvd0lEOiBhbnksIHJvd1ZhbHVlSW5EYXRhU291cmNlOiBhbnksIHJvd0N1cnJlbnRWYWx1ZTogYW55LCByb3dOZXdWYWx1ZToge1xuICAgICAgICBbeDogc3RyaW5nXTogYW55O1xuICAgIH0pOiB2b2lkO1xuICAgIGdldF9zZWxlY3RlZF9jaGlsZHJlbihyZWNvcmQ6IElUcmVlR3JpZFJlY29yZCwgc2VsZWN0ZWRSb3dJRHM6IGFueVtdKTogdm9pZDtcbiAgICByb3dfZGVsZXRlZF90cmFuc2FjdGlvbihyb3dJRDogYW55KTogYm9vbGVhbjtcbiAgICBnZXRfcmVjX2J5X2lkKHJvd0lEOiBhbnkpOiBJVHJlZUdyaWRSZWNvcmQ7XG4gICAgcHJpdmF0ZSByb3dfZGVsZXRlZF9wYXJlbnQ7XG59XG4iXX0=