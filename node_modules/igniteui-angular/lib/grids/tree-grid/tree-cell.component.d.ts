import { ChangeDetectorRef, ElementRef, NgZone } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { PlatformUtil } from '../../core/utils';
import { IgxGridBaseDirective } from '../grid/public_api';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { HammerGesturesManager } from '../../core/touch';
import { GridType } from '../common/grid.interface';
import { IgxGridExpandableCellComponent } from '../grid/expandable-cell.component';
import * as ɵngcc0 from '@angular/core';
export declare class IgxTreeGridCellComponent extends IgxGridExpandableCellComponent {
    protected zone: NgZone;
    document: any;
    protected platformUtil: PlatformUtil;
    private treeGridAPI;
    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, cdr: ChangeDetectorRef, element: ElementRef, zone: NgZone, touchManager: HammerGesturesManager, document: any, platformUtil: PlatformUtil);
    /**
     * @hidden
     */
    level: number;
    /**
     * @hidden
     */
    showIndicator: boolean;
    /**
     * @hidden
     */
    isLoading: boolean;
    /**
     * @hidden
     */
    toggle(event: Event): void;
    /**
     * @hidden
     */
    onLoadingDblClick(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTreeGridCellComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxTreeGridCellComponent, "igx-tree-grid-cell", never, {
    "level": "level";
    "showIndicator": "showIndicator";
    "isLoading": "isLoading";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1jZWxsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0cmVlLWNlbGwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyaWRCYXNlQVBJU2VydmljZSB9IGZyb20gJy4uL2FwaS5zZXJ2aWNlJztcbmltcG9ydCB7IFBsYXRmb3JtVXRpbCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMnO1xuaW1wb3J0IHsgSWd4R3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuLi9ncmlkL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgSWd4R3JpZFNlbGVjdGlvblNlcnZpY2UsIElneEdyaWRDUlVEU2VydmljZSB9IGZyb20gJy4uL3NlbGVjdGlvbi9zZWxlY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBIYW1tZXJHZXN0dXJlc01hbmFnZXIgfSBmcm9tICcuLi8uLi9jb3JlL3RvdWNoJztcbmltcG9ydCB7IEdyaWRUeXBlIH0gZnJvbSAnLi4vY29tbW9uL2dyaWQuaW50ZXJmYWNlJztcbmltcG9ydCB7IElneEdyaWRFeHBhbmRhYmxlQ2VsbENvbXBvbmVudCB9IGZyb20gJy4uL2dyaWQvZXhwYW5kYWJsZS1jZWxsLmNvbXBvbmVudCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hUcmVlR3JpZENlbGxDb21wb25lbnQgZXh0ZW5kcyBJZ3hHcmlkRXhwYW5kYWJsZUNlbGxDb21wb25lbnQge1xuICAgIHByb3RlY3RlZCB6b25lOiBOZ1pvbmU7XG4gICAgZG9jdW1lbnQ6IGFueTtcbiAgICBwcm90ZWN0ZWQgcGxhdGZvcm1VdGlsOiBQbGF0Zm9ybVV0aWw7XG4gICAgcHJpdmF0ZSB0cmVlR3JpZEFQSTtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rpb25TZXJ2aWNlOiBJZ3hHcmlkU2VsZWN0aW9uU2VydmljZSwgY3J1ZFNlcnZpY2U6IElneEdyaWRDUlVEU2VydmljZSwgZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+LCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50OiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUsIHRvdWNoTWFuYWdlcjogSGFtbWVyR2VzdHVyZXNNYW5hZ2VyLCBkb2N1bWVudDogYW55LCBwbGF0Zm9ybVV0aWw6IFBsYXRmb3JtVXRpbCk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGxldmVsOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNob3dJbmRpY2F0b3I6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdG9nZ2xlKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uTG9hZGluZ0RibENsaWNrKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG59XG4iXX0=