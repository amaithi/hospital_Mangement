import { Subject } from 'rxjs';
import { ISortingExpression } from '../data-operations/sorting-expression.interface';
import { IgxGridCellComponent } from './cell.component';
import { IgxGridBaseDirective } from './grid-base.directive';
import { IgxRowDirective } from './row.directive';
import { IFilteringOperation } from '../data-operations/filtering-condition';
import { IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { IgxCell, IgxRow } from './selection/selection.service';
import { GridType } from './common/grid.interface';
import { ColumnType } from './common/column.interface';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class GridBaseAPIService<T extends IgxGridBaseDirective & GridType> {
    grid: T;
    protected destroyMap: Map<string, Subject<boolean>>;
    get_column_by_name(name: string): ColumnType;
    get_summary_data(): any[];
    /**
     * @hidden
     * @internal
     */
    getRowData(rowID: any): any;
    escape_editMode(): void;
    get_cell_inEditMode(): IgxCell;
    get_row_index_in_data(rowID: any): number;
    get_row_by_key(rowSelector: any): IgxRowDirective<IgxGridBaseDirective & GridType>;
    get_row_by_index(rowIndex: number): IgxRowDirective<IgxGridBaseDirective & GridType>;
    get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent;
    get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent;
    get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent;
    submit_value(): void;
    update_cell(cell: IgxCell, value: any): import("./common/events").IGridEditEventArgs;
    /**
     * Updates related row of provided grid's data source with provided new row value
     * @param grid Grid to update data for
     * @param rowID ID of the row to update
     * @param rowValueInDataSource Initial value of the row as it is in data source
     * @param rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param rowNewValue New value of the row
     */
    protected updateData(grid: any, rowID: any, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {
        [x: string]: any;
    }): void;
    _update_row(row: IgxRow, value?: any): void;
    update_row(row: IgxRow, value: any): import("./common/events").IGridEditEventArgs;
    protected update_row_in_array(value: any, rowID: any, index: number): void;
    sort(expression: ISortingExpression): void;
    sort_multiple(expressions: ISortingExpression[]): void;
    filter(fieldName: string, term: any, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean): void;
    filter_global(term: any, condition: any, ignoreCase: any): void;
    clear_filter(fieldName: string): void;
    clear_sort(fieldName: string): void;
    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal: any, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex?: number): void;
    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression): void;
    protected remove_grouping_expression(fieldName: any): void;
    clear_groupby(name?: string | Array<string>): void;
    should_apply_number_style(column: ColumnType): boolean;
    get_data(): any[];
    get_all_data(includeTransactions?: boolean): any[];
    get_filtered_data(): any[];
    protected getSortStrategyPerColumn(fieldName: string): import("../data-operations/sorting-strategy").ISortingStrategy;
    addRowToData(rowData: any): void;
    deleteRowFromData(rowID: any, index: number): void;
    deleteRowById(rowId: any): void;
    get_row_id(rowData: any): any;
    row_deleted_transaction(rowID: any): boolean;
    atInexistingPage(): boolean;
    get_row_expansion_state(record: any): boolean;
    set_row_expansion_state(rowID: any, expanded: boolean, event?: Event): void;
    get_rec_by_id(rowID: any): any;
    allow_expansion_state_change(rowID: any, expanded: any): boolean;
    private isToggleKey;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridBaseAPIService<any>>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GridBaseAPIService<any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYXBpLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFhQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJU29ydGluZ0V4cHJlc3Npb24gfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvc29ydGluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vY2VsbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4R3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2dyaWQtYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4Um93RGlyZWN0aXZlIH0gZnJvbSAnLi9yb3cuZGlyZWN0aXZlJztcbmltcG9ydCB7IElGaWx0ZXJpbmdPcGVyYXRpb24gfSBmcm9tICcuLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWNvbmRpdGlvbic7XG5pbXBvcnQgeyBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIH0gZnJvbSAnLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9ucy10cmVlJztcbmltcG9ydCB7IElneENlbGwsIElneFJvdyB9IGZyb20gJy4vc2VsZWN0aW9uL3NlbGVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEdyaWRUeXBlIH0gZnJvbSAnLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29sdW1uVHlwZSB9IGZyb20gJy4vY29tbW9uL2NvbHVtbi5pbnRlcmZhY2UnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdyaWRCYXNlQVBJU2VydmljZTxUIGV4dGVuZHMgSWd4R3JpZEJhc2VEaXJlY3RpdmUgJiBHcmlkVHlwZT4ge1xuICAgIGdyaWQ6IFQ7XG4gICAgcHJvdGVjdGVkIGRlc3Ryb3lNYXA6IE1hcDxzdHJpbmcsIFN1YmplY3Q8Ym9vbGVhbj4+O1xuICAgIGdldF9jb2x1bW5fYnlfbmFtZShuYW1lOiBzdHJpbmcpOiBDb2x1bW5UeXBlO1xuICAgIGdldF9zdW1tYXJ5X2RhdGEoKTogYW55W107XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldFJvd0RhdGEocm93SUQ6IGFueSk6IGFueTtcbiAgICBlc2NhcGVfZWRpdE1vZGUoKTogdm9pZDtcbiAgICBnZXRfY2VsbF9pbkVkaXRNb2RlKCk6IElneENlbGw7XG4gICAgZ2V0X3Jvd19pbmRleF9pbl9kYXRhKHJvd0lEOiBhbnkpOiBudW1iZXI7XG4gICAgZ2V0X3Jvd19ieV9rZXkocm93U2VsZWN0b3I6IGFueSk6IElneFJvd0RpcmVjdGl2ZTxJZ3hHcmlkQmFzZURpcmVjdGl2ZSAmIEdyaWRUeXBlPjtcbiAgICBnZXRfcm93X2J5X2luZGV4KHJvd0luZGV4OiBudW1iZXIpOiBJZ3hSb3dEaXJlY3RpdmU8SWd4R3JpZEJhc2VEaXJlY3RpdmUgJiBHcmlkVHlwZT47XG4gICAgZ2V0X2NlbGxfYnlfa2V5KHJvd1NlbGVjdG9yOiBhbnksIGZpZWxkOiBzdHJpbmcpOiBJZ3hHcmlkQ2VsbENvbXBvbmVudDtcbiAgICBnZXRfY2VsbF9ieV9pbmRleChyb3dJbmRleDogbnVtYmVyLCBjb2x1bW5JbmRleDogbnVtYmVyKTogSWd4R3JpZENlbGxDb21wb25lbnQ7XG4gICAgZ2V0X2NlbGxfYnlfdmlzaWJsZV9pbmRleChyb3dJbmRleDogbnVtYmVyLCBjb2x1bW5JbmRleDogbnVtYmVyKTogSWd4R3JpZENlbGxDb21wb25lbnQ7XG4gICAgc3VibWl0X3ZhbHVlKCk6IHZvaWQ7XG4gICAgdXBkYXRlX2NlbGwoY2VsbDogSWd4Q2VsbCwgdmFsdWU6IGFueSk6IGltcG9ydChcIi4vY29tbW9uL2V2ZW50c1wiKS5JR3JpZEVkaXRFdmVudEFyZ3M7XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyByZWxhdGVkIHJvdyBvZiBwcm92aWRlZCBncmlkJ3MgZGF0YSBzb3VyY2Ugd2l0aCBwcm92aWRlZCBuZXcgcm93IHZhbHVlXG4gICAgICogQHBhcmFtIGdyaWQgR3JpZCB0byB1cGRhdGUgZGF0YSBmb3JcbiAgICAgKiBAcGFyYW0gcm93SUQgSUQgb2YgdGhlIHJvdyB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gcm93VmFsdWVJbkRhdGFTb3VyY2UgSW5pdGlhbCB2YWx1ZSBvZiB0aGUgcm93IGFzIGl0IGlzIGluIGRhdGEgc291cmNlXG4gICAgICogQHBhcmFtIHJvd0N1cnJlbnRWYWx1ZSBDdXJyZW50IHZhbHVlIG9mIHRoZSByb3cgYXMgaXQgaXMgd2l0aCBhcHBsaWVkIHByZXZpb3VzIHRyYW5zYWN0aW9uc1xuICAgICAqIEBwYXJhbSByb3dOZXdWYWx1ZSBOZXcgdmFsdWUgb2YgdGhlIHJvd1xuICAgICAqL1xuICAgIHByb3RlY3RlZCB1cGRhdGVEYXRhKGdyaWQ6IGFueSwgcm93SUQ6IGFueSwgcm93VmFsdWVJbkRhdGFTb3VyY2U6IGFueSwgcm93Q3VycmVudFZhbHVlOiBhbnksIHJvd05ld1ZhbHVlOiB7XG4gICAgICAgIFt4OiBzdHJpbmddOiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgX3VwZGF0ZV9yb3cocm93OiBJZ3hSb3csIHZhbHVlPzogYW55KTogdm9pZDtcbiAgICB1cGRhdGVfcm93KHJvdzogSWd4Um93LCB2YWx1ZTogYW55KTogaW1wb3J0KFwiLi9jb21tb24vZXZlbnRzXCIpLklHcmlkRWRpdEV2ZW50QXJncztcbiAgICBwcm90ZWN0ZWQgdXBkYXRlX3Jvd19pbl9hcnJheSh2YWx1ZTogYW55LCByb3dJRDogYW55LCBpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBzb3J0KGV4cHJlc3Npb246IElTb3J0aW5nRXhwcmVzc2lvbik6IHZvaWQ7XG4gICAgc29ydF9tdWx0aXBsZShleHByZXNzaW9uczogSVNvcnRpbmdFeHByZXNzaW9uW10pOiB2b2lkO1xuICAgIGZpbHRlcihmaWVsZE5hbWU6IHN0cmluZywgdGVybTogYW55LCBjb25kaXRpb25PckV4cHJlc3Npb25zVHJlZTogSUZpbHRlcmluZ09wZXJhdGlvbiB8IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUsIGlnbm9yZUNhc2U6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGZpbHRlcl9nbG9iYWwodGVybTogYW55LCBjb25kaXRpb246IGFueSwgaWdub3JlQ2FzZTogYW55KTogdm9pZDtcbiAgICBjbGVhcl9maWx0ZXIoZmllbGROYW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIGNsZWFyX3NvcnQoZmllbGROYW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBwcmVwYXJlX2ZpbHRlcmluZ19leHByZXNzaW9uKGZpbHRlcmluZ1N0YXRlOiBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlLCBmaWVsZE5hbWU6IHN0cmluZywgc2VhcmNoVmFsOiBhbnksIGNvbmRpdGlvbk9yRXhwcmVzc2lvbnNUcmVlOiBJRmlsdGVyaW5nT3BlcmF0aW9uIHwgSUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSwgaWdub3JlQ2FzZTogYm9vbGVhbiwgaW5zZXJ0QXRJbmRleD86IG51bWJlcik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHByZXBhcmVfc29ydGluZ19leHByZXNzaW9uKHN0YXRlQ29sbGVjdGlvbnM6IEFycmF5PEFycmF5PGFueT4+LCBleHByZXNzaW9uOiBJU29ydGluZ0V4cHJlc3Npb24pOiB2b2lkO1xuICAgIHByb3RlY3RlZCByZW1vdmVfZ3JvdXBpbmdfZXhwcmVzc2lvbihmaWVsZE5hbWU6IGFueSk6IHZvaWQ7XG4gICAgY2xlYXJfZ3JvdXBieShuYW1lPzogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPik6IHZvaWQ7XG4gICAgc2hvdWxkX2FwcGx5X251bWJlcl9zdHlsZShjb2x1bW46IENvbHVtblR5cGUpOiBib29sZWFuO1xuICAgIGdldF9kYXRhKCk6IGFueVtdO1xuICAgIGdldF9hbGxfZGF0YShpbmNsdWRlVHJhbnNhY3Rpb25zPzogYm9vbGVhbik6IGFueVtdO1xuICAgIGdldF9maWx0ZXJlZF9kYXRhKCk6IGFueVtdO1xuICAgIHByb3RlY3RlZCBnZXRTb3J0U3RyYXRlZ3lQZXJDb2x1bW4oZmllbGROYW1lOiBzdHJpbmcpOiBpbXBvcnQoXCIuLi9kYXRhLW9wZXJhdGlvbnMvc29ydGluZy1zdHJhdGVneVwiKS5JU29ydGluZ1N0cmF0ZWd5O1xuICAgIGFkZFJvd1RvRGF0YShyb3dEYXRhOiBhbnkpOiB2b2lkO1xuICAgIGRlbGV0ZVJvd0Zyb21EYXRhKHJvd0lEOiBhbnksIGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIGRlbGV0ZVJvd0J5SWQocm93SWQ6IGFueSk6IHZvaWQ7XG4gICAgZ2V0X3Jvd19pZChyb3dEYXRhOiBhbnkpOiBhbnk7XG4gICAgcm93X2RlbGV0ZWRfdHJhbnNhY3Rpb24ocm93SUQ6IGFueSk6IGJvb2xlYW47XG4gICAgYXRJbmV4aXN0aW5nUGFnZSgpOiBib29sZWFuO1xuICAgIGdldF9yb3dfZXhwYW5zaW9uX3N0YXRlKHJlY29yZDogYW55KTogYm9vbGVhbjtcbiAgICBzZXRfcm93X2V4cGFuc2lvbl9zdGF0ZShyb3dJRDogYW55LCBleHBhbmRlZDogYm9vbGVhbiwgZXZlbnQ/OiBFdmVudCk6IHZvaWQ7XG4gICAgZ2V0X3JlY19ieV9pZChyb3dJRDogYW55KTogYW55O1xuICAgIGFsbG93X2V4cGFuc2lvbl9zdGF0ZV9jaGFuZ2Uocm93SUQ6IGFueSwgZXhwYW5kZWQ6IGFueSk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBpc1RvZ2dsZUtleTtcbn1cbiJdfQ==