import { GridBaseAPIService } from '../api.service';
import { IgxGridComponent } from './grid.component';
import { IGroupByRecord } from '../../data-operations/groupby-record.interface';
import { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';
import { IGroupingExpression } from '../../data-operations/grouping-expression.interface';
import * as ɵngcc0 from '@angular/core';
export declare class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {
    groupBy(expression: IGroupingExpression): void;
    groupBy_multiple(expressions: IGroupingExpression[]): void;
    clear_groupby(name?: string | Array<string>): void;
    groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState;
    groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID: any): boolean;
    groupBy_toggle_group(groupRow: IGroupByRecord): void;
    groupBy_fully_expand_group(groupRow: IGroupByRecord): void;
    protected remove_grouping_expression(fieldName: any): void;
    arrange_sorting_expressions(): void;
    get_groupBy_record_id(gRow: IGroupByRecord): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridAPIService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxGridAPIService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1hcGkuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJncmlkLWFwaS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7O0FBV0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmlkQmFzZUFQSVNlcnZpY2UgfSBmcm9tICcuLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJR3JvdXBCeVJlY29yZCB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9ncm91cGJ5LXJlY29yZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUdyb3VwQnlFeHBhbmRTdGF0ZSB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9ncm91cGJ5LWV4cGFuZC1zdGF0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUdyb3VwaW5nRXhwcmVzc2lvbiB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9ncm91cGluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hHcmlkQVBJU2VydmljZSBleHRlbmRzIEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQ29tcG9uZW50PiB7XG4gICAgZ3JvdXBCeShleHByZXNzaW9uOiBJR3JvdXBpbmdFeHByZXNzaW9uKTogdm9pZDtcbiAgICBncm91cEJ5X211bHRpcGxlKGV4cHJlc3Npb25zOiBJR3JvdXBpbmdFeHByZXNzaW9uW10pOiB2b2lkO1xuICAgIGNsZWFyX2dyb3VwYnkobmFtZT86IHN0cmluZyB8IEFycmF5PHN0cmluZz4pOiB2b2lkO1xuICAgIGdyb3VwQnlfZ2V0X2V4cGFuZGVkX2Zvcl9ncm91cChncm91cFJvdzogSUdyb3VwQnlSZWNvcmQpOiBJR3JvdXBCeUV4cGFuZFN0YXRlO1xuICAgIGdyb3VwQnlfaXNfcm93X2luX2dyb3VwKGdyb3VwUm93OiBJR3JvdXBCeVJlY29yZCwgcm93SUQ6IGFueSk6IGJvb2xlYW47XG4gICAgZ3JvdXBCeV90b2dnbGVfZ3JvdXAoZ3JvdXBSb3c6IElHcm91cEJ5UmVjb3JkKTogdm9pZDtcbiAgICBncm91cEJ5X2Z1bGx5X2V4cGFuZF9ncm91cChncm91cFJvdzogSUdyb3VwQnlSZWNvcmQpOiB2b2lkO1xuICAgIHByb3RlY3RlZCByZW1vdmVfZ3JvdXBpbmdfZXhwcmVzc2lvbihmaWVsZE5hbWU6IGFueSk6IHZvaWQ7XG4gICAgYXJyYW5nZV9zb3J0aW5nX2V4cHJlc3Npb25zKCk6IHZvaWQ7XG4gICAgZ2V0X2dyb3VwQnlfcmVjb3JkX2lkKGdSb3c6IElHcm91cEJ5UmVjb3JkKTogc3RyaW5nO1xufVxuIl19