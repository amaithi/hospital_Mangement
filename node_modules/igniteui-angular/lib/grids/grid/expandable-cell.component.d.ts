import { ChangeDetectorRef, ElementRef, NgZone, OnInit, TemplateRef } from '@angular/core';
import { IgxGridCellComponent } from '../cell.component';
import { GridBaseAPIService } from '../api.service';
import { PlatformUtil } from '../../core/utils';
import { IgxGridBaseDirective } from './public_api';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { HammerGesturesManager } from '../../core/touch';
import { GridType } from '../common/grid.interface';
import * as ɵngcc0 from '@angular/core';
export declare class IgxGridExpandableCellComponent extends IgxGridCellComponent implements OnInit {
    protected zone: NgZone;
    document: any;
    protected platformUtil: PlatformUtil;
    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, cdr: ChangeDetectorRef, element: ElementRef, zone: NgZone, touchManager: HammerGesturesManager, document: any, platformUtil: PlatformUtil);
    /**
     * @hidden
     */
    expanded: boolean;
    indicator: ElementRef;
    indentationDiv: ElementRef;
    /**
     * @hidden
     */
    protected defaultExpandedTemplate: TemplateRef<any>;
    /**
     * @hidden
     */
    protected defaultCollapsedTemplate: TemplateRef<any>;
    /**
     * @hidden
     */
    toggle(event: Event): void;
    /**
     * @hidden
     */
    onIndicatorFocus(): void;
    /**
     * @hidden
     */
    calculateSizeToFit(range: any): number;
    /**
     * @hidden
     */
    get iconTemplate(): any;
    /**
     * @hidden
     */
    get showExpanderIndicator(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridExpandableCellComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxGridExpandableCellComponent, "igx-expandable-grid-cell", never, {
    "expanded": "expanded";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS1jZWxsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJleHBhbmRhYmxlLWNlbGwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIE5nWm9uZSwgT25Jbml0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4R3JpZENlbGxDb21wb25lbnQgfSBmcm9tICcuLi9jZWxsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHcmlkQmFzZUFQSVNlcnZpY2UgfSBmcm9tICcuLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWwgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzJztcbmltcG9ydCB7IElneEdyaWRCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9wdWJsaWNfYXBpJztcbmltcG9ydCB7IElneEdyaWRTZWxlY3Rpb25TZXJ2aWNlLCBJZ3hHcmlkQ1JVRFNlcnZpY2UgfSBmcm9tICcuLi9zZWxlY3Rpb24vc2VsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgSGFtbWVyR2VzdHVyZXNNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vY29yZS90b3VjaCc7XG5pbXBvcnQgeyBHcmlkVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9ncmlkLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hHcmlkRXhwYW5kYWJsZUNlbGxDb21wb25lbnQgZXh0ZW5kcyBJZ3hHcmlkQ2VsbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZTtcbiAgICBkb2N1bWVudDogYW55O1xuICAgIHByb3RlY3RlZCBwbGF0Zm9ybVV0aWw6IFBsYXRmb3JtVXRpbDtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rpb25TZXJ2aWNlOiBJZ3hHcmlkU2VsZWN0aW9uU2VydmljZSwgY3J1ZFNlcnZpY2U6IElneEdyaWRDUlVEU2VydmljZSwgZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+LCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50OiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUsIHRvdWNoTWFuYWdlcjogSGFtbWVyR2VzdHVyZXNNYW5hZ2VyLCBkb2N1bWVudDogYW55LCBwbGF0Zm9ybVV0aWw6IFBsYXRmb3JtVXRpbCk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGV4cGFuZGVkOiBib29sZWFuO1xuICAgIGluZGljYXRvcjogRWxlbWVudFJlZjtcbiAgICBpbmRlbnRhdGlvbkRpdjogRWxlbWVudFJlZjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGRlZmF1bHRFeHBhbmRlZFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZGVmYXVsdENvbGxhcHNlZFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0b2dnbGUoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25JbmRpY2F0b3JGb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjYWxjdWxhdGVTaXplVG9GaXQocmFuZ2U6IGFueSk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGljb25UZW1wbGF0ZSgpOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBzaG93RXhwYW5kZXJJbmRpY2F0b3IoKTogYm9vbGVhbjtcbn1cbiJdfQ==