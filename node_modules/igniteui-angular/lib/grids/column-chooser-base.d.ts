import { ChangeDetectorRef, OnDestroy } from '@angular/core';
import { IFilteringExpression } from '../data-operations/filtering-expression.interface';
import { ColumnDisplayOrder } from './common/enums';
/** @hidden */
import * as ɵngcc0 from '@angular/core';
export declare abstract class ColumnChooserBaseDirective implements OnDestroy {
    cdr: ChangeDetectorRef;
    /**
     * Gets the grid columns that are going to be manipulated.
     * ```typescript
     * let gridColumns = this.columnHidingUI.columns;
     * ```
     */
    get columns(): any[];
    /**
     * Sets the the grid columns that are going to be manipulated.
     * ```html
     * <igx-column-hiding [columns]="grid.columns"></igx-column-hiding>
     * ```
     */
    set columns(value: any[]);
    /**
     * Sets/gets the title of the column chooser.
     * ```typescript
     * let title =  this.columnHidingUI.title;
     * ```
     */
    get title(): string;
    /**
     * ```html
     * <igx-column-hiding [title]="'IgxColumnHidingComponent Title'"></igx-column-hiding>
     * ```
     */
    set title(value: string);
    /**
     * Gets the prompt that is displayed in the filter input.
     * ```typescript
     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;
     * ```
     */
    get filterColumnsPrompt(): string;
    /**
     * Sets the prompt that is going to be displayed in the filter input.
     * ```html
     * <igx-column-hiding [filterColumnsPrompt]="'Type here to search'"></igx-column-hiding>
     * ```
     */
    set filterColumnsPrompt(value: string);
    /**
     * Hides/ shows the filtering columns input from the UI.
     */
    disableFilter: boolean;
    /**
     * Gets the items of the selected columns.
     * ```typescript
     * let columnItems =  this.columnHidingUI.columnItems;
     * ```
     */
    get columnItems(): any[];
    /**
     * Gets the value which filters the columns list.
     * ```typescript
     * let filterCriteria =  this.columnHidingUI.filterCriteria;
     * ```
     */
    get filterCriteria(): string;
    /**
     * Sets the value which filters the columns list.
     * ```html
     *  <igx-column-hiding [filterCriteria]="'ID'"></igx-column-hiding>
     * ```
     */
    set filterCriteria(value: string);
    /**
     * Gets the display order of the columns.
     * ```typescript
     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;
     * ```
     */
    get columnDisplayOrder(): ColumnDisplayOrder;
    /**
     * Sets the display order of the columns.
     * ```typescript
     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;
     * ```
     */
    set columnDisplayOrder(value: ColumnDisplayOrder);
    /**
     * Access to the columnHidingUI:
     * ```typescript
     * @ViewChild('column-hiding-component')
     *  public columnHidingUI: IgxColumnHidingComponent;
     * ```
     * Sets/gets the max height of the column area.
     * ```typescript
     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;
     * ```
     *
     * ```html
     * <igx-column-hiding [columnsAreaMaxHeight]="200px"></igx-column-hiding>
     * ```
     */
    columnsAreaMaxHeight: string;
    /**
     * Sets/Gets the css class selector.
     * By default the value of the `class` attribute is `"igx-column-hiding"`.
     * ```typescript
     * let cssCLass =  this.columnHidingUI.cssClass;
     * ```
     * ```typescript
     * this.columnHidingUI.cssClass = 'column-chooser';
     * ```
     */
    cssClass: string;
    /**
     * @hidden
     */
    private _currentColumns;
    /**
     * @hidden
     */
    private _gridColumns;
    /**
     * @hidden
     */
    private _rawColumns;
    /**
     * @hidden
     */
    private _columnDisplayOrder;
    /**
     * @hidden
     */
    private _filterCriteria;
    /**
     * @hidden
     */
    private _filterColumnsPrompt;
    /**
     * @hidden
     */
    private _title;
    constructor(cdr: ChangeDetectorRef);
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    private createColumnItems;
    /**
     * @hidden
     */
    protected abstract createColumnItem(container: any, column: any): any;
    /**
     * @hidden
     */
    private orderColumns;
    /**
     * @hidden
     */
    protected filter(): void;
    /**
     * @hidden
     */
    protected createFilteringExpression(fieldName: string): IFilteringExpression;
    /**
     * @hidden
     */
    protected clearFiltering(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColumnChooserBaseDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ColumnChooserBaseDirective, never, never, {
    "disableFilter": "disableFilter";
    "columnsAreaMaxHeight": "columnsAreaMaxHeight";
    "columns": "columns";
    "title": "title";
    "filterColumnsPrompt": "filterColumnsPrompt";
    "columnItems": "columnItems";
    "filterCriteria": "filterCriteria";
    "columnDisplayOrder": "columnDisplayOrder";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItYmFzZS5kLnRzIiwic291cmNlcyI6WyJjb2x1bW4tY2hvb3Nlci1iYXNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNLQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElGaWx0ZXJpbmdFeHByZXNzaW9uIH0gZnJvbSAnLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDb2x1bW5EaXNwbGF5T3JkZXIgfSBmcm9tICcuL2NvbW1vbi9lbnVtcyc7XG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgQ29sdW1uQ2hvb3NlckJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZ3JpZCBjb2x1bW5zIHRoYXQgYXJlIGdvaW5nIHRvIGJlIG1hbmlwdWxhdGVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZ3JpZENvbHVtbnMgPSB0aGlzLmNvbHVtbkhpZGluZ1VJLmNvbHVtbnM7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGNvbHVtbnMoKTogYW55W107XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGhlIGdyaWQgY29sdW1ucyB0aGF0IGFyZSBnb2luZyB0byBiZSBtYW5pcHVsYXRlZC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jb2x1bW4taGlkaW5nIFtjb2x1bW5zXT1cImdyaWQuY29sdW1uc1wiPjwvaWd4LWNvbHVtbi1oaWRpbmc+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0IGNvbHVtbnModmFsdWU6IGFueVtdKTtcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIHRpdGxlIG9mIHRoZSBjb2x1bW4gY2hvb3Nlci5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHRpdGxlID0gIHRoaXMuY29sdW1uSGlkaW5nVUkudGl0bGU7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHRpdGxlKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jb2x1bW4taGlkaW5nIFt0aXRsZV09XCInSWd4Q29sdW1uSGlkaW5nQ29tcG9uZW50IFRpdGxlJ1wiPjwvaWd4LWNvbHVtbi1oaWRpbmc+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0IHRpdGxlKHZhbHVlOiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb21wdCB0aGF0IGlzIGRpc3BsYXllZCBpbiB0aGUgZmlsdGVyIGlucHV0LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZmlsdGVyQ29sdW1uc1Byb21wdCA9ICB0aGlzLmNvbHVtbkhpZGluZ1VJLmZpbHRlckNvbHVtbnNQcm9tcHQ7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGZpbHRlckNvbHVtbnNQcm9tcHQoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHByb21wdCB0aGF0IGlzIGdvaW5nIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgZmlsdGVyIGlucHV0LlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNvbHVtbi1oaWRpbmcgW2ZpbHRlckNvbHVtbnNQcm9tcHRdPVwiJ1R5cGUgaGVyZSB0byBzZWFyY2gnXCI+PC9pZ3gtY29sdW1uLWhpZGluZz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgZmlsdGVyQ29sdW1uc1Byb21wdCh2YWx1ZTogc3RyaW5nKTtcbiAgICAvKipcbiAgICAgKiBIaWRlcy8gc2hvd3MgdGhlIGZpbHRlcmluZyBjb2x1bW5zIGlucHV0IGZyb20gdGhlIFVJLlxuICAgICAqL1xuICAgIGRpc2FibGVGaWx0ZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaXRlbXMgb2YgdGhlIHNlbGVjdGVkIGNvbHVtbnMuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjb2x1bW5JdGVtcyA9ICB0aGlzLmNvbHVtbkhpZGluZ1VJLmNvbHVtbkl0ZW1zO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBjb2x1bW5JdGVtcygpOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSB3aGljaCBmaWx0ZXJzIHRoZSBjb2x1bW5zIGxpc3QuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBmaWx0ZXJDcml0ZXJpYSA9ICB0aGlzLmNvbHVtbkhpZGluZ1VJLmZpbHRlckNyaXRlcmlhO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBmaWx0ZXJDcml0ZXJpYSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgd2hpY2ggZmlsdGVycyB0aGUgY29sdW1ucyBsaXN0LlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1jb2x1bW4taGlkaW5nIFtmaWx0ZXJDcml0ZXJpYV09XCInSUQnXCI+PC9pZ3gtY29sdW1uLWhpZGluZz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgZmlsdGVyQ3JpdGVyaWEodmFsdWU6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGlzcGxheSBvcmRlciBvZiB0aGUgY29sdW1ucy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGNvbHVtbkRpc3BsYXlPcmRlciAgPSAgdGhpcy5jb2x1bW5IaWRpbmdVSS5jb2x1bW5EaXNwbGF5T3JkZXI7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGNvbHVtbkRpc3BsYXlPcmRlcigpOiBDb2x1bW5EaXNwbGF5T3JkZXI7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGlzcGxheSBvcmRlciBvZiB0aGUgY29sdW1ucy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5jb2x1bW5IaWRpbmdVSS5jb2x1bW5EaXNwbGF5T3JkZXIgPSBDb2x1bW5EaXNwbGF5T3JkZXIuQWxwaGFiZXRpY2FsO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCBjb2x1bW5EaXNwbGF5T3JkZXIodmFsdWU6IENvbHVtbkRpc3BsYXlPcmRlcik7XG4gICAgLyoqXG4gICAgICogQWNjZXNzIHRvIHRoZSBjb2x1bW5IaWRpbmdVSTpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnY29sdW1uLWhpZGluZy1jb21wb25lbnQnKVxuICAgICAqICBwdWJsaWMgY29sdW1uSGlkaW5nVUk6IElneENvbHVtbkhpZGluZ0NvbXBvbmVudDtcbiAgICAgKiBgYGBcbiAgICAgKiBTZXRzL2dldHMgdGhlIG1heCBoZWlnaHQgb2YgdGhlIGNvbHVtbiBhcmVhLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY29sdW1uc0FyZWFNYXhIZWlnaHQgPSAgdGhpcy5jb2x1bW5IaWRpbmdVSS5jb2x1bW5zQXJlYU1heEhlaWdodDtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNvbHVtbi1oaWRpbmcgW2NvbHVtbnNBcmVhTWF4SGVpZ2h0XT1cIjIwMHB4XCI+PC9pZ3gtY29sdW1uLWhpZGluZz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjb2x1bW5zQXJlYU1heEhlaWdodDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMvR2V0cyB0aGUgY3NzIGNsYXNzIHNlbGVjdG9yLlxuICAgICAqIEJ5IGRlZmF1bHQgdGhlIHZhbHVlIG9mIHRoZSBgY2xhc3NgIGF0dHJpYnV0ZSBpcyBgXCJpZ3gtY29sdW1uLWhpZGluZ1wiYC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGNzc0NMYXNzID0gIHRoaXMuY29sdW1uSGlkaW5nVUkuY3NzQ2xhc3M7XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuY29sdW1uSGlkaW5nVUkuY3NzQ2xhc3MgPSAnY29sdW1uLWNob29zZXInO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNzc0NsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX2N1cnJlbnRDb2x1bW5zO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9ncmlkQ29sdW1ucztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfcmF3Q29sdW1ucztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY29sdW1uRGlzcGxheU9yZGVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9maWx0ZXJDcml0ZXJpYTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfZmlsdGVyQ29sdW1uc1Byb21wdDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfdGl0bGU7XG4gICAgY29uc3RydWN0b3IoY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlQ29sdW1uSXRlbXM7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjcmVhdGVDb2x1bW5JdGVtKGNvbnRhaW5lcjogYW55LCBjb2x1bW46IGFueSk6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBvcmRlckNvbHVtbnM7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBmaWx0ZXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUZpbHRlcmluZ0V4cHJlc3Npb24oZmllbGROYW1lOiBzdHJpbmcpOiBJRmlsdGVyaW5nRXhwcmVzc2lvbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNsZWFyRmlsdGVyaW5nKCk6IHZvaWQ7XG59XG4iXX0=