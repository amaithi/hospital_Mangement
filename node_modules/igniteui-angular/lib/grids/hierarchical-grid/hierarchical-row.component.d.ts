import { ElementRef, QueryList, TemplateRef } from '@angular/core';
import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';
import { IgxRowDirective } from '../row.directive';
import { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';
import * as ɵngcc0 from '@angular/core';
export declare class IgxHierarchicalRowComponent extends IgxRowDirective<IgxHierarchicalGridComponent> {
    protected expanderClass: string;
    /**
     * @hidden
     */
    get expanderClassResolved(): {
        [x: string]: boolean;
    };
    protected _cells: QueryList<IgxHierarchicalGridCellComponent>;
    expander: ElementRef<HTMLElement>;
    get viewIndex(): number;
    /**
     * @hidden
     */
    protected defaultExpandedTemplate: TemplateRef<any>;
    /**
     * @hidden
     */
    protected defaultEmptyTemplate: TemplateRef<any>;
    /**
     * @hidden
     */
    protected defaultCollapsedTemplate: TemplateRef<any>;
    /**
     * Returns whether the row is expanded.
     * ```typescript
     * const RowExpanded = this.grid1.rowList.first.expanded;
     * ```
     */
    get expanded(): boolean;
    /**
     * @hidden
     */
    get expandedClass(): boolean;
    get hasChildren(): boolean;
    /**
     * @hidden
     */
    get highlighted(): boolean;
    /**
     * @hidden
     */
    expanderClick(event: any): void;
    /**
     * Toggles the hierarchical row.
     * ```typescript
     * this.grid1.rowList.first.toggle()
     * ```
     */
    toggle(): void;
    /**
     * @hidden
     * @internal
     */
    select: () => void;
    /**
     * @hidden
     * @internal
     */
    deselect: () => void;
    /**
     * @hidden
     */
    get iconTemplate(): TemplateRef<any>;
    protected endEdit(grid: IgxHierarchicalGridComponent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxHierarchicalRowComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxHierarchicalRowComponent, "igx-hierarchical-grid-row", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLXJvdy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaGllcmFyY2hpY2FsLXJvdy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEhpZXJhcmNoaWNhbEdyaWRDb21wb25lbnQgfSBmcm9tICcuL2hpZXJhcmNoaWNhbC1ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hSb3dEaXJlY3RpdmUgfSBmcm9tICcuLi9yb3cuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneEhpZXJhcmNoaWNhbEdyaWRDZWxsQ29tcG9uZW50IH0gZnJvbSAnLi9oaWVyYXJjaGljYWwtY2VsbC5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4SGllcmFyY2hpY2FsUm93Q29tcG9uZW50IGV4dGVuZHMgSWd4Um93RGlyZWN0aXZlPElneEhpZXJhcmNoaWNhbEdyaWRDb21wb25lbnQ+IHtcbiAgICBwcm90ZWN0ZWQgZXhwYW5kZXJDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgZXhwYW5kZXJDbGFzc1Jlc29sdmVkKCk6IHtcbiAgICAgICAgW3g6IHN0cmluZ106IGJvb2xlYW47XG4gICAgfTtcbiAgICBwcm90ZWN0ZWQgX2NlbGxzOiBRdWVyeUxpc3Q8SWd4SGllcmFyY2hpY2FsR3JpZENlbGxDb21wb25lbnQ+O1xuICAgIGV4cGFuZGVyOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcbiAgICBnZXQgdmlld0luZGV4KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGRlZmF1bHRFeHBhbmRlZFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZGVmYXVsdEVtcHR5VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBkZWZhdWx0Q29sbGFwc2VkVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSByb3cgaXMgZXhwYW5kZWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IFJvd0V4cGFuZGVkID0gdGhpcy5ncmlkMS5yb3dMaXN0LmZpcnN0LmV4cGFuZGVkO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBleHBhbmRlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgZXhwYW5kZWRDbGFzcygpOiBib29sZWFuO1xuICAgIGdldCBoYXNDaGlsZHJlbigpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgaGlnaGxpZ2h0ZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZXhwYW5kZXJDbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBoaWVyYXJjaGljYWwgcm93LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQxLnJvd0xpc3QuZmlyc3QudG9nZ2xlKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB0b2dnbGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc2VsZWN0OiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBkZXNlbGVjdDogKCkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGljb25UZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHByb3RlY3RlZCBlbmRFZGl0KGdyaWQ6IElneEhpZXJhcmNoaWNhbEdyaWRDb21wb25lbnQpOiB2b2lkO1xufVxuIl19