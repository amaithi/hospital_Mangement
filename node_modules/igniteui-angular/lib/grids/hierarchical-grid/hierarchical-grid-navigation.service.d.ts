import { IgxGridNavigationService } from '../grid-navigation.service';
import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';
import { IgxRowDirective, IgxGridBaseDirective } from '../grid/public_api';
import { GridType } from '../common/grid.interface';
import * as ɵngcc0 from '@angular/core';
export declare class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {
    grid: IgxHierarchicalGridComponent;
    protected _pendingNavigation: boolean;
    dispatchEvent(event: KeyboardEvent): void;
    navigateInBody(rowIndex: any, visibleColIndex: any, cb?: Function): void;
    shouldPerformVerticalScroll(index: any, visibleColumnIndex?: number, isNext?: any): boolean;
    focusTbody(event: any): void;
    protected nextSiblingIndex(isNext: any): any;
    /**
     * Handles scrolling in child grid and ensures target child row is in main grid view port.
     * @param rowIndex The row index which should be in view.
     * @param isNext  Optional. Whether we are navigating to next. Used to determine scroll direction.
     * @param cb  Optional.Callback function called when operation is complete.
     */
    protected _handleScrollInChild(rowIndex: number, isNext?: boolean, cb?: Function): void;
    /**
     *
     * @param rowIndex Row index that should come in view.
     * @param isNext  Whether we are navigating to next. Used to determine scroll direction.
     * @param cb  Optional.Callback function called when operation is complete.
     */
    protected positionInParent(rowIndex: any, isNext: any, cb?: Function): void;
    /**
     * Moves navigation to child grid.
     * @param parentRowIndex The parent row index, at which the child grid is rendered.
     * @param childLayoutIndex Optional. The index of the child row island to which the child grid belongs to. Uses first if not set.
     */
    protected _moveToChild(parentRowIndex: number, visibleColIndex: number, isNext: boolean, childLayoutIndex?: number, cb?: Function): void;
    /**
     * Moves navigation back to parent grid.
     * @param rowIndex
     */
    protected _moveToParent(isNext: boolean, columnIndex: any, cb?: any): void;
    /**
     * Gets information on the row position relative to the root grid view port.
     * Returns whether the row is in view and its offset.
     * @param rowObj
     * @param isNext
     */
    protected getPositionInfo(rowObj: IgxRowDirective<IgxGridBaseDirective & GridType>, isNext: boolean): {
        inView: boolean;
        offset: number;
    };
    private clearActivation;
    private hasNextTarget;
    /**
     * Gets closest element by its tag name.
     * @param sourceElem The element from which to start the search.
     * @param targetTag The target element tag name, for which to search.
     */
    protected getClosestElemByTag(sourceElem: any, targetTag: any): any;
    /**
     * Gets the max top view in the current grid hierarchy.
     * @param grid
     */
    private _getMaxTop;
    /**
     * Gets the min bottom view in the current grid hierarchy.
     * @param grid
     */
    private _getMinBottom;
    /**
     * Finds the next grid that allows scrolling down.
     * @param grid The grid from which to begin the search.
     */
    private getNextScrollableDown;
    /**
     * Finds the next grid that allows scrolling up.
     * @param grid The grid from which to begin the search.
     */
    private getNextScrollableUp;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxHierarchicalGridNavigationService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxHierarchicalGridNavigationService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLWdyaWQtbmF2aWdhdGlvbi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImhpZXJhcmNoaWNhbC1ncmlkLW5hdmlnYXRpb24uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWd4R3JpZE5hdmlnYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudCB9IGZyb20gJy4vaGllcmFyY2hpY2FsLWdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IElneFJvd0RpcmVjdGl2ZSwgSWd4R3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuLi9ncmlkL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4SGllcmFyY2hpY2FsR3JpZE5hdmlnYXRpb25TZXJ2aWNlIGV4dGVuZHMgSWd4R3JpZE5hdmlnYXRpb25TZXJ2aWNlIHtcbiAgICBncmlkOiBJZ3hIaWVyYXJjaGljYWxHcmlkQ29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBfcGVuZGluZ05hdmlnYXRpb246IGJvb2xlYW47XG4gICAgZGlzcGF0Y2hFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgbmF2aWdhdGVJbkJvZHkocm93SW5kZXg6IGFueSwgdmlzaWJsZUNvbEluZGV4OiBhbnksIGNiPzogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHNob3VsZFBlcmZvcm1WZXJ0aWNhbFNjcm9sbChpbmRleDogYW55LCB2aXNpYmxlQ29sdW1uSW5kZXg/OiBudW1iZXIsIGlzTmV4dD86IGFueSk6IGJvb2xlYW47XG4gICAgZm9jdXNUYm9keShldmVudDogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgbmV4dFNpYmxpbmdJbmRleChpc05leHQ6IGFueSk6IGFueTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHNjcm9sbGluZyBpbiBjaGlsZCBncmlkIGFuZCBlbnN1cmVzIHRhcmdldCBjaGlsZCByb3cgaXMgaW4gbWFpbiBncmlkIHZpZXcgcG9ydC5cbiAgICAgKiBAcGFyYW0gcm93SW5kZXggVGhlIHJvdyBpbmRleCB3aGljaCBzaG91bGQgYmUgaW4gdmlldy5cbiAgICAgKiBAcGFyYW0gaXNOZXh0ICBPcHRpb25hbC4gV2hldGhlciB3ZSBhcmUgbmF2aWdhdGluZyB0byBuZXh0LiBVc2VkIHRvIGRldGVybWluZSBzY3JvbGwgZGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSBjYiAgT3B0aW9uYWwuQ2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkIHdoZW4gb3BlcmF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfaGFuZGxlU2Nyb2xsSW5DaGlsZChyb3dJbmRleDogbnVtYmVyLCBpc05leHQ/OiBib29sZWFuLCBjYj86IEZ1bmN0aW9uKTogdm9pZDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSByb3dJbmRleCBSb3cgaW5kZXggdGhhdCBzaG91bGQgY29tZSBpbiB2aWV3LlxuICAgICAqIEBwYXJhbSBpc05leHQgIFdoZXRoZXIgd2UgYXJlIG5hdmlnYXRpbmcgdG8gbmV4dC4gVXNlZCB0byBkZXRlcm1pbmUgc2Nyb2xsIGRpcmVjdGlvbi5cbiAgICAgKiBAcGFyYW0gY2IgIE9wdGlvbmFsLkNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIG9wZXJhdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgcG9zaXRpb25JblBhcmVudChyb3dJbmRleDogYW55LCBpc05leHQ6IGFueSwgY2I/OiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTW92ZXMgbmF2aWdhdGlvbiB0byBjaGlsZCBncmlkLlxuICAgICAqIEBwYXJhbSBwYXJlbnRSb3dJbmRleCBUaGUgcGFyZW50IHJvdyBpbmRleCwgYXQgd2hpY2ggdGhlIGNoaWxkIGdyaWQgaXMgcmVuZGVyZWQuXG4gICAgICogQHBhcmFtIGNoaWxkTGF5b3V0SW5kZXggT3B0aW9uYWwuIFRoZSBpbmRleCBvZiB0aGUgY2hpbGQgcm93IGlzbGFuZCB0byB3aGljaCB0aGUgY2hpbGQgZ3JpZCBiZWxvbmdzIHRvLiBVc2VzIGZpcnN0IGlmIG5vdCBzZXQuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9tb3ZlVG9DaGlsZChwYXJlbnRSb3dJbmRleDogbnVtYmVyLCB2aXNpYmxlQ29sSW5kZXg6IG51bWJlciwgaXNOZXh0OiBib29sZWFuLCBjaGlsZExheW91dEluZGV4PzogbnVtYmVyLCBjYj86IEZ1bmN0aW9uKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNb3ZlcyBuYXZpZ2F0aW9uIGJhY2sgdG8gcGFyZW50IGdyaWQuXG4gICAgICogQHBhcmFtIHJvd0luZGV4XG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9tb3ZlVG9QYXJlbnQoaXNOZXh0OiBib29sZWFuLCBjb2x1bW5JbmRleDogYW55LCBjYj86IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogR2V0cyBpbmZvcm1hdGlvbiBvbiB0aGUgcm93IHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSByb290IGdyaWQgdmlldyBwb3J0LlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgcm93IGlzIGluIHZpZXcgYW5kIGl0cyBvZmZzZXQuXG4gICAgICogQHBhcmFtIHJvd09ialxuICAgICAqIEBwYXJhbSBpc05leHRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0UG9zaXRpb25JbmZvKHJvd09iajogSWd4Um93RGlyZWN0aXZlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+LCBpc05leHQ6IGJvb2xlYW4pOiB7XG4gICAgICAgIGluVmlldzogYm9vbGVhbjtcbiAgICAgICAgb2Zmc2V0OiBudW1iZXI7XG4gICAgfTtcbiAgICBwcml2YXRlIGNsZWFyQWN0aXZhdGlvbjtcbiAgICBwcml2YXRlIGhhc05leHRUYXJnZXQ7XG4gICAgLyoqXG4gICAgICogR2V0cyBjbG9zZXN0IGVsZW1lbnQgYnkgaXRzIHRhZyBuYW1lLlxuICAgICAqIEBwYXJhbSBzb3VyY2VFbGVtIFRoZSBlbGVtZW50IGZyb20gd2hpY2ggdG8gc3RhcnQgdGhlIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0VGFnIFRoZSB0YXJnZXQgZWxlbWVudCB0YWcgbmFtZSwgZm9yIHdoaWNoIHRvIHNlYXJjaC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0Q2xvc2VzdEVsZW1CeVRhZyhzb3VyY2VFbGVtOiBhbnksIHRhcmdldFRhZzogYW55KTogYW55O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1heCB0b3AgdmlldyBpbiB0aGUgY3VycmVudCBncmlkIGhpZXJhcmNoeS5cbiAgICAgKiBAcGFyYW0gZ3JpZFxuICAgICAqL1xuICAgIHByaXZhdGUgX2dldE1heFRvcDtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtaW4gYm90dG9tIHZpZXcgaW4gdGhlIGN1cnJlbnQgZ3JpZCBoaWVyYXJjaHkuXG4gICAgICogQHBhcmFtIGdyaWRcbiAgICAgKi9cbiAgICBwcml2YXRlIF9nZXRNaW5Cb3R0b207XG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIG5leHQgZ3JpZCB0aGF0IGFsbG93cyBzY3JvbGxpbmcgZG93bi5cbiAgICAgKiBAcGFyYW0gZ3JpZCBUaGUgZ3JpZCBmcm9tIHdoaWNoIHRvIGJlZ2luIHRoZSBzZWFyY2guXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXROZXh0U2Nyb2xsYWJsZURvd247XG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIG5leHQgZ3JpZCB0aGF0IGFsbG93cyBzY3JvbGxpbmcgdXAuXG4gICAgICogQHBhcmFtIGdyaWQgVGhlIGdyaWQgZnJvbSB3aGljaCB0byBiZWdpbiB0aGUgc2VhcmNoLlxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0TmV4dFNjcm9sbGFibGVVcDtcbn1cbiJdfQ==