import { ElementRef, NgZone, ChangeDetectorRef, IterableDiffers, ViewContainerRef, ComponentFactoryResolver, TemplateRef } from '@angular/core';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { GridBaseAPIService } from '../api.service';
import { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';
import { IgxRowIslandComponent } from './row-island.component';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { IDisplayDensityOptions } from '../../core/displayDensity';
import { IgxOverlayService, IgxTransactionService, Transaction, TransactionService, State } from '../../services/public_api';
import { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';
import { IgxGridSummaryService } from '../summaries/grid-summary.service';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { IgxChildGridRowComponent } from './child-grid-row.component';
import { IgxColumnResizingService } from '../resizing/resizing.service';
import { GridType } from '../common/grid.interface';
import { IgxColumnGroupComponent } from '../columns/column-group.component';
import { IgxColumnComponent } from '../columns/column.component';
import * as ɵngcc0 from '@angular/core';
export declare const IgxHierarchicalTransactionServiceFactory: {
    provide: import("@angular/core").InjectionToken<string>;
    useFactory: typeof hierarchicalTransactionServiceFactory;
};
export declare function hierarchicalTransactionServiceFactory(): IgxTransactionService<Transaction, State>;
export interface IPathSegment {
    rowID: any;
    rowIslandKey: string;
}
export declare class IgxHierarchicalGridBaseDirective extends IgxGridBaseDirective {
    selectionService: IgxGridSelectionService;
    colResizingService: IgxColumnResizingService;
    protected transactionFactory: TransactionService<Transaction, State>;
    document: any;
    protected overlayService: IgxOverlayService;
    summaryService: IgxGridSummaryService;
    protected _displayDensityOptions: IDisplayDensityOptions;
    rootGrid: any;
    expandChildren: boolean;
    hasChildrenKey: string;
    showExpandAll: boolean;
    /**
     * @hidden
     */
    get maxLevelHeaderDepth(): any;
    /**
     * @hidden
     */
    protected get outlet(): any;
    /**
     * @hidden
     */
    hgridAPI: IgxHierarchicalGridAPIService;
    /**
     * @hidden
     */
    parentIsland: IgxRowIslandComponent;
    /**
     * @hidden
     */
    childRow: IgxChildGridRowComponent;
    /**
     * @hidden
     * @internal
     */
    dragIndicatorIconBase: TemplateRef<any>;
    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, colResizingService: IgxColumnResizingService, gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, transactionFactory: TransactionService<Transaction, State>, elementRef: ElementRef, zone: NgZone, document: any, cdr: ChangeDetectorRef, resolver: ComponentFactoryResolver, differs: IterableDiffers, viewRef: ViewContainerRef, navigation: IgxHierarchicalGridNavigationService, filteringService: IgxFilteringService, overlayService: IgxOverlayService, summaryService: IgxGridSummaryService, _displayDensityOptions: IDisplayDensityOptions);
    /**
     * @hidden
     */
    createColumnsList(cols: Array<any>): void;
    protected _createColumn(col: any): any;
    protected _createColGroupComponent(col: IgxColumnGroupComponent): import("@angular/core").ComponentRef<IgxColumnGroupComponent>;
    protected _createColComponent(col: any): import("@angular/core").ComponentRef<IgxColumnComponent>;
    protected getGridsForIsland(rowIslandID: string): import("./hierarchical-grid.component").IgxHierarchicalGridComponent[];
    protected getChildGrid(path: Array<IPathSegment>): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxHierarchicalGridBaseDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxHierarchicalGridBaseDirective, "[igxHierarchicalGridBase]", never, {
    "showExpandAll": "showExpandAll";
    "expandChildren": "expandChildren";
    "hasChildrenKey": "hasChildrenKey";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLWdyaWQtYmFzZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiaGllcmFyY2hpY2FsLWdyaWQtYmFzZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgTmdab25lLCBDaGFuZ2VEZXRlY3RvclJlZiwgSXRlcmFibGVEaWZmZXJzLCBWaWV3Q29udGFpbmVyUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4uL2dyaWQtYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgR3JpZEJhc2VBUElTZXJ2aWNlIH0gZnJvbSAnLi4vYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWd4SGllcmFyY2hpY2FsR3JpZEFQSVNlcnZpY2UgfSBmcm9tICcuL2hpZXJhcmNoaWNhbC1ncmlkLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IElneFJvd0lzbGFuZENvbXBvbmVudCB9IGZyb20gJy4vcm93LWlzbGFuZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4RmlsdGVyaW5nU2VydmljZSB9IGZyb20gJy4uL2ZpbHRlcmluZy9ncmlkLWZpbHRlcmluZy5zZXJ2aWNlJztcbmltcG9ydCB7IElEaXNwbGF5RGVuc2l0eU9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb3JlL2Rpc3BsYXlEZW5zaXR5JztcbmltcG9ydCB7IElneE92ZXJsYXlTZXJ2aWNlLCBJZ3hUcmFuc2FjdGlvblNlcnZpY2UsIFRyYW5zYWN0aW9uLCBUcmFuc2FjdGlvblNlcnZpY2UsIFN0YXRlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvcHVibGljX2FwaSc7XG5pbXBvcnQgeyBJZ3hIaWVyYXJjaGljYWxHcmlkTmF2aWdhdGlvblNlcnZpY2UgfSBmcm9tICcuL2hpZXJhcmNoaWNhbC1ncmlkLW5hdmlnYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hHcmlkU3VtbWFyeVNlcnZpY2UgfSBmcm9tICcuLi9zdW1tYXJpZXMvZ3JpZC1zdW1tYXJ5LnNlcnZpY2UnO1xuaW1wb3J0IHsgSWd4R3JpZFNlbGVjdGlvblNlcnZpY2UsIElneEdyaWRDUlVEU2VydmljZSB9IGZyb20gJy4uL3NlbGVjdGlvbi9zZWxlY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hDaGlsZEdyaWRSb3dDb21wb25lbnQgfSBmcm9tICcuL2NoaWxkLWdyaWQtcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5SZXNpemluZ1NlcnZpY2UgfSBmcm9tICcuLi9yZXNpemluZy9yZXNpemluZy5zZXJ2aWNlJztcbmltcG9ydCB7IEdyaWRUeXBlIH0gZnJvbSAnLi4vY29tbW9uL2dyaWQuaW50ZXJmYWNlJztcbmltcG9ydCB7IElneENvbHVtbkdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi4vY29sdW1ucy9jb2x1bW4tZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IElneENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4uL2NvbHVtbnMvY29sdW1uLmNvbXBvbmVudCc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBJZ3hIaWVyYXJjaGljYWxUcmFuc2FjdGlvblNlcnZpY2VGYWN0b3J5OiB7XG4gICAgcHJvdmlkZTogaW1wb3J0KFwiQGFuZ3VsYXIvY29yZVwiKS5JbmplY3Rpb25Ub2tlbjxzdHJpbmc+O1xuICAgIHVzZUZhY3Rvcnk6IHR5cGVvZiBoaWVyYXJjaGljYWxUcmFuc2FjdGlvblNlcnZpY2VGYWN0b3J5O1xufTtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGhpZXJhcmNoaWNhbFRyYW5zYWN0aW9uU2VydmljZUZhY3RvcnkoKTogSWd4VHJhbnNhY3Rpb25TZXJ2aWNlPFRyYW5zYWN0aW9uLCBTdGF0ZT47XG5leHBvcnQgaW50ZXJmYWNlIElQYXRoU2VnbWVudCB7XG4gICAgcm93SUQ6IGFueTtcbiAgICByb3dJc2xhbmRLZXk6IHN0cmluZztcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEhpZXJhcmNoaWNhbEdyaWRCYXNlRGlyZWN0aXZlIGV4dGVuZHMgSWd4R3JpZEJhc2VEaXJlY3RpdmUge1xuICAgIHNlbGVjdGlvblNlcnZpY2U6IElneEdyaWRTZWxlY3Rpb25TZXJ2aWNlO1xuICAgIGNvbFJlc2l6aW5nU2VydmljZTogSWd4Q29sdW1uUmVzaXppbmdTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCB0cmFuc2FjdGlvbkZhY3Rvcnk6IFRyYW5zYWN0aW9uU2VydmljZTxUcmFuc2FjdGlvbiwgU3RhdGU+O1xuICAgIGRvY3VtZW50OiBhbnk7XG4gICAgcHJvdGVjdGVkIG92ZXJsYXlTZXJ2aWNlOiBJZ3hPdmVybGF5U2VydmljZTtcbiAgICBzdW1tYXJ5U2VydmljZTogSWd4R3JpZFN1bW1hcnlTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBfZGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zO1xuICAgIHJvb3RHcmlkOiBhbnk7XG4gICAgZXhwYW5kQ2hpbGRyZW46IGJvb2xlYW47XG4gICAgaGFzQ2hpbGRyZW5LZXk6IHN0cmluZztcbiAgICBzaG93RXhwYW5kQWxsOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgbWF4TGV2ZWxIZWFkZXJEZXB0aCgpOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXQgb3V0bGV0KCk6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGdyaWRBUEk6IElneEhpZXJhcmNoaWNhbEdyaWRBUElTZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwYXJlbnRJc2xhbmQ6IElneFJvd0lzbGFuZENvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY2hpbGRSb3c6IElneENoaWxkR3JpZFJvd0NvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZHJhZ0luZGljYXRvckljb25CYXNlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdGlvblNlcnZpY2U6IElneEdyaWRTZWxlY3Rpb25TZXJ2aWNlLCBjcnVkU2VydmljZTogSWd4R3JpZENSVURTZXJ2aWNlLCBjb2xSZXNpemluZ1NlcnZpY2U6IElneENvbHVtblJlc2l6aW5nU2VydmljZSwgZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+LCB0cmFuc2FjdGlvbkZhY3Rvcnk6IFRyYW5zYWN0aW9uU2VydmljZTxUcmFuc2FjdGlvbiwgU3RhdGU+LCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUsIGRvY3VtZW50OiBhbnksIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywgdmlld1JlZjogVmlld0NvbnRhaW5lclJlZiwgbmF2aWdhdGlvbjogSWd4SGllcmFyY2hpY2FsR3JpZE5hdmlnYXRpb25TZXJ2aWNlLCBmaWx0ZXJpbmdTZXJ2aWNlOiBJZ3hGaWx0ZXJpbmdTZXJ2aWNlLCBvdmVybGF5U2VydmljZTogSWd4T3ZlcmxheVNlcnZpY2UsIHN1bW1hcnlTZXJ2aWNlOiBJZ3hHcmlkU3VtbWFyeVNlcnZpY2UsIF9kaXNwbGF5RGVuc2l0eU9wdGlvbnM6IElEaXNwbGF5RGVuc2l0eU9wdGlvbnMpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjcmVhdGVDb2x1bW5zTGlzdChjb2xzOiBBcnJheTxhbnk+KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgX2NyZWF0ZUNvbHVtbihjb2w6IGFueSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgX2NyZWF0ZUNvbEdyb3VwQ29tcG9uZW50KGNvbDogSWd4Q29sdW1uR3JvdXBDb21wb25lbnQpOiBpbXBvcnQoXCJAYW5ndWxhci9jb3JlXCIpLkNvbXBvbmVudFJlZjxJZ3hDb2x1bW5Hcm91cENvbXBvbmVudD47XG4gICAgcHJvdGVjdGVkIF9jcmVhdGVDb2xDb21wb25lbnQoY29sOiBhbnkpOiBpbXBvcnQoXCJAYW5ndWxhci9jb3JlXCIpLkNvbXBvbmVudFJlZjxJZ3hDb2x1bW5Db21wb25lbnQ+O1xuICAgIHByb3RlY3RlZCBnZXRHcmlkc0ZvcklzbGFuZChyb3dJc2xhbmRJRDogc3RyaW5nKTogaW1wb3J0KFwiLi9oaWVyYXJjaGljYWwtZ3JpZC5jb21wb25lbnRcIikuSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudFtdO1xuICAgIHByb3RlY3RlZCBnZXRDaGlsZEdyaWQocGF0aDogQXJyYXk8SVBhdGhTZWdtZW50Pik6IGFueTtcbn1cbiJdfQ==