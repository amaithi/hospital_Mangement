import { AfterViewInit, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { IgxColumnComponent } from '../../columns/column.component';
import { ExpressionUI } from '../grid-filtering.service';
import { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';
import { IgxDropDownComponent } from '../../../drop-down/public_api';
import { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/public_api';
import { IFilteringOperation } from '../../../data-operations/filtering-condition';
import { IBaseEventArgs } from '../../../core/utils';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { DisplayDensity } from '../../../core/density';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export interface ILogicOperatorChangedArgs extends IBaseEventArgs {
    target: ExpressionUI;
    newValue: FilteringLogic;
}
/**
 * @hidden
 */
export declare class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {
    cdr: ChangeDetectorRef;
    private _dropDownOverlaySettings;
    column: IgxColumnComponent;
    expressionUI: ExpressionUI;
    expressionsList: Array<ExpressionUI>;
    grid: any;
    displayDensity: DisplayDensity;
    onExpressionRemoved: EventEmitter<ExpressionUI>;
    onLogicOperatorChanged: EventEmitter<ILogicOperatorChangedArgs>;
    protected inputGroupConditions: IgxInputGroupComponent;
    protected inputValuesDirective: IgxInputDirective;
    protected dropdownConditions: IgxDropDownComponent;
    protected logicOperatorButtonGroup: IgxButtonGroupComponent;
    protected get inputValuesElement(): IgxInputDirective;
    get isLast(): boolean;
    get isSingle(): boolean;
    get inputConditionsPlaceholder(): string;
    get inputValuePlaceholder(): string;
    get type(): "text" | "number";
    constructor(cdr: ChangeDetectorRef);
    ngAfterViewInit(): void;
    focus(): void;
    isConditionSelected(conditionName: string): boolean;
    getConditionName(condition: IFilteringOperation): string;
    getInputWidth(): string;
    get conditions(): string[];
    translateCondition(value: string): string;
    getIconName(): string;
    toggleCustomDialogDropDown(): void;
    getCondition(value: string): IFilteringOperation;
    onConditionsChanged(eventArgs: any): void;
    onValuesInput(eventArgs: any): void;
    onLogicOperatorButtonClicked(eventArgs: any, buttonIndex: number): void;
    onLogicOperatorKeyDown(eventArgs: any, buttonIndex: number): void;
    onRemoveButtonClick(): void;
    onInputConditionsKeyDown(eventArgs: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxExcelStyleDefaultExpressionComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxExcelStyleDefaultExpressionComponent, "igx-excel-style-default-expression", never, {
    "column": "column";
    "expressionUI": "expressionUI";
    "expressionsList": "expressionsList";
    "grid": "grid";
    "displayDensity": "displayDensity";
}, {
    "onExpressionRemoved": "onExpressionRemoved";
    "onLogicOperatorChanged": "onLogicOperatorChanged";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtZGVmYXVsdC1leHByZXNzaW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJleGNlbC1zdHlsZS1kZWZhdWx0LWV4cHJlc3Npb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi8uLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRXhwcmVzc2lvblVJIH0gZnJvbSAnLi4vZ3JpZC1maWx0ZXJpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hCdXR0b25Hcm91cENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2J1dHRvbkdyb3VwL2J1dHRvbkdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hEcm9wRG93bkNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2Ryb3AtZG93bi9wdWJsaWNfYXBpJztcbmltcG9ydCB7IElneElucHV0R3JvdXBDb21wb25lbnQsIElneElucHV0RGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vaW5wdXQtZ3JvdXAvcHVibGljX2FwaSc7XG5pbXBvcnQgeyBJRmlsdGVyaW5nT3BlcmF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1jb25kaXRpb24nO1xuaW1wb3J0IHsgSUJhc2VFdmVudEFyZ3MgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3V0aWxzJztcbmltcG9ydCB7IEZpbHRlcmluZ0xvZ2ljIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEaXNwbGF5RGVuc2l0eSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZGVuc2l0eSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTG9naWNPcGVyYXRvckNoYW5nZWRBcmdzIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3Mge1xuICAgIHRhcmdldDogRXhwcmVzc2lvblVJO1xuICAgIG5ld1ZhbHVlOiBGaWx0ZXJpbmdMb2dpYztcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hFeGNlbFN0eWxlRGVmYXVsdEV4cHJlc3Npb25Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBjZHI6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIHByaXZhdGUgX2Ryb3BEb3duT3ZlcmxheVNldHRpbmdzO1xuICAgIGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50O1xuICAgIGV4cHJlc3Npb25VSTogRXhwcmVzc2lvblVJO1xuICAgIGV4cHJlc3Npb25zTGlzdDogQXJyYXk8RXhwcmVzc2lvblVJPjtcbiAgICBncmlkOiBhbnk7XG4gICAgZGlzcGxheURlbnNpdHk6IERpc3BsYXlEZW5zaXR5O1xuICAgIG9uRXhwcmVzc2lvblJlbW92ZWQ6IEV2ZW50RW1pdHRlcjxFeHByZXNzaW9uVUk+O1xuICAgIG9uTG9naWNPcGVyYXRvckNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxJTG9naWNPcGVyYXRvckNoYW5nZWRBcmdzPjtcbiAgICBwcm90ZWN0ZWQgaW5wdXRHcm91cENvbmRpdGlvbnM6IElneElucHV0R3JvdXBDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIGlucHV0VmFsdWVzRGlyZWN0aXZlOiBJZ3hJbnB1dERpcmVjdGl2ZTtcbiAgICBwcm90ZWN0ZWQgZHJvcGRvd25Db25kaXRpb25zOiBJZ3hEcm9wRG93bkNvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgbG9naWNPcGVyYXRvckJ1dHRvbkdyb3VwOiBJZ3hCdXR0b25Hcm91cENvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgZ2V0IGlucHV0VmFsdWVzRWxlbWVudCgpOiBJZ3hJbnB1dERpcmVjdGl2ZTtcbiAgICBnZXQgaXNMYXN0KCk6IGJvb2xlYW47XG4gICAgZ2V0IGlzU2luZ2xlKCk6IGJvb2xlYW47XG4gICAgZ2V0IGlucHV0Q29uZGl0aW9uc1BsYWNlaG9sZGVyKCk6IHN0cmluZztcbiAgICBnZXQgaW5wdXRWYWx1ZVBsYWNlaG9sZGVyKCk6IHN0cmluZztcbiAgICBnZXQgdHlwZSgpOiBcInRleHRcIiB8IFwibnVtYmVyXCI7XG4gICAgY29uc3RydWN0b3IoY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICBpc0NvbmRpdGlvblNlbGVjdGVkKGNvbmRpdGlvbk5hbWU6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgZ2V0Q29uZGl0aW9uTmFtZShjb25kaXRpb246IElGaWx0ZXJpbmdPcGVyYXRpb24pOiBzdHJpbmc7XG4gICAgZ2V0SW5wdXRXaWR0aCgpOiBzdHJpbmc7XG4gICAgZ2V0IGNvbmRpdGlvbnMoKTogc3RyaW5nW107XG4gICAgdHJhbnNsYXRlQ29uZGl0aW9uKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgZ2V0SWNvbk5hbWUoKTogc3RyaW5nO1xuICAgIHRvZ2dsZUN1c3RvbURpYWxvZ0Ryb3BEb3duKCk6IHZvaWQ7XG4gICAgZ2V0Q29uZGl0aW9uKHZhbHVlOiBzdHJpbmcpOiBJRmlsdGVyaW5nT3BlcmF0aW9uO1xuICAgIG9uQ29uZGl0aW9uc0NoYW5nZWQoZXZlbnRBcmdzOiBhbnkpOiB2b2lkO1xuICAgIG9uVmFsdWVzSW5wdXQoZXZlbnRBcmdzOiBhbnkpOiB2b2lkO1xuICAgIG9uTG9naWNPcGVyYXRvckJ1dHRvbkNsaWNrZWQoZXZlbnRBcmdzOiBhbnksIGJ1dHRvbkluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIG9uTG9naWNPcGVyYXRvcktleURvd24oZXZlbnRBcmdzOiBhbnksIGJ1dHRvbkluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIG9uUmVtb3ZlQnV0dG9uQ2xpY2soKTogdm9pZDtcbiAgICBvbklucHV0Q29uZGl0aW9uc0tleURvd24oZXZlbnRBcmdzOiBhbnkpOiB2b2lkO1xufVxuIl19