import { OnDestroy, NgModuleRef } from '@angular/core';
import { IgxIconService } from '../../icon/icon.service';
import { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { IgxColumnComponent } from '../columns/column.component';
import { IFilteringOperation } from '../../data-operations/filtering-condition';
import { GridBaseAPIService } from '../api.service';
import { GridType } from '../common/grid.interface';
import { IgxDatePipeComponent } from '../common/pipes';
import { IgxOverlayService } from '../../services/overlay/overlay';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExpressionUI {
    expression: IFilteringExpression;
    beforeOperator: FilteringLogic;
    afterOperator: FilteringLogic;
    isSelected: boolean;
    isVisible: boolean;
}
/**
 * @hidden
 */
export declare class IgxFilteringService implements OnDestroy {
    private gridAPI;
    private _moduleRef;
    private iconService;
    private _overlayService;
    private columnsWithComplexFilter;
    private areEventsSubscribed;
    private destroy$;
    private isFiltering;
    private columnToExpressionsMap;
    private _datePipe;
    private columnStartIndex;
    private _filterIconsRegistered;
    private _componentOverlayId;
    private _filterMenuPositionSettings;
    private _filterMenuOverlaySettings;
    private column;
    isFilterRowVisible: boolean;
    filteredColumn: IgxColumnComponent;
    selectedExpression: IFilteringExpression;
    columnToMoreIconHidden: Map<string, boolean>;
    activeFilterCell: number;
    grid: IgxGridBaseDirective;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, _moduleRef: NgModuleRef<any>, iconService: IgxIconService, _overlayService: IgxOverlayService);
    ngOnDestroy(): void;
    toggleFilterDropdown(element: any, column: any, classRef: any): void;
    initFilteringSettings(): void;
    hideExcelFiltering(): void;
    get datePipe(): IgxDatePipeComponent;
    /**
     * Subscribe to grid's events.
     */
    subscribeToEvents(): void;
    /**
     * Close filtering row if a column is hidden.
     */
    hideFilteringRowOnColumnVisibilityChange(col: IgxColumnComponent): void;
    /**
     * Internal method to create expressionsTree and filter grid used in both filter modes.
     */
    filterInternal(field: string, expressions?: FilteringExpressionsTree | Array<ExpressionUI>): void;
    /**
     * Execute filtering on the grid.
     */
    filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree, ignoreCase?: boolean): void;
    /**
     * Clear the filter of a given column.
     */
    clearFilter(field: string): void;
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     */
    filterGlobal(value: any, condition: any, ignoreCase?: any): void;
    /**
     * Register filtering SVG icons in the icon service.
     */
    registerSVGIcons(): void;
    /**
     * Returns the ExpressionUI array for a given column.
     */
    getExpressions(columnId: string): ExpressionUI[];
    /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     */
    refreshExpressions(): void;
    /**
     * Remove an ExpressionUI for a given column.
     */
    removeExpression(columnId: string, indexToRemove: number): void;
    /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     */
    createSimpleFilteringTree(columnId: string, expressionUIList?: any): FilteringExpressionsTree;
    /**
     * Returns whether a complex filter is applied to a given column.
     */
    isFilterComplex(columnId: string): boolean;
    /**
     * Returns the string representation of the FilteringLogic operator.
     */
    getOperatorAsString(operator: FilteringLogic): any;
    /**
     * Generate the label of a chip from a given filtering expression.
     */
    getChipLabel(expression: IFilteringExpression): any;
    /**
     * Updates the content of a filterCell.
     */
    updateFilteringCell(column: IgxColumnComponent): void;
    get filteredData(): any[];
    private isFilteringTreeComplex;
    private getChildAndOperatorsCount;
    generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression, operator: FilteringLogic, expressionsUIs: ExpressionUI[]): void;
    private generateExpressionsListRecursive;
    isFilteringExpressionsTreeEmpty(expressionTree: IFilteringExpressionsTree): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxFilteringService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxFilteringService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1maWx0ZXJpbmcuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJncmlkLWZpbHRlcmluZy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlHQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSwgTmdNb2R1bGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEljb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vaWNvbi9pY29uLnNlcnZpY2UnO1xuaW1wb3J0IHsgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlLCBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIH0gZnJvbSAnLi4vLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9ucy10cmVlJztcbmltcG9ydCB7IElneEdyaWRCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZ3JpZC1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJRmlsdGVyaW5nRXhwcmVzc2lvbiwgRmlsdGVyaW5nTG9naWMgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWV4cHJlc3Npb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IElneENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4uL2NvbHVtbnMvY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJRmlsdGVyaW5nT3BlcmF0aW9uIH0gZnJvbSAnLi4vLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1jb25kaXRpb24nO1xuaW1wb3J0IHsgR3JpZEJhc2VBUElTZXJ2aWNlIH0gZnJvbSAnLi4vYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSWd4RGF0ZVBpcGVDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vcGlwZXMnO1xuaW1wb3J0IHsgSWd4T3ZlcmxheVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9vdmVybGF5L292ZXJsYXknO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEV4cHJlc3Npb25VSSB7XG4gICAgZXhwcmVzc2lvbjogSUZpbHRlcmluZ0V4cHJlc3Npb247XG4gICAgYmVmb3JlT3BlcmF0b3I6IEZpbHRlcmluZ0xvZ2ljO1xuICAgIGFmdGVyT3BlcmF0b3I6IEZpbHRlcmluZ0xvZ2ljO1xuICAgIGlzU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgaXNWaXNpYmxlOiBib29sZWFuO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEZpbHRlcmluZ1NlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZ3JpZEFQSTtcbiAgICBwcml2YXRlIF9tb2R1bGVSZWY7XG4gICAgcHJpdmF0ZSBpY29uU2VydmljZTtcbiAgICBwcml2YXRlIF9vdmVybGF5U2VydmljZTtcbiAgICBwcml2YXRlIGNvbHVtbnNXaXRoQ29tcGxleEZpbHRlcjtcbiAgICBwcml2YXRlIGFyZUV2ZW50c1N1YnNjcmliZWQ7XG4gICAgcHJpdmF0ZSBkZXN0cm95JDtcbiAgICBwcml2YXRlIGlzRmlsdGVyaW5nO1xuICAgIHByaXZhdGUgY29sdW1uVG9FeHByZXNzaW9uc01hcDtcbiAgICBwcml2YXRlIF9kYXRlUGlwZTtcbiAgICBwcml2YXRlIGNvbHVtblN0YXJ0SW5kZXg7XG4gICAgcHJpdmF0ZSBfZmlsdGVySWNvbnNSZWdpc3RlcmVkO1xuICAgIHByaXZhdGUgX2NvbXBvbmVudE92ZXJsYXlJZDtcbiAgICBwcml2YXRlIF9maWx0ZXJNZW51UG9zaXRpb25TZXR0aW5ncztcbiAgICBwcml2YXRlIF9maWx0ZXJNZW51T3ZlcmxheVNldHRpbmdzO1xuICAgIHByaXZhdGUgY29sdW1uO1xuICAgIGlzRmlsdGVyUm93VmlzaWJsZTogYm9vbGVhbjtcbiAgICBmaWx0ZXJlZENvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50O1xuICAgIHNlbGVjdGVkRXhwcmVzc2lvbjogSUZpbHRlcmluZ0V4cHJlc3Npb247XG4gICAgY29sdW1uVG9Nb3JlSWNvbkhpZGRlbjogTWFwPHN0cmluZywgYm9vbGVhbj47XG4gICAgYWN0aXZlRmlsdGVyQ2VsbDogbnVtYmVyO1xuICAgIGdyaWQ6IElneEdyaWRCYXNlRGlyZWN0aXZlO1xuICAgIGNvbnN0cnVjdG9yKGdyaWRBUEk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQmFzZURpcmVjdGl2ZSAmIEdyaWRUeXBlPiwgX21vZHVsZVJlZjogTmdNb2R1bGVSZWY8YW55PiwgaWNvblNlcnZpY2U6IElneEljb25TZXJ2aWNlLCBfb3ZlcmxheVNlcnZpY2U6IElneE92ZXJsYXlTZXJ2aWNlKTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHRvZ2dsZUZpbHRlckRyb3Bkb3duKGVsZW1lbnQ6IGFueSwgY29sdW1uOiBhbnksIGNsYXNzUmVmOiBhbnkpOiB2b2lkO1xuICAgIGluaXRGaWx0ZXJpbmdTZXR0aW5ncygpOiB2b2lkO1xuICAgIGhpZGVFeGNlbEZpbHRlcmluZygpOiB2b2lkO1xuICAgIGdldCBkYXRlUGlwZSgpOiBJZ3hEYXRlUGlwZUNvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gZ3JpZCdzIGV2ZW50cy5cbiAgICAgKi9cbiAgICBzdWJzY3JpYmVUb0V2ZW50cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENsb3NlIGZpbHRlcmluZyByb3cgaWYgYSBjb2x1bW4gaXMgaGlkZGVuLlxuICAgICAqL1xuICAgIGhpZGVGaWx0ZXJpbmdSb3dPbkNvbHVtblZpc2liaWxpdHlDaGFuZ2UoY29sOiBJZ3hDb2x1bW5Db21wb25lbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEludGVybmFsIG1ldGhvZCB0byBjcmVhdGUgZXhwcmVzc2lvbnNUcmVlIGFuZCBmaWx0ZXIgZ3JpZCB1c2VkIGluIGJvdGggZmlsdGVyIG1vZGVzLlxuICAgICAqL1xuICAgIGZpbHRlckludGVybmFsKGZpZWxkOiBzdHJpbmcsIGV4cHJlc3Npb25zPzogRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIHwgQXJyYXk8RXhwcmVzc2lvblVJPik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBmaWx0ZXJpbmcgb24gdGhlIGdyaWQuXG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBhbnksIGNvbmRpdGlvbk9yRXhwcmVzc2lvblRyZWU/OiBJRmlsdGVyaW5nT3BlcmF0aW9uIHwgSUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSwgaWdub3JlQ2FzZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBmaWx0ZXIgb2YgYSBnaXZlbiBjb2x1bW4uXG4gICAgICovXG4gICAgY2xlYXJGaWx0ZXIoZmllbGQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRmlsdGVycyBhbGwgdGhlIGBJZ3hDb2x1bW5Db21wb25lbnRgIGluIHRoZSBgSWd4R3JpZENvbXBvbmVudGAgd2l0aCB0aGUgc2FtZSBjb25kaXRpb24uXG4gICAgICovXG4gICAgZmlsdGVyR2xvYmFsKHZhbHVlOiBhbnksIGNvbmRpdGlvbjogYW55LCBpZ25vcmVDYXNlPzogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBmaWx0ZXJpbmcgU1ZHIGljb25zIGluIHRoZSBpY29uIHNlcnZpY2UuXG4gICAgICovXG4gICAgcmVnaXN0ZXJTVkdJY29ucygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIEV4cHJlc3Npb25VSSBhcnJheSBmb3IgYSBnaXZlbiBjb2x1bW4uXG4gICAgICovXG4gICAgZ2V0RXhwcmVzc2lvbnMoY29sdW1uSWQ6IHN0cmluZyk6IEV4cHJlc3Npb25VSVtdO1xuICAgIC8qKlxuICAgICAqIFJlY3JlYXRlcyBhbGwgRXhwcmVzc2lvblVJcyBmb3IgYWxsIGNvbHVtbnMuIEV4ZWN1dGVkIGFmdGVyIGZpbHRlcmluZyB0byByZWZyZXNoIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICByZWZyZXNoRXhwcmVzc2lvbnMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gRXhwcmVzc2lvblVJIGZvciBhIGdpdmVuIGNvbHVtbi5cbiAgICAgKi9cbiAgICByZW1vdmVFeHByZXNzaW9uKGNvbHVtbklkOiBzdHJpbmcsIGluZGV4VG9SZW1vdmU6IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgZmlsdGVyaW5nIHRyZWUgZm9yIGEgZ2l2ZW4gY29sdW1uIGZyb20gZXhpc3RpbmcgRXhwcmVzc2lvblVJcy5cbiAgICAgKi9cbiAgICBjcmVhdGVTaW1wbGVGaWx0ZXJpbmdUcmVlKGNvbHVtbklkOiBzdHJpbmcsIGV4cHJlc3Npb25VSUxpc3Q/OiBhbnkpOiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWU7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgY29tcGxleCBmaWx0ZXIgaXMgYXBwbGllZCB0byBhIGdpdmVuIGNvbHVtbi5cbiAgICAgKi9cbiAgICBpc0ZpbHRlckNvbXBsZXgoY29sdW1uSWQ6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBGaWx0ZXJpbmdMb2dpYyBvcGVyYXRvci5cbiAgICAgKi9cbiAgICBnZXRPcGVyYXRvckFzU3RyaW5nKG9wZXJhdG9yOiBGaWx0ZXJpbmdMb2dpYyk6IGFueTtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSB0aGUgbGFiZWwgb2YgYSBjaGlwIGZyb20gYSBnaXZlbiBmaWx0ZXJpbmcgZXhwcmVzc2lvbi5cbiAgICAgKi9cbiAgICBnZXRDaGlwTGFiZWwoZXhwcmVzc2lvbjogSUZpbHRlcmluZ0V4cHJlc3Npb24pOiBhbnk7XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY29udGVudCBvZiBhIGZpbHRlckNlbGwuXG4gICAgICovXG4gICAgdXBkYXRlRmlsdGVyaW5nQ2VsbChjb2x1bW46IElneENvbHVtbkNvbXBvbmVudCk6IHZvaWQ7XG4gICAgZ2V0IGZpbHRlcmVkRGF0YSgpOiBhbnlbXTtcbiAgICBwcml2YXRlIGlzRmlsdGVyaW5nVHJlZUNvbXBsZXg7XG4gICAgcHJpdmF0ZSBnZXRDaGlsZEFuZE9wZXJhdG9yc0NvdW50O1xuICAgIGdlbmVyYXRlRXhwcmVzc2lvbnNMaXN0KGV4cHJlc3Npb25zOiBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIHwgSUZpbHRlcmluZ0V4cHJlc3Npb24sIG9wZXJhdG9yOiBGaWx0ZXJpbmdMb2dpYywgZXhwcmVzc2lvbnNVSXM6IEV4cHJlc3Npb25VSVtdKTogdm9pZDtcbiAgICBwcml2YXRlIGdlbmVyYXRlRXhwcmVzc2lvbnNMaXN0UmVjdXJzaXZlO1xuICAgIGlzRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlRW1wdHkoZXhwcmVzc2lvblRyZWU6IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUpOiBib29sZWFuO1xufVxuIl19