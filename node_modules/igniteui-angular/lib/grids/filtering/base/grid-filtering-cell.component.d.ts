import { ChangeDetectorRef, TemplateRef, AfterViewInit, ElementRef, OnInit, DoCheck } from '@angular/core';
import { IgxColumnComponent } from '../../columns/column.component';
import { IFilteringExpression } from '../../../data-operations/filtering-expression.interface';
import { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../../chips/public_api';
import { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {
    cdr: ChangeDetectorRef;
    filteringService: IgxFilteringService;
    private baseClass;
    expressionsList: ExpressionUI[];
    moreFiltersCount: number;
    column: IgxColumnComponent;
    protected emptyFilter: TemplateRef<any>;
    protected defaultFilter: TemplateRef<any>;
    protected complexFilter: TemplateRef<any>;
    protected chipsArea: IgxChipsAreaComponent;
    protected moreIcon: ElementRef;
    protected ghostChip: IgxChipComponent;
    protected complexChip: IgxChipComponent;
    get styleClasses(): string;
    constructor(cdr: ChangeDetectorRef, filteringService: IgxFilteringService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    /**
     * Returns whether a chip with a given index is visible or not.
     */
    isChipVisible(index: number): boolean;
    /**
     * Updates the filtering cell area.
     */
    updateFilterCellArea(): void;
    get template(): TemplateRef<any>;
    /**
     * Gets the context passed to the filter template.
     * @memberof IgxGridFilteringCellComponent
     */
    get context(): {
        column: IgxColumnComponent;
    };
    /**
     * Chip clicked event handler.
     */
    onChipClicked(expression?: IFilteringExpression): void;
    /**
     * Chip removed event handler.
     */
    onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void;
    /**
     * Clears the filtering.
     */
    clearFiltering(): void;
    /**
     * Returns the filtering indicator class.
     */
    filteringIndicatorClass(): {
        [x: string]: boolean;
    };
    private removeExpression;
    private isMoreIconHidden;
    private updateVisibleFilters;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridFilteringCellComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxGridFilteringCellComponent, "igx-grid-filtering-cell", never, {
    "column": "column";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1maWx0ZXJpbmctY2VsbC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZ3JpZC1maWx0ZXJpbmctY2VsbC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBUZW1wbGF0ZVJlZiwgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgT25Jbml0LCBEb0NoZWNrIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi8uLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgSUZpbHRlcmluZ0V4cHJlc3Npb24gfSBmcm9tICcuLi8uLi8uLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWV4cHJlc3Npb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IElCYXNlQ2hpcEV2ZW50QXJncywgSWd4Q2hpcHNBcmVhQ29tcG9uZW50LCBJZ3hDaGlwQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vY2hpcHMvcHVibGljX2FwaSc7XG5pbXBvcnQgeyBJZ3hGaWx0ZXJpbmdTZXJ2aWNlLCBFeHByZXNzaW9uVUkgfSBmcm9tICcuLi9ncmlkLWZpbHRlcmluZy5zZXJ2aWNlJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hHcmlkRmlsdGVyaW5nQ2VsbENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uSW5pdCwgRG9DaGVjayB7XG4gICAgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBmaWx0ZXJpbmdTZXJ2aWNlOiBJZ3hGaWx0ZXJpbmdTZXJ2aWNlO1xuICAgIHByaXZhdGUgYmFzZUNsYXNzO1xuICAgIGV4cHJlc3Npb25zTGlzdDogRXhwcmVzc2lvblVJW107XG4gICAgbW9yZUZpbHRlcnNDb3VudDogbnVtYmVyO1xuICAgIGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBlbXB0eUZpbHRlcjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgZGVmYXVsdEZpbHRlcjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgY29tcGxleEZpbHRlcjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgY2hpcHNBcmVhOiBJZ3hDaGlwc0FyZWFDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIG1vcmVJY29uOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBnaG9zdENoaXA6IElneENoaXBDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIGNvbXBsZXhDaGlwOiBJZ3hDaGlwQ29tcG9uZW50O1xuICAgIGdldCBzdHlsZUNsYXNzZXMoKTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGZpbHRlcmluZ1NlcnZpY2U6IElneEZpbHRlcmluZ1NlcnZpY2UpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgY2hpcCB3aXRoIGEgZ2l2ZW4gaW5kZXggaXMgdmlzaWJsZSBvciBub3QuXG4gICAgICovXG4gICAgaXNDaGlwVmlzaWJsZShpbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBmaWx0ZXJpbmcgY2VsbCBhcmVhLlxuICAgICAqL1xuICAgIHVwZGF0ZUZpbHRlckNlbGxBcmVhKCk6IHZvaWQ7XG4gICAgZ2V0IHRlbXBsYXRlKCk6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY29udGV4dCBwYXNzZWQgdG8gdGhlIGZpbHRlciB0ZW1wbGF0ZS5cbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEZpbHRlcmluZ0NlbGxDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgY29udGV4dCgpOiB7XG4gICAgICAgIGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hpcCBjbGlja2VkIGV2ZW50IGhhbmRsZXIuXG4gICAgICovXG4gICAgb25DaGlwQ2xpY2tlZChleHByZXNzaW9uPzogSUZpbHRlcmluZ0V4cHJlc3Npb24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENoaXAgcmVtb3ZlZCBldmVudCBoYW5kbGVyLlxuICAgICAqL1xuICAgIG9uQ2hpcFJlbW92ZWQoZXZlbnRBcmdzOiBJQmFzZUNoaXBFdmVudEFyZ3MsIGl0ZW06IEV4cHJlc3Npb25VSSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBmaWx0ZXJpbmcuXG4gICAgICovXG4gICAgY2xlYXJGaWx0ZXJpbmcoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBmaWx0ZXJpbmcgaW5kaWNhdG9yIGNsYXNzLlxuICAgICAqL1xuICAgIGZpbHRlcmluZ0luZGljYXRvckNsYXNzKCk6IHtcbiAgICAgICAgW3g6IHN0cmluZ106IGJvb2xlYW47XG4gICAgfTtcbiAgICBwcml2YXRlIHJlbW92ZUV4cHJlc3Npb247XG4gICAgcHJpdmF0ZSBpc01vcmVJY29uSGlkZGVuO1xuICAgIHByaXZhdGUgdXBkYXRlVmlzaWJsZUZpbHRlcnM7XG59XG4iXX0=