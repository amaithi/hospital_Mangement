import { AfterViewInit, ChangeDetectorRef, TemplateRef, QueryList, ElementRef } from '@angular/core';
import { IgxColumnComponent } from '../../columns/column.component';
import { IgxDropDownComponent, ISelectionEventArgs } from '../../../drop-down/public_api';
import { IFilteringOperation } from '../../../data-operations/filtering-condition';
import { IFilteringExpression } from '../../../data-operations/filtering-expression.interface';
import { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../../chips/public_api';
import { ExpressionUI } from '../grid-filtering.service';
import { IgxFilteringService } from '../grid-filtering.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxGridFilteringRowComponent implements AfterViewInit {
    filteringService: IgxFilteringService;
    element: ElementRef;
    cdr: ChangeDetectorRef;
    private _positionSettings;
    private _conditionsOverlaySettings;
    private _operatorsOverlaySettings;
    private chipsAreaWidth;
    private chipAreaScrollOffset;
    private _column;
    private isKeyPressed;
    private isComposing;
    private _cancelChipClick;
    showArrows: boolean;
    expression: IFilteringExpression;
    expressionsList: Array<ExpressionUI>;
    get column(): IgxColumnComponent;
    set column(val: IgxColumnComponent);
    get value(): any;
    set value(val: any);
    protected defaultFilterUI: TemplateRef<any>;
    protected defaultDateUI: TemplateRef<any>;
    protected input: ElementRef;
    protected dropDownConditions: IgxDropDownComponent;
    protected chipsArea: IgxChipsAreaComponent;
    protected dropDownOperators: QueryList<IgxDropDownComponent>;
    protected inputGroup: ElementRef;
    protected inputGroupPrefix: ElementRef;
    protected container: ElementRef;
    protected operand: ElementRef;
    closeButton: ElementRef;
    cssClass: string;
    constructor(filteringService: IgxFilteringService, element: ElementRef, cdr: ChangeDetectorRef);
    ngAfterViewInit(): void;
    onEscHandler(evt: any): void;
    get disabled(): boolean;
    get template(): TemplateRef<any>;
    get type(): "text" | "number";
    get conditions(): any;
    get isUnaryCondition(): boolean;
    get placeholder(): string;
    /**
     * Event handler for keydown on the input group's prefix.
     */
    onPrefixKeyDown(event: KeyboardEvent): void;
    /**
     * Event handler for keydown on the input.
     */
    onInputKeyDown(event: KeyboardEvent): void;
    /**
     * Event handler for keyup on the input.
     */
    onInputKeyUp(eventArgs: any): void;
    /**
     * Event handler for input on the input.
     */
    onInput(eventArgs: any): void;
    /**
     * Event handler for compositionstart on the input.
     */
    onCompositionStart(): void;
    /**
     * Event handler for compositionend on the input.
     */
    onCompositionEnd(): void;
    /**
     * Event handler for input click event.
     */
    onInputClick(): void;
    /**
     * Event handler for datepicker's close.
     */
    datePickerClose(): void;
    /**
     * Returns the filtering operation condition for a given value.
     */
    getCondition(value: string): IFilteringOperation;
    /**
     * Returns the translated condition name for a given value.
     */
    translateCondition(value: string): string;
    /**
     * Returns the icon name of the current condition.
     */
    getIconName(): string;
    /**
     * Returns whether a given condition is selected in dropdown.
     */
    isConditionSelected(conditionName: string): boolean;
    /**
     * Clears the current filtering.
     */
    clearFiltering(): void;
    /**
     * Commits the value of the input.
     */
    commitInput(): void;
    /**
     * Clears the value of the input.
     */
    clearInput(): void;
    /**
     * Event handler for keydown on clear button.
     */
    onClearKeyDown(eventArgs: KeyboardEvent): void;
    /**
     * Event handler for click on clear button.
     */
    onClearClick(): void;
    /**
     * Event handler for keydown on commit button.
     */
    onCommitKeyDown(eventArgs: KeyboardEvent): void;
    /**
     * Event handler for click on commit button.
     */
    onCommitClick(): void;
    /**
     * Event handler for focusout on the input group.
     */
    onInputGroupFocusout(): void;
    /**
     * Closes the filtering edit row.
     */
    close(): void;
    noop(): void;
    /**
     *  Event handler for date picker's selection.
     */
    onDateSelected(value: Date): void;
    /** @hidden @internal */
    inputGroupPrefixClick(event: MouseEvent): void;
    /**
     * Opens the conditions dropdown.
     */
    toggleConditionsDropDown(target: any): void;
    /**
     * Opens the logic operators dropdown.
     */
    toggleOperatorsDropDown(eventArgs: any, index: any): void;
    /**
     * Event handler for change event in conditions dropdown.
     */
    onConditionsChanged(eventArgs: any): void;
    onChipPointerdown(args: any, chip: IgxChipComponent): void;
    onChipClick(args: any, item: ExpressionUI): void;
    toggleChip(item: ExpressionUI): void;
    /**
     * Event handler for chip keydown event.
     */
    onChipKeyDown(eventArgs: KeyboardEvent, item: ExpressionUI): void;
    /**
     * Scrolls the first chip into view if the tab key is pressed on the left arrow.
     */
    onLeftArrowKeyDown(event: any): void;
    /**
     * Event handler for chip removed event.
     */
    onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void;
    /**
     * Event handler for logic operator changed event.
     */
    onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI): void;
    /**
     * Scrolls the chips into the chip area when left or right arrows are pressed.
     */
    scrollChipsOnArrowPress(arrowPosition: string): void;
    private showHideArrowButtons;
    private addExpression;
    private removeExpression;
    private resetExpression;
    private scrollChipsWhenAddingExpression;
    /**
     * @hidden
     * Resets the chips area
     * @memberof IgxGridFilteringRowComponent
     */
    resetChipsArea(): void;
    private transform;
    private scrollChipsOnRemove;
    private conditionChangedCallback;
    private unaryConditionChangedCallback;
    private filter;
    private get isColumnFiltered();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridFilteringRowComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxGridFilteringRowComponent, "igx-grid-filtering-row", never, {
    "column": "column";
    "value": "value";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1maWx0ZXJpbmctcm93LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJncmlkLWZpbHRlcmluZy1yb3cuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3TEEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgVGVtcGxhdGVSZWYsIFF1ZXJ5TGlzdCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IElneERyb3BEb3duQ29tcG9uZW50LCBJU2VsZWN0aW9uRXZlbnRBcmdzIH0gZnJvbSAnLi4vLi4vLi4vZHJvcC1kb3duL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgSUZpbHRlcmluZ09wZXJhdGlvbiB9IGZyb20gJy4uLy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9maWx0ZXJpbmctY29uZGl0aW9uJztcbmltcG9ydCB7IElGaWx0ZXJpbmdFeHByZXNzaW9uIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJQmFzZUNoaXBFdmVudEFyZ3MsIElneENoaXBzQXJlYUNvbXBvbmVudCwgSWd4Q2hpcENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2NoaXBzL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgRXhwcmVzc2lvblVJIH0gZnJvbSAnLi4vZ3JpZC1maWx0ZXJpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hGaWx0ZXJpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vZ3JpZC1maWx0ZXJpbmcuc2VydmljZSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4R3JpZEZpbHRlcmluZ1Jvd0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIGZpbHRlcmluZ1NlcnZpY2U6IElneEZpbHRlcmluZ1NlcnZpY2U7XG4gICAgZWxlbWVudDogRWxlbWVudFJlZjtcbiAgICBjZHI6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIHByaXZhdGUgX3Bvc2l0aW9uU2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBfY29uZGl0aW9uc092ZXJsYXlTZXR0aW5ncztcbiAgICBwcml2YXRlIF9vcGVyYXRvcnNPdmVybGF5U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBjaGlwc0FyZWFXaWR0aDtcbiAgICBwcml2YXRlIGNoaXBBcmVhU2Nyb2xsT2Zmc2V0O1xuICAgIHByaXZhdGUgX2NvbHVtbjtcbiAgICBwcml2YXRlIGlzS2V5UHJlc3NlZDtcbiAgICBwcml2YXRlIGlzQ29tcG9zaW5nO1xuICAgIHByaXZhdGUgX2NhbmNlbENoaXBDbGljaztcbiAgICBzaG93QXJyb3dzOiBib29sZWFuO1xuICAgIGV4cHJlc3Npb246IElGaWx0ZXJpbmdFeHByZXNzaW9uO1xuICAgIGV4cHJlc3Npb25zTGlzdDogQXJyYXk8RXhwcmVzc2lvblVJPjtcbiAgICBnZXQgY29sdW1uKCk6IElneENvbHVtbkNvbXBvbmVudDtcbiAgICBzZXQgY29sdW1uKHZhbDogSWd4Q29sdW1uQ29tcG9uZW50KTtcbiAgICBnZXQgdmFsdWUoKTogYW55O1xuICAgIHNldCB2YWx1ZSh2YWw6IGFueSk7XG4gICAgcHJvdGVjdGVkIGRlZmF1bHRGaWx0ZXJVSTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgZGVmYXVsdERhdGVVSTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgaW5wdXQ6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIGRyb3BEb3duQ29uZGl0aW9uczogSWd4RHJvcERvd25Db21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIGNoaXBzQXJlYTogSWd4Q2hpcHNBcmVhQ29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBkcm9wRG93bk9wZXJhdG9yczogUXVlcnlMaXN0PElneERyb3BEb3duQ29tcG9uZW50PjtcbiAgICBwcm90ZWN0ZWQgaW5wdXRHcm91cDogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgaW5wdXRHcm91cFByZWZpeDogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgY29udGFpbmVyOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBvcGVyYW5kOiBFbGVtZW50UmVmO1xuICAgIGNsb3NlQnV0dG9uOiBFbGVtZW50UmVmO1xuICAgIGNzc0NsYXNzOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoZmlsdGVyaW5nU2VydmljZTogSWd4RmlsdGVyaW5nU2VydmljZSwgZWxlbWVudDogRWxlbWVudFJlZiwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgb25Fc2NIYW5kbGVyKGV2dDogYW55KTogdm9pZDtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBnZXQgdGVtcGxhdGUoKTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBnZXQgdHlwZSgpOiBcInRleHRcIiB8IFwibnVtYmVyXCI7XG4gICAgZ2V0IGNvbmRpdGlvbnMoKTogYW55O1xuICAgIGdldCBpc1VuYXJ5Q29uZGl0aW9uKCk6IGJvb2xlYW47XG4gICAgZ2V0IHBsYWNlaG9sZGVyKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBrZXlkb3duIG9uIHRoZSBpbnB1dCBncm91cCdzIHByZWZpeC5cbiAgICAgKi9cbiAgICBvblByZWZpeEtleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIGtleWRvd24gb24gdGhlIGlucHV0LlxuICAgICAqL1xuICAgIG9uSW5wdXRLZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBrZXl1cCBvbiB0aGUgaW5wdXQuXG4gICAgICovXG4gICAgb25JbnB1dEtleVVwKGV2ZW50QXJnczogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBpbnB1dCBvbiB0aGUgaW5wdXQuXG4gICAgICovXG4gICAgb25JbnB1dChldmVudEFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgY29tcG9zaXRpb25zdGFydCBvbiB0aGUgaW5wdXQuXG4gICAgICovXG4gICAgb25Db21wb3NpdGlvblN0YXJ0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgY29tcG9zaXRpb25lbmQgb24gdGhlIGlucHV0LlxuICAgICAqL1xuICAgIG9uQ29tcG9zaXRpb25FbmQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBpbnB1dCBjbGljayBldmVudC5cbiAgICAgKi9cbiAgICBvbklucHV0Q2xpY2soKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBkYXRlcGlja2VyJ3MgY2xvc2UuXG4gICAgICovXG4gICAgZGF0ZVBpY2tlckNsb3NlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZmlsdGVyaW5nIG9wZXJhdGlvbiBjb25kaXRpb24gZm9yIGEgZ2l2ZW4gdmFsdWUuXG4gICAgICovXG4gICAgZ2V0Q29uZGl0aW9uKHZhbHVlOiBzdHJpbmcpOiBJRmlsdGVyaW5nT3BlcmF0aW9uO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRyYW5zbGF0ZWQgY29uZGl0aW9uIG5hbWUgZm9yIGEgZ2l2ZW4gdmFsdWUuXG4gICAgICovXG4gICAgdHJhbnNsYXRlQ29uZGl0aW9uKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaWNvbiBuYW1lIG9mIHRoZSBjdXJyZW50IGNvbmRpdGlvbi5cbiAgICAgKi9cbiAgICBnZXRJY29uTmFtZSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgZ2l2ZW4gY29uZGl0aW9uIGlzIHNlbGVjdGVkIGluIGRyb3Bkb3duLlxuICAgICAqL1xuICAgIGlzQ29uZGl0aW9uU2VsZWN0ZWQoY29uZGl0aW9uTmFtZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGN1cnJlbnQgZmlsdGVyaW5nLlxuICAgICAqL1xuICAgIGNsZWFyRmlsdGVyaW5nKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ29tbWl0cyB0aGUgdmFsdWUgb2YgdGhlIGlucHV0LlxuICAgICAqL1xuICAgIGNvbW1pdElucHV0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQuXG4gICAgICovXG4gICAgY2xlYXJJbnB1dCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIGtleWRvd24gb24gY2xlYXIgYnV0dG9uLlxuICAgICAqL1xuICAgIG9uQ2xlYXJLZXlEb3duKGV2ZW50QXJnczogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgY2xpY2sgb24gY2xlYXIgYnV0dG9uLlxuICAgICAqL1xuICAgIG9uQ2xlYXJDbGljaygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIGtleWRvd24gb24gY29tbWl0IGJ1dHRvbi5cbiAgICAgKi9cbiAgICBvbkNvbW1pdEtleURvd24oZXZlbnRBcmdzOiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBjbGljayBvbiBjb21taXQgYnV0dG9uLlxuICAgICAqL1xuICAgIG9uQ29tbWl0Q2xpY2soKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBmb2N1c291dCBvbiB0aGUgaW5wdXQgZ3JvdXAuXG4gICAgICovXG4gICAgb25JbnB1dEdyb3VwRm9jdXNvdXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIGZpbHRlcmluZyBlZGl0IHJvdy5cbiAgICAgKi9cbiAgICBjbG9zZSgpOiB2b2lkO1xuICAgIG5vb3AoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiAgRXZlbnQgaGFuZGxlciBmb3IgZGF0ZSBwaWNrZXIncyBzZWxlY3Rpb24uXG4gICAgICovXG4gICAgb25EYXRlU2VsZWN0ZWQodmFsdWU6IERhdGUpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIGlucHV0R3JvdXBQcmVmaXhDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIGNvbmRpdGlvbnMgZHJvcGRvd24uXG4gICAgICovXG4gICAgdG9nZ2xlQ29uZGl0aW9uc0Ryb3BEb3duKHRhcmdldDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgbG9naWMgb3BlcmF0b3JzIGRyb3Bkb3duLlxuICAgICAqL1xuICAgIHRvZ2dsZU9wZXJhdG9yc0Ryb3BEb3duKGV2ZW50QXJnczogYW55LCBpbmRleDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBjaGFuZ2UgZXZlbnQgaW4gY29uZGl0aW9ucyBkcm9wZG93bi5cbiAgICAgKi9cbiAgICBvbkNvbmRpdGlvbnNDaGFuZ2VkKGV2ZW50QXJnczogYW55KTogdm9pZDtcbiAgICBvbkNoaXBQb2ludGVyZG93bihhcmdzOiBhbnksIGNoaXA6IElneENoaXBDb21wb25lbnQpOiB2b2lkO1xuICAgIG9uQ2hpcENsaWNrKGFyZ3M6IGFueSwgaXRlbTogRXhwcmVzc2lvblVJKTogdm9pZDtcbiAgICB0b2dnbGVDaGlwKGl0ZW06IEV4cHJlc3Npb25VSSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgY2hpcCBrZXlkb3duIGV2ZW50LlxuICAgICAqL1xuICAgIG9uQ2hpcEtleURvd24oZXZlbnRBcmdzOiBLZXlib2FyZEV2ZW50LCBpdGVtOiBFeHByZXNzaW9uVUkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNjcm9sbHMgdGhlIGZpcnN0IGNoaXAgaW50byB2aWV3IGlmIHRoZSB0YWIga2V5IGlzIHByZXNzZWQgb24gdGhlIGxlZnQgYXJyb3cuXG4gICAgICovXG4gICAgb25MZWZ0QXJyb3dLZXlEb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIGNoaXAgcmVtb3ZlZCBldmVudC5cbiAgICAgKi9cbiAgICBvbkNoaXBSZW1vdmVkKGV2ZW50QXJnczogSUJhc2VDaGlwRXZlbnRBcmdzLCBpdGVtOiBFeHByZXNzaW9uVUkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIGxvZ2ljIG9wZXJhdG9yIGNoYW5nZWQgZXZlbnQuXG4gICAgICovXG4gICAgb25Mb2dpY09wZXJhdG9yQ2hhbmdlZChldmVudEFyZ3M6IElTZWxlY3Rpb25FdmVudEFyZ3MsIGV4cHJlc3Npb246IEV4cHJlc3Npb25VSSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2Nyb2xscyB0aGUgY2hpcHMgaW50byB0aGUgY2hpcCBhcmVhIHdoZW4gbGVmdCBvciByaWdodCBhcnJvd3MgYXJlIHByZXNzZWQuXG4gICAgICovXG4gICAgc2Nyb2xsQ2hpcHNPbkFycm93UHJlc3MoYXJyb3dQb3NpdGlvbjogc3RyaW5nKTogdm9pZDtcbiAgICBwcml2YXRlIHNob3dIaWRlQXJyb3dCdXR0b25zO1xuICAgIHByaXZhdGUgYWRkRXhwcmVzc2lvbjtcbiAgICBwcml2YXRlIHJlbW92ZUV4cHJlc3Npb247XG4gICAgcHJpdmF0ZSByZXNldEV4cHJlc3Npb247XG4gICAgcHJpdmF0ZSBzY3JvbGxDaGlwc1doZW5BZGRpbmdFeHByZXNzaW9uO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBSZXNldHMgdGhlIGNoaXBzIGFyZWFcbiAgICAgKiBAbWVtYmVyb2YgSWd4R3JpZEZpbHRlcmluZ1Jvd0NvbXBvbmVudFxuICAgICAqL1xuICAgIHJlc2V0Q2hpcHNBcmVhKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm07XG4gICAgcHJpdmF0ZSBzY3JvbGxDaGlwc09uUmVtb3ZlO1xuICAgIHByaXZhdGUgY29uZGl0aW9uQ2hhbmdlZENhbGxiYWNrO1xuICAgIHByaXZhdGUgdW5hcnlDb25kaXRpb25DaGFuZ2VkQ2FsbGJhY2s7XG4gICAgcHJpdmF0ZSBmaWx0ZXI7XG4gICAgcHJpdmF0ZSBnZXQgaXNDb2x1bW5GaWx0ZXJlZCgpO1xufVxuIl19