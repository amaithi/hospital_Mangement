import { EventEmitter } from '@angular/core';
import { SplitterType } from '../splitter.component';
import { IgxSplitterPaneComponent } from '../splitter-pane/splitter-pane.component';
import { DragDirection, IDragMoveEventArgs, IDragStartEventArgs } from '../../directives/drag-drop/drag-drop.directive';
import * as ɵngcc0 from '@angular/core';
export declare const SPLITTER_INTERACTION_KEYS: Set<string>;
/**
 * @hidden @internal
 * Represents the draggable bar that visually separates panes and allows for changing their sizes.
 */
export declare class IgxSplitBarComponent {
    /**
     * Set css class to the host element.
     */
    cssClass: string;
    /**
     * Gets/Sets the orientation.
     */
    type: SplitterType;
    /**
     * Sets/gets the element order.
     */
    order: number;
    /**
     * @hidden
     * @internal
     */
    get tabindex(): number;
    /**
     * @hidden
     * @internal
     */
    get orientation(): "horizontal" | "vertical";
    /**
     * @hidden
     * @internal
     */
    get cursor(): "" | "col-resize" | "row-resize";
    /**
     * Sets/gets the `SplitPaneComponent` associated with the current `SplitBarComponent`.
     * @memberof SplitBarComponent
     */
    pane: IgxSplitterPaneComponent;
    /**
     * Sets/Gets the `SplitPaneComponent` sibling components associated with the current `SplitBarComponent`.
     */
    siblings: Array<IgxSplitterPaneComponent>;
    /**
     * An event that is emitted whenever we start dragging the current `SplitBarComponent`.
     */
    moveStart: EventEmitter<IgxSplitterPaneComponent>;
    /**
     * An event that is emitted while we are dragging the current `SplitBarComponent`.
     */
    moving: EventEmitter<number>;
    /**
     * A temporary holder for the pointer coordinates.
     */
    private startPoint;
    /**
     * @hidden @internal
     */
    get prevButtonHidden(): boolean;
    /**
     * @hidden @internal
     */
    keyEvent(event: KeyboardEvent): void;
    /**
     * @hidden @internal
     */
    get dragDir(): DragDirection.VERTICAL | DragDirection.HORIZONTAL;
    /**
     * @hidden @internal
     */
    get nextButtonHidden(): boolean;
    /**
     * @hidden @internal
     */
    onDragStart(event: IDragStartEventArgs): void;
    /**
     * @hidden @internal
     */
    onDragMove(event: IDragMoveEventArgs): void;
    protected get resizeDisallowed(): boolean;
    /**
     * @hidden @internal
     */
    onCollapsing(next: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSplitBarComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxSplitBarComponent, "igx-splitter-bar", never, {
    "type": "type";
    "order": "order";
    "pane": "pane";
    "siblings": "siblings";
}, {
    "moveStart": "moveStart";
    "moving": "moving";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXR0ZXItYmFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzcGxpdHRlci1iYXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1GQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3BsaXR0ZXJUeXBlIH0gZnJvbSAnLi4vc3BsaXR0ZXIuY29tcG9uZW50JztcbmltcG9ydCB7IElneFNwbGl0dGVyUGFuZUNvbXBvbmVudCB9IGZyb20gJy4uL3NwbGl0dGVyLXBhbmUvc3BsaXR0ZXItcGFuZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRHJhZ0RpcmVjdGlvbiwgSURyYWdNb3ZlRXZlbnRBcmdzLCBJRHJhZ1N0YXJ0RXZlbnRBcmdzIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9kcmFnLWRyb3AvZHJhZy1kcm9wLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBTUExJVFRFUl9JTlRFUkFDVElPTl9LRVlTOiBTZXQ8c3RyaW5nPjtcbi8qKlxuICogQGhpZGRlbiBAaW50ZXJuYWxcbiAqIFJlcHJlc2VudHMgdGhlIGRyYWdnYWJsZSBiYXIgdGhhdCB2aXN1YWxseSBzZXBhcmF0ZXMgcGFuZXMgYW5kIGFsbG93cyBmb3IgY2hhbmdpbmcgdGhlaXIgc2l6ZXMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFNwbGl0QmFyQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBTZXQgY3NzIGNsYXNzIHRvIHRoZSBob3N0IGVsZW1lbnQuXG4gICAgICovXG4gICAgY3NzQ2xhc3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIG9yaWVudGF0aW9uLlxuICAgICAqL1xuICAgIHR5cGU6IFNwbGl0dGVyVHlwZTtcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIGVsZW1lbnQgb3JkZXIuXG4gICAgICovXG4gICAgb3JkZXI6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IHRhYmluZGV4KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IG9yaWVudGF0aW9uKCk6IFwiaG9yaXpvbnRhbFwiIHwgXCJ2ZXJ0aWNhbFwiO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgY3Vyc29yKCk6IFwiXCIgfCBcImNvbC1yZXNpemVcIiB8IFwicm93LXJlc2l6ZVwiO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgYFNwbGl0UGFuZUNvbXBvbmVudGAgYXNzb2NpYXRlZCB3aXRoIHRoZSBjdXJyZW50IGBTcGxpdEJhckNvbXBvbmVudGAuXG4gICAgICogQG1lbWJlcm9mIFNwbGl0QmFyQ29tcG9uZW50XG4gICAgICovXG4gICAgcGFuZTogSWd4U3BsaXR0ZXJQYW5lQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFNldHMvR2V0cyB0aGUgYFNwbGl0UGFuZUNvbXBvbmVudGAgc2libGluZyBjb21wb25lbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBgU3BsaXRCYXJDb21wb25lbnRgLlxuICAgICAqL1xuICAgIHNpYmxpbmdzOiBBcnJheTxJZ3hTcGxpdHRlclBhbmVDb21wb25lbnQ+O1xuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuZXZlciB3ZSBzdGFydCBkcmFnZ2luZyB0aGUgY3VycmVudCBgU3BsaXRCYXJDb21wb25lbnRgLlxuICAgICAqL1xuICAgIG1vdmVTdGFydDogRXZlbnRFbWl0dGVyPElneFNwbGl0dGVyUGFuZUNvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoaWxlIHdlIGFyZSBkcmFnZ2luZyB0aGUgY3VycmVudCBgU3BsaXRCYXJDb21wb25lbnRgLlxuICAgICAqL1xuICAgIG1vdmluZzogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqXG4gICAgICogQSB0ZW1wb3JhcnkgaG9sZGVyIGZvciB0aGUgcG9pbnRlciBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXJ0UG9pbnQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgcHJldkJ1dHRvbkhpZGRlbigpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAga2V5RXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IGRyYWdEaXIoKTogRHJhZ0RpcmVjdGlvbi5WRVJUSUNBTCB8IERyYWdEaXJlY3Rpb24uSE9SSVpPTlRBTDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldCBuZXh0QnV0dG9uSGlkZGVuKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBvbkRyYWdTdGFydChldmVudDogSURyYWdTdGFydEV2ZW50QXJncyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBvbkRyYWdNb3ZlKGV2ZW50OiBJRHJhZ01vdmVFdmVudEFyZ3MpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBnZXQgcmVzaXplRGlzYWxsb3dlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgb25Db2xsYXBzaW5nKG5leHQ6IGJvb2xlYW4pOiB2b2lkO1xufVxuIl19