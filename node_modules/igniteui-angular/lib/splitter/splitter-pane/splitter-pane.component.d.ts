import { ElementRef, EventEmitter } from '@angular/core';
/**
 * Represents individual resizable/collapsible panes.
 * @igxModule IgxSplitterModule
 *
 * @igxParent IgxSplitterComponent
 *
 * @igxKeywords pane
 *
 * @igxGroup presentation
 *
 * @remarks
 *  Users can control the resize behavior via the min and max size properties.
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxSplitterPaneComponent {
    private el;
    private _size;
    private _collapsed;
    /** @hidden @internal */
    owner: any;
    /**
     * Gets/Sets the size of the current pane.
     *  * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane [size]='size'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     */
    get size(): string;
    set size(value: string);
    /**
     * Gets/Sets the minimum allowed size of the current pane.
     * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane [minSize]='minSize'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     */
    minSize: string;
    /**
     * Gets/Set the maximum allowed size of the current pane.
     * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane [maxSize]='maxSize'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     */
    maxSize: string;
    /**
     * Gets/Sets whether pane is resizable.
     * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane [resizable]='false'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     * @remarks
     * If pane is not resizable its related splitter bar cannot be dragged.
     */
    resizable: boolean;
    /**
     * Event fired when collapsed state of pane is changed.
     * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane (onToggle)='onPaneToggle($event)'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     */
    onToggle: EventEmitter<IgxSplitterPaneComponent>;
    /** @hidden @internal */
    order: number;
    /**
     *
     * @hidden @internal
     * Gets the host native element.
     */
    get element(): any;
    /**
     * @hidden @internal
     * Gets/Sets the `overflow`.
     */
    overflow: string;
    /**
     * @hidden @internal
     * Gets/Sets the `minHeight` and `minWidth` properties of the current pane.
     */
    minHeight: number;
    /**
     * @hidden @internal
     * Gets/Sets the `maxHeight` and `maxWidth` properties of the current `IgxSplitterPaneComponent`.
     */
    maxHeight: string;
    /**
     * @hidden @internal
     * Gets the `flex` property of the current `IgxSplitterPaneComponent`.
     */
    get flex(): string;
    /**
     * @hidden @internal
     * Gets/Sets the 'display' property of the current pane.
     */
    display: string;
    /**
     * Gets/Sets whether current pane is collapsed.
     * @example
     * ```typescript
     * const isCollapsed = pane.collapsed;
     * ```
     */
    set collapsed(value: boolean);
    get collapsed(): boolean;
    /** @hidden @internal */
    private _getSiblings;
    /**
     * Toggles the collapsed state of the pane.
     * @example
     * ```typescript
     * pane.toggle();
     * ```
     */
    toggle(): void;
    constructor(el: ElementRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSplitterPaneComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxSplitterPaneComponent, "igx-splitter-pane", never, {
    "resizable": "resizable";
    "size": "size";
    "collapsed": "collapsed";
    "minSize": "minSize";
    "maxSize": "maxSize";
}, {
    "onToggle": "onToggle";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXR0ZXItcGFuZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3BsaXR0ZXItcGFuZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBY0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0hBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIFJlcHJlc2VudHMgaW5kaXZpZHVhbCByZXNpemFibGUvY29sbGFwc2libGUgcGFuZXMuXG4gKiBAaWd4TW9kdWxlIElneFNwbGl0dGVyTW9kdWxlXG4gKlxuICogQGlneFBhcmVudCBJZ3hTcGxpdHRlckNvbXBvbmVudFxuICpcbiAqIEBpZ3hLZXl3b3JkcyBwYW5lXG4gKlxuICogQGlneEdyb3VwIHByZXNlbnRhdGlvblxuICpcbiAqIEByZW1hcmtzXG4gKiAgVXNlcnMgY2FuIGNvbnRyb2wgdGhlIHJlc2l6ZSBiZWhhdmlvciB2aWEgdGhlIG1pbiBhbmQgbWF4IHNpemUgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4U3BsaXR0ZXJQYW5lQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgX3NpemU7XG4gICAgcHJpdmF0ZSBfY29sbGFwc2VkO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIG93bmVyOiBhbnk7XG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSBzaXplIG9mIHRoZSBjdXJyZW50IHBhbmUuXG4gICAgICogICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1zcGxpdHRlcj5cbiAgICAgKiAgPGlneC1zcGxpdHRlci1wYW5lIFtzaXplXT0nc2l6ZSc+Li4uPC9pZ3gtc3BsaXR0ZXItcGFuZT5cbiAgICAgKiA8L2lneC1zcGxpdHRlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgc2l6ZSgpOiBzdHJpbmc7XG4gICAgc2V0IHNpemUodmFsdWU6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSBtaW5pbXVtIGFsbG93ZWQgc2l6ZSBvZiB0aGUgY3VycmVudCBwYW5lLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtc3BsaXR0ZXI+XG4gICAgICogIDxpZ3gtc3BsaXR0ZXItcGFuZSBbbWluU2l6ZV09J21pblNpemUnPi4uLjwvaWd4LXNwbGl0dGVyLXBhbmU+XG4gICAgICogPC9pZ3gtc3BsaXR0ZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgbWluU2l6ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEdldHMvU2V0IHRoZSBtYXhpbXVtIGFsbG93ZWQgc2l6ZSBvZiB0aGUgY3VycmVudCBwYW5lLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtc3BsaXR0ZXI+XG4gICAgICogIDxpZ3gtc3BsaXR0ZXItcGFuZSBbbWF4U2l6ZV09J21heFNpemUnPi4uLjwvaWd4LXNwbGl0dGVyLXBhbmU+XG4gICAgICogPC9pZ3gtc3BsaXR0ZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgbWF4U2l6ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB3aGV0aGVyIHBhbmUgaXMgcmVzaXphYmxlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtc3BsaXR0ZXI+XG4gICAgICogIDxpZ3gtc3BsaXR0ZXItcGFuZSBbcmVzaXphYmxlXT0nZmFsc2UnPi4uLjwvaWd4LXNwbGl0dGVyLXBhbmU+XG4gICAgICogPC9pZ3gtc3BsaXR0ZXI+XG4gICAgICogYGBgXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBJZiBwYW5lIGlzIG5vdCByZXNpemFibGUgaXRzIHJlbGF0ZWQgc3BsaXR0ZXIgYmFyIGNhbm5vdCBiZSBkcmFnZ2VkLlxuICAgICAqL1xuICAgIHJlc2l6YWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBFdmVudCBmaXJlZCB3aGVuIGNvbGxhcHNlZCBzdGF0ZSBvZiBwYW5lIGlzIGNoYW5nZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1zcGxpdHRlcj5cbiAgICAgKiAgPGlneC1zcGxpdHRlci1wYW5lIChvblRvZ2dsZSk9J29uUGFuZVRvZ2dsZSgkZXZlbnQpJz4uLi48L2lneC1zcGxpdHRlci1wYW5lPlxuICAgICAqIDwvaWd4LXNwbGl0dGVyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uVG9nZ2xlOiBFdmVudEVtaXR0ZXI8SWd4U3BsaXR0ZXJQYW5lQ29tcG9uZW50PjtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBvcmRlcjogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKiBHZXRzIHRoZSBob3N0IG5hdGl2ZSBlbGVtZW50LlxuICAgICAqL1xuICAgIGdldCBlbGVtZW50KCk6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqIEdldHMvU2V0cyB0aGUgYG92ZXJmbG93YC5cbiAgICAgKi9cbiAgICBvdmVyZmxvdzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICogR2V0cy9TZXRzIHRoZSBgbWluSGVpZ2h0YCBhbmQgYG1pbldpZHRoYCBwcm9wZXJ0aWVzIG9mIHRoZSBjdXJyZW50IHBhbmUuXG4gICAgICovXG4gICAgbWluSGVpZ2h0OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKiBHZXRzL1NldHMgdGhlIGBtYXhIZWlnaHRgIGFuZCBgbWF4V2lkdGhgIHByb3BlcnRpZXMgb2YgdGhlIGN1cnJlbnQgYElneFNwbGl0dGVyUGFuZUNvbXBvbmVudGAuXG4gICAgICovXG4gICAgbWF4SGVpZ2h0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKiBHZXRzIHRoZSBgZmxleGAgcHJvcGVydHkgb2YgdGhlIGN1cnJlbnQgYElneFNwbGl0dGVyUGFuZUNvbXBvbmVudGAuXG4gICAgICovXG4gICAgZ2V0IGZsZXgoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICogR2V0cy9TZXRzIHRoZSAnZGlzcGxheScgcHJvcGVydHkgb2YgdGhlIGN1cnJlbnQgcGFuZS5cbiAgICAgKi9cbiAgICBkaXNwbGF5OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHdoZXRoZXIgY3VycmVudCBwYW5lIGlzIGNvbGxhcHNlZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBpc0NvbGxhcHNlZCA9IHBhbmUuY29sbGFwc2VkO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCBjb2xsYXBzZWQodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBjb2xsYXBzZWQoKTogYm9vbGVhbjtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIF9nZXRTaWJsaW5ncztcbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBjb2xsYXBzZWQgc3RhdGUgb2YgdGhlIHBhbmUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogcGFuZS50b2dnbGUoKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB0b2dnbGUoKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZik7XG59XG4iXX0=