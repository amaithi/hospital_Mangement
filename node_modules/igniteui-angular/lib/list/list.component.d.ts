import { ElementRef, EventEmitter, QueryList, TemplateRef } from '@angular/core';
import { IgxListItemComponent } from './list-item.component';
import { IgxListBaseDirective, IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective, IgxListPanState, IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective } from './list.common';
import { IDisplayDensityOptions } from '../core/density';
import { IBaseEventArgs } from '../core/utils';
/**
 * Interface for the panStateChange igxList event arguments
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './list.common';
import * as ɵngcc2 from './list-item.component';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '../directives/ripple/ripple.directive';
export interface IPanStateChangeEventArgs extends IBaseEventArgs {
    oldState: IgxListPanState;
    newState: IgxListPanState;
    item: IgxListItemComponent;
}
/**
 * Interface for the listItemClick igxList event arguments
 */
export interface IListItemClickEventArgs extends IBaseEventArgs {
    item: IgxListItemComponent;
    event: Event;
    direction: IgxListPanState;
}
/**
 * Interface for the listItemPanning igxList event arguments
 */
export interface IListItemPanningEventArgs extends IBaseEventArgs {
    item: IgxListItemComponent;
    direction: IgxListPanState;
    keepItem: boolean;
}
/**
 * igxListThumbnail is container for the List media
 * Use it to wrap anything you want to be used as a thumbnail.
 */
export declare class IgxListThumbnailDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxListThumbnailDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxListThumbnailDirective, "[igxListThumbnail]", never, {}, {}, never>;
}
/**
 * igxListAction is container for the List action
 * Use it to wrap anything you want to be used as a list action: icon, checkbox...
 */
export declare class IgxListActionDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxListActionDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxListActionDirective, "[igxListAction]", never, {}, {}, never>;
}
/**
 * igxListLine is container for the List text content
 * Use it to wrap anything you want to be used as a plane text.
 */
export declare class IgxListLineDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxListLineDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxListLineDirective, "[igxListLine]", never, {}, {}, never>;
}
/**
 * igxListLineTitle is a directive that add class to the target element
 * Use it to make anything to look like list Title.
 */
export declare class IgxListLineTitleDirective {
    cssClass: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxListLineTitleDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxListLineTitleDirective, "[igxListLineTitle]", never, {}, {}, never>;
}
/**
 * igxListLineSubTitle is a directive that add class to the target element
 * Use it to make anything to look like list Subtitle.
 */
export declare class IgxListLineSubTitleDirective {
    cssClass: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxListLineSubTitleDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxListLineSubTitleDirective, "[igxListLineSubTitle]", never, {}, {}, never>;
}
/**
 * Displays a collection of data items in a templatable list format
 *
 * @igxModule IgxListModule
 *
 * @igxTheme igx-list-theme
 *
 * @igxKeywords list, data
 *
 * @igxGroup Grids & Lists
 *
 * @remarks
 * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering
 * of list items. Each list item is completely templatable and will support any valid HTML or Angular component.
 *
 * @example
 * ```html
 * <igx-list>
 *   <igx-list-item isHeader="true">Contacts</igx-list-item>
 *   <igx-list-item *ngFor="let contact of contacts">
 *     <span class="name">{{ contact.name }}</span>
 *     <span class="phone">{{ contact.phone }}</span>
 *   </igx-list-item>
 * </igx-list>
 * ```
 */
export declare class IgxListComponent extends IgxListBaseDirective {
    element: ElementRef;
    protected _displayDensityOptions: IDisplayDensityOptions;
    constructor(element: ElementRef, _displayDensityOptions: IDisplayDensityOptions);
    /**
     * Returns a collection of all items and headers in the list.
     *
     * @example
     * ```typescript
     * let listChildren: QueryList = this.list.children;
     * ```
     */
    children: QueryList<IgxListItemComponent>;
    /**
     * @hidden
     * @internal
     */
    protected get sortedChildren(): IgxListItemComponent[];
    /**
     * Sets/gets the empty list template.
     *
     * @remarks
     * This template is used by IgxList in case there are no list items
     * defined and `isLoading` is set to `false`.
     *
     * @example
     * ```html
     * <igx-list>
     *   <ng-template igxEmptyList>
     *     <p class="empty">No contacts! :(</p>
     *   </ng-template>
     * </igx-list>
     * ```
     * ```typescript
     * let emptyTemplate = this.list.emptyListTemplate;
     * ```
     */
    emptyListTemplate: IgxEmptyListTemplateDirective;
    /**
     * Sets/gets the list loading template.
     *
     * @remarks
     * This template is used by IgxList in case there are no list items defined and `isLoading` is set to `true`.
     *
     * @example
     * ```html
     * <igx-list>
     *   <ng-template igxDataLoading>
     *     <p>Patience, we are currently loading your data...</p>
     *   </ng-template>
     * </igx-list>
     * ```
     * ```typescript
     * let loadingTemplate = this.list.dataLoadingTemplate;
     * ```
     */
    dataLoadingTemplate: IgxDataLoadingTemplateDirective;
    /**
     * Sets/gets the template for left panning a list item.
     *
     * @remarks
     * Default value is `null`.
     *
     * @example
     * ```html
     * <igx-list [allowLeftPanning]="true">
     *   <ng-template igxListItemLeftPanning>
     *     <igx-icon>delete</igx-icon>Delete
     *   </ng-template>
     * </igx-list>
     * ```
     * ```typescript
     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;
     * ```
     */
    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;
    /**
     * Sets/gets the template for right panning a list item.
     *
     * @remarks
     * Default value is `null`.
     *
     * @example
     * ```html
     * <igx-list [allowRightPanning] = "true">
     *   <ng-template igxListItemRightPanning>
     *     <igx-icon>call</igx-icon>Dial
     *   </ng-template>
     * </igx-list>
     * ```
     * ```typescript
     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;
     * ```
     */
    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;
    /**
     * Provides a threshold after which the item's panning will be completed automatically.
     *
     * @remarks
     * By default this property is set to 0.5 which is 50% of the list item's width.
     *
     * @example
     * ```html
     * <igx-list [panEndTriggeringThreshold]="0.8"></igx-list>
     * ```
     */
    panEndTriggeringThreshold: number;
    /**
     * @hidden
     * @internal
     */
    protected defaultEmptyListTemplate: TemplateRef<any>;
    /**
     * @hidden
     * @internal
     */
    protected defaultDataLoadingTemplate: TemplateRef<any>;
    /**
     * Sets/gets the `id` of the list.
     *
     * @remarks
     * If not set, the `id` of the first list component will be `"igx-list-0"`.
     *
     * @example
     * ```html
     * <igx-list id="my-first-list"></igx-list>
     * ```
     * ```typescript
     * let listId = this.list.id;
     * ```
     */
    id: string;
    /**
     * Sets/gets whether the left panning of an item is allowed.
     *
     * @remarks
     * Default value is `false`.
     *
     * @example
     * ```html
     * <igx-list [allowLeftPanning]="true"></igx-list>
     * ```
     * ```typescript
     * let isLeftPanningAllowed = this.list.allowLeftPanning;
     * ```
     */
    allowLeftPanning: boolean;
    /**
     * Sets/gets whether the right panning of an item is allowed.
     *
     * @remarks
     * Default value is `false`.
     *
     * @example
     * ```html
     * <igx-list [allowRightPanning]="true"></igx-list>
     * ```
     * ```typescript
     * let isRightPanningAllowed = this.list.allowRightPanning;
     * ```
     */
    allowRightPanning: boolean;
    /**
     * Sets/gets whether the list is currently loading data.
     *
     * @remarks
     * Set it to display the dataLoadingTemplate while data is being retrieved.
     * Default value is `false`.
     *
     * @example
     * ```html
     *  <igx-list [isLoading]="true"></igx-list>
     * ```
     * ```typescript
     * let isLoading = this.list.isLoading;
     * ```
     */
    isLoading: boolean;
    /**
     * Event emitted when a left pan gesture is executed on a list item.
     *
     * @remarks
     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
     *
     * @example
     * ```html
     * <igx-list [allowLeftPanning]="true" (onLeftPan)="onLeftPan($event)"></igx-list>
     * ```
     */
    onLeftPan: EventEmitter<IListItemPanningEventArgs>;
    /**
     * Event emitted when a right pan gesture is executed on a list item.
     *
     * @remarks
     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
     *
     * @example
     * ```html
     * <igx-list [allowRightPanning]="true" (onRightPan)="onRightPan($event)"></igx-list>
     * ```
     */
    onRightPan: EventEmitter<IListItemPanningEventArgs>;
    /**
     *
     * Event emitted when a pan gesture is executed on a list item.
     *
     * @remarks
     * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.
     *
     * @example
     * ```html
     * <igx-list (onPanStateChange)="onPanStateChange($event)"></igx-list>
     * ```
     */
    onPanStateChange: EventEmitter<IPanStateChangeEventArgs>;
    /**
     * Event emitted when a list item is clicked.
     *
     * @remarks
     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.
     *
     * @example
     * ```html
     * <igx-list (onItemClicked)="onItemClicked($event)"></igx-list>
     * ```
     */
    onItemClicked: EventEmitter<IListItemClickEventArgs>;
    /**
     * Gets the `role` attribute value.
     *
     * @example
     * ```typescript
     * let listRole =  this.list.role;
     * ```
     */
    get role(): string;
    /**
     * Gets a boolean indicating if the list is empty.
     *
     * @example
     * ```typescript
     * let isEmpty =  this.list.isListEmpty;
     * ```
     */
    get isListEmpty(): boolean;
    /**
     * @hidden
     * @internal
     */
    get cssClass(): boolean;
    /**
     * @hidden
     * @internal
     */
    get cssClassCompact(): boolean;
    /**
     * @hidden
     * @internal
     */
    get cssClassCosy(): boolean;
    /**
     * Gets the list `items` excluding the header ones.
     *
     * @example
     * ```typescript
     * let listItems: IgxListItemComponent[] = this.list.items;
     * ```
     */
    get items(): IgxListItemComponent[];
    /**
     * Gets the header list `items`.
     *
     * @example
     * ```typescript
     * let listHeaders: IgxListItemComponent[] =  this.list.headers;
     * ```
     */
    get headers(): IgxListItemComponent[];
    /**
     * Gets the `context` object of the template binding.
     *
     * @remark
     * Gets the `context` object which represents the `template context` binding into the `list container`
     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.
     *
     * @example
     * ```typescript
     * let listComponent =  this.list.context;
     * ```
     */
    get context(): any;
    /**
     * Gets a `TemplateRef` to the currently used template.
     *
     * @example
     * ```typescript
     * let listTemplate = this.list.template;
     * ```
     */
    get template(): TemplateRef<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxListComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxListComponent, "igx-list", never, {
    "panEndTriggeringThreshold": "panEndTriggeringThreshold";
    "id": "id";
    "allowLeftPanning": "allowLeftPanning";
    "allowRightPanning": "allowRightPanning";
    "isLoading": "isLoading";
}, {
    "onLeftPan": "onLeftPan";
    "onRightPan": "onRightPan";
    "onPanStateChange": "onPanStateChange";
    "onItemClicked": "onItemClicked";
}, ["emptyListTemplate", "dataLoadingTemplate", "listItemLeftPanningTemplate", "listItemRightPanningTemplate", "children"]>;
}
/**
 * @hidden
 */
export declare class IgxListModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxListModule, [typeof ɵngcc1.IgxListBaseDirective, typeof IgxListComponent, typeof ɵngcc2.IgxListItemComponent, typeof IgxListThumbnailDirective, typeof IgxListActionDirective, typeof IgxListLineDirective, typeof IgxListLineTitleDirective, typeof IgxListLineSubTitleDirective, typeof ɵngcc1.IgxDataLoadingTemplateDirective, typeof ɵngcc1.IgxEmptyListTemplateDirective, typeof ɵngcc1.IgxListItemLeftPanningTemplateDirective, typeof ɵngcc1.IgxListItemRightPanningTemplateDirective], [typeof ɵngcc3.CommonModule, typeof ɵngcc4.IgxRippleModule], [typeof IgxListComponent, typeof ɵngcc2.IgxListItemComponent, typeof IgxListThumbnailDirective, typeof IgxListActionDirective, typeof IgxListLineDirective, typeof IgxListLineTitleDirective, typeof IgxListLineSubTitleDirective, typeof ɵngcc1.IgxDataLoadingTemplateDirective, typeof ɵngcc1.IgxEmptyListTemplateDirective, typeof ɵngcc1.IgxListItemLeftPanningTemplateDirective, typeof ɵngcc1.IgxListItemRightPanningTemplateDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxListModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,