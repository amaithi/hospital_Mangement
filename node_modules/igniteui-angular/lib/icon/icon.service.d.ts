import { DomSanitizer } from '@angular/platform-browser';
/**
 * Event emitted when a SVG icon is loaded through
 * a HTTP request.
 */
import * as ɵngcc0 from '@angular/core';
export interface IgxIconLoadedEvent {
    /** Name of the icon */
    name: string;
    /** The actual SVG text */
    value: string;
    /** The fontSet for the icon. Defaults to material. */
    fontSet: string;
}
/**
 * **Ignite UI for Angular Icon Service** -
 *
 * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.
 * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.
 *
 * Example:
 * ```typescript
 * this.iconService.registerFontSetAlias('material', 'material-icons');
 * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
 * ```
 */
export declare class IgxIconService {
    private _sanitizer;
    private _document;
    private _fontSet;
    private _fontSetAliases;
    private _svgContainer;
    private _cachedSvgIcons;
    private _iconLoaded;
    /**
     * Observable that emits when an icon is successfully loaded
     * through a HTTP request.
     * @example
     * ```typescript
     * this.service.iconLoaded.subscribe((ev: IgxIconLoadedEvent) => ...);
     * ```
     */
    iconLoaded: import("rxjs").Observable<IgxIconLoadedEvent>;
    constructor(_sanitizer: DomSanitizer, _document: any);
    /**
     *  Returns the default font set.
     * ```typescript
     *   const defaultFontSet = this.iconService.defaultFontSet;
     * ```
     */
    get defaultFontSet(): string;
    /**
     *  Sets the default font set.
     * ```typescript
     *   this.iconService.defaultFontSet = 'svg-flags';
     * ```
     */
    set defaultFontSet(className: string);
    /**
     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.
     * ```typescript
     *   this.iconService.registerFontSetAlias('material', 'material-icons');
     * ```
     */
    registerFontSetAlias(alias: string, className?: string): this;
    /**
     *  Returns the custom class, if any, associated to a given fontSet.
     * ```typescript
     *   const fontSetClass = this.iconService.fontSetClassName('material');
     * ```
     */
    fontSetClassName(alias: string): string;
    /**
     *  Adds an SVG image to the cache. SVG source is an url.
     * ```typescript
     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
     * ```
     */
    addSvgIcon(iconName: string, url: string, fontSet?: string): void;
    /**
     *  Adds an SVG image to the cache. SVG source is its text.
     * ```typescript
     *   this.iconService.addSvgIcon('simple', '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
     *   <path d="M74 74h54v54H74" /></svg>', 'svg-flags');
     * ```
     */
    addSvgIconFromText(iconName: string, iconText: string, fontSet?: string): void;
    /**
     *  Returns whether a given SVG image is present in the cache.
     * ```typescript
     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');
     * ```
     */
    isSvgIconCached(iconName: string, fontSet?: string): boolean;
    /**
     *  Returns the key of a cached SVG image.
     * ```typescript
     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');
     * ```
     */
    getSvgIconKey(iconName: string, fontSet?: string): string;
    /**
     * @hidden
     */
    private fetchSvg;
    /**
     * @hidden
     */
    private cacheSvgIcon;
    /**
     * @hidden
     */
    private ensureSvgContainerCreated;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxIconService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImljb24uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkdBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG4vKipcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBhIFNWRyBpY29uIGlzIGxvYWRlZCB0aHJvdWdoXG4gKiBhIEhUVFAgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJZ3hJY29uTG9hZGVkRXZlbnQge1xuICAgIC8qKiBOYW1lIG9mIHRoZSBpY29uICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKiBUaGUgYWN0dWFsIFNWRyB0ZXh0ICovXG4gICAgdmFsdWU6IHN0cmluZztcbiAgICAvKiogVGhlIGZvbnRTZXQgZm9yIHRoZSBpY29uLiBEZWZhdWx0cyB0byBtYXRlcmlhbC4gKi9cbiAgICBmb250U2V0OiBzdHJpbmc7XG59XG4vKipcbiAqICoqSWduaXRlIFVJIGZvciBBbmd1bGFyIEljb24gU2VydmljZSoqIC1cbiAqXG4gKiBUaGUgSWduaXRlIFVJIEljb24gU2VydmljZSBtYWtlcyBpdCBlYXN5IGZvciBkZXZlbG9wZXJzIHRvIGluY2x1ZGUgY3VzdG9tIFNWRyBpbWFnZXMgYW5kIHVzZSB0aGVtIHdpdGggSWd4SWNvbkNvbXBvbmVudC5cbiAqIEluIGFkZGl0aW9uIGl0IGNvdWxkIGJlIHVzZWQgdG8gYXNzb2NpYXRlIGEgY3VzdG9tIGNsYXNzIHRvIGJlIGFwcGxpZWQgb24gSWd4SWNvbkNvbXBvbmVudCBhY2NvcmRpbmcgdG8gZ2l2ZW4gZm9udFNldC5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHlwZXNjcmlwdFxuICogdGhpcy5pY29uU2VydmljZS5yZWdpc3RlckZvbnRTZXRBbGlhcygnbWF0ZXJpYWwnLCAnbWF0ZXJpYWwtaWNvbnMnKTtcbiAqIHRoaXMuaWNvblNlcnZpY2UuYWRkU3ZnSWNvbignYXJ1YmEnLCAnL2Fzc2V0cy9zdmcvY291bnRyeV9mbGFncy9hcnViYS5zdmcnLCAnc3ZnLWZsYWdzJyk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4SWNvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgX3Nhbml0aXplcjtcbiAgICBwcml2YXRlIF9kb2N1bWVudDtcbiAgICBwcml2YXRlIF9mb250U2V0O1xuICAgIHByaXZhdGUgX2ZvbnRTZXRBbGlhc2VzO1xuICAgIHByaXZhdGUgX3N2Z0NvbnRhaW5lcjtcbiAgICBwcml2YXRlIF9jYWNoZWRTdmdJY29ucztcbiAgICBwcml2YXRlIF9pY29uTG9hZGVkO1xuICAgIC8qKlxuICAgICAqIE9ic2VydmFibGUgdGhhdCBlbWl0cyB3aGVuIGFuIGljb24gaXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZFxuICAgICAqIHRocm91Z2ggYSBIVFRQIHJlcXVlc3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5zZXJ2aWNlLmljb25Mb2FkZWQuc3Vic2NyaWJlKChldjogSWd4SWNvbkxvYWRlZEV2ZW50KSA9PiAuLi4pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGljb25Mb2FkZWQ6IGltcG9ydChcInJ4anNcIikuT2JzZXJ2YWJsZTxJZ3hJY29uTG9hZGVkRXZlbnQ+O1xuICAgIGNvbnN0cnVjdG9yKF9zYW5pdGl6ZXI6IERvbVNhbml0aXplciwgX2RvY3VtZW50OiBhbnkpO1xuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSBkZWZhdWx0IGZvbnQgc2V0LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgIGNvbnN0IGRlZmF1bHRGb250U2V0ID0gdGhpcy5pY29uU2VydmljZS5kZWZhdWx0Rm9udFNldDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgZGVmYXVsdEZvbnRTZXQoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqICBTZXRzIHRoZSBkZWZhdWx0IGZvbnQgc2V0LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgIHRoaXMuaWNvblNlcnZpY2UuZGVmYXVsdEZvbnRTZXQgPSAnc3ZnLWZsYWdzJztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgZGVmYXVsdEZvbnRTZXQoY2xhc3NOYW1lOiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqICBSZWdpc3RlcnMgYSBjdXN0b20gY2xhc3MgdG8gYmUgYXBwbGllZCB0byBJZ3hJY29uQ29tcG9uZW50IGZvciBhIGdpdmVuIGZvbnRTZXQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAgdGhpcy5pY29uU2VydmljZS5yZWdpc3RlckZvbnRTZXRBbGlhcygnbWF0ZXJpYWwnLCAnbWF0ZXJpYWwtaWNvbnMnKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZWdpc3RlckZvbnRTZXRBbGlhcyhhbGlhczogc3RyaW5nLCBjbGFzc05hbWU/OiBzdHJpbmcpOiB0aGlzO1xuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSBjdXN0b20gY2xhc3MsIGlmIGFueSwgYXNzb2NpYXRlZCB0byBhIGdpdmVuIGZvbnRTZXQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAgY29uc3QgZm9udFNldENsYXNzID0gdGhpcy5pY29uU2VydmljZS5mb250U2V0Q2xhc3NOYW1lKCdtYXRlcmlhbCcpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZvbnRTZXRDbGFzc05hbWUoYWxpYXM6IHN0cmluZyk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiAgQWRkcyBhbiBTVkcgaW1hZ2UgdG8gdGhlIGNhY2hlLiBTVkcgc291cmNlIGlzIGFuIHVybC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogICB0aGlzLmljb25TZXJ2aWNlLmFkZFN2Z0ljb24oJ2FydWJhJywgJy9hc3NldHMvc3ZnL2NvdW50cnlfZmxhZ3MvYXJ1YmEuc3ZnJywgJ3N2Zy1mbGFncycpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGFkZFN2Z0ljb24oaWNvbk5hbWU6IHN0cmluZywgdXJsOiBzdHJpbmcsIGZvbnRTZXQ/OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqICBBZGRzIGFuIFNWRyBpbWFnZSB0byB0aGUgY2FjaGUuIFNWRyBzb3VyY2UgaXMgaXRzIHRleHQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAgdGhpcy5pY29uU2VydmljZS5hZGRTdmdJY29uKCdzaW1wbGUnLCAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyMDAgMjAwXCI+XG4gICAgICogICA8cGF0aCBkPVwiTTc0IDc0aDU0djU0SDc0XCIgLz48L3N2Zz4nLCAnc3ZnLWZsYWdzJyk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgYWRkU3ZnSWNvbkZyb21UZXh0KGljb25OYW1lOiBzdHJpbmcsIGljb25UZXh0OiBzdHJpbmcsIGZvbnRTZXQ/OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHdoZXRoZXIgYSBnaXZlbiBTVkcgaW1hZ2UgaXMgcHJlc2VudCBpbiB0aGUgY2FjaGUuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAgY29uc3QgaXNTdmdDYWNoZWQgPSB0aGlzLmljb25TZXJ2aWNlLmlzU3ZnSWNvbkNhY2hlZCgnYXJ1YmEnLCAnc3ZnLWZsYWdzJyk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgaXNTdmdJY29uQ2FjaGVkKGljb25OYW1lOiBzdHJpbmcsIGZvbnRTZXQ/OiBzdHJpbmcpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSBrZXkgb2YgYSBjYWNoZWQgU1ZHIGltYWdlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgIGNvbnN0IHN2Z0ljb25LZXkgPSB0aGlzLmljb25TZXJ2aWNlLmdldFN2Z0ljb25LZXkoJ2FydWJhJywgJ3N2Zy1mbGFncycpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldFN2Z0ljb25LZXkoaWNvbk5hbWU6IHN0cmluZywgZm9udFNldD86IHN0cmluZyk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBmZXRjaFN2ZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBjYWNoZVN2Z0ljb247XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZW5zdXJlU3ZnQ29udGFpbmVyQ3JlYXRlZDtcbn1cbiJdfQ==