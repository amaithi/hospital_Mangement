import { ElementRef, ChangeDetectorRef } from '@angular/core';
import { IgxExpansionPanelBase } from './expansion-panel.common';
import * as ɵngcc0 from '@angular/core';
export declare class IgxExpansionPanelBodyComponent {
    panel: IgxExpansionPanelBase;
    element: ElementRef;
    cdr: ChangeDetectorRef;
    private _labelledBy;
    private _label;
    constructor(panel: IgxExpansionPanelBase, element: ElementRef, cdr: ChangeDetectorRef);
    /**
     * @hidden
     */
    cssClass: string;
    /**
     * Gets the `aria-label` attribute of the panel body
     * Defaults to the panel id with '-region' in the end;
     * Get
     * ```typescript
     *  const currentLabel = this.panel.body.label;
     * ```
     */
    get label(): string;
    /**
     * Sets the `aria-label` attribute of the panel body
     * ```typescript
     *  this.panel.body.label = 'my-custom-label';
     * ```
     * ```html
     *  <igx-expansion-panel-body [label]="'my-custom-label'"></igx-expansion-panel-body>
     * ```
     */
    set label(val: string);
    /**
     * Gets the `aria-labelledby` attribute of the panel body
     * Defaults to the panel header id;
     * Get
     * ```typescript
     *  const currentLabel = this.panel.body.labelledBy;
     * ```
     */
    get labelledBy(): string;
    /**
     * Sets the `aria-labelledby` attribute of the panel body
     * ```typescript
     *  this.panel.body.labelledBy = 'my-custom-id';
     * ```
     * ```html
     *  <igx-expansion-panel-body [labelledBy]="'my-custom-id'"></igx-expansion-panel-body>
     * ```
     */
    set labelledBy(val: string);
    /**
     * Gets/sets the `role` attribute of the panel body
     * Default is 'region';
     * Get
     * ```typescript
     *  const currentRole = this.panel.body.role;
     * ```
     * Set
     * ```typescript
     *  this.panel.body.role = 'content';
     * ```
     * ```html
     *  <igx-expansion-panel-body [role]="'custom'"></igx-expansion-panel-body>
     * ```
     */
    role: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxExpansionPanelBodyComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxExpansionPanelBodyComponent, "igx-expansion-panel-body", never, {
    "role": "role";
    "label": "label";
    "labelledBy": "labelledBy";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLWJvZHkuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImV4cGFuc2lvbi1wYW5lbC1ib2R5LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4RXhwYW5zaW9uUGFuZWxCYXNlIH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwuY29tbW9uJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEV4cGFuc2lvblBhbmVsQm9keUNvbXBvbmVudCB7XG4gICAgcGFuZWw6IElneEV4cGFuc2lvblBhbmVsQmFzZTtcbiAgICBlbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJpdmF0ZSBfbGFiZWxsZWRCeTtcbiAgICBwcml2YXRlIF9sYWJlbDtcbiAgICBjb25zdHJ1Y3RvcihwYW5lbDogSWd4RXhwYW5zaW9uUGFuZWxCYXNlLCBlbGVtZW50OiBFbGVtZW50UmVmLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY3NzQ2xhc3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgYXJpYS1sYWJlbGAgYXR0cmlidXRlIG9mIHRoZSBwYW5lbCBib2R5XG4gICAgICogRGVmYXVsdHMgdG8gdGhlIHBhbmVsIGlkIHdpdGggJy1yZWdpb24nIGluIHRoZSBlbmQ7XG4gICAgICogR2V0XG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBjb25zdCBjdXJyZW50TGFiZWwgPSB0aGlzLnBhbmVsLmJvZHkubGFiZWw7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGxhYmVsKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgYXJpYS1sYWJlbGAgYXR0cmlidXRlIG9mIHRoZSBwYW5lbCBib2R5XG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICB0aGlzLnBhbmVsLmJvZHkubGFiZWwgPSAnbXktY3VzdG9tLWxhYmVsJztcbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogIDxpZ3gtZXhwYW5zaW9uLXBhbmVsLWJvZHkgW2xhYmVsXT1cIidteS1jdXN0b20tbGFiZWwnXCI+PC9pZ3gtZXhwYW5zaW9uLXBhbmVsLWJvZHk+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0IGxhYmVsKHZhbDogc3RyaW5nKTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgYXJpYS1sYWJlbGxlZGJ5YCBhdHRyaWJ1dGUgb2YgdGhlIHBhbmVsIGJvZHlcbiAgICAgKiBEZWZhdWx0cyB0byB0aGUgcGFuZWwgaGVhZGVyIGlkO1xuICAgICAqIEdldFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgY29uc3QgY3VycmVudExhYmVsID0gdGhpcy5wYW5lbC5ib2R5LmxhYmVsbGVkQnk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGxhYmVsbGVkQnkoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGBhcmlhLWxhYmVsbGVkYnlgIGF0dHJpYnV0ZSBvZiB0aGUgcGFuZWwgYm9keVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgdGhpcy5wYW5lbC5ib2R5LmxhYmVsbGVkQnkgPSAnbXktY3VzdG9tLWlkJztcbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogIDxpZ3gtZXhwYW5zaW9uLXBhbmVsLWJvZHkgW2xhYmVsbGVkQnldPVwiJ215LWN1c3RvbS1pZCdcIj48L2lneC1leHBhbnNpb24tcGFuZWwtYm9keT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgbGFiZWxsZWRCeSh2YWw6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSBgcm9sZWAgYXR0cmlidXRlIG9mIHRoZSBwYW5lbCBib2R5XG4gICAgICogRGVmYXVsdCBpcyAncmVnaW9uJztcbiAgICAgKiBHZXRcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIGNvbnN0IGN1cnJlbnRSb2xlID0gdGhpcy5wYW5lbC5ib2R5LnJvbGU7XG4gICAgICogYGBgXG4gICAgICogU2V0XG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICB0aGlzLnBhbmVsLmJvZHkucm9sZSA9ICdjb250ZW50JztcbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogIDxpZ3gtZXhwYW5zaW9uLXBhbmVsLWJvZHkgW3JvbGVdPVwiJ2N1c3RvbSdcIj48L2lneC1leHBhbnNpb24tcGFuZWwtYm9keT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByb2xlOiBzdHJpbmc7XG59XG4iXX0=