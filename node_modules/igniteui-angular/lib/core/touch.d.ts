/// <reference types="hammerjs" />
import { NgZone } from '@angular/core';
import { PlatformUtil } from './utils';
/**
 * Touch gestures manager based on Hammer.js
 * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class HammerGesturesManager {
    private _zone;
    private doc;
    private platformUtil;
    private platformBrowser;
    /**
     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.
     */
    protected hammerOptions: HammerOptions;
    private _hammerManagers;
    constructor(_zone: NgZone, doc: any, platformUtil: PlatformUtil);
    supports(eventName: string): boolean;
    /**
     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.
     * Modeling after other event plugins for easy future modifications.
     */
    addEventListener(element: HTMLElement, eventName: string, eventHandler: (eventObj: any) => void, options?: HammerOptions): () => void;
    /**
     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.
     * Modeling after other event plugins for easy future modifications.
     *
     * @param target Can be one of either window, body or document(fallback default).
     */
    addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj: any) => void): () => void;
    /**
     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.
     * Supported: window, document, body. Defaults to document for invalid args.
     * @param target Target name
     */
    getGlobalEventTarget(target: string): EventTarget;
    /**
     * Set HammerManager options.
     *
     * @param element The DOM element used to create the manager on.
     *
     * ### Example
     *
     * ```ts
     * manager.setManagerOption(myElem, "pan", { pointers: 1 });
     * ```
     */
    setManagerOption(element: EventTarget, event: string, options: any): void;
    /**
     * Add an element and manager map to the internal collection.
     *
     * @param element The DOM element used to create the manager on.
     */
    addManagerForElement(element: EventTarget, manager: HammerManager): void;
    /**
     * Get HammerManager for the element or null
     *
     * @param element The DOM element used to create the manager on.
     */
    getManagerForElement(element: EventTarget): HammerManager;
    /**
     * Destroys the HammerManager for the element, removing event listeners in the process.
     *
     * @param element The DOM element used to create the manager on.
     */
    removeManagerForElement(element: HTMLElement): void;
    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */
    destroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HammerGesturesManager>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<HammerGesturesManager>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91Y2guZC50cyIsInNvdXJjZXMiOlsidG91Y2guZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4REEiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cImhhbW1lcmpzXCIgLz5cbmltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGxhdGZvcm1VdGlsIH0gZnJvbSAnLi91dGlscyc7XG4vKipcbiAqIFRvdWNoIGdlc3R1cmVzIG1hbmFnZXIgYmFzZWQgb24gSGFtbWVyLmpzXG4gKiBVc2Ugd2l0aCBjYXV0aW9uLCB0aGlzIHdpbGwgdHJhY2sgcmVmZXJlbmNlcyBmb3Igc2luZ2xlIG1hbmFnZXIgcGVyIGVsZW1lbnQuIFZlcnkgVEJELiBNdWNoIFRPRE8uXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEhhbW1lckdlc3R1cmVzTWFuYWdlciB7XG4gICAgcHJpdmF0ZSBfem9uZTtcbiAgICBwcml2YXRlIGRvYztcbiAgICBwcml2YXRlIHBsYXRmb3JtVXRpbDtcbiAgICBwcml2YXRlIHBsYXRmb3JtQnJvd3NlcjtcbiAgICAvKipcbiAgICAgKiBFdmVudCBvcHRpb24gZGVmYXVsdHMgZm9yIGVhY2ggcmVjb2duaXplciwgc2VlIGh0dHA6Ly9oYW1tZXJqcy5naXRodWIuaW8vYXBpLyBmb3IgQVBJIGxpc3RpbmcuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGhhbW1lck9wdGlvbnM6IEhhbW1lck9wdGlvbnM7XG4gICAgcHJpdmF0ZSBfaGFtbWVyTWFuYWdlcnM7XG4gICAgY29uc3RydWN0b3IoX3pvbmU6IE5nWm9uZSwgZG9jOiBhbnksIHBsYXRmb3JtVXRpbDogUGxhdGZvcm1VdGlsKTtcbiAgICBzdXBwb3J0cyhldmVudE5hbWU6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQWRkIGxpc3RlbmVyIGV4dGVuZGVkIHdpdGggb3B0aW9ucyBmb3IgSGFtbWVyLmpzLiBXaWxsIHVzZSBkZWZhdWx0cyBpZiBub25lIGFyZSBwcm92aWRlZC5cbiAgICAgKiBNb2RlbGluZyBhZnRlciBvdGhlciBldmVudCBwbHVnaW5zIGZvciBlYXN5IGZ1dHVyZSBtb2RpZmljYXRpb25zLlxuICAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudDogSFRNTEVsZW1lbnQsIGV2ZW50TmFtZTogc3RyaW5nLCBldmVudEhhbmRsZXI6IChldmVudE9iajogYW55KSA9PiB2b2lkLCBvcHRpb25zPzogSGFtbWVyT3B0aW9ucyk6ICgpID0+IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQWRkIGxpc3RlbmVyIGV4dGVuZGVkIHdpdGggb3B0aW9ucyBmb3IgSGFtbWVyLmpzLiBXaWxsIHVzZSBkZWZhdWx0cyBpZiBub25lIGFyZSBwcm92aWRlZC5cbiAgICAgKiBNb2RlbGluZyBhZnRlciBvdGhlciBldmVudCBwbHVnaW5zIGZvciBlYXN5IGZ1dHVyZSBtb2RpZmljYXRpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCBDYW4gYmUgb25lIG9mIGVpdGhlciB3aW5kb3csIGJvZHkgb3IgZG9jdW1lbnQoZmFsbGJhY2sgZGVmYXVsdCkuXG4gICAgICovXG4gICAgYWRkR2xvYmFsRXZlbnRMaXN0ZW5lcih0YXJnZXQ6IHN0cmluZywgZXZlbnROYW1lOiBzdHJpbmcsIGV2ZW50SGFuZGxlcjogKGV2ZW50T2JqOiBhbnkpID0+IHZvaWQpOiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV4cG9zZXMgW0RvbV1BZGFwdGVyLmdldEdsb2JhbEV2ZW50VGFyZ2V0IHRvIGdldCBnbG9iYWwgZXZlbnQgdGFyZ2V0cy5cbiAgICAgKiBTdXBwb3J0ZWQ6IHdpbmRvdywgZG9jdW1lbnQsIGJvZHkuIERlZmF1bHRzIHRvIGRvY3VtZW50IGZvciBpbnZhbGlkIGFyZ3MuXG4gICAgICogQHBhcmFtIHRhcmdldCBUYXJnZXQgbmFtZVxuICAgICAqL1xuICAgIGdldEdsb2JhbEV2ZW50VGFyZ2V0KHRhcmdldDogc3RyaW5nKTogRXZlbnRUYXJnZXQ7XG4gICAgLyoqXG4gICAgICogU2V0IEhhbW1lck1hbmFnZXIgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBET00gZWxlbWVudCB1c2VkIHRvIGNyZWF0ZSB0aGUgbWFuYWdlciBvbi5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGB0c1xuICAgICAqIG1hbmFnZXIuc2V0TWFuYWdlck9wdGlvbihteUVsZW0sIFwicGFuXCIsIHsgcG9pbnRlcnM6IDEgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0TWFuYWdlck9wdGlvbihlbGVtZW50OiBFdmVudFRhcmdldCwgZXZlbnQ6IHN0cmluZywgb3B0aW9uczogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBZGQgYW4gZWxlbWVudCBhbmQgbWFuYWdlciBtYXAgdG8gdGhlIGludGVybmFsIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgRE9NIGVsZW1lbnQgdXNlZCB0byBjcmVhdGUgdGhlIG1hbmFnZXIgb24uXG4gICAgICovXG4gICAgYWRkTWFuYWdlckZvckVsZW1lbnQoZWxlbWVudDogRXZlbnRUYXJnZXQsIG1hbmFnZXI6IEhhbW1lck1hbmFnZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEdldCBIYW1tZXJNYW5hZ2VyIGZvciB0aGUgZWxlbWVudCBvciBudWxsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgRE9NIGVsZW1lbnQgdXNlZCB0byBjcmVhdGUgdGhlIG1hbmFnZXIgb24uXG4gICAgICovXG4gICAgZ2V0TWFuYWdlckZvckVsZW1lbnQoZWxlbWVudDogRXZlbnRUYXJnZXQpOiBIYW1tZXJNYW5hZ2VyO1xuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBIYW1tZXJNYW5hZ2VyIGZvciB0aGUgZWxlbWVudCwgcmVtb3ZpbmcgZXZlbnQgbGlzdGVuZXJzIGluIHRoZSBwcm9jZXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIERPTSBlbGVtZW50IHVzZWQgdG8gY3JlYXRlIHRoZSBtYW5hZ2VyIG9uLlxuICAgICAqL1xuICAgIHJlbW92ZU1hbmFnZXJGb3JFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZDtcbiAgICAvKiogRGVzdHJveXMgYWxsIGludGVybmFsbHkgdHJhY2tlZCBIYW1tZXJNYW5hZ2VycywgcmVtb3ZpbmcgZXZlbnQgbGlzdGVuZXJzIGluIHRoZSBwcm9jZXNzLiAqL1xuICAgIGRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==