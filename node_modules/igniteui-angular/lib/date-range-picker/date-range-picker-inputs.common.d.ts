import { PipeTransform, EventEmitter } from '@angular/core';
import { NgControl } from '@angular/forms';
import { IgxInputDirective, IgxInputState } from '../input-group/public_api';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxDateTimeEditorDirective } from '../directives/date-time-editor/public_api';
/**
 * Represents a range between two dates.
 */
import * as ɵngcc0 from '@angular/core';
export interface DateRange {
    start: Date;
    end: Date;
}
/** @hidden @internal */
export declare class DateRangePickerFormatPipe implements PipeTransform {
    transform(values: DateRange, inputFormat?: string, locale?: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DateRangePickerFormatPipe>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<DateRangePickerFormatPipe, "dateRange">;
}
/** @hidden @internal */
export declare class IgxDateRangeInputsBaseComponent extends IgxInputGroupComponent {
    protected ngControl: NgControl;
    dateTimeEditor: IgxDateTimeEditorDirective;
    inputDirective: IgxInputDirective;
    /** @hidden @internal */
    get nativeElement(): any;
    /** @hidden @internal */
    setFocus(): void;
    /** @hidden @internal */
    updateInputValue(value: Date): void;
    /** @hidden @internal */
    updateInputValidity(state: IgxInputState): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDateRangeInputsBaseComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxDateRangeInputsBaseComponent, "igx-date-range-base", never, {}, {}, ["ngControl", "dateTimeEditor", "inputDirective"]>;
}
/**
 * Templates the default icon in the `IgxDateRangePicker`.
 *
 * @igxModule IgxDateRangePickerModule
 *
 * @igxKeyWords date range icon, date picker icon
 *
 * @igxGroup scheduling
 *
 * @example
 * ```html
 * <igx-date-range-picker>
 *   <igx-picker-toggle igxSuffix>
 *      <igx-icon>calendar_view_day</igx-icon>
 *   </igx-picker-toggle>
 * </igx-date-range-picker>
 * ```
 */
export declare class IgxPickerToggleComponent {
    clicked: EventEmitter<any>;
    onClick(event: MouseEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxPickerToggleComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxPickerToggleComponent, "igx-picker-toggle", never, {}, {
    "clicked": "clicked";
}, never>;
}
/**
 * Defines the start input for a date range picker
 *
 * @igxModule IgxDateRangePickerModule
 *
 * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme
 *
 * @igxKeywords date, range, date range, date picker
 *
 * @igxGroup scheduling
 *
 * @remarks
 * When templating, start input has to be templated separately
 *
 * @example
 * ```html
 * <igx-date-range-picker mode="dropdown">
 *      <igx-date-range-start>
 *          <input igxInput igxDateTimeEditor type="text">
 *      </igx-date-range-start>
 *      ...
 * </igx-date-range-picker>
 * ```
 */
export declare class IgxDateRangeStartComponent extends IgxDateRangeInputsBaseComponent {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDateRangeStartComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxDateRangeStartComponent, "igx-date-range-start", never, {}, {}, never>;
}
/**
 * Defines the end input for a date range picker
 *
 * @igxModule IgxDateRangeModule
 *
 * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme
 *
 * @igxKeywords date, range, date range, date picker
 *
 * @igxGroup scheduling
 *
 * @remarks
 * When templating, end input has to be template separately
 *
 * @example
 * ```html
 * <igx-date-range-picker mode="dropdown">
 *      <igx-date-range-end>
 *          <input igxInput igxDateTimeEditor type="text">
 *      </igx-date-range-end>
 *      ...
 * </igx-date-range-picker>
 * ```
 */
export declare class IgxDateRangeEndComponent extends IgxDateRangeInputsBaseComponent {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDateRangeEndComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxDateRangeEndComponent, "igx-date-range-end", never, {}, {}, never>;
}
export declare class IgxDateRangeSeparatorDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDateRangeSeparatorDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxDateRangeSeparatorDirective, "[igxDateRangeSeparator]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yYW5nZS1waWNrZXItaW5wdXRzLmNvbW1vbi5kLnRzIiwic291cmNlcyI6WyJkYXRlLXJhbmdlLXBpY2tlci1pbnB1dHMuY29tbW9uLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7OztBQWNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQTs7OztBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBJZ3hJbnB1dERpcmVjdGl2ZSwgSWd4SW5wdXRTdGF0ZSB9IGZyb20gJy4uL2lucHV0LWdyb3VwL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgSWd4SW5wdXRHcm91cENvbXBvbmVudCB9IGZyb20gJy4uL2lucHV0LWdyb3VwL2lucHV0LWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hEYXRlVGltZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvZGF0ZS10aW1lLWVkaXRvci9wdWJsaWNfYXBpJztcbi8qKlxuICogUmVwcmVzZW50cyBhIHJhbmdlIGJldHdlZW4gdHdvIGRhdGVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERhdGVSYW5nZSB7XG4gICAgc3RhcnQ6IERhdGU7XG4gICAgZW5kOiBEYXRlO1xufVxuLyoqIEBoaWRkZW4gQGludGVybmFsICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRlUmFuZ2VQaWNrZXJGb3JtYXRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgdHJhbnNmb3JtKHZhbHVlczogRGF0ZVJhbmdlLCBpbnB1dEZvcm1hdD86IHN0cmluZywgbG9jYWxlPzogc3RyaW5nKTogc3RyaW5nO1xufVxuLyoqIEBoaWRkZW4gQGludGVybmFsICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hEYXRlUmFuZ2VJbnB1dHNCYXNlQ29tcG9uZW50IGV4dGVuZHMgSWd4SW5wdXRHcm91cENvbXBvbmVudCB7XG4gICAgcHJvdGVjdGVkIG5nQ29udHJvbDogTmdDb250cm9sO1xuICAgIGRhdGVUaW1lRWRpdG9yOiBJZ3hEYXRlVGltZUVkaXRvckRpcmVjdGl2ZTtcbiAgICBpbnB1dERpcmVjdGl2ZTogSWd4SW5wdXREaXJlY3RpdmU7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgZ2V0IG5hdGl2ZUVsZW1lbnQoKTogYW55O1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHNldEZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgdXBkYXRlSW5wdXRWYWx1ZSh2YWx1ZTogRGF0ZSk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgdXBkYXRlSW5wdXRWYWxpZGl0eShzdGF0ZTogSWd4SW5wdXRTdGF0ZSk6IHZvaWQ7XG59XG4vKipcbiAqIFRlbXBsYXRlcyB0aGUgZGVmYXVsdCBpY29uIGluIHRoZSBgSWd4RGF0ZVJhbmdlUGlja2VyYC5cbiAqXG4gKiBAaWd4TW9kdWxlIElneERhdGVSYW5nZVBpY2tlck1vZHVsZVxuICpcbiAqIEBpZ3hLZXlXb3JkcyBkYXRlIHJhbmdlIGljb24sIGRhdGUgcGlja2VyIGljb25cbiAqXG4gKiBAaWd4R3JvdXAgc2NoZWR1bGluZ1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiA8aWd4LWRhdGUtcmFuZ2UtcGlja2VyPlxuICogICA8aWd4LXBpY2tlci10b2dnbGUgaWd4U3VmZml4PlxuICogICAgICA8aWd4LWljb24+Y2FsZW5kYXJfdmlld19kYXk8L2lneC1pY29uPlxuICogICA8L2lneC1waWNrZXItdG9nZ2xlPlxuICogPC9pZ3gtZGF0ZS1yYW5nZS1waWNrZXI+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4UGlja2VyVG9nZ2xlQ29tcG9uZW50IHtcbiAgICBjbGlja2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbn1cbi8qKlxuICogRGVmaW5lcyB0aGUgc3RhcnQgaW5wdXQgZm9yIGEgZGF0ZSByYW5nZSBwaWNrZXJcbiAqXG4gKiBAaWd4TW9kdWxlIElneERhdGVSYW5nZVBpY2tlck1vZHVsZVxuICpcbiAqIEBpZ3hUaGVtZSBpZ3gtaW5wdXQtZ3JvdXAtdGhlbWUsIGlneC1jYWxlbmRhci10aGVtZSwgaWd4LWRhdGUtcmFuZ2UtcGlja2VyLXRoZW1lXG4gKlxuICogQGlneEtleXdvcmRzIGRhdGUsIHJhbmdlLCBkYXRlIHJhbmdlLCBkYXRlIHBpY2tlclxuICpcbiAqIEBpZ3hHcm91cCBzY2hlZHVsaW5nXG4gKlxuICogQHJlbWFya3NcbiAqIFdoZW4gdGVtcGxhdGluZywgc3RhcnQgaW5wdXQgaGFzIHRvIGJlIHRlbXBsYXRlZCBzZXBhcmF0ZWx5XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtZGF0ZS1yYW5nZS1waWNrZXIgbW9kZT1cImRyb3Bkb3duXCI+XG4gKiAgICAgIDxpZ3gtZGF0ZS1yYW5nZS1zdGFydD5cbiAqICAgICAgICAgIDxpbnB1dCBpZ3hJbnB1dCBpZ3hEYXRlVGltZUVkaXRvciB0eXBlPVwidGV4dFwiPlxuICogICAgICA8L2lneC1kYXRlLXJhbmdlLXN0YXJ0PlxuICogICAgICAuLi5cbiAqIDwvaWd4LWRhdGUtcmFuZ2UtcGlja2VyPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneERhdGVSYW5nZVN0YXJ0Q29tcG9uZW50IGV4dGVuZHMgSWd4RGF0ZVJhbmdlSW5wdXRzQmFzZUNvbXBvbmVudCB7XG59XG4vKipcbiAqIERlZmluZXMgdGhlIGVuZCBpbnB1dCBmb3IgYSBkYXRlIHJhbmdlIHBpY2tlclxuICpcbiAqIEBpZ3hNb2R1bGUgSWd4RGF0ZVJhbmdlTW9kdWxlXG4gKlxuICogQGlneFRoZW1lIGlneC1pbnB1dC1ncm91cC10aGVtZSwgaWd4LWNhbGVuZGFyLXRoZW1lLCBpZ3gtZGF0ZS1yYW5nZS1waWNrZXItdGhlbWVcbiAqXG4gKiBAaWd4S2V5d29yZHMgZGF0ZSwgcmFuZ2UsIGRhdGUgcmFuZ2UsIGRhdGUgcGlja2VyXG4gKlxuICogQGlneEdyb3VwIHNjaGVkdWxpbmdcbiAqXG4gKiBAcmVtYXJrc1xuICogV2hlbiB0ZW1wbGF0aW5nLCBlbmQgaW5wdXQgaGFzIHRvIGJlIHRlbXBsYXRlIHNlcGFyYXRlbHlcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGlneC1kYXRlLXJhbmdlLXBpY2tlciBtb2RlPVwiZHJvcGRvd25cIj5cbiAqICAgICAgPGlneC1kYXRlLXJhbmdlLWVuZD5cbiAqICAgICAgICAgIDxpbnB1dCBpZ3hJbnB1dCBpZ3hEYXRlVGltZUVkaXRvciB0eXBlPVwidGV4dFwiPlxuICogICAgICA8L2lneC1kYXRlLXJhbmdlLWVuZD5cbiAqICAgICAgLi4uXG4gKiA8L2lneC1kYXRlLXJhbmdlLXBpY2tlcj5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hEYXRlUmFuZ2VFbmRDb21wb25lbnQgZXh0ZW5kcyBJZ3hEYXRlUmFuZ2VJbnB1dHNCYXNlQ29tcG9uZW50IHtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneERhdGVSYW5nZVNlcGFyYXRvckRpcmVjdGl2ZSB7XG59XG4iXX0=