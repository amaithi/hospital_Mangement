import { EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChange } from '@angular/core';
import { Layer, LeafletEvent } from 'leaflet';
import { LeafletDirective } from '../core/leaflet.directive';
/**
 * Layer directive
 *
 * This directive is used to directly control a single map layer. The purpose of this directive is to
 * be used as part of a child structural directive of the map element.
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class LeafletLayerDirective implements OnChanges, OnDestroy, OnInit {
    private zone;
    layer: Layer;
    onAdd: EventEmitter<LeafletEvent>;
    onRemove: EventEmitter<LeafletEvent>;
    private leafletDirective;
    constructor(leafletDirective: LeafletDirective, zone: NgZone);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: {
        [key: string]: SimpleChange;
    }): void;
    private addLayerEventListeners;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LeafletLayerDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LeafletLayerDirective, "[leafletLayer]", never, {
    "layer": "leafletLayer";
}, {
    "onAdd": "leafletLayerAdd";
    "onRemove": "leafletLayerRemove";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZmxldC1sYXllci5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibGVhZmxldC1sYXllci5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUFVQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFhQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExheWVyLCBMZWFmbGV0RXZlbnQgfSBmcm9tICdsZWFmbGV0JztcbmltcG9ydCB7IExlYWZsZXREaXJlY3RpdmUgfSBmcm9tICcuLi9jb3JlL2xlYWZsZXQuZGlyZWN0aXZlJztcbi8qKlxuICogTGF5ZXIgZGlyZWN0aXZlXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgaXMgdXNlZCB0byBkaXJlY3RseSBjb250cm9sIGEgc2luZ2xlIG1hcCBsYXllci4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBkaXJlY3RpdmUgaXMgdG9cbiAqIGJlIHVzZWQgYXMgcGFydCBvZiBhIGNoaWxkIHN0cnVjdHVyYWwgZGlyZWN0aXZlIG9mIHRoZSBtYXAgZWxlbWVudC5cbiAqXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExlYWZsZXRMYXllckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQge1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBsYXllcjogTGF5ZXI7XG4gICAgb25BZGQ6IEV2ZW50RW1pdHRlcjxMZWFmbGV0RXZlbnQ+O1xuICAgIG9uUmVtb3ZlOiBFdmVudEVtaXR0ZXI8TGVhZmxldEV2ZW50PjtcbiAgICBwcml2YXRlIGxlYWZsZXREaXJlY3RpdmU7XG4gICAgY29uc3RydWN0b3IobGVhZmxldERpcmVjdGl2ZTogTGVhZmxldERpcmVjdGl2ZSwgem9uZTogTmdab25lKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBTaW1wbGVDaGFuZ2U7XG4gICAgfSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBhZGRMYXllckV2ZW50TGlzdGVuZXJzO1xufVxuIl19