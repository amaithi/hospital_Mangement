import { DoCheck, EventEmitter, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy, OnInit } from '@angular/core';
import { Control, Layer } from 'leaflet';
import { LeafletDirective } from '../../core/leaflet.directive';
import { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';
/**
 * Layers Control
 *
 * This directive is used to configure the layers control. The input accepts an object with two
 * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is
 * used to determine what changed so that layers are appropriately added or removed.
 *
 * To specify which layer to show as the 'active' baselayer, you will want to add it to the map
 * using the layers directive. Otherwise, the last one it sees will be used.
 */
import * as ɵngcc0 from '@angular/core';
export declare class LeafletLayersControlDirective implements DoCheck, OnDestroy, OnInit {
    private differs;
    private zone;
    layersControlConfigValue: LeafletControlLayersConfig;
    baseLayersDiffer: KeyValueDiffer<string, Layer>;
    overlaysDiffer: KeyValueDiffer<string, Layer>;
    layersControlConfig: LeafletControlLayersConfig;
    layersControlOptions: any;
    layersControlReady: EventEmitter<Control.Layers>;
    private controlLayers;
    private leafletDirective;
    constructor(leafletDirective: LeafletDirective, differs: KeyValueDiffers, zone: NgZone);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    protected updateLayers(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LeafletLayersControlDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LeafletLayersControlDirective, "[leafletLayersControl]", never, {
    "layersControlConfig": "leafletLayersControl";
    "layersControlOptions": "leafletLayersControlOptions";
}, {
    "layersControlReady": "leafletLayersControlReady";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZmxldC1jb250cm9sLWxheWVycy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibGVhZmxldC1jb250cm9sLWxheWVycy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBY0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9DaGVjaywgRXZlbnRFbWl0dGVyLCBLZXlWYWx1ZURpZmZlciwgS2V5VmFsdWVEaWZmZXJzLCBOZ1pvbmUsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sLCBMYXllciB9IGZyb20gJ2xlYWZsZXQnO1xuaW1wb3J0IHsgTGVhZmxldERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2NvcmUvbGVhZmxldC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTGVhZmxldENvbnRyb2xMYXllcnNDb25maWcgfSBmcm9tICcuL2xlYWZsZXQtY29udHJvbC1sYXllcnMtY29uZmlnLm1vZGVsJztcbi8qKlxuICogTGF5ZXJzIENvbnRyb2xcbiAqXG4gKiBUaGlzIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgbGF5ZXJzIGNvbnRyb2wuIFRoZSBpbnB1dCBhY2NlcHRzIGFuIG9iamVjdCB3aXRoIHR3b1xuICoga2V5LXZhbHVlIG1hcHMgb2YgbGF5ZXIgbmFtZSAtPiBsYXllci4gTXV0YWJsZSBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gT24gY2hhbmdlcywgYSBkaWZmZXIgaXNcbiAqIHVzZWQgdG8gZGV0ZXJtaW5lIHdoYXQgY2hhbmdlZCBzbyB0aGF0IGxheWVycyBhcmUgYXBwcm9wcmlhdGVseSBhZGRlZCBvciByZW1vdmVkLlxuICpcbiAqIFRvIHNwZWNpZnkgd2hpY2ggbGF5ZXIgdG8gc2hvdyBhcyB0aGUgJ2FjdGl2ZScgYmFzZWxheWVyLCB5b3Ugd2lsbCB3YW50IHRvIGFkZCBpdCB0byB0aGUgbWFwXG4gKiB1c2luZyB0aGUgbGF5ZXJzIGRpcmVjdGl2ZS4gT3RoZXJ3aXNlLCB0aGUgbGFzdCBvbmUgaXQgc2VlcyB3aWxsIGJlIHVzZWQuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExlYWZsZXRMYXllcnNDb250cm9sRGlyZWN0aXZlIGltcGxlbWVudHMgRG9DaGVjaywgT25EZXN0cm95LCBPbkluaXQge1xuICAgIHByaXZhdGUgZGlmZmVycztcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgbGF5ZXJzQ29udHJvbENvbmZpZ1ZhbHVlOiBMZWFmbGV0Q29udHJvbExheWVyc0NvbmZpZztcbiAgICBiYXNlTGF5ZXJzRGlmZmVyOiBLZXlWYWx1ZURpZmZlcjxzdHJpbmcsIExheWVyPjtcbiAgICBvdmVybGF5c0RpZmZlcjogS2V5VmFsdWVEaWZmZXI8c3RyaW5nLCBMYXllcj47XG4gICAgbGF5ZXJzQ29udHJvbENvbmZpZzogTGVhZmxldENvbnRyb2xMYXllcnNDb25maWc7XG4gICAgbGF5ZXJzQ29udHJvbE9wdGlvbnM6IGFueTtcbiAgICBsYXllcnNDb250cm9sUmVhZHk6IEV2ZW50RW1pdHRlcjxDb250cm9sLkxheWVycz47XG4gICAgcHJpdmF0ZSBjb250cm9sTGF5ZXJzO1xuICAgIHByaXZhdGUgbGVhZmxldERpcmVjdGl2ZTtcbiAgICBjb25zdHJ1Y3RvcihsZWFmbGV0RGlyZWN0aXZlOiBMZWFmbGV0RGlyZWN0aXZlLCBkaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIHpvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVMYXllcnMoKTogdm9pZDtcbn1cbiJdfQ==