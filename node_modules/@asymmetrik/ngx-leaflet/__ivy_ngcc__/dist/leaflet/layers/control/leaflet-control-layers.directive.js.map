{"version":3,"file":"leaflet-control-layers.directive.js","sources":["../../../../src/leaflet/layers/control/leaflet-control-layers.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tDirective, DoCheck, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy, OnInit,\n\tOutput\n} from '@angular/core';\n\nimport { Control, Layer } from 'leaflet';\n\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\n\n\n/**\n * Layers Control\n *\n * This directive is used to configure the layers control. The input accepts an object with two\n * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the last one it sees will be used.\n */\n@Directive({\n\tselector: '[leafletLayersControl]'\n})\nexport class LeafletLayersControlDirective\n\timplements DoCheck, OnDestroy, OnInit {\n\n\t// Control Layers Configuration\n\tlayersControlConfigValue: LeafletControlLayersConfig;\n\n\tbaseLayersDiffer: KeyValueDiffer<string, Layer>;\n\toverlaysDiffer: KeyValueDiffer<string, Layer>;\n\n\t@Input('leafletLayersControl')\n\tset layersControlConfig(v: LeafletControlLayersConfig) {\n\n\t\t// Validation/init stuff\n\t\tif (null == v) { v = new LeafletControlLayersConfig(); }\n\t\tif (null == v.baseLayers) { v.baseLayers = {}; }\n\t\tif (null == v.overlays) { v.overlays = {}; }\n\n\t\t// Store the value\n\t\tthis.layersControlConfigValue = v;\n\n\t\t// Update the map\n\t\tthis.updateLayers();\n\n\t}\n\tget layersControlConfig(): LeafletControlLayersConfig {\n\t\treturn this.layersControlConfigValue;\n\t}\n\n\t@Input('leafletLayersControlOptions') layersControlOptions: any;\n\n\t@Output('leafletLayersControlReady') layersControlReady = new EventEmitter<Control.Layers>();\n\n\tprivate controlLayers: LeafletControlLayersWrapper;\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private differs: KeyValueDiffers, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n\n\t\t// Generate differs\n\t\tthis.baseLayersDiffer = this.differs.find({}).create<string, Layer>();\n\t\tthis.overlaysDiffer = this.differs.find({}).create<string, Layer>();\n\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t\t// Set up control outside of angular to avoid change detection when using the control\n\t\tthis.zone.runOutsideAngular(() => {\n\n\t\t\t// Set up all the initial settings\n\t\t\tthis.controlLayers\n\t\t\t\t.init({}, this.layersControlOptions)\n\t\t\t\t.addTo(this.leafletDirective.getMap());\n\n\t\t});\n\n\t\tthis.updateLayers();\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.layersControlConfig = { baseLayers: {}, overlays: {} };\n\t\tthis.controlLayers.getLayersControl().remove();\n\t}\n\n\tngDoCheck() {\n\t\tthis.updateLayers();\n\t}\n\n\tprotected updateLayers() {\n\n\t\tconst map = this.leafletDirective.getMap();\n\t\tconst layersControl = this.controlLayers.getLayersControl();\n\n\t\tif (null != map && null != layersControl) {\n\n\t\t\t// Run the baselayers differ\n\t\t\tif (null != this.baseLayersDiffer && null != this.layersControlConfigValue.baseLayers) {\n\t\t\t\tconst changes = this.baseLayersDiffer.diff(this.layersControlConfigValue.baseLayers);\n\t\t\t\tthis.controlLayers.applyBaseLayerChanges(changes);\n\t\t\t}\n\n\t\t\t// Run the overlays differ\n\t\t\tif (null != this.overlaysDiffer && null != this.layersControlConfigValue.overlays) {\n\t\t\t\tconst changes = this.overlaysDiffer.diff(this.layersControlConfigValue.overlays);\n\t\t\t\tthis.controlLayers.applyOverlayChanges(changes);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n"]}