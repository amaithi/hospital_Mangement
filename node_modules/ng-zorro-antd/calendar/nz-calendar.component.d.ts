/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, EventEmitter, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { CandyDate } from 'ng-zorro-antd/core';
import * as ɵngcc0 from '@angular/core';
export declare type ModeType = 'month' | 'year';
export declare type DateTemplate = TemplateRef<{
    $implicit: Date;
}>;
export declare class NzCalendarComponent implements ControlValueAccessor {
    private cdr;
    activeDate: CandyDate;
    prefixCls: string;
    private onChangeFn;
    private onTouchFn;
    nzMode: ModeType;
    readonly nzModeChange: EventEmitter<ModeType>;
    readonly nzPanelChange: EventEmitter<{
        date: Date;
        mode: ModeType;
    }>;
    readonly nzSelectChange: EventEmitter<Date>;
    nzValue: Date;
    readonly nzValueChange: EventEmitter<Date>;
    /**
     * Cannot use @Input and @ContentChild on one variable
     * because { static: false } will make @Input property get delayed
     **/
    nzDateCell: DateTemplate;
    nzDateCellChild: DateTemplate;
    readonly dateCell: DateTemplate;
    nzDateFullCell: DateTemplate;
    nzDateFullCellChild: DateTemplate;
    readonly dateFullCell: DateTemplate;
    nzMonthCell: DateTemplate;
    nzMonthCellChild: DateTemplate;
    readonly monthCell: DateTemplate;
    nzMonthFullCell: DateTemplate;
    nzMonthFullCellChild: DateTemplate;
    readonly monthFullCell: DateTemplate;
    nzFullscreen: boolean;
    constructor(cdr: ChangeDetectorRef);
    onModeChange(mode: ModeType): void;
    onYearSelect(year: number): void;
    onMonthSelect(month: number): void;
    onDateSelect(date: CandyDate): void;
    writeValue(value: Date | null): void;
    registerOnChange(fn: (date: Date) => void): void;
    registerOnTouched(fn: () => void): void;
    private updateDate;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzCalendarComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzCalendarComponent, "nz-calendar", ["nzCalendar"], {
    "nzMode": "nzMode";
    "nzFullscreen": "nzFullscreen";
    "nzValue": "nzValue";
    "nzDateCell": "nzDateCell";
    "nzDateFullCell": "nzDateFullCell";
    "nzMonthCell": "nzMonthCell";
    "nzMonthFullCell": "nzMonthFullCell";
}, {
    "nzModeChange": "nzModeChange";
    "nzPanelChange": "nzPanelChange";
    "nzSelectChange": "nzSelectChange";
    "nzValueChange": "nzValueChange";
}, ["nzDateCellChild", "nzDateFullCellChild", "nzMonthCellChild", "nzMonthFullCellChild"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotY2FsZW5kYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm56LWNhbGVuZGFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2Q0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENhbmR5RGF0ZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZSc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIE1vZGVUeXBlID0gJ21vbnRoJyB8ICd5ZWFyJztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRGF0ZVRlbXBsYXRlID0gVGVtcGxhdGVSZWY8e1xuICAgICRpbXBsaWNpdDogRGF0ZTtcbn0+O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpDYWxlbmRhckNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBhY3RpdmVEYXRlOiBDYW5keURhdGU7XG4gICAgcHJlZml4Q2xzOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZUZuO1xuICAgIHByaXZhdGUgb25Ub3VjaEZuO1xuICAgIG56TW9kZTogTW9kZVR5cGU7XG4gICAgcmVhZG9ubHkgbnpNb2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8TW9kZVR5cGU+O1xuICAgIHJlYWRvbmx5IG56UGFuZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGRhdGU6IERhdGU7XG4gICAgICAgIG1vZGU6IE1vZGVUeXBlO1xuICAgIH0+O1xuICAgIHJlYWRvbmx5IG56U2VsZWN0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF0ZT47XG4gICAgbnpWYWx1ZTogRGF0ZTtcbiAgICByZWFkb25seSBuelZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF0ZT47XG4gICAgLyoqXG4gICAgICogQ2Fubm90IHVzZSBASW5wdXQgYW5kIEBDb250ZW50Q2hpbGQgb24gb25lIHZhcmlhYmxlXG4gICAgICogYmVjYXVzZSB7IHN0YXRpYzogZmFsc2UgfSB3aWxsIG1ha2UgQElucHV0IHByb3BlcnR5IGdldCBkZWxheWVkXG4gICAgICoqL1xuICAgIG56RGF0ZUNlbGw6IERhdGVUZW1wbGF0ZTtcbiAgICBuekRhdGVDZWxsQ2hpbGQ6IERhdGVUZW1wbGF0ZTtcbiAgICByZWFkb25seSBkYXRlQ2VsbDogRGF0ZVRlbXBsYXRlO1xuICAgIG56RGF0ZUZ1bGxDZWxsOiBEYXRlVGVtcGxhdGU7XG4gICAgbnpEYXRlRnVsbENlbGxDaGlsZDogRGF0ZVRlbXBsYXRlO1xuICAgIHJlYWRvbmx5IGRhdGVGdWxsQ2VsbDogRGF0ZVRlbXBsYXRlO1xuICAgIG56TW9udGhDZWxsOiBEYXRlVGVtcGxhdGU7XG4gICAgbnpNb250aENlbGxDaGlsZDogRGF0ZVRlbXBsYXRlO1xuICAgIHJlYWRvbmx5IG1vbnRoQ2VsbDogRGF0ZVRlbXBsYXRlO1xuICAgIG56TW9udGhGdWxsQ2VsbDogRGF0ZVRlbXBsYXRlO1xuICAgIG56TW9udGhGdWxsQ2VsbENoaWxkOiBEYXRlVGVtcGxhdGU7XG4gICAgcmVhZG9ubHkgbW9udGhGdWxsQ2VsbDogRGF0ZVRlbXBsYXRlO1xuICAgIG56RnVsbHNjcmVlbjogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihjZHI6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBvbk1vZGVDaGFuZ2UobW9kZTogTW9kZVR5cGUpOiB2b2lkO1xuICAgIG9uWWVhclNlbGVjdCh5ZWFyOiBudW1iZXIpOiB2b2lkO1xuICAgIG9uTW9udGhTZWxlY3QobW9udGg6IG51bWJlcik6IHZvaWQ7XG4gICAgb25EYXRlU2VsZWN0KGRhdGU6IENhbmR5RGF0ZSk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogRGF0ZSB8IG51bGwpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChkYXRlOiBEYXRlKSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVEYXRlO1xufVxuIl19